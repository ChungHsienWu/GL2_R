
GL_REV2_R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000886c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b18  08008b18  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b20  08008b20  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08008b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000702cc  20000030  08008b58  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200702fc  08008b58  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001520e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025aa  00000000  00000000  0003526e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00037818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00038810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000305d6  00000000  00000000  00039748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a8a  00000000  00000000  00069d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124161  00000000  00000000  0007e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2909  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000436c  00000000  00000000  001a295c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000030 	.word	0x20000030
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008a10 	.word	0x08008a10

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000034 	.word	0x20000034
 80001f8:	08008a10 	.word	0x08008a10

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f002 fe1e 	bl	8003146 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f9e9 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fc63 	bl	8000dd8 <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 8000512:	f000 fa33 	bl	800097c <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000516:	f000 fb1d 	bl	8000b54 <MX_LTDC_Init>
  MX_SPI2_Init();
 800051a:	f000 fb9b 	bl	8000c54 <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fbd7 	bl	8000cd0 <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fc0d 	bl	8000d40 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 8000526:	f000 fd37 	bl	8000f98 <mipi_config>
  HAL_UART_Transmit(&huart4, "start_s", 7, 1000);
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	2207      	movs	r2, #7
 8000530:	4997      	ldr	r1, [pc, #604]	; (8000790 <main+0x290>)
 8000532:	4898      	ldr	r0, [pc, #608]	; (8000794 <main+0x294>)
 8000534:	f007 fbf4 	bl	8007d20 <HAL_UART_Transmit>

  play_mode = 3;
 8000538:	4b97      	ldr	r3, [pc, #604]	; (8000798 <main+0x298>)
 800053a:	2203      	movs	r2, #3
 800053c:	701a      	strb	r2, [r3, #0]
  play_mode_source = 0;
 800053e:	4b97      	ldr	r3, [pc, #604]	; (800079c <main+0x29c>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
  mode_init();
 8000544:	f001 fc06 	bl	8001d54 <mode_init>
  write_flash_config();
 8000548:	f001 fd9a 	bl	8002080 <write_flash_config>
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	e00d      	b.n	800056e <main+0x6e>
	  Mode_config[i*2]=0;    //picture_id
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4a92      	ldr	r2, [pc, #584]	; (80007a0 <main+0x2a0>)
 8000558:	2100      	movs	r1, #0
 800055a:	54d1      	strb	r1, [r2, r3]
	  Mode_config[i*2+1]=0;  //picture_delay_time
 800055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	3301      	adds	r3, #1
 8000562:	4a8f      	ldr	r2, [pc, #572]	; (80007a0 <main+0x2a0>)
 8000564:	2100      	movs	r1, #0
 8000566:	54d1      	strb	r1, [r2, r3]
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	3301      	adds	r3, #1
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	2b37      	cmp	r3, #55	; 0x37
 8000572:	ddee      	ble.n	8000552 <main+0x52>
  }
  Mode_config[Max_pic_per_mode*2*Max_mode_num-1] = 0; //playing_mode
 8000574:	4b8a      	ldr	r3, [pc, #552]	; (80007a0 <main+0x2a0>)
 8000576:	2200      	movs	r2, #0
 8000578:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  read_flash_config();
 800057c:	f001 fe4e 	bl	800221c <read_flash_config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2102      	movs	r1, #2
 8000584:	4887      	ldr	r0, [pc, #540]	; (80007a4 <main+0x2a4>)
 8000586:	f004 f81d 	bl	80045c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	4885      	ldr	r0, [pc, #532]	; (80007a8 <main+0x2a8>)
 8000592:	f004 f817 	bl	80045c4 <HAL_GPIO_WritePin>

  HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8000596:	2202      	movs	r2, #2
 8000598:	4984      	ldr	r1, [pc, #528]	; (80007ac <main+0x2ac>)
 800059a:	4885      	ldr	r0, [pc, #532]	; (80007b0 <main+0x2b0>)
 800059c:	f006 fd60 	bl	8007060 <HAL_SPI_Receive_IT>
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
 80005a4:	e007      	b.n	80005b6 <main+0xb6>
  {
	  image_arr_rgb888[i] = 0xFF;
 80005a6:	4a83      	ldr	r2, [pc, #524]	; (80007b4 <main+0x2b4>)
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	4413      	add	r3, r2
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	3301      	adds	r3, #1
 80005b4:	623b      	str	r3, [r7, #32]
 80005b6:	4b80      	ldr	r3, [pc, #512]	; (80007b8 <main+0x2b8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a80      	ldr	r2, [pc, #512]	; (80007bc <main+0x2bc>)
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	fb03 f202 	mul.w	r2, r3, r2
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	441a      	add	r2, r3
 80005c8:	6a3b      	ldr	r3, [r7, #32]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d8eb      	bhi.n	80005a6 <main+0xa6>
    while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode_source == 0)
 80005ce:	4b73      	ldr	r3, [pc, #460]	; (800079c <main+0x29c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f040 80a2 	bne.w	800071c <main+0x21c>
	  {
		  if (play_mode == 0)
 80005d8:	4b6f      	ldr	r3, [pc, #444]	; (8000798 <main+0x298>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d109      	bne.n	80005f4 <main+0xf4>
		  {
			  read_flash_page(&frame_buf_flash, display_image_number);
 80005e0:	4b77      	ldr	r3, [pc, #476]	; (80007c0 <main+0x2c0>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4877      	ldr	r0, [pc, #476]	; (80007c4 <main+0x2c4>)
 80005e8:	f001 ff76 	bl	80024d8 <read_flash_page>
			  display_panel(&frame_buf_flash);
 80005ec:	4875      	ldr	r0, [pc, #468]	; (80007c4 <main+0x2c4>)
 80005ee:	f001 fafd 	bl	8001bec <display_panel>
 80005f2:	e0fe      	b.n	80007f2 <main+0x2f2>
		  }
		  else if (play_mode == 1)
 80005f4:	4b68      	ldr	r3, [pc, #416]	; (8000798 <main+0x298>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d139      	bne.n	8000670 <main+0x170>
		  {
			  uint8_t should_break = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	77fb      	strb	r3, [r7, #31]
			  while(1)
			  {
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 8000600:	4b71      	ldr	r3, [pc, #452]	; (80007c8 <main+0x2c8>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	e021      	b.n	800064c <main+0x14c>
				  {
					  HAL_Delay(5);
 8000608:	2005      	movs	r0, #5
 800060a:	f002 fe11 	bl	8003230 <HAL_Delay>
					  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
					  if (play_mode_source != 0 || play_mode != 1 || setting_changed == 1)
 800060e:	4b63      	ldr	r3, [pc, #396]	; (800079c <main+0x29c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d107      	bne.n	8000626 <main+0x126>
 8000616:	4b60      	ldr	r3, [pc, #384]	; (8000798 <main+0x298>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d103      	bne.n	8000626 <main+0x126>
 800061e:	4b6b      	ldr	r3, [pc, #428]	; (80007cc <main+0x2cc>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d102      	bne.n	800062c <main+0x12c>
					  {
						  should_break = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	77fb      	strb	r3, [r7, #31]
						  break;
 800062a:	e015      	b.n	8000658 <main+0x158>
					  }
					  read_flash_page(&frame_buf_flash, i);
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	4864      	ldr	r0, [pc, #400]	; (80007c4 <main+0x2c4>)
 8000634:	f001 ff50 	bl	80024d8 <read_flash_page>
					  display_panel(&frame_buf_flash);
 8000638:	4862      	ldr	r0, [pc, #392]	; (80007c4 <main+0x2c4>)
 800063a:	f001 fad7 	bl	8001bec <display_panel>
					  display_image_number = i;
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b5f      	ldr	r3, [pc, #380]	; (80007c0 <main+0x2c0>)
 8000644:	701a      	strb	r2, [r3, #0]
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	3301      	adds	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
 800064c:	4b60      	ldr	r3, [pc, #384]	; (80007d0 <main+0x2d0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	4293      	cmp	r3, r2
 8000656:	ddd7      	ble.n	8000608 <main+0x108>
				  }
				  if (should_break == 0)
 8000658:	7ffb      	ldrb	r3, [r7, #31]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d103      	bne.n	8000666 <main+0x166>
				  {
					  display_image_number = 0;
 800065e:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <main+0x2c0>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	e7cc      	b.n	8000600 <main+0x100>
				  }
				  else if (should_break == 1)
 8000666:	7ffb      	ldrb	r3, [r7, #31]
 8000668:	2b01      	cmp	r3, #1
 800066a:	f000 80c1 	beq.w	80007f0 <main+0x2f0>
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 800066e:	e7c7      	b.n	8000600 <main+0x100>
				  {
				  	  break;
				  }
			  }
		  }
		  else if (play_mode == 3)
 8000670:	4b49      	ldr	r3, [pc, #292]	; (8000798 <main+0x298>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b03      	cmp	r3, #3
 8000676:	f040 80bc 	bne.w	80007f2 <main+0x2f2>
		  {
			  uint8_t should_break = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	72fb      	strb	r3, [r7, #11]

			  //initial or change mode
			  if( Mode_changed )
 800067e:	4b55      	ldr	r3, [pc, #340]	; (80007d4 <main+0x2d4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d049      	beq.n	800071a <main+0x21a>
			  {
				  read_flash_config();
 8000686:	f001 fdc9 	bl	800221c <read_flash_config>
				  Playing_mode = Mode_config[100];//playing_mode_store = [Max_pic_per_mode*2*(Max_mode_num-1)]
 800068a:	4b45      	ldr	r3, [pc, #276]	; (80007a0 <main+0x2a0>)
 800068c:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8000690:	4b51      	ldr	r3, [pc, #324]	; (80007d8 <main+0x2d8>)
 8000692:	701a      	strb	r2, [r3, #0]
				  //fill Current_mode_config from Mode_config by using Playing_mode
				  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 8000694:	4b50      	ldr	r3, [pc, #320]	; (80007d8 <main+0x2d8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	e00e      	b.n	80006c8 <main+0x1c8>
					 Current_mode_config[j]=Mode_config[i];
 80006aa:	4a3d      	ldr	r2, [pc, #244]	; (80007a0 <main+0x2a0>)
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	4413      	add	r3, r2
 80006b0:	7819      	ldrb	r1, [r3, #0]
 80006b2:	4a4a      	ldr	r2, [pc, #296]	; (80007dc <main+0x2dc>)
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	4413      	add	r3, r2
 80006b8:	460a      	mov	r2, r1
 80006ba:	701a      	strb	r2, [r3, #0]
					 j++;
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	3301      	adds	r3, #1
 80006c0:	613b      	str	r3, [r7, #16]
				  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	4b43      	ldr	r3, [pc, #268]	; (80007d8 <main+0x2d8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	1c5a      	adds	r2, r3, #1
 80006ce:	4613      	mov	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	461a      	mov	r2, r3
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	4293      	cmp	r3, r2
 80006dc:	dbe5      	blt.n	80006aa <main+0x1aa>
				  }
				  Current_Picture = 0;
 80006de:	4b40      	ldr	r3, [pc, #256]	; (80007e0 <main+0x2e0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
				  Mode_changed = 0;
 80006e4:	4b3b      	ldr	r3, [pc, #236]	; (80007d4 <main+0x2d4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
				  //check how many pics to display
				  //warning don't set Current_mode_config = [255 255 1 2 10 2 255 255 255 255]
				  Picture_count = 0;
 80006ea:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <main+0x2e4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
				  for(int i = 0 ; i < 5 ; i++){
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	e00e      	b.n	8000714 <main+0x214>
					 if(Current_mode_config[i*2] != 255)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4a38      	ldr	r2, [pc, #224]	; (80007dc <main+0x2dc>)
 80006fc:	5cd3      	ldrb	r3, [r2, r3]
 80006fe:	2bff      	cmp	r3, #255	; 0xff
 8000700:	d005      	beq.n	800070e <main+0x20e>
						 Picture_count++;
 8000702:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <main+0x2e4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <main+0x2e4>)
 800070c:	701a      	strb	r2, [r3, #0]
				  for(int i = 0 ; i < 5 ; i++){
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b04      	cmp	r3, #4
 8000718:	dded      	ble.n	80006f6 <main+0x1f6>
				  }
			  }
			  while(1)//display
 800071a:	e7fe      	b.n	800071a <main+0x21a>
//					  break;
//				  }
			  }
		  }
	  }
	  else if (play_mode_source == 1)
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <main+0x29c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d12c      	bne.n	800077e <main+0x27e>
	  {
		  if (play_mode == 2)
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <main+0x298>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d124      	bne.n	8000776 <main+0x276>
		  {
			  while(1)
			  {
				  HAL_Delay(5);
 800072c:	2005      	movs	r0, #5
 800072e:	f002 fd7f 	bl	8003230 <HAL_Delay>
				  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <main+0x29c>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d15b      	bne.n	80007f2 <main+0x2f2>
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0x298>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b02      	cmp	r3, #2
 8000740:	d157      	bne.n	80007f2 <main+0x2f2>
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <main+0x2cc>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d053      	beq.n	80007f2 <main+0x2f2>
				  {
					  break;
				  }
				  display_panel(&frame_buf_0);
 800074a:	4827      	ldr	r0, [pc, #156]	; (80007e8 <main+0x2e8>)
 800074c:	f001 fa4e 	bl	8001bec <display_panel>

				  HAL_Delay(5);
 8000750:	2005      	movs	r0, #5
 8000752:	f002 fd6d 	bl	8003230 <HAL_Delay>
				  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <main+0x29c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d149      	bne.n	80007f2 <main+0x2f2>
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <main+0x298>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d145      	bne.n	80007f2 <main+0x2f2>
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <main+0x2cc>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d041      	beq.n	80007f2 <main+0x2f2>
				  {
					  break;
				  }
				  display_panel(&frame_buf_1);
 800076e:	481f      	ldr	r0, [pc, #124]	; (80007ec <main+0x2ec>)
 8000770:	f001 fa3c 	bl	8001bec <display_panel>
				  HAL_Delay(5);
 8000774:	e7da      	b.n	800072c <main+0x22c>
			  }
		  }
		  else
		  {
			  display_panel(&frame_buf_0);
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <main+0x2e8>)
 8000778:	f001 fa38 	bl	8001bec <display_panel>
 800077c:	e039      	b.n	80007f2 <main+0x2f2>
		  }
	  }
	  else if (play_mode_source == 2)
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <main+0x29c>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d135      	bne.n	80007f2 <main+0x2f2>
	  {
		  display_panel(&frame_buf_1);
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <main+0x2ec>)
 8000788:	f001 fa30 	bl	8001bec <display_panel>
 800078c:	e031      	b.n	80007f2 <main+0x2f2>
 800078e:	bf00      	nop
 8000790:	08008a28 	.word	0x08008a28
 8000794:	200001d8 	.word	0x200001d8
 8000798:	2004026c 	.word	0x2004026c
 800079c:	2004026d 	.word	0x2004026d
 80007a0:	20070278 	.word	0x20070278
 80007a4:	48000800 	.word	0x48000800
 80007a8:	48001400 	.word	0x48001400
 80007ac:	20070274 	.word	0x20070274
 80007b0:	20000174 	.word	0x20000174
 80007b4:	20040270 	.word	0x20040270
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000004 	.word	0x20000004
 80007c0:	20070270 	.word	0x20070270
 80007c4:	2003026c 	.word	0x2003026c
 80007c8:	20000268 	.word	0x20000268
 80007cc:	20070276 	.word	0x20070276
 80007d0:	2000000a 	.word	0x2000000a
 80007d4:	20000020 	.word	0x20000020
 80007d8:	2000001f 	.word	0x2000001f
 80007dc:	200702e8 	.word	0x200702e8
 80007e0:	200702f2 	.word	0x200702f2
 80007e4:	200702f3 	.word	0x200702f3
 80007e8:	2001026c 	.word	0x2001026c
 80007ec:	2002026c 	.word	0x2002026c
				  	  break;
 80007f0:	bf00      	nop
	  }

	  if(setting_changed == 1)
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <main+0x3b0>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d155      	bne.n	80008a6 <main+0x3a6>
	  {
		  uint16_t Horizontal_blanking_total = Horizontal_blanking_H*256 + Horizontal_blanking_L;
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <main+0x3b4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <main+0x3b8>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b29b      	uxth	r3, r3
 800080a:	4413      	add	r3, r2
 800080c:	813b      	strh	r3, [r7, #8]
		  HBP = Horizontal_blanking_total / 3;
 800080e:	893b      	ldrh	r3, [r7, #8]
 8000810:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <main+0x3bc>)
 8000812:	fba2 2303 	umull	r2, r3, r2, r3
 8000816:	085b      	lsrs	r3, r3, #1
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <main+0x3c0>)
 800081c:	801a      	strh	r2, [r3, #0]
		  HFP = Horizontal_blanking_total / 3;
 800081e:	893b      	ldrh	r3, [r7, #8]
 8000820:	4a26      	ldr	r2, [pc, #152]	; (80008bc <main+0x3bc>)
 8000822:	fba2 2303 	umull	r2, r3, r2, r3
 8000826:	085b      	lsrs	r3, r3, #1
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <main+0x3c4>)
 800082c:	801a      	strh	r2, [r3, #0]
		  HSA = Horizontal_blanking_total - (HBP + HFP);
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <main+0x3c0>)
 8000830:	881a      	ldrh	r2, [r3, #0]
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <main+0x3c4>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	b29b      	uxth	r3, r3
 800083a:	893a      	ldrh	r2, [r7, #8]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	b29a      	uxth	r2, r3
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <main+0x3c8>)
 8000842:	801a      	strh	r2, [r3, #0]

		  uint16_t Vertical_blanking_total = Vertical_blanking_H*256 + Vertical_blanking_L;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <main+0x3cc>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b29b      	uxth	r3, r3
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <main+0x3d0>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b29b      	uxth	r3, r3
 8000854:	4413      	add	r3, r2
 8000856:	80fb      	strh	r3, [r7, #6]
		  VBP = Vertical_blanking_total / 3;
 8000858:	88fb      	ldrh	r3, [r7, #6]
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <main+0x3bc>)
 800085c:	fba2 2303 	umull	r2, r3, r2, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	b29a      	uxth	r2, r3
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <main+0x3d4>)
 8000866:	801a      	strh	r2, [r3, #0]
		  VFP = Vertical_blanking_total / 3;
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <main+0x3bc>)
 800086c:	fba2 2303 	umull	r2, r3, r2, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <main+0x3d8>)
 8000876:	801a      	strh	r2, [r3, #0]
		  VSA = Vertical_blanking_total - (VBP + VFP);
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <main+0x3d4>)
 800087a:	881a      	ldrh	r2, [r3, #0]
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <main+0x3d8>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	4413      	add	r3, r2
 8000882:	b29b      	uxth	r3, r3
 8000884:	88fa      	ldrh	r2, [r7, #6]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	b29a      	uxth	r2, r3
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <main+0x3dc>)
 800088c:	801a      	strh	r2, [r3, #0]

		  my_MX_DSIHOST_DSI_Init();
 800088e:	f001 ffcf 	bl	8002830 <my_MX_DSIHOST_DSI_Init>
		  my_MX_LTDC_Init();
 8000892:	f002 f8db 	bl	8002a4c <my_MX_LTDC_Init>
		  mipi_config();
 8000896:	f000 fb7f 	bl	8000f98 <mipi_config>
		  HAL_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f002 fcc8 	bl	8003230 <HAL_Delay>

		  setting_changed = 0;
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <main+0x3b0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(10);
 80008a6:	200a      	movs	r0, #10
 80008a8:	f002 fcc2 	bl	8003230 <HAL_Delay>
	  if (play_mode_source == 0)
 80008ac:	e68f      	b.n	80005ce <main+0xce>
 80008ae:	bf00      	nop
 80008b0:	20070276 	.word	0x20070276
 80008b4:	2000000c 	.word	0x2000000c
 80008b8:	2000000d 	.word	0x2000000d
 80008bc:	aaaaaaab 	.word	0xaaaaaaab
 80008c0:	20000012 	.word	0x20000012
 80008c4:	20000014 	.word	0x20000014
 80008c8:	20000010 	.word	0x20000010
 80008cc:	2000000e 	.word	0x2000000e
 80008d0:	2000000f 	.word	0x2000000f
 80008d4:	20000018 	.word	0x20000018
 80008d8:	2000001a 	.word	0x2000001a
 80008dc:	20000016 	.word	0x20000016

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	; 0x58
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2244      	movs	r2, #68	; 0x44
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f008 f886 	bl	8008a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000902:	2000      	movs	r0, #0
 8000904:	f004 f954 	bl	8004bb0 <HAL_PWREx_ControlVoltageScaling>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800090e:	f002 f9fd 	bl	8002d0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091c:	2302      	movs	r3, #2
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000920:	2303      	movs	r3, #3
 8000922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000924:	2301      	movs	r3, #1
 8000926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000928:	231e      	movs	r3, #30
 800092a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4618      	mov	r0, r3
 800093e:	f004 f9eb 	bl	8004d18 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000948:	f002 f9e0 	bl	8002d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2303      	movs	r3, #3
 8000952:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	2105      	movs	r1, #5
 8000964:	4618      	mov	r0, r3
 8000966:	f004 fdf1 	bl	800554c <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000970:	f002 f9cc 	bl	8002d0c <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3758      	adds	r7, #88	; 0x58
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b0ae      	sub	sp, #184	; 0xb8
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000982:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800098e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000992:	2224      	movs	r2, #36	; 0x24
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f008 f832 	bl	8008a00 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	226c      	movs	r2, #108	; 0x6c
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f008 f823 	bl	8008a00 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80009ba:	4b64      	ldr	r3, [pc, #400]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 80009bc:	4a64      	ldr	r2, [pc, #400]	; (8000b50 <MX_DSIHOST_DSI_Init+0x1d4>)
 80009be:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c0:	4b62      	ldr	r3, [pc, #392]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 80009c6:	4b61      	ldr	r3, [pc, #388]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80009cc:	4b5f      	ldr	r3, [pc, #380]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 80009d2:	2332      	movs	r3, #50	; 0x32
 80009d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80009d8:	2301      	movs	r3, #1
 80009da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009de:	2301      	movs	r3, #1
 80009e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009e8:	4619      	mov	r1, r3
 80009ea:	4858      	ldr	r0, [pc, #352]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 80009ec:	f002 fdfc 	bl	80035e8 <HAL_DSI_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 80009f6:	f002 f989 	bl	8002d0c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a30:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a34:	4619      	mov	r1, r3
 8000a36:	4845      	ldr	r0, [pc, #276]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a38:	f003 fa49 	bl	8003ece <HAL_DSI_ConfigHostTimeouts>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000a42:	f002 f963 	bl	8002d0c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000a46:	2313      	movs	r3, #19
 8000a48:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000a4e:	2309      	movs	r3, #9
 8000a50:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000a52:	230a      	movs	r3, #10
 8000a54:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a66:	4619      	mov	r1, r3
 8000a68:	4838      	ldr	r0, [pc, #224]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a6a:	f003 f9c6 	bl	8003dfa <HAL_DSI_ConfigPhyTimer>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000a74:	f002 f94a 	bl	8002d0c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a78:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a7c:	4833      	ldr	r0, [pc, #204]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a7e:	f003 fbe2 	bl	8004246 <HAL_DSI_SetLowPowerRXFilter>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000a88:	f002 f940 	bl	8002d0c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	482f      	ldr	r0, [pc, #188]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a90:	f002 fec6 	bl	8003820 <HAL_DSI_ConfigErrorMonitor>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000a9a:	f002 f937 	bl	8002d0c <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8000aae:	2378      	movs	r3, #120	; 0x78
 8000ab0:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 184;
 8000ac6:	23b8      	movs	r3, #184	; 0xb8
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 180;
 8000aca:	23b4      	movs	r3, #180	; 0xb4
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 664;
 8000ace:	f44f 7326 	mov.w	r3, #664	; 0x298
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 9;
 8000ad4:	2309      	movs	r3, #9
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000adc:	2308      	movs	r3, #8
 8000ade:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 156;
 8000ae0:	239c      	movs	r3, #156	; 0x9c
 8000ae2:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000aea:	231c      	movs	r3, #28
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000aee:	2350      	movs	r3, #80	; 0x50
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af6:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000afe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b02:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b08:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0e:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b14:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480b      	ldr	r0, [pc, #44]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b20:	f002 ff63 	bl	80039ea <HAL_DSI_ConfigVideoMode>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000b2a:	f002 f8ef 	bl	8002d0c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b32:	f002 ff32 	bl	800399a <HAL_DSI_SetGenericVCID>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000b3c:	f002 f8e6 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
  LCD_PowerOn();
 8000b40:	f000 fc36 	bl	80013b0 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	37b8      	adds	r7, #184	; 0xb8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000004c 	.word	0x2000004c
 8000b50:	40016c00 	.word	0x40016c00

08000b54 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2234      	movs	r2, #52	; 0x34
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f007 ff4d 	bl	8008a00 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b66:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000b68:	4a38      	ldr	r2, [pc, #224]	; (8000c4c <MX_LTDC_Init+0xf8>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b72:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b74:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000b76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b7a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b82:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 183;
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000b8a:	22b7      	movs	r2, #183	; 0xb7
 8000b8c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000b90:	2208      	movs	r2, #8
 8000b92:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 363;
 8000b94:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000b96:	f240 126b 	movw	r2, #363	; 0x16b
 8000b9a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 16;
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 483;
 8000ba2:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000ba4:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 172;
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000bac:	22ac      	movs	r2, #172	; 0xac
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 663;
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000bb2:	f240 2297 	movw	r2, #663	; 0x297
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 180;
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000bba:	22b4      	movs	r2, #180	; 0xb4
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000bbe:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000bc0:	22ff      	movs	r2, #255	; 0xff
 8000bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000bc8:	22ff      	movs	r2, #255	; 0xff
 8000bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000bd0:	22ff      	movs	r2, #255	; 0xff
 8000bd2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bd6:	481c      	ldr	r0, [pc, #112]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000bd8:	f003 fd24 	bl	8004624 <HAL_LTDC_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000be2:	f002 f893 	bl	8002d0c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 120;
 8000bea:	2378      	movs	r3, #120	; 0x78
 8000bec:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 156;
 8000bf2:	239c      	movs	r3, #156	; 0x9c
 8000bf4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bfa:	23ff      	movs	r3, #255	; 0xff
 8000bfc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c06:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_LTDC_Init+0xfc>)
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 120;
 8000c10:	2378      	movs	r3, #120	; 0x78
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 156;
 8000c14:	239c      	movs	r3, #156	; 0x9c
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000c18:	23ff      	movs	r3, #255	; 0xff
 8000c1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000c1e:	23ff      	movs	r3, #255	; 0xff
 8000c20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000c24:	23ff      	movs	r3, #255	; 0xff
 8000c26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_LTDC_Init+0xf4>)
 8000c32:	f003 fdc7 	bl	80047c4 <HAL_LTDC_ConfigLayer>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000c3c:	f002 f866 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3738      	adds	r7, #56	; 0x38
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000068 	.word	0x20000068
 8000c4c:	40016800 	.word	0x40016800
 8000c50:	20040270 	.word	0x20040270

08000c54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_SPI2_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c8a:	2208      	movs	r2, #8
 8000c8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000cae:	2208      	movs	r2, #8
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_SPI2_Init+0x74>)
 8000cb4:	f005 fc80 	bl	80065b8 <HAL_SPI_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f002 f825 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000110 	.word	0x20000110
 8000ccc:	40003800 	.word	0x40003800

08000cd0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000cd6:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <MX_SPI3_Init+0x6c>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000ce8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_SPI3_Init+0x68>)
 8000d26:	f005 fc47 	bl	80065b8 <HAL_SPI_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000d30:	f001 ffec 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000174 	.word	0x20000174
 8000d3c:	40003c00 	.word	0x40003c00

08000d40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d46:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <MX_UART4_Init+0x94>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d88:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d8a:	f006 ff79 	bl	8007c80 <HAL_UART_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000d94:	f001 ffba 	bl	8002d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000d9c:	f007 fd42 	bl	8008824 <HAL_UARTEx_SetTxFifoThreshold>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000da6:	f001 ffb1 	bl	8002d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000dae:	f007 fd77 	bl	80088a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f001 ffa8 	bl	8002d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_UART4_Init+0x90>)
 8000dbe:	f007 fcf8 	bl	80087b2 <HAL_UARTEx_DisableFifoMode>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f001 ffa0 	bl	8002d0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200001d8 	.word	0x200001d8
 8000dd4:	40004c00 	.word	0x40004c00

08000dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dee:	4b65      	ldr	r3, [pc, #404]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a64      	ldr	r2, [pc, #400]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b62      	ldr	r3, [pc, #392]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000e06:	f003 ff77 	bl	8004cf8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b5e      	ldr	r3, [pc, #376]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a5d      	ldr	r2, [pc, #372]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b5b      	ldr	r3, [pc, #364]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b58      	ldr	r3, [pc, #352]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a57      	ldr	r2, [pc, #348]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b55      	ldr	r3, [pc, #340]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	4b52      	ldr	r3, [pc, #328]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a51      	ldr	r2, [pc, #324]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b4f      	ldr	r3, [pc, #316]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a4b      	ldr	r2, [pc, #300]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b49      	ldr	r3, [pc, #292]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a45      	ldr	r2, [pc, #276]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e82:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a3f      	ldr	r2, [pc, #252]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <MX_GPIO_Init+0x1ac>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	4839      	ldr	r0, [pc, #228]	; (8000f88 <MX_GPIO_Init+0x1b0>)
 8000ea2:	f003 fb8f 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESXP_Pin|flash_cs_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8000eac:	4836      	ldr	r0, [pc, #216]	; (8000f88 <MX_GPIO_Init+0x1b0>)
 8000eae:	f003 fb89 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4835      	ldr	r0, [pc, #212]	; (8000f8c <MX_GPIO_Init+0x1b4>)
 8000eb8:	f003 fb84 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec2:	4833      	ldr	r0, [pc, #204]	; (8000f90 <MX_GPIO_Init+0x1b8>)
 8000ec4:	f003 fb7e 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin RESXP_Pin flash_cs_Pin */
  GPIO_InitStruct.Pin = led_Pin|RESXP_Pin|flash_cs_Pin;
 8000ec8:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4829      	ldr	r0, [pc, #164]	; (8000f88 <MX_GPIO_Init+0x1b0>)
 8000ee2:	f003 f9dd 	bl	80042a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : sync_Pin */
  GPIO_InitStruct.Pin = sync_Pin;
 8000ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(sync_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f003 f9ce 	bl	80042a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : pic_sw_Pin */
  GPIO_InitStruct.Pin = pic_sw_Pin;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f10:	2302      	movs	r3, #2
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(pic_sw_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481e      	ldr	r0, [pc, #120]	; (8000f94 <MX_GPIO_Init+0x1bc>)
 8000f1c:	f003 f9c0 	bl	80042a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : bat_en_Pin */
  GPIO_InitStruct.Pin = bat_en_Pin;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(bat_en_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_GPIO_Init+0x1b4>)
 8000f38:	f003 f9b2 	bl	80042a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : en_Pin */
  GPIO_InitStruct.Pin = en_Pin;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(en_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	480e      	ldr	r0, [pc, #56]	; (8000f90 <MX_GPIO_Init+0x1b8>)
 8000f56:	f003 f9a3 	bl	80042a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	2017      	movs	r0, #23
 8000f60:	f002 fa65 	bl	800342e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f64:	2017      	movs	r0, #23
 8000f66:	f002 fa7e 	bl	8003466 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	2028      	movs	r0, #40	; 0x28
 8000f70:	f002 fa5d 	bl	800342e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f74:	2028      	movs	r0, #40	; 0x28
 8000f76:	f002 fa76 	bl	8003466 <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3730      	adds	r7, #48	; 0x30
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	48001400 	.word	0x48001400
 8000f94:	48000c00 	.word	0x48000c00

08000f98 <mipi_config>:

/* USER CODE BEGIN 4 */

void mipi_config()
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b0af      	sub	sp, #188	; 0xbc
 8000f9c:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8000f9e:	48c4      	ldr	r0, [pc, #784]	; (80012b0 <mipi_config+0x318>)
 8000fa0:	f003 f85b 	bl	800405a <HAL_DSI_Start>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <mipi_config+0x16>
	{
		Error_Handler();
 8000faa:	f001 feaf 	bl	8002d0c <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8000fae:	23c3      	movs	r3, #195	; 0xc3
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	23f0      	movs	r3, #240	; 0xf0
 8000fb4:	2215      	movs	r2, #21
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	48bd      	ldr	r0, [pc, #756]	; (80012b0 <mipi_config+0x318>)
 8000fba:	f003 f88a 	bl	80040d2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8000fbe:	2396      	movs	r3, #150	; 0x96
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	23f0      	movs	r3, #240	; 0xf0
 8000fc4:	2215      	movs	r2, #21
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	48b9      	ldr	r0, [pc, #740]	; (80012b0 <mipi_config+0x318>)
 8000fca:	f003 f882 	bl	80040d2 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = {0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33};
 8000fce:	4ab9      	ldr	r2, [pc, #740]	; (80012b4 <mipi_config+0x31c>)
 8000fd0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd8:	6018      	str	r0, [r3, #0]
 8000fda:	3304      	adds	r3, #4
 8000fdc:	8019      	strh	r1, [r3, #0]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	0c0a      	lsrs	r2, r1, #16
 8000fe2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8000fe4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	23e7      	movs	r3, #231	; 0xe7
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2308      	movs	r3, #8
 8000ff0:	2239      	movs	r2, #57	; 0x39
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	48ae      	ldr	r0, [pc, #696]	; (80012b0 <mipi_config+0x318>)
 8000ff6:	f003 f88e 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = {0xC0, 0x68, 0xE0};
 8000ffa:	4aaf      	ldr	r2, [pc, #700]	; (80012b8 <mipi_config+0x320>)
 8000ffc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	4611      	mov	r1, r2
 8001004:	8019      	strh	r1, [r3, #0]
 8001006:	3302      	adds	r3, #2
 8001008:	0c12      	lsrs	r2, r2, #16
 800100a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 800100c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	23a4      	movs	r3, #164	; 0xa4
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2304      	movs	r3, #4
 8001018:	2239      	movs	r2, #57	; 0x39
 800101a:	2100      	movs	r1, #0
 800101c:	48a4      	ldr	r0, [pc, #656]	; (80012b0 <mipi_config+0x318>)
 800101e:	f003 f87a 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = {0x42, 0x05, 0x24, 0x03};
 8001022:	4ba6      	ldr	r3, [pc, #664]	; (80012bc <mipi_config+0x324>)
 8001024:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8001028:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	23c3      	movs	r3, #195	; 0xc3
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2305      	movs	r3, #5
 8001034:	2239      	movs	r2, #57	; 0x39
 8001036:	2100      	movs	r1, #0
 8001038:	489d      	ldr	r0, [pc, #628]	; (80012b0 <mipi_config+0x318>)
 800103a:	f003 f86c 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = {0x42, 0x05, 0x24, 0x03};
 800103e:	4b9f      	ldr	r3, [pc, #636]	; (80012bc <mipi_config+0x324>)
 8001040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 8001044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	23c4      	movs	r3, #196	; 0xc4
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2305      	movs	r3, #5
 8001050:	2239      	movs	r2, #57	; 0x39
 8001052:	2100      	movs	r1, #0
 8001054:	4896      	ldr	r0, [pc, #600]	; (80012b0 <mipi_config+0x318>)
 8001056:	f003 f85e 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 800105a:	4a99      	ldr	r2, [pc, #612]	; (80012c0 <mipi_config+0x328>)
 800105c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001060:	ca07      	ldmia	r2, {r0, r1, r2}
 8001062:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 8001066:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	23e5      	movs	r3, #229	; 0xe5
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	230d      	movs	r3, #13
 8001072:	2239      	movs	r2, #57	; 0x39
 8001074:	2100      	movs	r1, #0
 8001076:	488e      	ldr	r0, [pc, #568]	; (80012b0 <mipi_config+0x318>)
 8001078:	f003 f84d 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 800107c:	4a90      	ldr	r2, [pc, #576]	; (80012c0 <mipi_config+0x328>)
 800107e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001082:	ca07      	ldmia	r2, {r0, r1, r2}
 8001084:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001088:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	23e6      	movs	r3, #230	; 0xe6
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	230d      	movs	r3, #13
 8001094:	2239      	movs	r2, #57	; 0x39
 8001096:	2100      	movs	r1, #0
 8001098:	4885      	ldr	r0, [pc, #532]	; (80012b0 <mipi_config+0x318>)
 800109a:	f003 f83c 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = {0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22};
 800109e:	4a89      	ldr	r2, [pc, #548]	; (80012c4 <mipi_config+0x32c>)
 80010a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a8:	6018      	str	r0, [r3, #0]
 80010aa:	3304      	adds	r3, #4
 80010ac:	8019      	strh	r1, [r3, #0]
 80010ae:	3302      	adds	r3, #2
 80010b0:	0c0a      	lsrs	r2, r1, #16
 80010b2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 80010b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	23ec      	movs	r3, #236	; 0xec
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2308      	movs	r3, #8
 80010c0:	2239      	movs	r2, #57	; 0x39
 80010c2:	2100      	movs	r1, #0
 80010c4:	487a      	ldr	r0, [pc, #488]	; (80012b0 <mipi_config+0x318>)
 80010c6:	f003 f826 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = {0x88, 0x05, 0x0F, 0x18};
 80010ca:	4b7f      	ldr	r3, [pc, #508]	; (80012c8 <mipi_config+0x330>)
 80010cc:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 80010ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	23c1      	movs	r3, #193	; 0xc1
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2305      	movs	r3, #5
 80010da:	2239      	movs	r2, #57	; 0x39
 80010dc:	2100      	movs	r1, #0
 80010de:	4874      	ldr	r0, [pc, #464]	; (80012b0 <mipi_config+0x318>)
 80010e0:	f003 f819 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = {0x88, 0x05, 0x0F, 0x18};
 80010e4:	4b78      	ldr	r3, [pc, #480]	; (80012c8 <mipi_config+0x330>)
 80010e6:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 80010e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	23c2      	movs	r3, #194	; 0xc2
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2305      	movs	r3, #5
 80010f4:	2239      	movs	r2, #57	; 0x39
 80010f6:	2100      	movs	r1, #0
 80010f8:	486d      	ldr	r0, [pc, #436]	; (80012b0 <mipi_config+0x318>)
 80010fa:	f003 f80c 	bl	8004116 <HAL_DSI_LongWrite>
	//HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x08);
 80010fe:	2308      	movs	r3, #8
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2336      	movs	r3, #54	; 0x36
 8001104:	2215      	movs	r2, #21
 8001106:	2100      	movs	r1, #0
 8001108:	4869      	ldr	r0, [pc, #420]	; (80012b0 <mipi_config+0x318>)
 800110a:	f002 ffe2 	bl	80040d2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 800110e:	2307      	movs	r3, #7
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	233a      	movs	r3, #58	; 0x3a
 8001114:	2215      	movs	r2, #21
 8001116:	2100      	movs	r1, #0
 8001118:	4865      	ldr	r0, [pc, #404]	; (80012b0 <mipi_config+0x318>)
 800111a:	f002 ffda 	bl	80040d2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 800111e:	23be      	movs	r3, #190	; 0xbe
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	23c5      	movs	r3, #197	; 0xc5
 8001124:	2215      	movs	r2, #21
 8001126:	2100      	movs	r1, #0
 8001128:	4861      	ldr	r0, [pc, #388]	; (80012b0 <mipi_config+0x318>)
 800112a:	f002 ffd2 	bl	80040d2 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = {0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55, 0x3D, 0x19, 0x18, 0x24, 0x27};
 800112e:	4b67      	ldr	r3, [pc, #412]	; (80012cc <mipi_config+0x334>)
 8001130:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001136:	c407      	stmia	r4!, {r0, r1, r2}
 8001138:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 800113a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	23e0      	movs	r3, #224	; 0xe0
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	230f      	movs	r3, #15
 8001146:	2239      	movs	r2, #57	; 0x39
 8001148:	2100      	movs	r1, #0
 800114a:	4859      	ldr	r0, [pc, #356]	; (80012b0 <mipi_config+0x318>)
 800114c:	f002 ffe3 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = {0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56, 0x3E, 0x1A, 0x18, 0x24, 0x28};
 8001150:	4b5f      	ldr	r3, [pc, #380]	; (80012d0 <mipi_config+0x338>)
 8001152:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001158:	c407      	stmia	r4!, {r0, r1, r2}
 800115a:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 800115c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	23e1      	movs	r3, #225	; 0xe1
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	230f      	movs	r3, #15
 8001168:	2239      	movs	r2, #57	; 0x39
 800116a:	2100      	movs	r1, #0
 800116c:	4850      	ldr	r0, [pc, #320]	; (80012b0 <mipi_config+0x318>)
 800116e:	f002 ffd2 	bl	8004116 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 8001172:	2310      	movs	r3, #16
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	23b2      	movs	r3, #178	; 0xb2
 8001178:	2215      	movs	r2, #21
 800117a:	2100      	movs	r1, #0
 800117c:	484c      	ldr	r0, [pc, #304]	; (80012b0 <mipi_config+0x318>)
 800117e:	f002 ffa8 	bl	80040d2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 8001182:	2301      	movs	r3, #1
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	23b3      	movs	r3, #179	; 0xb3
 8001188:	2215      	movs	r2, #21
 800118a:	2100      	movs	r1, #0
 800118c:	4848      	ldr	r0, [pc, #288]	; (80012b0 <mipi_config+0x318>)
 800118e:	f002 ffa0 	bl	80040d2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 8001192:	2301      	movs	r3, #1
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	23b4      	movs	r3, #180	; 0xb4
 8001198:	2215      	movs	r2, #21
 800119a:	2100      	movs	r1, #0
 800119c:	4844      	ldr	r0, [pc, #272]	; (80012b0 <mipi_config+0x318>)
 800119e:	f002 ff98 	bl	80040d2 <HAL_DSI_ShortWrite>
	//uint8_t cmd20[2] = {0x27, 0x09};
	uint8_t cmd20[2] = {0x4D, 0x0E};
 80011a2:	f640 634d 	movw	r3, #3661	; 0xe4d
 80011a6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 80011aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	23b6      	movs	r3, #182	; 0xb6
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2303      	movs	r3, #3
 80011b6:	2239      	movs	r2, #57	; 0x39
 80011b8:	2100      	movs	r1, #0
 80011ba:	483d      	ldr	r0, [pc, #244]	; (80012b0 <mipi_config+0x318>)
 80011bc:	f002 ffab 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = {0x00, 0x54, 0x00, 0x54};
 80011c0:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 80011c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 80011c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	23b5      	movs	r3, #181	; 0xb5
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2305      	movs	r3, #5
 80011d2:	2239      	movs	r2, #57	; 0x39
 80011d4:	2100      	movs	r1, #0
 80011d6:	4836      	ldr	r0, [pc, #216]	; (80012b0 <mipi_config+0x318>)
 80011d8:	f002 ff9d 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 80011dc:	4a3d      	ldr	r2, [pc, #244]	; (80012d4 <mipi_config+0x33c>)
 80011de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e4:	c303      	stmia	r3!, {r0, r1}
 80011e6:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 80011e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	23a5      	movs	r3, #165	; 0xa5
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	230a      	movs	r3, #10
 80011f4:	2239      	movs	r2, #57	; 0x39
 80011f6:	2100      	movs	r1, #0
 80011f8:	482d      	ldr	r0, [pc, #180]	; (80012b0 <mipi_config+0x318>)
 80011fa:	f002 ff8c 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 80011fe:	4a35      	ldr	r2, [pc, #212]	; (80012d4 <mipi_config+0x33c>)
 8001200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001204:	ca07      	ldmia	r2, {r0, r1, r2}
 8001206:	c303      	stmia	r3!, {r0, r1}
 8001208:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 800120a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	23a6      	movs	r3, #166	; 0xa6
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	230a      	movs	r3, #10
 8001216:	2239      	movs	r2, #57	; 0x39
 8001218:	2100      	movs	r1, #0
 800121a:	4825      	ldr	r0, [pc, #148]	; (80012b0 <mipi_config+0x318>)
 800121c:	f002 ff7b 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = {0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00};
 8001220:	4a2d      	ldr	r2, [pc, #180]	; (80012d8 <mipi_config+0x340>)
 8001222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122a:	6018      	str	r0, [r3, #0]
 800122c:	3304      	adds	r3, #4
 800122e:	8019      	strh	r1, [r3, #0]
 8001230:	3302      	adds	r3, #2
 8001232:	0c0a      	lsrs	r2, r1, #16
 8001234:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 8001236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	23ba      	movs	r3, #186	; 0xba
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2308      	movs	r3, #8
 8001242:	2239      	movs	r2, #57	; 0x39
 8001244:	2100      	movs	r1, #0
 8001246:	481a      	ldr	r0, [pc, #104]	; (80012b0 <mipi_config+0x318>)
 8001248:	f002 ff65 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <mipi_config+0x344>)
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001256:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	23bb      	movs	r3, #187	; 0xbb
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2309      	movs	r3, #9
 8001266:	2239      	movs	r2, #57	; 0x39
 8001268:	2100      	movs	r1, #0
 800126a:	4811      	ldr	r0, [pc, #68]	; (80012b0 <mipi_config+0x318>)
 800126c:	f002 ff53 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 8001270:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <mipi_config+0x344>)
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	23bc      	movs	r3, #188	; 0xbc
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2309      	movs	r3, #9
 800128a:	2239      	movs	r2, #57	; 0x39
 800128c:	2100      	movs	r1, #0
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <mipi_config+0x318>)
 8001290:	f002 ff41 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = {0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF, 0xFF, 0xF9};
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <mipi_config+0x348>)
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	ca07      	ldmia	r2, {r0, r1, r2}
 800129c:	c303      	stmia	r3!, {r0, r1}
 800129e:	801a      	strh	r2, [r3, #0]
 80012a0:	3302      	adds	r3, #2
 80012a2:	0c12      	lsrs	r2, r2, #16
 80012a4:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	e01a      	b.n	80012e4 <mipi_config+0x34c>
 80012ae:	bf00      	nop
 80012b0:	2000004c 	.word	0x2000004c
 80012b4:	08008a30 	.word	0x08008a30
 80012b8:	08008a38 	.word	0x08008a38
 80012bc:	03240542 	.word	0x03240542
 80012c0:	08008a3c 	.word	0x08008a3c
 80012c4:	08008a48 	.word	0x08008a48
 80012c8:	180f0588 	.word	0x180f0588
 80012cc:	08008a50 	.word	0x08008a50
 80012d0:	08008a60 	.word	0x08008a60
 80012d4:	08008a70 	.word	0x08008a70
 80012d8:	08008a7c 	.word	0x08008a7c
 80012dc:	08008a84 	.word	0x08008a84
 80012e0:	08008a8c 	.word	0x08008a8c
 80012e4:	23bd      	movs	r3, #189	; 0xbd
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	230c      	movs	r3, #12
 80012ea:	2239      	movs	r2, #57	; 0x39
 80012ec:	2100      	movs	r1, #0
 80012ee:	482d      	ldr	r0, [pc, #180]	; (80013a4 <mipi_config+0x40c>)
 80012f0:	f002 ff11 	bl	8004116 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 80012f4:	23c3      	movs	r3, #195	; 0xc3
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	23ed      	movs	r3, #237	; 0xed
 80012fa:	2215      	movs	r2, #21
 80012fc:	2100      	movs	r1, #0
 80012fe:	4829      	ldr	r0, [pc, #164]	; (80013a4 <mipi_config+0x40c>)
 8001300:	f002 fee7 	bl	80040d2 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = {0x40, 0x0F, 0x00};
 8001304:	4a28      	ldr	r2, [pc, #160]	; (80013a8 <mipi_config+0x410>)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	4611      	mov	r1, r2
 800130e:	8019      	strh	r1, [r3, #0]
 8001310:	3302      	adds	r3, #2
 8001312:	0c12      	lsrs	r2, r2, #16
 8001314:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	23e4      	movs	r3, #228	; 0xe4
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2304      	movs	r3, #4
 8001322:	2239      	movs	r2, #57	; 0x39
 8001324:	2100      	movs	r1, #0
 8001326:	481f      	ldr	r0, [pc, #124]	; (80013a4 <mipi_config+0x40c>)
 8001328:	f002 fef5 	bl	8004116 <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = {0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25};
 800132c:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <mipi_config+0x414>)
 800132e:	463b      	mov	r3, r7
 8001330:	ca07      	ldmia	r2, {r0, r1, r2}
 8001332:	c303      	stmia	r3!, {r0, r1}
 8001334:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 8001336:	463b      	mov	r3, r7
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	23cc      	movs	r3, #204	; 0xcc
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	230a      	movs	r3, #10
 8001340:	2239      	movs	r2, #57	; 0x39
 8001342:	2100      	movs	r1, #0
 8001344:	4817      	ldr	r0, [pc, #92]	; (80013a4 <mipi_config+0x40c>)
 8001346:	f002 fee6 	bl	8004116 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2335      	movs	r3, #53	; 0x35
 8001350:	2215      	movs	r2, #21
 8001352:	2100      	movs	r1, #0
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <mipi_config+0x40c>)
 8001356:	f002 febc 	bl	80040d2 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 800135a:	2000      	movs	r0, #0
 800135c:	f001 ff68 	bl	8003230 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2311      	movs	r3, #17
 8001366:	2205      	movs	r2, #5
 8001368:	2100      	movs	r1, #0
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <mipi_config+0x40c>)
 800136c:	f002 feb1 	bl	80040d2 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001370:	2078      	movs	r0, #120	; 0x78
 8001372:	f001 ff5d 	bl	8003230 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8001376:	2300      	movs	r3, #0
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2329      	movs	r3, #41	; 0x29
 800137c:	2205      	movs	r2, #5
 800137e:	2100      	movs	r1, #0
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <mipi_config+0x40c>)
 8001382:	f002 fea6 	bl	80040d2 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001386:	2078      	movs	r0, #120	; 0x78
 8001388:	f001 ff52 	bl	8003230 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800138c:	2300      	movs	r3, #0
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2335      	movs	r3, #53	; 0x35
 8001392:	2215      	movs	r2, #21
 8001394:	2100      	movs	r1, #0
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <mipi_config+0x40c>)
 8001398:	f002 fe9b 	bl	80040d2 <HAL_DSI_ShortWrite>
}
 800139c:	bf00      	nop
 800139e:	37b4      	adds	r7, #180	; 0xb4
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd90      	pop	{r4, r7, pc}
 80013a4:	2000004c 	.word	0x2000004c
 80013a8:	08008a98 	.word	0x08008a98
 80013ac:	08008a9c 	.word	0x08008a9c

080013b0 <LCD_PowerOn>:

static void LCD_PowerOn(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <LCD_PowerOn+0x28>)
 80013ba:	f003 f903 	bl	80045c4 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 80013be:	2014      	movs	r0, #20
 80013c0:	f001 ff36 	bl	8003230 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2140      	movs	r1, #64	; 0x40
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <LCD_PowerOn+0x28>)
 80013ca:	f003 f8fb 	bl	80045c4 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 80013ce:	2078      	movs	r0, #120	; 0x78
 80013d0:	f001 ff2e 	bl	8003230 <HAL_Delay>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	48000400 	.word	0x48000400

080013dc <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = {0};
 80013e6:	2300      	movs	r3, #0
 80013e8:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = {0};
 80013ea:	2300      	movs	r3, #0
 80013ec:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 1000);
 80013ee:	f107 010c 	add.w	r1, r7, #12
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	2201      	movs	r2, #1
 80013f8:	4879      	ldr	r0, [pc, #484]	; (80015e0 <Write_Registers_data+0x204>)
 80013fa:	f005 faee 	bl	80069da <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)data, 1, 1000);
 80013fe:	f107 0108 	add.w	r1, r7, #8
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	2201      	movs	r2, #1
 8001408:	4875      	ldr	r0, [pc, #468]	; (80015e0 <Write_Registers_data+0x204>)
 800140a:	f005 fae6 	bl	80069da <HAL_SPI_Receive>
	if (do_flag == 1)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b01      	cmp	r3, #1
 8001412:	f040 80dc 	bne.w	80015ce <Write_Registers_data+0x1f2>
	{
		switch (Register_Address[0])
 8001416:	7b3b      	ldrb	r3, [r7, #12]
 8001418:	2b21      	cmp	r3, #33	; 0x21
 800141a:	f200 80dd 	bhi.w	80015d8 <Write_Registers_data+0x1fc>
 800141e:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <Write_Registers_data+0x48>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	080014ad 	.word	0x080014ad
 8001428:	080014bd 	.word	0x080014bd
 800142c:	080014cd 	.word	0x080014cd
 8001430:	080014db 	.word	0x080014db
 8001434:	080014e9 	.word	0x080014e9
 8001438:	080014f7 	.word	0x080014f7
 800143c:	08001505 	.word	0x08001505
 8001440:	0800150d 	.word	0x0800150d
 8001444:	080015d3 	.word	0x080015d3
 8001448:	080015d3 	.word	0x080015d3
 800144c:	080015d3 	.word	0x080015d3
 8001450:	08001515 	.word	0x08001515
 8001454:	0800151d 	.word	0x0800151d
 8001458:	08001525 	.word	0x08001525
 800145c:	0800152d 	.word	0x0800152d
 8001460:	08001535 	.word	0x08001535
 8001464:	0800153d 	.word	0x0800153d
 8001468:	080015d3 	.word	0x080015d3
 800146c:	080015d3 	.word	0x080015d3
 8001470:	080015d3 	.word	0x080015d3
 8001474:	080015d3 	.word	0x080015d3
 8001478:	080015d3 	.word	0x080015d3
 800147c:	080015d3 	.word	0x080015d3
 8001480:	080015d3 	.word	0x080015d3
 8001484:	0800159f 	.word	0x0800159f
 8001488:	080015a7 	.word	0x080015a7
 800148c:	080015d9 	.word	0x080015d9
 8001490:	080015d9 	.word	0x080015d9
 8001494:	080015d9 	.word	0x080015d9
 8001498:	080015d9 	.word	0x080015d9
 800149c:	080015d9 	.word	0x080015d9
 80014a0:	080015d9 	.word	0x080015d9
 80014a4:	080015d9 	.word	0x080015d9
 80014a8:	080015b5 	.word	0x080015b5
		{
		case 0: //Horizontal Resolution
			IMAGE_H = (uint32_t)data[0];
 80014ac:	7a3b      	ldrb	r3, [r7, #8]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <Write_Registers_data+0x208>)
 80014b2:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 80014b4:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <Write_Registers_data+0x20c>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
			break;
 80014ba:	e08d      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 1: //Vertical Resolution
			IMAGE_W = (uint32_t)data[0];
 80014bc:	7a3b      	ldrb	r3, [r7, #8]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <Write_Registers_data+0x210>)
 80014c2:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 80014c4:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <Write_Registers_data+0x20c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
			break;
 80014ca:	e085      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 2: //Horizontal blanking (High byte)
			Horizontal_blanking_H = data[0];
 80014cc:	7a3a      	ldrb	r2, [r7, #8]
 80014ce:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <Write_Registers_data+0x214>)
 80014d0:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 80014d2:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <Write_Registers_data+0x20c>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
			break;
 80014d8:	e07e      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 3: //Horizontal blanking (Low byte)
			Horizontal_blanking_L = data[0];
 80014da:	7a3a      	ldrb	r2, [r7, #8]
 80014dc:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <Write_Registers_data+0x218>)
 80014de:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <Write_Registers_data+0x20c>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
			break;
 80014e6:	e077      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 4: //Vertical blanking (High byte)
			Vertical_blanking_H = data[0];
 80014e8:	7a3a      	ldrb	r2, [r7, #8]
 80014ea:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <Write_Registers_data+0x21c>)
 80014ec:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 80014ee:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <Write_Registers_data+0x20c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
			break;
 80014f4:	e070      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 5: //Vertical blanking (Low byte)
			Vertical_blanking_L = data[0];
 80014f6:	7a3a      	ldrb	r2, [r7, #8]
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <Write_Registers_data+0x220>)
 80014fa:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <Write_Registers_data+0x20c>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
			break;
 8001502:	e069      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 6: //Frame rate x 2 (Hz)
			frame_rate_r = data[0];
 8001504:	7a3a      	ldrb	r2, [r7, #8]
 8001506:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <Write_Registers_data+0x224>)
 8001508:	701a      	strb	r2, [r3, #0]
			break;
 800150a:	e065      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 7: //Show SPI flash content length
			spi_flash_content_length = data[0];
 800150c:	7a3a      	ldrb	r2, [r7, #8]
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <Write_Registers_data+0x228>)
 8001510:	701a      	strb	r2, [r3, #0]
			break;
 8001512:	e061      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 9: //Clock rate of SPI
			break;
		case 10: //Clock rate of I2C
			break;
		case 11: //Pixel Mapping one_L
			Pixel_Mapping_one_L = data[0];
 8001514:	7a3a      	ldrb	r2, [r7, #8]
 8001516:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <Write_Registers_data+0x22c>)
 8001518:	701a      	strb	r2, [r3, #0]
			break;
 800151a:	e05d      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 12: //Pixel Mapping one_H
			Pixel_Mapping_one_H = data[0];
 800151c:	7a3a      	ldrb	r2, [r7, #8]
 800151e:	4b3b      	ldr	r3, [pc, #236]	; (800160c <Write_Registers_data+0x230>)
 8001520:	701a      	strb	r2, [r3, #0]
			break;
 8001522:	e059      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 13: //Auto Run start content of SPI flash
			auto_run_start_content = data[0];
 8001524:	7a3a      	ldrb	r2, [r7, #8]
 8001526:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <Write_Registers_data+0x234>)
 8001528:	701a      	strb	r2, [r3, #0]
			break;
 800152a:	e055      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 14: //Show first content number of SPI flash
			display_image_number = data[0];
 800152c:	7a3a      	ldrb	r2, [r7, #8]
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <Write_Registers_data+0x238>)
 8001530:	701a      	strb	r2, [r3, #0]
			break;
 8001532:	e051      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 15: //Auto Run end content of SPI flash
			auto_run_end_content = data[0];
 8001534:	7a3a      	ldrb	r2, [r7, #8]
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <Write_Registers_data+0x23c>)
 8001538:	701a      	strb	r2, [r3, #0]
			break;
 800153a:	e04d      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 16: //Control A
			switch (data[0] & 0b00000011) //Display Mode
 800153c:	7a3b      	ldrb	r3, [r7, #8]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b03      	cmp	r3, #3
 8001544:	d00e      	beq.n	8001564 <Write_Registers_data+0x188>
 8001546:	2b03      	cmp	r3, #3
 8001548:	dc10      	bgt.n	800156c <Write_Registers_data+0x190>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <Write_Registers_data+0x178>
 800154e:	2b01      	cmp	r3, #1
 8001550:	d004      	beq.n	800155c <Write_Registers_data+0x180>
 8001552:	e00b      	b.n	800156c <Write_Registers_data+0x190>
			{
			case 0b00000000: //Display content of frame buffer (0)
				play_mode_source = 1;
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <Write_Registers_data+0x240>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
				break;
 800155a:	e007      	b.n	800156c <Write_Registers_data+0x190>
			case 0b00000001: //Display content of frame buffer (1)
				play_mode_source = 2;
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <Write_Registers_data+0x240>)
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
				break;
 8001562:	e003      	b.n	800156c <Write_Registers_data+0x190>
			case 0b00000011: //Display Flash content
				play_mode_source = 0;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <Write_Registers_data+0x240>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
				break;
 800156a:	bf00      	nop
			}
			switch (data[0] & 0b00001100) //Static or Dynamic mode
 800156c:	7a3b      	ldrb	r3, [r7, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b08      	cmp	r3, #8
 8001574:	d00e      	beq.n	8001594 <Write_Registers_data+0x1b8>
 8001576:	2b08      	cmp	r3, #8
 8001578:	dc2d      	bgt.n	80015d6 <Write_Registers_data+0x1fa>
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <Write_Registers_data+0x1a8>
 800157e:	2b04      	cmp	r3, #4
 8001580:	d004      	beq.n	800158c <Write_Registers_data+0x1b0>
				break;
			case 0b00001000: //Dynamic display flash content
				play_mode = 1;
				break;
			}
			break;
 8001582:	e028      	b.n	80015d6 <Write_Registers_data+0x1fa>
				play_mode = 0;
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <Write_Registers_data+0x244>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
				break;
 800158a:	e007      	b.n	800159c <Write_Registers_data+0x1c0>
				play_mode = 2;
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <Write_Registers_data+0x244>)
 800158e:	2202      	movs	r2, #2
 8001590:	701a      	strb	r2, [r3, #0]
				break;
 8001592:	e003      	b.n	800159c <Write_Registers_data+0x1c0>
				play_mode = 1;
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <Write_Registers_data+0x244>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
				break;
 800159a:	bf00      	nop
			break;
 800159c:	e01b      	b.n	80015d6 <Write_Registers_data+0x1fa>
		case 22: //Power Status
			break;
		case 23: //Serial number
			break;
		case 24: //content size
			content_size = data[0];
 800159e:	7a3a      	ldrb	r2, [r7, #8]
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <Write_Registers_data+0x248>)
 80015a2:	701a      	strb	r2, [r3, #0]
			break;
 80015a4:	e018      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 25:// force play buffer to write flash.
			play_mode_source = 1;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <Write_Registers_data+0x240>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
			play_mode = 2;
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <Write_Registers_data+0x244>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	701a      	strb	r2, [r3, #0]
			break;
 80015b2:	e011      	b.n	80015d8 <Write_Registers_data+0x1fc>
		case 33:// force play buffer to write flash.
			Mode_config[100] = data[0];
 80015b4:	7a3a      	ldrb	r2, [r7, #8]
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <Write_Registers_data+0x24c>)
 80015b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			Playing_mode = data[0];
 80015bc:	7a3a      	ldrb	r2, [r7, #8]
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <Write_Registers_data+0x250>)
 80015c0:	701a      	strb	r2, [r3, #0]

			write_flash_config();
 80015c2:	f000 fd5d 	bl	8002080 <write_flash_config>
			Mode_changed = 1;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <Write_Registers_data+0x254>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]

			break;
 80015cc:	e004      	b.n	80015d8 <Write_Registers_data+0x1fc>
		}
	}
 80015ce:	bf00      	nop
 80015d0:	e002      	b.n	80015d8 <Write_Registers_data+0x1fc>
			break;
 80015d2:	bf00      	nop
 80015d4:	e000      	b.n	80015d8 <Write_Registers_data+0x1fc>
			break;
 80015d6:	bf00      	nop
	//HAL_UART_Transmit(&huart4, &Register_Address, 1, 1000);
	//HAL_UART_Transmit(&huart4, &data, 1, 1000);
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000174 	.word	0x20000174
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20070276 	.word	0x20070276
 80015ec:	20000004 	.word	0x20000004
 80015f0:	2000000c 	.word	0x2000000c
 80015f4:	2000000d 	.word	0x2000000d
 80015f8:	2000000e 	.word	0x2000000e
 80015fc:	2000000f 	.word	0x2000000f
 8001600:	20000008 	.word	0x20000008
 8001604:	20000009 	.word	0x20000009
 8001608:	2000001c 	.word	0x2000001c
 800160c:	2000001d 	.word	0x2000001d
 8001610:	20000268 	.word	0x20000268
 8001614:	20070270 	.word	0x20070270
 8001618:	2000000a 	.word	0x2000000a
 800161c:	2004026d 	.word	0x2004026d
 8001620:	2004026c 	.word	0x2004026c
 8001624:	2000000b 	.word	0x2000000b
 8001628:	20070278 	.word	0x20070278
 800162c:	2000001f 	.word	0x2000001f
 8001630:	20000020 	.word	0x20000020

08001634 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, &spi_rev_2byte, 2, 1000);
	// USB command: Type and command
	if(hspi == SPI2){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4aae      	ldr	r2, [pc, #696]	; (80018f8 <HAL_SPI_RxCpltCallback+0x2c4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d101      	bne.n	8001648 <HAL_SPI_RxCpltCallback+0x14>
		int a=2;
 8001644:	2302      	movs	r3, #2
 8001646:	60fb      	str	r3, [r7, #12]
	}
	if(hspi == SPI3){
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4aac      	ldr	r2, [pc, #688]	; (80018fc <HAL_SPI_RxCpltCallback+0x2c8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_SPI_RxCpltCallback+0x20>
		int a=3;
 8001650:	2303      	movs	r3, #3
 8001652:	60bb      	str	r3, [r7, #8]
	}
	switch (spi_rev_2byte[0] & 0b11000000)
 8001654:	4baa      	ldr	r3, [pc, #680]	; (8001900 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800165c:	2bc0      	cmp	r3, #192	; 0xc0
 800165e:	f000 81e9 	beq.w	8001a34 <HAL_SPI_RxCpltCallback+0x400>
 8001662:	2bc0      	cmp	r3, #192	; 0xc0
 8001664:	f300 82a0 	bgt.w	8001ba8 <HAL_SPI_RxCpltCallback+0x574>
 8001668:	2b80      	cmp	r3, #128	; 0x80
 800166a:	f000 81d7 	beq.w	8001a1c <HAL_SPI_RxCpltCallback+0x3e8>
 800166e:	2b80      	cmp	r3, #128	; 0x80
 8001670:	f300 829a 	bgt.w	8001ba8 <HAL_SPI_RxCpltCallback+0x574>
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_SPI_RxCpltCallback+0x4c>
 8001678:	2b40      	cmp	r3, #64	; 0x40
 800167a:	f000 8171 	beq.w	8001960 <HAL_SPI_RxCpltCallback+0x32c>
 800167e:	e293      	b.n	8001ba8 <HAL_SPI_RxCpltCallback+0x574>
	{
	case 0b00000000: //Chain SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001680:	4b9f      	ldr	r3, [pc, #636]	; (8001900 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001688:	2b38      	cmp	r3, #56	; 0x38
 800168a:	f200 8286 	bhi.w	8001b9a <HAL_SPI_RxCpltCallback+0x566>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <HAL_SPI_RxCpltCallback+0x60>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	08001779 	.word	0x08001779
 8001698:	08001b9b 	.word	0x08001b9b
 800169c:	08001b9b 	.word	0x08001b9b
 80016a0:	08001b9b 	.word	0x08001b9b
 80016a4:	08001b9b 	.word	0x08001b9b
 80016a8:	08001b9b 	.word	0x08001b9b
 80016ac:	08001b9b 	.word	0x08001b9b
 80016b0:	08001b9b 	.word	0x08001b9b
 80016b4:	0800182b 	.word	0x0800182b
 80016b8:	08001b9b 	.word	0x08001b9b
 80016bc:	08001b9b 	.word	0x08001b9b
 80016c0:	08001b9b 	.word	0x08001b9b
 80016c4:	08001b9b 	.word	0x08001b9b
 80016c8:	08001b9b 	.word	0x08001b9b
 80016cc:	08001b9b 	.word	0x08001b9b
 80016d0:	08001b9b 	.word	0x08001b9b
 80016d4:	080018dd 	.word	0x080018dd
 80016d8:	08001b9b 	.word	0x08001b9b
 80016dc:	08001b9b 	.word	0x08001b9b
 80016e0:	08001b9b 	.word	0x08001b9b
 80016e4:	08001b9b 	.word	0x08001b9b
 80016e8:	08001b9b 	.word	0x08001b9b
 80016ec:	08001b9b 	.word	0x08001b9b
 80016f0:	08001b9b 	.word	0x08001b9b
 80016f4:	0800195d 	.word	0x0800195d
 80016f8:	08001b9b 	.word	0x08001b9b
 80016fc:	08001b9b 	.word	0x08001b9b
 8001700:	08001b9b 	.word	0x08001b9b
 8001704:	08001b9b 	.word	0x08001b9b
 8001708:	08001b9b 	.word	0x08001b9b
 800170c:	08001b9b 	.word	0x08001b9b
 8001710:	08001b9b 	.word	0x08001b9b
 8001714:	0800195d 	.word	0x0800195d
 8001718:	08001b9b 	.word	0x08001b9b
 800171c:	08001b9b 	.word	0x08001b9b
 8001720:	08001b9b 	.word	0x08001b9b
 8001724:	08001b9b 	.word	0x08001b9b
 8001728:	08001b9b 	.word	0x08001b9b
 800172c:	08001b9b 	.word	0x08001b9b
 8001730:	08001b9b 	.word	0x08001b9b
 8001734:	0800195d 	.word	0x0800195d
 8001738:	08001b9b 	.word	0x08001b9b
 800173c:	08001b9b 	.word	0x08001b9b
 8001740:	08001b9b 	.word	0x08001b9b
 8001744:	08001b9b 	.word	0x08001b9b
 8001748:	08001b9b 	.word	0x08001b9b
 800174c:	08001b9b 	.word	0x08001b9b
 8001750:	08001b9b 	.word	0x08001b9b
 8001754:	0800195d 	.word	0x0800195d
 8001758:	08001b9b 	.word	0x08001b9b
 800175c:	08001b9b 	.word	0x08001b9b
 8001760:	08001b9b 	.word	0x08001b9b
 8001764:	08001b9b 	.word	0x08001b9b
 8001768:	08001b9b 	.word	0x08001b9b
 800176c:	08001b9b 	.word	0x08001b9b
 8001770:	08001b9b 	.word	0x08001b9b
 8001774:	0800195d 	.word	0x0800195d
		{
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi_rev_2byte[0] & 0b00000111)
 8001778:	4b61      	ldr	r3, [pc, #388]	; (8001900 <HAL_SPI_RxCpltCallback+0x2cc>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	2b04      	cmp	r3, #4
 8001782:	d03e      	beq.n	8001802 <HAL_SPI_RxCpltCallback+0x1ce>
 8001784:	2b04      	cmp	r3, #4
 8001786:	dc4c      	bgt.n	8001822 <HAL_SPI_RxCpltCallback+0x1ee>
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_SPI_RxCpltCallback+0x15e>
 800178c:	2b01      	cmp	r3, #1
 800178e:	d014      	beq.n	80017ba <HAL_SPI_RxCpltCallback+0x186>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 8001790:	e047      	b.n	8001822 <HAL_SPI_RxCpltCallback+0x1ee>
				if (BOARD_NUMBER == 1)
 8001792:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d145      	bne.n	8001826 <HAL_SPI_RxCpltCallback+0x1f2>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 800179a:	4b5b      	ldr	r3, [pc, #364]	; (8001908 <HAL_SPI_RxCpltCallback+0x2d4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	4b5a      	ldr	r3, [pc, #360]	; (800190c <HAL_SPI_RxCpltCallback+0x2d8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	fb12 f303 	smulbb	r3, r2, r3
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b0:	4957      	ldr	r1, [pc, #348]	; (8001910 <HAL_SPI_RxCpltCallback+0x2dc>)
 80017b2:	4858      	ldr	r0, [pc, #352]	; (8001914 <HAL_SPI_RxCpltCallback+0x2e0>)
 80017b4:	f005 f911 	bl	80069da <HAL_SPI_Receive>
				break;
 80017b8:	e035      	b.n	8001826 <HAL_SPI_RxCpltCallback+0x1f2>
				if (BOARD_NUMBER == 2)
 80017ba:	4b52      	ldr	r3, [pc, #328]	; (8001904 <HAL_SPI_RxCpltCallback+0x2d0>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d10f      	bne.n	80017e2 <HAL_SPI_RxCpltCallback+0x1ae>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 80017c2:	4b51      	ldr	r3, [pc, #324]	; (8001908 <HAL_SPI_RxCpltCallback+0x2d4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_SPI_RxCpltCallback+0x2d8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	fb12 f303 	smulbb	r3, r2, r3
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d8:	494d      	ldr	r1, [pc, #308]	; (8001910 <HAL_SPI_RxCpltCallback+0x2dc>)
 80017da:	484e      	ldr	r0, [pc, #312]	; (8001914 <HAL_SPI_RxCpltCallback+0x2e0>)
 80017dc:	f005 f8fd 	bl	80069da <HAL_SPI_Receive>
				break;
 80017e0:	e022      	b.n	8001828 <HAL_SPI_RxCpltCallback+0x1f4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 80017e2:	4b49      	ldr	r3, [pc, #292]	; (8001908 <HAL_SPI_RxCpltCallback+0x2d4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	4b48      	ldr	r3, [pc, #288]	; (800190c <HAL_SPI_RxCpltCallback+0x2d8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	fb12 f303 	smulbb	r3, r2, r3
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f8:	4947      	ldr	r1, [pc, #284]	; (8001918 <HAL_SPI_RxCpltCallback+0x2e4>)
 80017fa:	4846      	ldr	r0, [pc, #280]	; (8001914 <HAL_SPI_RxCpltCallback+0x2e0>)
 80017fc:	f005 f8ed 	bl	80069da <HAL_SPI_Receive>
				break;
 8001800:	e012      	b.n	8001828 <HAL_SPI_RxCpltCallback+0x1f4>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b40      	ldr	r3, [pc, #256]	; (800190c <HAL_SPI_RxCpltCallback+0x2d8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	fb12 f303 	smulbb	r3, r2, r3
 8001812:	b29a      	uxth	r2, r3
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	493d      	ldr	r1, [pc, #244]	; (8001910 <HAL_SPI_RxCpltCallback+0x2dc>)
 800181a:	483e      	ldr	r0, [pc, #248]	; (8001914 <HAL_SPI_RxCpltCallback+0x2e0>)
 800181c:	f005 f8dd 	bl	80069da <HAL_SPI_Receive>
				break;
 8001820:	e002      	b.n	8001828 <HAL_SPI_RxCpltCallback+0x1f4>
				break;
 8001822:	bf00      	nop
 8001824:	e09b      	b.n	800195e <HAL_SPI_RxCpltCallback+0x32a>
				break;
 8001826:	bf00      	nop
			}
			break;
 8001828:	e099      	b.n	800195e <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi_rev_2byte[0] & 0b00000111)
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <HAL_SPI_RxCpltCallback+0x2cc>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	d03e      	beq.n	80018b4 <HAL_SPI_RxCpltCallback+0x280>
 8001836:	2b04      	cmp	r3, #4
 8001838:	dc4c      	bgt.n	80018d4 <HAL_SPI_RxCpltCallback+0x2a0>
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <HAL_SPI_RxCpltCallback+0x210>
 800183e:	2b01      	cmp	r3, #1
 8001840:	d014      	beq.n	800186c <HAL_SPI_RxCpltCallback+0x238>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 8001842:	e047      	b.n	80018d4 <HAL_SPI_RxCpltCallback+0x2a0>
				if (BOARD_NUMBER == 1)
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d145      	bne.n	80018d8 <HAL_SPI_RxCpltCallback+0x2a4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_SPI_RxCpltCallback+0x2d4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	fb12 f303 	smulbb	r3, r2, r3
 800185c:	b29a      	uxth	r2, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	492e      	ldr	r1, [pc, #184]	; (800191c <HAL_SPI_RxCpltCallback+0x2e8>)
 8001864:	482b      	ldr	r0, [pc, #172]	; (8001914 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001866:	f005 f8b8 	bl	80069da <HAL_SPI_Receive>
				break;
 800186a:	e035      	b.n	80018d8 <HAL_SPI_RxCpltCallback+0x2a4>
				if (BOARD_NUMBER == 2)
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_SPI_RxCpltCallback+0x2d0>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d10f      	bne.n	8001894 <HAL_SPI_RxCpltCallback+0x260>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <HAL_SPI_RxCpltCallback+0x2d8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	fb12 f303 	smulbb	r3, r2, r3
 8001884:	b29a      	uxth	r2, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	4924      	ldr	r1, [pc, #144]	; (800191c <HAL_SPI_RxCpltCallback+0x2e8>)
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <HAL_SPI_RxCpltCallback+0x2e0>)
 800188e:	f005 f8a4 	bl	80069da <HAL_SPI_Receive>
				break;
 8001892:	e022      	b.n	80018da <HAL_SPI_RxCpltCallback+0x2a6>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001894:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_SPI_RxCpltCallback+0x2d8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	fb12 f303 	smulbb	r3, r2, r3
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <HAL_SPI_RxCpltCallback+0x2e4>)
 80018ac:	4819      	ldr	r0, [pc, #100]	; (8001914 <HAL_SPI_RxCpltCallback+0x2e0>)
 80018ae:	f005 f894 	bl	80069da <HAL_SPI_Receive>
				break;
 80018b2:	e012      	b.n	80018da <HAL_SPI_RxCpltCallback+0x2a6>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_SPI_RxCpltCallback+0x2d4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_SPI_RxCpltCallback+0x2d8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	fb12 f303 	smulbb	r3, r2, r3
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ca:	4914      	ldr	r1, [pc, #80]	; (800191c <HAL_SPI_RxCpltCallback+0x2e8>)
 80018cc:	4811      	ldr	r0, [pc, #68]	; (8001914 <HAL_SPI_RxCpltCallback+0x2e0>)
 80018ce:	f005 f884 	bl	80069da <HAL_SPI_Receive>
				break;
 80018d2:	e002      	b.n	80018da <HAL_SPI_RxCpltCallback+0x2a6>
				break;
 80018d4:	bf00      	nop
 80018d6:	e042      	b.n	800195e <HAL_SPI_RxCpltCallback+0x32a>
				break;
 80018d8:	bf00      	nop
			}
			break;
 80018da:	e040      	b.n	800195e <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00010000: //Write Registers data
			switch (spi_rev_2byte[0] & 0b00000111)
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_SPI_RxCpltCallback+0x2cc>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d033      	beq.n	8001950 <HAL_SPI_RxCpltCallback+0x31c>
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	dc35      	bgt.n	8001958 <HAL_SPI_RxCpltCallback+0x324>
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d017      	beq.n	8001920 <HAL_SPI_RxCpltCallback+0x2ec>
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d021      	beq.n	8001938 <HAL_SPI_RxCpltCallback+0x304>
				break;
			case 0b00000100: //Broadcast to every board
				Write_Registers_data(1);
				break;
			default:
				break;
 80018f4:	e030      	b.n	8001958 <HAL_SPI_RxCpltCallback+0x324>
 80018f6:	bf00      	nop
 80018f8:	40003800 	.word	0x40003800
 80018fc:	40003c00 	.word	0x40003c00
 8001900:	20070274 	.word	0x20070274
 8001904:	2000001e 	.word	0x2000001e
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004
 8001910:	2001026c 	.word	0x2001026c
 8001914:	20000174 	.word	0x20000174
 8001918:	2000026c 	.word	0x2000026c
 800191c:	2002026c 	.word	0x2002026c
				if (BOARD_NUMBER == 1)
 8001920:	4bac      	ldr	r3, [pc, #688]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d103      	bne.n	8001930 <HAL_SPI_RxCpltCallback+0x2fc>
					Write_Registers_data(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff fd57 	bl	80013dc <Write_Registers_data>
				break;
 800192e:	e014      	b.n	800195a <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff fd53 	bl	80013dc <Write_Registers_data>
				break;
 8001936:	e010      	b.n	800195a <HAL_SPI_RxCpltCallback+0x326>
				if (BOARD_NUMBER == 2)
 8001938:	4ba6      	ldr	r3, [pc, #664]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x5a0>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d103      	bne.n	8001948 <HAL_SPI_RxCpltCallback+0x314>
					Write_Registers_data(1);
 8001940:	2001      	movs	r0, #1
 8001942:	f7ff fd4b 	bl	80013dc <Write_Registers_data>
				break;
 8001946:	e008      	b.n	800195a <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fd47 	bl	80013dc <Write_Registers_data>
				break;
 800194e:	e004      	b.n	800195a <HAL_SPI_RxCpltCallback+0x326>
				Write_Registers_data(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f7ff fd43 	bl	80013dc <Write_Registers_data>
				break;
 8001956:	e000      	b.n	800195a <HAL_SPI_RxCpltCallback+0x326>
				break;
 8001958:	bf00      	nop
			}
			break;
 800195a:	e000      	b.n	800195e <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00011000: //Write partial content of frame buffer
			break;
 800195c:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 800195e:	e11c      	b.n	8001b9a <HAL_SPI_RxCpltCallback+0x566>
	case 0b01000000: //Master SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001960:	4b9d      	ldr	r3, [pc, #628]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001968:	2b28      	cmp	r3, #40	; 0x28
 800196a:	f200 8118 	bhi.w	8001b9e <HAL_SPI_RxCpltCallback+0x56a>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <HAL_SPI_RxCpltCallback+0x340>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	08001a19 	.word	0x08001a19
 8001978:	08001b9f 	.word	0x08001b9f
 800197c:	08001b9f 	.word	0x08001b9f
 8001980:	08001b9f 	.word	0x08001b9f
 8001984:	08001b9f 	.word	0x08001b9f
 8001988:	08001b9f 	.word	0x08001b9f
 800198c:	08001b9f 	.word	0x08001b9f
 8001990:	08001b9f 	.word	0x08001b9f
 8001994:	08001a19 	.word	0x08001a19
 8001998:	08001b9f 	.word	0x08001b9f
 800199c:	08001b9f 	.word	0x08001b9f
 80019a0:	08001b9f 	.word	0x08001b9f
 80019a4:	08001b9f 	.word	0x08001b9f
 80019a8:	08001b9f 	.word	0x08001b9f
 80019ac:	08001b9f 	.word	0x08001b9f
 80019b0:	08001b9f 	.word	0x08001b9f
 80019b4:	08001a19 	.word	0x08001a19
 80019b8:	08001b9f 	.word	0x08001b9f
 80019bc:	08001b9f 	.word	0x08001b9f
 80019c0:	08001b9f 	.word	0x08001b9f
 80019c4:	08001b9f 	.word	0x08001b9f
 80019c8:	08001b9f 	.word	0x08001b9f
 80019cc:	08001b9f 	.word	0x08001b9f
 80019d0:	08001b9f 	.word	0x08001b9f
 80019d4:	08001a19 	.word	0x08001a19
 80019d8:	08001b9f 	.word	0x08001b9f
 80019dc:	08001b9f 	.word	0x08001b9f
 80019e0:	08001b9f 	.word	0x08001b9f
 80019e4:	08001b9f 	.word	0x08001b9f
 80019e8:	08001b9f 	.word	0x08001b9f
 80019ec:	08001b9f 	.word	0x08001b9f
 80019f0:	08001b9f 	.word	0x08001b9f
 80019f4:	08001a19 	.word	0x08001a19
 80019f8:	08001b9f 	.word	0x08001b9f
 80019fc:	08001b9f 	.word	0x08001b9f
 8001a00:	08001b9f 	.word	0x08001b9f
 8001a04:	08001b9f 	.word	0x08001b9f
 8001a08:	08001b9f 	.word	0x08001b9f
 8001a0c:	08001b9f 	.word	0x08001b9f
 8001a10:	08001b9f 	.word	0x08001b9f
 8001a14:	08001a19 	.word	0x08001a19
		{
		case 0b00000000: //Start SPI write data
			break;
 8001a18:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001a1a:	e0c0      	b.n	8001b9e <HAL_SPI_RxCpltCallback+0x56a>
	case 0b10000000: //I2C command
		switch (spi_rev_2byte[0] & 0b00111000)
 8001a1c:	4b6e      	ldr	r3, [pc, #440]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_SPI_RxCpltCallback+0x3fc>
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	f040 80ba 	bne.w	8001ba2 <HAL_SPI_RxCpltCallback+0x56e>
		{
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001a2e:	e000      	b.n	8001a32 <HAL_SPI_RxCpltCallback+0x3fe>
			break;
 8001a30:	bf00      	nop
		}
		break;
 8001a32:	e0b6      	b.n	8001ba2 <HAL_SPI_RxCpltCallback+0x56e>
	case 0b11000000: //SPI flash function & Slave SPI
		switch (spi_rev_2byte[0] & 0b00111000)
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	f000 80aa 	beq.w	8001b96 <HAL_SPI_RxCpltCallback+0x562>
 8001a42:	2b20      	cmp	r3, #32
 8001a44:	f300 80af 	bgt.w	8001ba6 <HAL_SPI_RxCpltCallback+0x572>
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_SPI_RxCpltCallback+0x41e>
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d078      	beq.n	8001b42 <HAL_SPI_RxCpltCallback+0x50e>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001a50:	e0a9      	b.n	8001ba6 <HAL_SPI_RxCpltCallback+0x572>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001a52:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d04c      	beq.n	8001af8 <HAL_SPI_RxCpltCallback+0x4c4>
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	dc69      	bgt.n	8001b36 <HAL_SPI_RxCpltCallback+0x502>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_SPI_RxCpltCallback+0x438>
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d023      	beq.n	8001ab2 <HAL_SPI_RxCpltCallback+0x47e>
				break;
 8001a6a:	e064      	b.n	8001b36 <HAL_SPI_RxCpltCallback+0x502>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	; (8001bdc <HAL_SPI_RxCpltCallback+0x5a8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	fb12 f303 	smulbb	r3, r2, r3
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	4958      	ldr	r1, [pc, #352]	; (8001be4 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001a84:	4858      	ldr	r0, [pc, #352]	; (8001be8 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001a86:	f004 ffa8 	bl	80069da <HAL_SPI_Receive>
				if (BOARD_NUMBER == 1)
 8001a8a:	4b52      	ldr	r3, [pc, #328]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d153      	bne.n	8001b3a <HAL_SPI_RxCpltCallback+0x506>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001a92:	4b51      	ldr	r3, [pc, #324]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fdb2 	bl	8002604 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	484e      	ldr	r0, [pc, #312]	; (8001be4 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001aac:	f000 fc44 	bl	8002338 <write_flash_page>
				break;
 8001ab0:	e043      	b.n	8001b3a <HAL_SPI_RxCpltCallback+0x506>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_SPI_RxCpltCallback+0x5a8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	fb12 f303 	smulbb	r3, r2, r3
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac8:	4946      	ldr	r1, [pc, #280]	; (8001be4 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001aca:	4847      	ldr	r0, [pc, #284]	; (8001be8 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001acc:	f004 ff85 	bl	80069da <HAL_SPI_Receive>
				if (BOARD_NUMBER == 2)
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d132      	bne.n	8001b3e <HAL_SPI_RxCpltCallback+0x50a>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001ad8:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ada:	785b      	ldrb	r3, [r3, #1]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fd8f 	bl	8002604 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	483c      	ldr	r0, [pc, #240]	; (8001be4 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001af2:	f000 fc21 	bl	8002338 <write_flash_page>
				break;
 8001af6:	e022      	b.n	8001b3e <HAL_SPI_RxCpltCallback+0x50a>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_SPI_RxCpltCallback+0x5a8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	fb12 f303 	smulbb	r3, r2, r3
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	4935      	ldr	r1, [pc, #212]	; (8001be4 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b10:	4835      	ldr	r0, [pc, #212]	; (8001be8 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001b12:	f004 ff62 	bl	80069da <HAL_SPI_Receive>
				erase_flash_sector(spi_rev_2byte[1] - 1);
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b18:	785b      	ldrb	r3, [r3, #1]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fd70 	bl	8002604 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	482d      	ldr	r0, [pc, #180]	; (8001be4 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b30:	f000 fc02 	bl	8002338 <write_flash_page>
				break;
 8001b34:	e004      	b.n	8001b40 <HAL_SPI_RxCpltCallback+0x50c>
				break;
 8001b36:	bf00      	nop
 8001b38:	e02e      	b.n	8001b98 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001b3a:	bf00      	nop
 8001b3c:	e02c      	b.n	8001b98 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001b3e:	bf00      	nop
			break;
 8001b40:	e02a      	b.n	8001b98 <HAL_SPI_RxCpltCallback+0x564>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d014      	beq.n	8001b78 <HAL_SPI_RxCpltCallback+0x544>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	dc1d      	bgt.n	8001b8e <HAL_SPI_RxCpltCallback+0x55a>
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_SPI_RxCpltCallback+0x526>
 8001b56:	2b01      	cmp	r3, #1
				break;
 8001b58:	e01c      	b.n	8001b94 <HAL_SPI_RxCpltCallback+0x560>
				if (BOARD_NUMBER == 1)
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d117      	bne.n	8001b92 <HAL_SPI_RxCpltCallback+0x55e>
					reset_flash_software();
 8001b62:	f000 fe25 	bl	80027b0 <reset_flash_software>
					read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b72:	f000 fcb1 	bl	80024d8 <read_flash_page>
				break;
 8001b76:	e00c      	b.n	8001b92 <HAL_SPI_RxCpltCallback+0x55e>
				reset_flash_software();
 8001b78:	f000 fe1a 	bl	80027b0 <reset_flash_software>
				read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b7e:	785b      	ldrb	r3, [r3, #1]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	4817      	ldr	r0, [pc, #92]	; (8001be4 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b88:	f000 fca6 	bl	80024d8 <read_flash_page>
				break;
 8001b8c:	e002      	b.n	8001b94 <HAL_SPI_RxCpltCallback+0x560>
				break;
 8001b8e:	bf00      	nop
 8001b90:	e002      	b.n	8001b98 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001b92:	bf00      	nop
			break;
 8001b94:	e000      	b.n	8001b98 <HAL_SPI_RxCpltCallback+0x564>
			break;
 8001b96:	bf00      	nop
		break;
 8001b98:	e005      	b.n	8001ba6 <HAL_SPI_RxCpltCallback+0x572>
		break;
 8001b9a:	bf00      	nop
 8001b9c:	e004      	b.n	8001ba8 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001b9e:	bf00      	nop
 8001ba0:	e002      	b.n	8001ba8 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001ba2:	bf00      	nop
 8001ba4:	e000      	b.n	8001ba8 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001ba6:	bf00      	nop
	}
	// USB command: ID
	switch (spi_rev_2byte[0] & 0b00000111)
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_SPI_RxCpltCallback+0x586>
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d002      	beq.n	8001bbe <HAL_SPI_RxCpltCallback+0x58a>
	case 0b00000000: //Command for DIP switch ID = 00
		break;
	case 0b00000001: //Command for DIP switch ID = 01
		break;
	default: //Broadcast to every board
		break;
 8001bb8:	e002      	b.n	8001bc0 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001bba:	bf00      	nop
 8001bbc:	e000      	b.n	8001bc0 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001bbe:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4905      	ldr	r1, [pc, #20]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bc4:	4808      	ldr	r0, [pc, #32]	; (8001be8 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001bc6:	f005 fa4b 	bl	8007060 <HAL_SPI_Receive_IT>
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000001e 	.word	0x2000001e
 8001bd8:	20070274 	.word	0x20070274
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004
 8001be4:	2000026c 	.word	0x2000026c
 8001be8:	20000174 	.word	0x20000174

08001bec <display_panel>:

void display_panel(uint8_t *frame_buf)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	int num_ones = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <display_panel+0xe4>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <display_panel+0xe8>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 12; i++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
 8001c10:	e00d      	b.n	8001c2e <display_panel+0x42>
	{
		if (Pixel_Mapping_one & (1 << i))
 8001c12:	897a      	ldrh	r2, [r7, #10]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	fa42 f303 	asr.w	r3, r2, r3
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <display_panel+0x3c>
		{
			num_ones++;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	623b      	str	r3, [r7, #32]
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	2b0b      	cmp	r3, #11
 8001c32:	ddee      	ble.n	8001c12 <display_panel+0x26>
		}
	}

	int frame_buf_count = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
	int Pixel_Mapping_one_count = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
	int c = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	e034      	b.n	8001cb0 <display_panel+0xc4>
	{
		Pixel_Mapping_one_count = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
		c = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 12; j++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e022      	b.n	8001c9a <display_panel+0xae>
		{
			if (Pixel_Mapping_one & (1 << j))
 8001c54:	897a      	ldrh	r2, [r7, #10]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	fa42 f303 	asr.w	r3, r2, r3
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d014      	beq.n	8001c8e <display_panel+0xa2>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4413      	add	r3, r2
 8001c6a:	61fb      	str	r3, [r7, #28]
				image_arr_rgb888[frame_buf_count] = frame_buf[i + c];
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4413      	add	r3, r2
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	7819      	ldrb	r1, [r3, #0]
 8001c7a:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <display_panel+0xec>)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	4413      	add	r3, r2
 8001c80:	460a      	mov	r2, r1
 8001c82:	701a      	strb	r2, [r3, #0]
				c++;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
				Pixel_Mapping_one_count = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
			}
			Pixel_Mapping_one_count++;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
		for (int j = 0; j < 12; j++)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3301      	adds	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b0b      	cmp	r3, #11
 8001c9e:	ddd9      	ble.n	8001c54 <display_panel+0x68>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	4413      	add	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <display_panel+0xf0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <display_panel+0xf4>)
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fb03 f202 	mul.w	r2, r3, r2
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d8c1      	bhi.n	8001c46 <display_panel+0x5a>
	}
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	372c      	adds	r7, #44	; 0x2c
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	2000001c 	.word	0x2000001c
 8001cd4:	2000001d 	.word	0x2000001d
 8001cd8:	20040270 	.word	0x20040270
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <read_flash_SR>:

/*====================================flash function begin====================================*/
uint8_t read_flash_SR()
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	uint8_t dat[1] = {0x00};
 8001cea:	2300      	movs	r3, #0
 8001cec:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	480e      	ldr	r0, [pc, #56]	; (8001d30 <read_flash_SR+0x4c>)
 8001cf6:	f002 fc65 	bl	80045c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x05}, 1, 1000);
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	703b      	strb	r3, [r7, #0]
 8001cfe:	4639      	mov	r1, r7
 8001d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d04:	2201      	movs	r2, #1
 8001d06:	480b      	ldr	r0, [pc, #44]	; (8001d34 <read_flash_SR+0x50>)
 8001d08:	f004 fcf9 	bl	80066fe <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)dat, 1, 1000);
 8001d0c:	1d39      	adds	r1, r7, #4
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	2201      	movs	r2, #1
 8001d14:	4807      	ldr	r0, [pc, #28]	; (8001d34 <read_flash_SR+0x50>)
 8001d16:	f004 fe60 	bl	80069da <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d20:	4803      	ldr	r0, [pc, #12]	; (8001d30 <read_flash_SR+0x4c>)
 8001d22:	f002 fc4f 	bl	80045c4 <HAL_GPIO_WritePin>

	return dat[0];
 8001d26:	793b      	ldrb	r3, [r7, #4]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	48000400 	.word	0x48000400
 8001d34:	20000110 	.word	0x20000110

08001d38 <flash_wait_nobusy>:

void flash_wait_nobusy(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
    while(((read_flash_SR()) & 0x01)==0x01);
 8001d3c:	bf00      	nop
 8001d3e:	f7ff ffd1 	bl	8001ce4 <read_flash_SR>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d0f8      	beq.n	8001d3e <flash_wait_nobusy+0x6>
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <mode_init>:
		delay_us(10);

		flash_wait_nobusy();
	}
}*/
void mode_init(){
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	e00f      	b.n	8001d80 <mode_init+0x2c>
		Mode_config[i*2]=i;//picture_id
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	b2d1      	uxtb	r1, r2
 8001d68:	4ac4      	ldr	r2, [pc, #784]	; (800207c <mode_init+0x328>)
 8001d6a:	54d1      	strb	r1, [r2, r3]
		Mode_config[i*2+1]=i;//picture_delay_time
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	3301      	adds	r3, #1
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	b2d1      	uxtb	r1, r2
 8001d76:	4ac1      	ldr	r2, [pc, #772]	; (800207c <mode_init+0x328>)
 8001d78:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b6e      	cmp	r3, #110	; 0x6e
 8001d84:	ddec      	ble.n	8001d60 <mode_init+0xc>
	}
	Mode_config[Max_pic_per_mode*(Max_mode_num-1)*2]=0;
 8001d86:	4bbd      	ldr	r3, [pc, #756]	; (800207c <mode_init+0x328>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	//test mode 1
	Mode_config[0]=0;
 8001d8e:	4bbb      	ldr	r3, [pc, #748]	; (800207c <mode_init+0x328>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
	Mode_config[1]=1;
 8001d94:	4bb9      	ldr	r3, [pc, #740]	; (800207c <mode_init+0x328>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	705a      	strb	r2, [r3, #1]
	Mode_config[2]=1;
 8001d9a:	4bb8      	ldr	r3, [pc, #736]	; (800207c <mode_init+0x328>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	709a      	strb	r2, [r3, #2]
	Mode_config[3]=1;
 8001da0:	4bb6      	ldr	r3, [pc, #728]	; (800207c <mode_init+0x328>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	70da      	strb	r2, [r3, #3]
	Mode_config[4]=255;
 8001da6:	4bb5      	ldr	r3, [pc, #724]	; (800207c <mode_init+0x328>)
 8001da8:	22ff      	movs	r2, #255	; 0xff
 8001daa:	711a      	strb	r2, [r3, #4]
	Mode_config[5]=1;
 8001dac:	4bb3      	ldr	r3, [pc, #716]	; (800207c <mode_init+0x328>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	715a      	strb	r2, [r3, #5]
	Mode_config[6]=255;
 8001db2:	4bb2      	ldr	r3, [pc, #712]	; (800207c <mode_init+0x328>)
 8001db4:	22ff      	movs	r2, #255	; 0xff
 8001db6:	719a      	strb	r2, [r3, #6]
	Mode_config[7]=1;
 8001db8:	4bb0      	ldr	r3, [pc, #704]	; (800207c <mode_init+0x328>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	71da      	strb	r2, [r3, #7]
	Mode_config[8]=255;
 8001dbe:	4baf      	ldr	r3, [pc, #700]	; (800207c <mode_init+0x328>)
 8001dc0:	22ff      	movs	r2, #255	; 0xff
 8001dc2:	721a      	strb	r2, [r3, #8]
	Mode_config[9]=1;
 8001dc4:	4bad      	ldr	r3, [pc, #692]	; (800207c <mode_init+0x328>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	725a      	strb	r2, [r3, #9]
	//test mode 2
	Mode_config[10]=0;
 8001dca:	4bac      	ldr	r3, [pc, #688]	; (800207c <mode_init+0x328>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	729a      	strb	r2, [r3, #10]
	Mode_config[11]=4;
 8001dd0:	4baa      	ldr	r3, [pc, #680]	; (800207c <mode_init+0x328>)
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	72da      	strb	r2, [r3, #11]
	Mode_config[12]=1;
 8001dd6:	4ba9      	ldr	r3, [pc, #676]	; (800207c <mode_init+0x328>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	731a      	strb	r2, [r3, #12]
	Mode_config[13]=4;
 8001ddc:	4ba7      	ldr	r3, [pc, #668]	; (800207c <mode_init+0x328>)
 8001dde:	2204      	movs	r2, #4
 8001de0:	735a      	strb	r2, [r3, #13]
	Mode_config[14]=255;
 8001de2:	4ba6      	ldr	r3, [pc, #664]	; (800207c <mode_init+0x328>)
 8001de4:	22ff      	movs	r2, #255	; 0xff
 8001de6:	739a      	strb	r2, [r3, #14]
	Mode_config[15]=1;
 8001de8:	4ba4      	ldr	r3, [pc, #656]	; (800207c <mode_init+0x328>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	73da      	strb	r2, [r3, #15]
	Mode_config[16]=255;
 8001dee:	4ba3      	ldr	r3, [pc, #652]	; (800207c <mode_init+0x328>)
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	741a      	strb	r2, [r3, #16]
	Mode_config[17]=1;
 8001df4:	4ba1      	ldr	r3, [pc, #644]	; (800207c <mode_init+0x328>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	745a      	strb	r2, [r3, #17]
	Mode_config[18]=255;
 8001dfa:	4ba0      	ldr	r3, [pc, #640]	; (800207c <mode_init+0x328>)
 8001dfc:	22ff      	movs	r2, #255	; 0xff
 8001dfe:	749a      	strb	r2, [r3, #18]
	Mode_config[19]=1;
 8001e00:	4b9e      	ldr	r3, [pc, #632]	; (800207c <mode_init+0x328>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	74da      	strb	r2, [r3, #19]
	//test mode 3
	Mode_config[20]=2;
 8001e06:	4b9d      	ldr	r3, [pc, #628]	; (800207c <mode_init+0x328>)
 8001e08:	2202      	movs	r2, #2
 8001e0a:	751a      	strb	r2, [r3, #20]
	Mode_config[21]=1;
 8001e0c:	4b9b      	ldr	r3, [pc, #620]	; (800207c <mode_init+0x328>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	755a      	strb	r2, [r3, #21]
	Mode_config[22]=3;
 8001e12:	4b9a      	ldr	r3, [pc, #616]	; (800207c <mode_init+0x328>)
 8001e14:	2203      	movs	r2, #3
 8001e16:	759a      	strb	r2, [r3, #22]
	Mode_config[23]=1;
 8001e18:	4b98      	ldr	r3, [pc, #608]	; (800207c <mode_init+0x328>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	75da      	strb	r2, [r3, #23]
	Mode_config[24]=4;
 8001e1e:	4b97      	ldr	r3, [pc, #604]	; (800207c <mode_init+0x328>)
 8001e20:	2204      	movs	r2, #4
 8001e22:	761a      	strb	r2, [r3, #24]
	Mode_config[25]=1;
 8001e24:	4b95      	ldr	r3, [pc, #596]	; (800207c <mode_init+0x328>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	765a      	strb	r2, [r3, #25]
	Mode_config[26]=5;
 8001e2a:	4b94      	ldr	r3, [pc, #592]	; (800207c <mode_init+0x328>)
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	769a      	strb	r2, [r3, #26]
	Mode_config[27]=1;
 8001e30:	4b92      	ldr	r3, [pc, #584]	; (800207c <mode_init+0x328>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	76da      	strb	r2, [r3, #27]
	Mode_config[28]=255;
 8001e36:	4b91      	ldr	r3, [pc, #580]	; (800207c <mode_init+0x328>)
 8001e38:	22ff      	movs	r2, #255	; 0xff
 8001e3a:	771a      	strb	r2, [r3, #28]
	Mode_config[29]=1;
 8001e3c:	4b8f      	ldr	r3, [pc, #572]	; (800207c <mode_init+0x328>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	775a      	strb	r2, [r3, #29]
	//test mode 3
	Mode_config[30]=2;
 8001e42:	4b8e      	ldr	r3, [pc, #568]	; (800207c <mode_init+0x328>)
 8001e44:	2202      	movs	r2, #2
 8001e46:	779a      	strb	r2, [r3, #30]
	Mode_config[31]=4;
 8001e48:	4b8c      	ldr	r3, [pc, #560]	; (800207c <mode_init+0x328>)
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	77da      	strb	r2, [r3, #31]
	Mode_config[32]=3;
 8001e4e:	4b8b      	ldr	r3, [pc, #556]	; (800207c <mode_init+0x328>)
 8001e50:	2203      	movs	r2, #3
 8001e52:	f883 2020 	strb.w	r2, [r3, #32]
	Mode_config[33]=4;
 8001e56:	4b89      	ldr	r3, [pc, #548]	; (800207c <mode_init+0x328>)
 8001e58:	2204      	movs	r2, #4
 8001e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Mode_config[34]=4;
 8001e5e:	4b87      	ldr	r3, [pc, #540]	; (800207c <mode_init+0x328>)
 8001e60:	2204      	movs	r2, #4
 8001e62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Mode_config[35]=4;
 8001e66:	4b85      	ldr	r3, [pc, #532]	; (800207c <mode_init+0x328>)
 8001e68:	2204      	movs	r2, #4
 8001e6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Mode_config[36]=5;
 8001e6e:	4b83      	ldr	r3, [pc, #524]	; (800207c <mode_init+0x328>)
 8001e70:	2205      	movs	r2, #5
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Mode_config[37]=4;
 8001e76:	4b81      	ldr	r3, [pc, #516]	; (800207c <mode_init+0x328>)
 8001e78:	2204      	movs	r2, #4
 8001e7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Mode_config[38]=255;
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	; (800207c <mode_init+0x328>)
 8001e80:	22ff      	movs	r2, #255	; 0xff
 8001e82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Mode_config[39]=1;
 8001e86:	4b7d      	ldr	r3, [pc, #500]	; (800207c <mode_init+0x328>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//test mode 4
	Mode_config[40]=6;
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <mode_init+0x328>)
 8001e90:	2206      	movs	r2, #6
 8001e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Mode_config[41]=1;
 8001e96:	4b79      	ldr	r3, [pc, #484]	; (800207c <mode_init+0x328>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Mode_config[42]=7;
 8001e9e:	4b77      	ldr	r3, [pc, #476]	; (800207c <mode_init+0x328>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Mode_config[43]=1;
 8001ea6:	4b75      	ldr	r3, [pc, #468]	; (800207c <mode_init+0x328>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Mode_config[44]=8;
 8001eae:	4b73      	ldr	r3, [pc, #460]	; (800207c <mode_init+0x328>)
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Mode_config[45]=1;
 8001eb6:	4b71      	ldr	r3, [pc, #452]	; (800207c <mode_init+0x328>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Mode_config[46]=9;
 8001ebe:	4b6f      	ldr	r3, [pc, #444]	; (800207c <mode_init+0x328>)
 8001ec0:	2209      	movs	r2, #9
 8001ec2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Mode_config[47]=1;
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	; (800207c <mode_init+0x328>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Mode_config[48]=10;
 8001ece:	4b6b      	ldr	r3, [pc, #428]	; (800207c <mode_init+0x328>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Mode_config[49]=1;
 8001ed6:	4b69      	ldr	r3, [pc, #420]	; (800207c <mode_init+0x328>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	//test mode 5
	Mode_config[50]=6;
 8001ede:	4b67      	ldr	r3, [pc, #412]	; (800207c <mode_init+0x328>)
 8001ee0:	2206      	movs	r2, #6
 8001ee2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Mode_config[51]=4;
 8001ee6:	4b65      	ldr	r3, [pc, #404]	; (800207c <mode_init+0x328>)
 8001ee8:	2204      	movs	r2, #4
 8001eea:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Mode_config[52]=7;
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <mode_init+0x328>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Mode_config[53]=4;
 8001ef6:	4b61      	ldr	r3, [pc, #388]	; (800207c <mode_init+0x328>)
 8001ef8:	2204      	movs	r2, #4
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	Mode_config[54]=8;
 8001efe:	4b5f      	ldr	r3, [pc, #380]	; (800207c <mode_init+0x328>)
 8001f00:	2208      	movs	r2, #8
 8001f02:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Mode_config[55]=4;
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <mode_init+0x328>)
 8001f08:	2204      	movs	r2, #4
 8001f0a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Mode_config[56]=9;
 8001f0e:	4b5b      	ldr	r3, [pc, #364]	; (800207c <mode_init+0x328>)
 8001f10:	2209      	movs	r2, #9
 8001f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Mode_config[57]=4;
 8001f16:	4b59      	ldr	r3, [pc, #356]	; (800207c <mode_init+0x328>)
 8001f18:	2204      	movs	r2, #4
 8001f1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Mode_config[58]=10;
 8001f1e:	4b57      	ldr	r3, [pc, #348]	; (800207c <mode_init+0x328>)
 8001f20:	220a      	movs	r2, #10
 8001f22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Mode_config[59]=4;
 8001f26:	4b55      	ldr	r3, [pc, #340]	; (800207c <mode_init+0x328>)
 8001f28:	2204      	movs	r2, #4
 8001f2a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//test mode 6
	Mode_config[60]=11;
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <mode_init+0x328>)
 8001f30:	220b      	movs	r2, #11
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Mode_config[61]=1;
 8001f36:	4b51      	ldr	r3, [pc, #324]	; (800207c <mode_init+0x328>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Mode_config[62]=12;
 8001f3e:	4b4f      	ldr	r3, [pc, #316]	; (800207c <mode_init+0x328>)
 8001f40:	220c      	movs	r2, #12
 8001f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Mode_config[63]=1;
 8001f46:	4b4d      	ldr	r3, [pc, #308]	; (800207c <mode_init+0x328>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Mode_config[64]=255;
 8001f4e:	4b4b      	ldr	r3, [pc, #300]	; (800207c <mode_init+0x328>)
 8001f50:	22ff      	movs	r2, #255	; 0xff
 8001f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Mode_config[65]=1;
 8001f56:	4b49      	ldr	r3, [pc, #292]	; (800207c <mode_init+0x328>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Mode_config[66]=255;
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <mode_init+0x328>)
 8001f60:	22ff      	movs	r2, #255	; 0xff
 8001f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Mode_config[67]=1;
 8001f66:	4b45      	ldr	r3, [pc, #276]	; (800207c <mode_init+0x328>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Mode_config[68]=255;
 8001f6e:	4b43      	ldr	r3, [pc, #268]	; (800207c <mode_init+0x328>)
 8001f70:	22ff      	movs	r2, #255	; 0xff
 8001f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Mode_config[69]=1;
 8001f76:	4b41      	ldr	r3, [pc, #260]	; (800207c <mode_init+0x328>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	//test mode 7
	Mode_config[70]=11;
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	; (800207c <mode_init+0x328>)
 8001f80:	220b      	movs	r2, #11
 8001f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Mode_config[71]=4;
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <mode_init+0x328>)
 8001f88:	2204      	movs	r2, #4
 8001f8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	Mode_config[72]=12;
 8001f8e:	4b3b      	ldr	r3, [pc, #236]	; (800207c <mode_init+0x328>)
 8001f90:	220c      	movs	r2, #12
 8001f92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Mode_config[73]=4;
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <mode_init+0x328>)
 8001f98:	2204      	movs	r2, #4
 8001f9a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Mode_config[74]=255;
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <mode_init+0x328>)
 8001fa0:	22ff      	movs	r2, #255	; 0xff
 8001fa2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Mode_config[75]=1;
 8001fa6:	4b35      	ldr	r3, [pc, #212]	; (800207c <mode_init+0x328>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Mode_config[76]=255;
 8001fae:	4b33      	ldr	r3, [pc, #204]	; (800207c <mode_init+0x328>)
 8001fb0:	22ff      	movs	r2, #255	; 0xff
 8001fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Mode_config[77]=1;
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <mode_init+0x328>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Mode_config[78]=255;
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <mode_init+0x328>)
 8001fc0:	22ff      	movs	r2, #255	; 0xff
 8001fc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Mode_config[79]=1;
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <mode_init+0x328>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	//test mode 8
	Mode_config[80]=13;
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <mode_init+0x328>)
 8001fd0:	220d      	movs	r2, #13
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Mode_config[81]=1;
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <mode_init+0x328>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Mode_config[82]=14;
 8001fde:	4b27      	ldr	r3, [pc, #156]	; (800207c <mode_init+0x328>)
 8001fe0:	220e      	movs	r2, #14
 8001fe2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Mode_config[83]=1;
 8001fe6:	4b25      	ldr	r3, [pc, #148]	; (800207c <mode_init+0x328>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Mode_config[84]=255;
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <mode_init+0x328>)
 8001ff0:	22ff      	movs	r2, #255	; 0xff
 8001ff2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Mode_config[85]=1;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <mode_init+0x328>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Mode_config[86]=255;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	; (800207c <mode_init+0x328>)
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Mode_config[87]=1;
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <mode_init+0x328>)
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Mode_config[88]=255;
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <mode_init+0x328>)
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	Mode_config[89]=1;
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <mode_init+0x328>)
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//test mode 8
	Mode_config[90]=13;
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <mode_init+0x328>)
 8002020:	220d      	movs	r2, #13
 8002022:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	Mode_config[91]=4;
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <mode_init+0x328>)
 8002028:	2204      	movs	r2, #4
 800202a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Mode_config[92]=14;
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <mode_init+0x328>)
 8002030:	220e      	movs	r2, #14
 8002032:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	Mode_config[93]=4;
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <mode_init+0x328>)
 8002038:	2204      	movs	r2, #4
 800203a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	Mode_config[94]=255;
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <mode_init+0x328>)
 8002040:	22ff      	movs	r2, #255	; 0xff
 8002042:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Mode_config[95]=1;
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <mode_init+0x328>)
 8002048:	2201      	movs	r2, #1
 800204a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	Mode_config[96]=255;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <mode_init+0x328>)
 8002050:	22ff      	movs	r2, #255	; 0xff
 8002052:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	Mode_config[97]=1;
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <mode_init+0x328>)
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	Mode_config[98]=255;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <mode_init+0x328>)
 8002060:	22ff      	movs	r2, #255	; 0xff
 8002062:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	Mode_config[99]=1;
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <mode_init+0x328>)
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20070278 	.word	0x20070278

08002080 <write_flash_config>:
void write_flash_config()
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0
	//content_size�???0=16kb, 1=32kb, 2=32kb, 3=64kb
	int divide_value = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64; //divide_value=4
 800208a:	4b60      	ldr	r3, [pc, #384]	; (800220c <write_flash_config+0x18c>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <write_flash_config+0x18>
 8002092:	2304      	movs	r3, #4
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002096:	e00c      	b.n	80020b2 <write_flash_config+0x32>
	else if(content_size==1) divide_value=256/128; //divide_value=2
 8002098:	4b5c      	ldr	r3, [pc, #368]	; (800220c <write_flash_config+0x18c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d102      	bne.n	80020a6 <write_flash_config+0x26>
 80020a0:	2302      	movs	r3, #2
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a4:	e005      	b.n	80020b2 <write_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;//divide_value=1
 80020a6:	4b59      	ldr	r3, [pc, #356]	; (800220c <write_flash_config+0x18c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d101      	bne.n	80020b2 <write_flash_config+0x32>
 80020ae:	2301      	movs	r3, #1
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int image_id = 31;
 80020b2:	231f      	movs	r3, #31
 80020b4:	623b      	str	r3, [r7, #32]
	erase_flash_sector(image_id);
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 faa2 	bl	8002604 <erase_flash_sector>

	int image_id_H = image_id / divide_value;
 80020c0:	6a3a      	ldr	r2, [r7, #32]
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80020c8:	61fb      	str	r3, [r7, #28]
	int image_id_L = image_id % divide_value;
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ce:	fb93 f2f2 	sdiv	r2, r3, r2
 80020d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020d4:	fb01 f202 	mul.w	r2, r1, r2
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
	int count = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80020e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	e076      	b.n	80021e2 <write_flash_config+0x162>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80020f4:	2200      	movs	r2, #0
 80020f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020fa:	4845      	ldr	r0, [pc, #276]	; (8002210 <write_flash_config+0x190>)
 80020fc:	f002 fa62 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002100:	2306      	movs	r3, #6
 8002102:	753b      	strb	r3, [r7, #20]
 8002104:	f107 0114 	add.w	r1, r7, #20
 8002108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210c:	2201      	movs	r2, #1
 800210e:	4841      	ldr	r0, [pc, #260]	; (8002214 <write_flash_config+0x194>)
 8002110:	f004 faf5 	bl	80066fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002114:	2201      	movs	r2, #1
 8002116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800211a:	483d      	ldr	r0, [pc, #244]	; (8002210 <write_flash_config+0x190>)
 800211c:	f002 fa52 	bl	80045c4 <HAL_GPIO_WritePin>
		delay_us(10);
 8002120:	200a      	movs	r0, #10
 8002122:	f000 fd67 	bl	8002bf4 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800212c:	4838      	ldr	r0, [pc, #224]	; (8002210 <write_flash_config+0x190>)
 800212e:	f002 fa49 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 8002132:	2302      	movs	r3, #2
 8002134:	743b      	strb	r3, [r7, #16]
 8002136:	f107 0110 	add.w	r1, r7, #16
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	2201      	movs	r2, #1
 8002140:	4834      	ldr	r0, [pc, #208]	; (8002214 <write_flash_config+0x194>)
 8002142:	f004 fadc 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	733b      	strb	r3, [r7, #12]
 800214c:	f107 010c 	add.w	r1, r7, #12
 8002150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002154:	2201      	movs	r2, #1
 8002156:	482f      	ldr	r0, [pc, #188]	; (8002214 <write_flash_config+0x194>)
 8002158:	f004 fad1 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	b2db      	uxtb	r3, r3
 8002160:	723b      	strb	r3, [r7, #8]
 8002162:	f107 0108 	add.w	r1, r7, #8
 8002166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216a:	2201      	movs	r2, #1
 800216c:	4829      	ldr	r0, [pc, #164]	; (8002214 <write_flash_config+0x194>)
 800216e:	f004 fac6 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002172:	2300      	movs	r3, #0
 8002174:	713b      	strb	r3, [r7, #4]
 8002176:	1d39      	adds	r1, r7, #4
 8002178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217c:	2201      	movs	r2, #1
 800217e:	4825      	ldr	r0, [pc, #148]	; (8002214 <write_flash_config+0x194>)
 8002180:	f004 fabd 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &Mode_config[0], Max_pic_per_mode*Max_mode_num*2, 1000);
 8002184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002188:	226e      	movs	r2, #110	; 0x6e
 800218a:	4923      	ldr	r1, [pc, #140]	; (8002218 <write_flash_config+0x198>)
 800218c:	4821      	ldr	r0, [pc, #132]	; (8002214 <write_flash_config+0x194>)
 800218e:	f004 fab6 	bl	80066fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002198:	481d      	ldr	r0, [pc, #116]	; (8002210 <write_flash_config+0x190>)
 800219a:	f002 fa13 	bl	80045c4 <HAL_GPIO_WritePin>
		delay_us(10);
 800219e:	200a      	movs	r0, #10
 80021a0:	f000 fd28 	bl	8002bf4 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021aa:	4819      	ldr	r0, [pc, #100]	; (8002210 <write_flash_config+0x190>)
 80021ac:	f002 fa0a 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 80021b0:	2304      	movs	r3, #4
 80021b2:	703b      	strb	r3, [r7, #0]
 80021b4:	4639      	mov	r1, r7
 80021b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ba:	2201      	movs	r2, #1
 80021bc:	4815      	ldr	r0, [pc, #84]	; (8002214 <write_flash_config+0x194>)
 80021be:	f004 fa9e 	bl	80066fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c8:	4811      	ldr	r0, [pc, #68]	; (8002210 <write_flash_config+0x190>)
 80021ca:	f002 f9fb 	bl	80045c4 <HAL_GPIO_WritePin>
		delay_us(1000);
 80021ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d2:	f000 fd0f 	bl	8002bf4 <delay_us>
		count++;
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	3301      	adds	r3, #1
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3301      	adds	r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	3301      	adds	r3, #1
 80021e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ec:	fb91 f2f2 	sdiv	r2, r1, r2
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	4293      	cmp	r3, r2
 80021fa:	f4ff af7b 	bcc.w	80020f4 <write_flash_config+0x74>
	}

	flash_wait_nobusy();
 80021fe:	f7ff fd9b 	bl	8001d38 <flash_wait_nobusy>
}
 8002202:	bf00      	nop
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000000b 	.word	0x2000000b
 8002210:	48000400 	.word	0x48000400
 8002214:	20000110 	.word	0x20000110
 8002218:	20070278 	.word	0x20070278

0800221c <read_flash_config>:
void read_flash_config()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
	int divide_value = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
	if(content_size==0) divide_value=256/64;
 8002226:	4b40      	ldr	r3, [pc, #256]	; (8002328 <read_flash_config+0x10c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <read_flash_config+0x18>
 800222e:	2304      	movs	r3, #4
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	e00c      	b.n	800224e <read_flash_config+0x32>
	else if(content_size==1) divide_value=256/128;
 8002234:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <read_flash_config+0x10c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d102      	bne.n	8002242 <read_flash_config+0x26>
 800223c:	2302      	movs	r3, #2
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
 8002240:	e005      	b.n	800224e <read_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;
 8002242:	4b39      	ldr	r3, [pc, #228]	; (8002328 <read_flash_config+0x10c>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d101      	bne.n	800224e <read_flash_config+0x32>
 800224a:	2301      	movs	r3, #1
 800224c:	627b      	str	r3, [r7, #36]	; 0x24

	int image_id= 31;
 800224e:	231f      	movs	r3, #31
 8002250:	61fb      	str	r3, [r7, #28]
	int image_id_H = image_id / divide_value;
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	fb92 f3f3 	sdiv	r3, r2, r3
 800225a:	61bb      	str	r3, [r7, #24]
	int image_id_L = image_id % divide_value;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002260:	fb93 f2f2 	sdiv	r2, r3, r2
 8002264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002266:	fb01 f202 	mul.w	r2, r1, r2
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	617b      	str	r3, [r7, #20]
	int count = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	fb92 f3f3 	sdiv	r3, r2, r3
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	e03d      	b.n	8002302 <read_flash_config+0xe6>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800228c:	4827      	ldr	r0, [pc, #156]	; (800232c <read_flash_config+0x110>)
 800228e:	f002 f999 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 8002292:	2303      	movs	r3, #3
 8002294:	733b      	strb	r3, [r7, #12]
 8002296:	f107 010c 	add.w	r1, r7, #12
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	2201      	movs	r2, #1
 80022a0:	4823      	ldr	r0, [pc, #140]	; (8002330 <read_flash_config+0x114>)
 80022a2:	f004 fa2c 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	723b      	strb	r3, [r7, #8]
 80022ac:	f107 0108 	add.w	r1, r7, #8
 80022b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b4:	2201      	movs	r2, #1
 80022b6:	481e      	ldr	r0, [pc, #120]	; (8002330 <read_flash_config+0x114>)
 80022b8:	f004 fa21 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	713b      	strb	r3, [r7, #4]
 80022c2:	1d39      	adds	r1, r7, #4
 80022c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c8:	2201      	movs	r2, #1
 80022ca:	4819      	ldr	r0, [pc, #100]	; (8002330 <read_flash_config+0x114>)
 80022cc:	f004 fa17 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80022d0:	2300      	movs	r3, #0
 80022d2:	703b      	strb	r3, [r7, #0]
 80022d4:	4639      	mov	r1, r7
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	2201      	movs	r2, #1
 80022dc:	4814      	ldr	r0, [pc, #80]	; (8002330 <read_flash_config+0x114>)
 80022de:	f004 fa0e 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &Mode_config[0],  Max_pic_per_mode*Max_mode_num*2, 1000);
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	226e      	movs	r2, #110	; 0x6e
 80022e8:	4912      	ldr	r1, [pc, #72]	; (8002334 <read_flash_config+0x118>)
 80022ea:	4811      	ldr	r0, [pc, #68]	; (8002330 <read_flash_config+0x114>)
 80022ec:	f004 fb75 	bl	80069da <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80022f0:	2201      	movs	r2, #1
 80022f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f6:	480d      	ldr	r0, [pc, #52]	; (800232c <read_flash_config+0x110>)
 80022f8:	f002 f964 	bl	80045c4 <HAL_GPIO_WritePin>
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	3301      	adds	r3, #1
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	4293      	cmp	r3, r2
 800231a:	d3b4      	bcc.n	8002286 <read_flash_config+0x6a>
	}
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3728      	adds	r7, #40	; 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000000b 	.word	0x2000000b
 800232c:	48000400 	.word	0x48000400
 8002330:	20000110 	.word	0x20000110
 8002334:	20070278 	.word	0x20070278

08002338 <write_flash_page>:
void write_flash_page(uint8_t *data, uint8_t image_id)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08e      	sub	sp, #56	; 0x38
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
	if(content_size==0) divide_value=256/64;
 8002348:	4b60      	ldr	r3, [pc, #384]	; (80024cc <write_flash_page+0x194>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <write_flash_page+0x1e>
 8002350:	2304      	movs	r3, #4
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
 8002354:	e00c      	b.n	8002370 <write_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 8002356:	4b5d      	ldr	r3, [pc, #372]	; (80024cc <write_flash_page+0x194>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d102      	bne.n	8002364 <write_flash_page+0x2c>
 800235e:	2302      	movs	r3, #2
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
 8002362:	e005      	b.n	8002370 <write_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <write_flash_page+0x194>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d101      	bne.n	8002370 <write_flash_page+0x38>
 800236c:	2301      	movs	r3, #1
 800236e:	637b      	str	r3, [r7, #52]	; 0x34

	int image_id_H = image_id / divide_value;
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002374:	fb92 f3f3 	sdiv	r3, r2, r3
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
	int image_id_L = image_id % divide_value;
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800237e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002382:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002384:	fb01 f202 	mul.w	r2, r1, r2
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
	int count = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002396:	fb92 f3f3 	sdiv	r3, r2, r3
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a2:	e07e      	b.n	80024a2 <write_flash_page+0x16a>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80023a4:	2200      	movs	r2, #0
 80023a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023aa:	4849      	ldr	r0, [pc, #292]	; (80024d0 <write_flash_page+0x198>)
 80023ac:	f002 f90a 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 80023b0:	2306      	movs	r3, #6
 80023b2:	f887 3020 	strb.w	r3, [r7, #32]
 80023b6:	f107 0120 	add.w	r1, r7, #32
 80023ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023be:	2201      	movs	r2, #1
 80023c0:	4844      	ldr	r0, [pc, #272]	; (80024d4 <write_flash_page+0x19c>)
 80023c2:	f004 f99c 	bl	80066fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023cc:	4840      	ldr	r0, [pc, #256]	; (80024d0 <write_flash_page+0x198>)
 80023ce:	f002 f8f9 	bl	80045c4 <HAL_GPIO_WritePin>
		delay_us(10);
 80023d2:	200a      	movs	r0, #10
 80023d4:	f000 fc0e 	bl	8002bf4 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80023d8:	2200      	movs	r2, #0
 80023da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023de:	483c      	ldr	r0, [pc, #240]	; (80024d0 <write_flash_page+0x198>)
 80023e0:	f002 f8f0 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 80023e4:	2302      	movs	r3, #2
 80023e6:	773b      	strb	r3, [r7, #28]
 80023e8:	f107 011c 	add.w	r1, r7, #28
 80023ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f0:	2201      	movs	r2, #1
 80023f2:	4838      	ldr	r0, [pc, #224]	; (80024d4 <write_flash_page+0x19c>)
 80023f4:	f004 f983 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	763b      	strb	r3, [r7, #24]
 80023fe:	f107 0118 	add.w	r1, r7, #24
 8002402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002406:	2201      	movs	r2, #1
 8002408:	4832      	ldr	r0, [pc, #200]	; (80024d4 <write_flash_page+0x19c>)
 800240a:	f004 f978 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	b2db      	uxtb	r3, r3
 8002412:	753b      	strb	r3, [r7, #20]
 8002414:	f107 0114 	add.w	r1, r7, #20
 8002418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241c:	2201      	movs	r2, #1
 800241e:	482d      	ldr	r0, [pc, #180]	; (80024d4 <write_flash_page+0x19c>)
 8002420:	f004 f96d 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002424:	2300      	movs	r3, #0
 8002426:	743b      	strb	r3, [r7, #16]
 8002428:	f107 0110 	add.w	r1, r7, #16
 800242c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002430:	2201      	movs	r2, #1
 8002432:	4828      	ldr	r0, [pc, #160]	; (80024d4 <write_flash_page+0x19c>)
 8002434:	f004 f963 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &data[count*256], 256, 1000);
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	461a      	mov	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	1899      	adds	r1, r3, r2
 8002442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800244a:	4822      	ldr	r0, [pc, #136]	; (80024d4 <write_flash_page+0x19c>)
 800244c:	f004 f957 	bl	80066fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002450:	2201      	movs	r2, #1
 8002452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002456:	481e      	ldr	r0, [pc, #120]	; (80024d0 <write_flash_page+0x198>)
 8002458:	f002 f8b4 	bl	80045c4 <HAL_GPIO_WritePin>
		delay_us(10);
 800245c:	200a      	movs	r0, #10
 800245e:	f000 fbc9 	bl	8002bf4 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002468:	4819      	ldr	r0, [pc, #100]	; (80024d0 <write_flash_page+0x198>)
 800246a:	f002 f8ab 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 800246e:	2304      	movs	r3, #4
 8002470:	733b      	strb	r3, [r7, #12]
 8002472:	f107 010c 	add.w	r1, r7, #12
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	2201      	movs	r2, #1
 800247c:	4815      	ldr	r0, [pc, #84]	; (80024d4 <write_flash_page+0x19c>)
 800247e:	f004 f93e 	bl	80066fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002482:	2201      	movs	r2, #1
 8002484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002488:	4811      	ldr	r0, [pc, #68]	; (80024d0 <write_flash_page+0x198>)
 800248a:	f002 f89b 	bl	80045c4 <HAL_GPIO_WritePin>
		delay_us(1000);
 800248e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002492:	f000 fbaf 	bl	8002bf4 <delay_us>
		count++;
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	3301      	adds	r3, #1
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	3301      	adds	r3, #1
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	3301      	adds	r3, #1
 80024a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ac:	fb91 f2f2 	sdiv	r2, r1, r2
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	4293      	cmp	r3, r2
 80024ba:	f4ff af73 	bcc.w	80023a4 <write_flash_page+0x6c>
	}

	flash_wait_nobusy();
 80024be:	f7ff fc3b 	bl	8001d38 <flash_wait_nobusy>
}
 80024c2:	bf00      	nop
 80024c4:	3738      	adds	r7, #56	; 0x38
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000000b 	.word	0x2000000b
 80024d0:	48000400 	.word	0x48000400
 80024d4:	20000110 	.word	0x20000110

080024d8 <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 80024e8:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <read_flash_page+0x120>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <read_flash_page+0x1e>
 80024f0:	2304      	movs	r3, #4
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f4:	e00c      	b.n	8002510 <read_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <read_flash_page+0x120>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <read_flash_page+0x2c>
 80024fe:	2302      	movs	r3, #2
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002502:	e005      	b.n	8002510 <read_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8002504:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <read_flash_page+0x120>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d101      	bne.n	8002510 <read_flash_page+0x38>
 800250c:	2301      	movs	r3, #1
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c

	int image_id_H = image_id / divide_value;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	fb92 f3f3 	sdiv	r3, r2, r3
 8002518:	623b      	str	r3, [r7, #32]
	int image_id_L = image_id % divide_value;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002524:	fb01 f202 	mul.w	r2, r1, r2
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	61fb      	str	r3, [r7, #28]
	int count = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	fb92 f3f3 	sdiv	r3, r2, r3
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	e047      	b.n	80025d4 <read_flash_page+0xfc>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002544:	2200      	movs	r2, #0
 8002546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800254a:	482c      	ldr	r0, [pc, #176]	; (80025fc <read_flash_page+0x124>)
 800254c:	f002 f83a 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 8002550:	2303      	movs	r3, #3
 8002552:	763b      	strb	r3, [r7, #24]
 8002554:	f107 0118 	add.w	r1, r7, #24
 8002558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255c:	2201      	movs	r2, #1
 800255e:	4828      	ldr	r0, [pc, #160]	; (8002600 <read_flash_page+0x128>)
 8002560:	f004 f8cd 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	753b      	strb	r3, [r7, #20]
 800256a:	f107 0114 	add.w	r1, r7, #20
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	2201      	movs	r2, #1
 8002574:	4822      	ldr	r0, [pc, #136]	; (8002600 <read_flash_page+0x128>)
 8002576:	f004 f8c2 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	b2db      	uxtb	r3, r3
 800257e:	743b      	strb	r3, [r7, #16]
 8002580:	f107 0110 	add.w	r1, r7, #16
 8002584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002588:	2201      	movs	r2, #1
 800258a:	481d      	ldr	r0, [pc, #116]	; (8002600 <read_flash_page+0x128>)
 800258c:	f004 f8b7 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002590:	2300      	movs	r3, #0
 8002592:	733b      	strb	r3, [r7, #12]
 8002594:	f107 010c 	add.w	r1, r7, #12
 8002598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259c:	2201      	movs	r2, #1
 800259e:	4818      	ldr	r0, [pc, #96]	; (8002600 <read_flash_page+0x128>)
 80025a0:	f004 f8ad 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &data[count*256], 256, 1000);
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	1899      	adds	r1, r3, r2
 80025ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025b6:	4812      	ldr	r0, [pc, #72]	; (8002600 <read_flash_page+0x128>)
 80025b8:	f004 fa0f 	bl	80069da <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80025bc:	2201      	movs	r2, #1
 80025be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025c2:	480e      	ldr	r0, [pc, #56]	; (80025fc <read_flash_page+0x124>)
 80025c4:	f001 fffe 	bl	80045c4 <HAL_GPIO_WritePin>
		count++;
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	3301      	adds	r3, #1
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	3301      	adds	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	3301      	adds	r3, #1
 80025d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025de:	fb91 f2f2 	sdiv	r2, r1, r2
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d3aa      	bcc.n	8002544 <read_flash_page+0x6c>
	}
}
 80025ee:	bf00      	nop
 80025f0:	bf00      	nop
 80025f2:	3730      	adds	r7, #48	; 0x30
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	2000000b 	.word	0x2000000b
 80025fc:	48000400 	.word	0x48000400
 8002600:	20000110 	.word	0x20000110

08002604 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08c      	sub	sp, #48	; 0x30
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
	int divide_value = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8002612:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <erase_flash_sector+0x1a0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <erase_flash_sector+0x1c>
 800261a:	2304      	movs	r3, #4
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261e:	e00c      	b.n	800263a <erase_flash_sector+0x36>
	else if(content_size==1) divide_value=256/128;
 8002620:	4b60      	ldr	r3, [pc, #384]	; (80027a4 <erase_flash_sector+0x1a0>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <erase_flash_sector+0x2a>
 8002628:	2302      	movs	r3, #2
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262c:	e005      	b.n	800263a <erase_flash_sector+0x36>
	else if(content_size==2) divide_value=256/256;
 800262e:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <erase_flash_sector+0x1a0>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d101      	bne.n	800263a <erase_flash_sector+0x36>
 8002636:	2301      	movs	r3, #1
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t page_count = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(content_size==0) page_count=16/4;
 8002640:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <erase_flash_sector+0x1a0>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <erase_flash_sector+0x4c>
 8002648:	2304      	movs	r3, #4
 800264a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800264e:	e00e      	b.n	800266e <erase_flash_sector+0x6a>
	else if(content_size==1) page_count=32/4;
 8002650:	4b54      	ldr	r3, [pc, #336]	; (80027a4 <erase_flash_sector+0x1a0>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d103      	bne.n	8002660 <erase_flash_sector+0x5c>
 8002658:	2308      	movs	r3, #8
 800265a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800265e:	e006      	b.n	800266e <erase_flash_sector+0x6a>
	else if(content_size==2) page_count=64/4;
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <erase_flash_sector+0x1a0>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d102      	bne.n	800266e <erase_flash_sector+0x6a>
 8002668:	2310      	movs	r3, #16
 800266a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	int image_id_H = image_id / divide_value;
 800266e:	79fa      	ldrb	r2, [r7, #7]
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	fb92 f3f3 	sdiv	r3, r2, r3
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
	int image_id_L = image_id % divide_value;
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267c:	fb93 f2f2 	sdiv	r2, r3, r2
 8002680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002682:	fb01 f202 	mul.w	r2, r1, r2
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	623b      	str	r3, [r7, #32]

	reset_flash_software();
 800268a:	f000 f891 	bl	80027b0 <reset_flash_software>

	for(uint8_t i = 0; i < page_count; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002694:	e07a      	b.n	800278c <erase_flash_sector+0x188>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002696:	2200      	movs	r2, #0
 8002698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800269c:	4842      	ldr	r0, [pc, #264]	; (80027a8 <erase_flash_sector+0x1a4>)
 800269e:	f001 ff91 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 80026a2:	2306      	movs	r3, #6
 80026a4:	773b      	strb	r3, [r7, #28]
 80026a6:	f107 011c 	add.w	r1, r7, #28
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	2201      	movs	r2, #1
 80026b0:	483e      	ldr	r0, [pc, #248]	; (80027ac <erase_flash_sector+0x1a8>)
 80026b2:	f004 f824 	bl	80066fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80026b6:	2201      	movs	r2, #1
 80026b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026bc:	483a      	ldr	r0, [pc, #232]	; (80027a8 <erase_flash_sector+0x1a4>)
 80026be:	f001 ff81 	bl	80045c4 <HAL_GPIO_WritePin>
		delay_us(10);
 80026c2:	200a      	movs	r0, #10
 80026c4:	f000 fa96 	bl	8002bf4 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ce:	4836      	ldr	r0, [pc, #216]	; (80027a8 <erase_flash_sector+0x1a4>)
 80026d0:	f001 ff78 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x20}, 1, 1000);
 80026d4:	2320      	movs	r3, #32
 80026d6:	763b      	strb	r3, [r7, #24]
 80026d8:	f107 0118 	add.w	r1, r7, #24
 80026dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e0:	2201      	movs	r2, #1
 80026e2:	4832      	ldr	r0, [pc, #200]	; (80027ac <erase_flash_sector+0x1a8>)
 80026e4:	f004 f80b 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	753b      	strb	r3, [r7, #20]
 80026ee:	f107 0114 	add.w	r1, r7, #20
 80026f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f6:	2201      	movs	r2, #1
 80026f8:	482c      	ldr	r0, [pc, #176]	; (80027ac <erase_flash_sector+0x1a8>)
 80026fa:	f004 f800 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){(image_id_L*(0x10*page_count)) + (0x10*i)}, 1, 1000);
 80026fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002702:	6a3a      	ldr	r2, [r7, #32]
 8002704:	fb03 f202 	mul.w	r2, r3, r2
 8002708:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800270c:	4413      	add	r3, r2
 800270e:	b2db      	uxtb	r3, r3
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	b2db      	uxtb	r3, r3
 8002714:	743b      	strb	r3, [r7, #16]
 8002716:	f107 0110 	add.w	r1, r7, #16
 800271a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271e:	2201      	movs	r2, #1
 8002720:	4822      	ldr	r0, [pc, #136]	; (80027ac <erase_flash_sector+0x1a8>)
 8002722:	f003 ffec 	bl	80066fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002726:	2300      	movs	r3, #0
 8002728:	733b      	strb	r3, [r7, #12]
 800272a:	f107 010c 	add.w	r1, r7, #12
 800272e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002732:	2201      	movs	r2, #1
 8002734:	481d      	ldr	r0, [pc, #116]	; (80027ac <erase_flash_sector+0x1a8>)
 8002736:	f003 ffe2 	bl	80066fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 800273a:	2201      	movs	r2, #1
 800273c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002740:	4819      	ldr	r0, [pc, #100]	; (80027a8 <erase_flash_sector+0x1a4>)
 8002742:	f001 ff3f 	bl	80045c4 <HAL_GPIO_WritePin>
		delay_us(10);
 8002746:	200a      	movs	r0, #10
 8002748:	f000 fa54 	bl	8002bf4 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002752:	4815      	ldr	r0, [pc, #84]	; (80027a8 <erase_flash_sector+0x1a4>)
 8002754:	f001 ff36 	bl	80045c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002758:	2304      	movs	r3, #4
 800275a:	723b      	strb	r3, [r7, #8]
 800275c:	f107 0108 	add.w	r1, r7, #8
 8002760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002764:	2201      	movs	r2, #1
 8002766:	4811      	ldr	r0, [pc, #68]	; (80027ac <erase_flash_sector+0x1a8>)
 8002768:	f003 ffc9 	bl	80066fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002772:	480d      	ldr	r0, [pc, #52]	; (80027a8 <erase_flash_sector+0x1a4>)
 8002774:	f001 ff26 	bl	80045c4 <HAL_GPIO_WritePin>
		delay_us(10);
 8002778:	200a      	movs	r0, #10
 800277a:	f000 fa3b 	bl	8002bf4 <delay_us>

		flash_wait_nobusy();
 800277e:	f7ff fadb 	bl	8001d38 <flash_wait_nobusy>
	for(uint8_t i = 0; i < page_count; i++)
 8002782:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002786:	3301      	adds	r3, #1
 8002788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800278c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002790:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002794:	429a      	cmp	r2, r3
 8002796:	f4ff af7e 	bcc.w	8002696 <erase_flash_sector+0x92>
	}
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	3730      	adds	r7, #48	; 0x30
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	2000000b 	.word	0x2000000b
 80027a8:	48000400 	.word	0x48000400
 80027ac:	20000110 	.word	0x20000110

080027b0 <reset_flash_software>:

void reset_flash_software()
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027bc:	481a      	ldr	r0, [pc, #104]	; (8002828 <reset_flash_software+0x78>)
 80027be:	f001 ff01 	bl	80045c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x66}, 1, 1000);
 80027c2:	2366      	movs	r3, #102	; 0x66
 80027c4:	713b      	strb	r3, [r7, #4]
 80027c6:	1d39      	adds	r1, r7, #4
 80027c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027cc:	2201      	movs	r2, #1
 80027ce:	4817      	ldr	r0, [pc, #92]	; (800282c <reset_flash_software+0x7c>)
 80027d0:	f003 ff95 	bl	80066fe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80027d4:	2201      	movs	r2, #1
 80027d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027da:	4813      	ldr	r0, [pc, #76]	; (8002828 <reset_flash_software+0x78>)
 80027dc:	f001 fef2 	bl	80045c4 <HAL_GPIO_WritePin>
	delay_100ns(1);
 80027e0:	2001      	movs	r0, #1
 80027e2:	f000 fa22 	bl	8002c2a <delay_100ns>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ec:	480e      	ldr	r0, [pc, #56]	; (8002828 <reset_flash_software+0x78>)
 80027ee:	f001 fee9 	bl	80045c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x99}, 1, 1000);
 80027f2:	2399      	movs	r3, #153	; 0x99
 80027f4:	703b      	strb	r3, [r7, #0]
 80027f6:	4639      	mov	r1, r7
 80027f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fc:	2201      	movs	r2, #1
 80027fe:	480b      	ldr	r0, [pc, #44]	; (800282c <reset_flash_software+0x7c>)
 8002800:	f003 ff7d 	bl	80066fe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <reset_flash_software+0x78>)
 800280c:	f001 feda 	bl	80045c4 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002810:	2001      	movs	r0, #1
 8002812:	f000 fa0a 	bl	8002c2a <delay_100ns>
	delay_us(1000);
 8002816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281a:	f000 f9eb 	bl	8002bf4 <delay_us>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	48000400 	.word	0x48000400
 800282c:	20000110 	.word	0x20000110

08002830 <my_MX_DSIHOST_DSI_Init>:
/*====================================flash function end====================================*/

/*====================================customized function start====================================*/
static void my_MX_DSIHOST_DSI_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0ae      	sub	sp, #184	; 0xb8
 8002834:	af00      	add	r7, sp, #0
  DSI_PLLInitTypeDef PLLInit = {0};
 8002836:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8002842:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f006 f8d8 	bl	8008a00 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8002850:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
 8002860:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	226c      	movs	r2, #108	; 0x6c
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f006 f8c9 	bl	8008a00 <memset>
  hdsi.Instance = DSI;
 800286e:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002870:	4a6d      	ldr	r2, [pc, #436]	; (8002a28 <my_MX_DSIHOST_DSI_Init+0x1f8>)
 8002872:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002874:	4b6b      	ldr	r3, [pc, #428]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002876:	2200      	movs	r2, #0
 8002878:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 800287a:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 800287c:	2202      	movs	r2, #2
 800287e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8002880:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8002886:	2332      	movs	r3, #50	; 0x32
 8002888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800288c:	2301      	movs	r3, #1
 800288e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8002892:	2301      	movs	r3, #1
 8002894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002898:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800289c:	4619      	mov	r1, r3
 800289e:	4861      	ldr	r0, [pc, #388]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80028a0:	f000 fea2 	bl	80035e8 <HAL_DSI_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <my_MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 80028aa:	f000 fa2f 	bl	8002d0c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80028e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80028e8:	4619      	mov	r1, r3
 80028ea:	484e      	ldr	r0, [pc, #312]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80028ec:	f001 faef 	bl	8003ece <HAL_DSI_ConfigHostTimeouts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <my_MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80028f6:	f000 fa09 	bl	8002d0c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 80028fa:	2313      	movs	r3, #19
 80028fc:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 80028fe:	230f      	movs	r3, #15
 8002900:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8002902:	2309      	movs	r3, #9
 8002904:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8002906:	230a      	movs	r3, #10
 8002908:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8002916:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800291a:	4619      	mov	r1, r3
 800291c:	4841      	ldr	r0, [pc, #260]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 800291e:	f001 fa6c 	bl	8003dfa <HAL_DSI_ConfigPhyTimer>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <my_MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8002928:	f000 f9f0 	bl	8002d0c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800292c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002930:	483c      	ldr	r0, [pc, #240]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002932:	f001 fc88 	bl	8004246 <HAL_DSI_SetLowPowerRXFilter>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <my_MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 800293c:	f000 f9e6 	bl	8002d0c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8002940:	2100      	movs	r1, #0
 8002942:	4838      	ldr	r0, [pc, #224]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002944:	f000 ff6c 	bl	8003820 <HAL_DSI_ConfigErrorMonitor>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <my_MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 800294e:	f000 f9dd 	bl	8002d0c <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8002956:	2305      	movs	r3, #5
 8002958:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 800295e:	2301      	movs	r3, #1
 8002960:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8002962:	2378      	movs	r3, #120	; 0x78
 8002964:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8002976:	2300      	movs	r3, #0
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = HSA;
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <my_MX_DSIHOST_DSI_Init+0x1fc>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = HBP;
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <my_MX_DSIHOST_DSI_Init+0x200>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = HSA+HBP+IMAGE_H+HFP;
 8002986:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <my_MX_DSIHOST_DSI_Init+0x200>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	4413      	add	r3, r2
 8002992:	461a      	mov	r2, r3
 8002994:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <my_MX_DSIHOST_DSI_Init+0x204>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4413      	add	r3, r2
 800299a:	4a27      	ldr	r2, [pc, #156]	; (8002a38 <my_MX_DSIHOST_DSI_Init+0x208>)
 800299c:	8812      	ldrh	r2, [r2, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = VSA;
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <my_MX_DSIHOST_DSI_Init+0x20c>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = VBP;
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <my_MX_DSIHOST_DSI_Init+0x210>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = VFP;
 80029ae:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <my_MX_DSIHOST_DSI_Init+0x214>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = IMAGE_W;
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <my_MX_DSIHOST_DSI_Init+0x218>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 80029ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 80029c0:	231c      	movs	r3, #28
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 80029c4:	2350      	movs	r3, #80	; 0x50
 80029c6:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 80029c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029cc:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 80029ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d2:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 80029d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 80029da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029de:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 80029e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e4:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 80029e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ea:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	480b      	ldr	r0, [pc, #44]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80029f6:	f000 fff8 	bl	80039ea <HAL_DSI_ConfigVideoMode>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <my_MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8002a00:	f000 f984 	bl	8002d0c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8002a04:	2100      	movs	r1, #0
 8002a06:	4807      	ldr	r0, [pc, #28]	; (8002a24 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002a08:	f000 ffc7 	bl	800399a <HAL_DSI_SetGenericVCID>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <my_MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8002a12:	f000 f97b 	bl	8002d0c <Error_Handler>
  }
  LCD_PowerOn();
 8002a16:	f7fe fccb 	bl	80013b0 <LCD_PowerOn>
}
 8002a1a:	bf00      	nop
 8002a1c:	37b8      	adds	r7, #184	; 0xb8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000004c 	.word	0x2000004c
 8002a28:	40016c00 	.word	0x40016c00
 8002a2c:	20000010 	.word	0x20000010
 8002a30:	20000012 	.word	0x20000012
 8002a34:	20000000 	.word	0x20000000
 8002a38:	20000014 	.word	0x20000014
 8002a3c:	20000016 	.word	0x20000016
 8002a40:	20000018 	.word	0x20000018
 8002a44:	2000001a 	.word	0x2000001a
 8002a48:	20000004 	.word	0x20000004

08002a4c <my_MX_LTDC_Init>:
static void my_MX_LTDC_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08e      	sub	sp, #56	; 0x38
 8002a50:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	2234      	movs	r2, #52	; 0x34
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f005 ffd1 	bl	8008a00 <memset>
  hltdc.Instance = LTDC;
 8002a5e:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002a60:	4a5a      	ldr	r2, [pc, #360]	; (8002bcc <my_MX_LTDC_Init+0x180>)
 8002a62:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8002a64:	4b58      	ldr	r3, [pc, #352]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002a66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a6a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8002a6c:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a72:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002a74:	4b54      	ldr	r3, [pc, #336]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002a7a:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = HSA-1;
 8002a80:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <my_MX_LTDC_Init+0x184>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b4f      	ldr	r3, [pc, #316]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002a8a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = VSA-1;
 8002a8c:	4b51      	ldr	r3, [pc, #324]	; (8002bd4 <my_MX_LTDC_Init+0x188>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002a96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = HSA+HBP-1;
 8002a98:	4b4d      	ldr	r3, [pc, #308]	; (8002bd0 <my_MX_LTDC_Init+0x184>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b4e      	ldr	r3, [pc, #312]	; (8002bd8 <my_MX_LTDC_Init+0x18c>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002aaa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = VSA+VBP-1;
 8002aac:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <my_MX_LTDC_Init+0x188>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <my_MX_LTDC_Init+0x190>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002abe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = HSA+HBP+IMAGE_H-1;
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <my_MX_LTDC_Init+0x184>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b44      	ldr	r3, [pc, #272]	; (8002bd8 <my_MX_LTDC_Init+0x18c>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <my_MX_LTDC_Init+0x194>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002ad8:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = VSA+VBP+IMAGE_W-1;
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <my_MX_LTDC_Init+0x188>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <my_MX_LTDC_Init+0x190>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <my_MX_LTDC_Init+0x198>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4413      	add	r3, r2
 8002aee:	3b01      	subs	r3, #1
 8002af0:	4a35      	ldr	r2, [pc, #212]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002af2:	6293      	str	r3, [r2, #40]	; 0x28
  hltdc.Init.TotalWidth = HSA+HBP+IMAGE_H+HFP-1;
 8002af4:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <my_MX_LTDC_Init+0x184>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <my_MX_LTDC_Init+0x18c>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <my_MX_LTDC_Init+0x194>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a37      	ldr	r2, [pc, #220]	; (8002be8 <my_MX_LTDC_Init+0x19c>)
 8002b0a:	8812      	ldrh	r2, [r2, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	4a2d      	ldr	r2, [pc, #180]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002b12:	62d3      	str	r3, [r2, #44]	; 0x2c
  hltdc.Init.TotalHeigh = VSA+VBP+IMAGE_W+VFP-1;
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <my_MX_LTDC_Init+0x188>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <my_MX_LTDC_Init+0x190>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <my_MX_LTDC_Init+0x198>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	4a30      	ldr	r2, [pc, #192]	; (8002bec <my_MX_LTDC_Init+0x1a0>)
 8002b2a:	8812      	ldrh	r2, [r2, #0]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	4a25      	ldr	r2, [pc, #148]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8002b34:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002b36:	22ff      	movs	r2, #255	; 0xff
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002b46:	22ff      	movs	r2, #255	; 0xff
 8002b48:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002b4c:	481e      	ldr	r0, [pc, #120]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002b4e:	f001 fd69 	bl	8004624 <HAL_LTDC_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <my_MX_LTDC_Init+0x110>
  {
    Error_Handler();
 8002b58:	f000 f8d8 	bl	8002d0c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = IMAGE_H;
 8002b60:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <my_MX_LTDC_Init+0x194>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = IMAGE_W;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <my_MX_LTDC_Init+0x198>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002b70:	2301      	movs	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002b74:	23ff      	movs	r3, #255	; 0xff
 8002b76:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b80:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002b82:	2305      	movs	r3, #5
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <my_MX_LTDC_Init+0x1a4>)
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = IMAGE_H;
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <my_MX_LTDC_Init+0x194>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = IMAGE_W;
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <my_MX_LTDC_Init+0x198>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8002b96:	23ff      	movs	r3, #255	; 0xff
 8002b98:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8002b9c:	23ff      	movs	r3, #255	; 0xff
 8002b9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8002ba2:	23ff      	movs	r3, #255	; 0xff
 8002ba4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	2200      	movs	r2, #0
 8002bac:	4619      	mov	r1, r3
 8002bae:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <my_MX_LTDC_Init+0x17c>)
 8002bb0:	f001 fe08 	bl	80047c4 <HAL_LTDC_ConfigLayer>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <my_MX_LTDC_Init+0x172>
  {
    Error_Handler();
 8002bba:	f000 f8a7 	bl	8002d0c <Error_Handler>
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3738      	adds	r7, #56	; 0x38
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000068 	.word	0x20000068
 8002bcc:	40016800 	.word	0x40016800
 8002bd0:	20000010 	.word	0x20000010
 8002bd4:	20000016 	.word	0x20000016
 8002bd8:	20000012 	.word	0x20000012
 8002bdc:	20000018 	.word	0x20000018
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004
 8002be8:	20000014 	.word	0x20000014
 8002bec:	2000001a 	.word	0x2000001a
 8002bf0:	20040270 	.word	0x20040270

08002bf4 <delay_us>:
/*====================================customized function end====================================*/

void delay_us(int time)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
	while (time--)
 8002c00:	e007      	b.n	8002c12 <delay_us+0x1e>
	{
		i = 13;
 8002c02:	230d      	movs	r3, #13
 8002c04:	60fb      	str	r3, [r7, #12]
		while (i--);
 8002c06:	bf00      	nop
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1e5a      	subs	r2, r3, #1
 8002c0c:	60fa      	str	r2, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1fa      	bne.n	8002c08 <delay_us+0x14>
	while (time--)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f2      	bne.n	8002c02 <delay_us+0xe>
	}
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <delay_100ns>:

void delay_100ns(int time)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
	while (time--)
 8002c36:	e007      	b.n	8002c48 <delay_100ns+0x1e>
	{
		i = 1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
		while (i--);
 8002c3c:	bf00      	nop
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1e5a      	subs	r2, r3, #1
 8002c42:	60fa      	str	r2, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1fa      	bne.n	8002c3e <delay_100ns+0x14>
	while (time--)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	1e5a      	subs	r2, r3, #1
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f2      	bne.n	8002c38 <delay_100ns+0xe>
	}
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_GPIO_EXTI_Callback>:

int button_count = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c70:	d116      	bne.n	8002ca0 <HAL_GPIO_EXTI_Callback+0x40>
//				return;
//			}
//			button_count++;
//			delay_us(10000);
//		}
		if (play_mode == 1 || play_mode == 2)
 8002c72:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_EXTI_Callback+0x22>
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d103      	bne.n	8002c8a <HAL_GPIO_EXTI_Callback+0x2a>
		{
			play_mode = 0;
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_EXTI_Callback+0x38>
		}
		else if (play_mode == 0)
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <HAL_GPIO_EXTI_Callback+0x38>
		{
			play_mode = 1;
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
		}
		button_count = 0;
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_GPIO_EXTI_Callback+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
		}
		else{
			Current_Picture = 0;
		}
	}
}
 8002c9e:	e023      	b.n	8002ce8 <HAL_GPIO_EXTI_Callback+0x88>
	else if(GPIO_Pin == GPIO_PIN_8){
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca6:	d11f      	bne.n	8002ce8 <HAL_GPIO_EXTI_Callback+0x88>
		if(Picture_count > Current_Picture && Mode_changed == 0){
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_GPIO_EXTI_Callback+0x98>)
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <HAL_GPIO_EXTI_Callback+0x9c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d916      	bls.n	8002ce2 <HAL_GPIO_EXTI_Callback+0x82>
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d112      	bne.n	8002ce2 <HAL_GPIO_EXTI_Callback+0x82>
		  read_flash_page(&frame_buf_flash, Current_mode_config[Current_Picture]);
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <HAL_GPIO_EXTI_Callback+0x9c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002cc4:	5c9b      	ldrb	r3, [r3, r2]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	480f      	ldr	r0, [pc, #60]	; (8002d08 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002cca:	f7ff fc05 	bl	80024d8 <read_flash_page>
		  display_panel(&frame_buf_flash);
 8002cce:	480e      	ldr	r0, [pc, #56]	; (8002d08 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002cd0:	f7fe ff8c 	bl	8001bec <display_panel>
		  Current_Picture++;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_GPIO_EXTI_Callback+0x9c>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <HAL_GPIO_EXTI_Callback+0x9c>)
 8002cde:	701a      	strb	r2, [r3, #0]
}
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_EXTI_Callback+0x88>
			Current_Picture = 0;
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_GPIO_EXTI_Callback+0x9c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2004026c 	.word	0x2004026c
 8002cf4:	200702f4 	.word	0x200702f4
 8002cf8:	200702f3 	.word	0x200702f3
 8002cfc:	200702f2 	.word	0x200702f2
 8002d00:	20000020 	.word	0x20000020
 8002d04:	200702e8 	.word	0x200702e8
 8002d08:	2003026c 	.word	0x2003026c

08002d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d10:	b672      	cpsid	i
}
 8002d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <Error_Handler+0x8>
	...

08002d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_MspInit+0x44>)
 8002d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d22:	4a0e      	ldr	r2, [pc, #56]	; (8002d5c <HAL_MspInit+0x44>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6613      	str	r3, [r2, #96]	; 0x60
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_MspInit+0x44>)
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_MspInit+0x44>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_MspInit+0x44>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6593      	str	r3, [r2, #88]	; 0x58
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_MspInit+0x44>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b0aa      	sub	sp, #168	; 0xa8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	229c      	movs	r2, #156	; 0x9c
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 fe45 	bl	8008a00 <memset>
  if(hdsi->Instance==DSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <HAL_DSI_MspInit+0x60>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d11b      	bne.n	8002db8 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002d80:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002d84:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fe99 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8002d9c:	f7ff ffb6 	bl	8002d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_DSI_MspInit+0x64>)
 8002da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da4:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_DSI_MspInit+0x64>)
 8002da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002daa:	6613      	str	r3, [r2, #96]	; 0x60
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_DSI_MspInit+0x64>)
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8002db8:	bf00      	nop
 8002dba:	37a8      	adds	r7, #168	; 0xa8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40016c00 	.word	0x40016c00
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0aa      	sub	sp, #168	; 0xa8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dd0:	f107 030c 	add.w	r3, r7, #12
 8002dd4:	229c      	movs	r2, #156	; 0x9c
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f005 fe11 	bl	8008a00 <memset>
  if(hltdc->Instance==LTDC)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <HAL_LTDC_MspInit+0x80>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d12b      	bne.n	8002e40 <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002de8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 8002dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002df2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8002df6:	2303      	movs	r3, #3
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8002dfe:	2308      	movs	r3, #8
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8002e02:	2302      	movs	r3, #2
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8002e06:	2302      	movs	r3, #2
 8002e08:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8002e0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e12:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fe55 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 8002e24:	f7ff ff72 	bl	8002d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <HAL_LTDC_MspInit+0x84>)
 8002e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2c:	4a07      	ldr	r2, [pc, #28]	; (8002e4c <HAL_LTDC_MspInit+0x84>)
 8002e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e32:	6613      	str	r3, [r2, #96]	; 0x60
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_LTDC_MspInit+0x84>)
 8002e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002e40:	bf00      	nop
 8002e42:	37a8      	adds	r7, #168	; 0xa8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40016800 	.word	0x40016800
 8002e4c:	40021000 	.word	0x40021000

08002e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	; 0x30
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a42      	ldr	r2, [pc, #264]	; (8002f78 <HAL_SPI_MspInit+0x128>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d128      	bne.n	8002ec4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e72:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e7e:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8e:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002e90:	f043 0308 	orr.w	r3, r3, #8
 8002e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e96:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3;
 8002ea2:	231a      	movs	r3, #26
 8002ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eb6:	f107 031c 	add.w	r3, r7, #28
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4830      	ldr	r0, [pc, #192]	; (8002f80 <HAL_SPI_MspInit+0x130>)
 8002ebe:	f001 f9ef 	bl	80042a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ec2:	e054      	b.n	8002f6e <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2e      	ldr	r2, [pc, #184]	; (8002f84 <HAL_SPI_MspInit+0x134>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d14f      	bne.n	8002f6e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ece:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ee6:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	4a24      	ldr	r2, [pc, #144]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002efe:	f001 fefb 	bl	8004cf8 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f02:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_SPI_MspInit+0x12c>)
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002f1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	2302      	movs	r3, #2
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f2c:	2306      	movs	r3, #6
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	4619      	mov	r1, r3
 8002f36:	4814      	ldr	r0, [pc, #80]	; (8002f88 <HAL_SPI_MspInit+0x138>)
 8002f38:	f001 f9b2 	bl	80042a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002f3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f4e:	2306      	movs	r3, #6
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f52:	f107 031c 	add.w	r3, r7, #28
 8002f56:	4619      	mov	r1, r3
 8002f58:	480c      	ldr	r0, [pc, #48]	; (8002f8c <HAL_SPI_MspInit+0x13c>)
 8002f5a:	f001 f9a1 	bl	80042a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	2033      	movs	r0, #51	; 0x33
 8002f64:	f000 fa63 	bl	800342e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002f68:	2033      	movs	r0, #51	; 0x33
 8002f6a:	f000 fa7c 	bl	8003466 <HAL_NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3730      	adds	r7, #48	; 0x30
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40003800 	.word	0x40003800
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	48000c00 	.word	0x48000c00
 8002f84:	40003c00 	.word	0x40003c00
 8002f88:	48001800 	.word	0x48001800
 8002f8c:	48000800 	.word	0x48000800

08002f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0b0      	sub	sp, #192	; 0xc0
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	229c      	movs	r2, #156	; 0x9c
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f005 fd25 	bl	8008a00 <memset>
  if(huart->Instance==UART4)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_UART_MspInit+0xb0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d13b      	bne.n	8003038 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fc8:	f107 0310 	add.w	r3, r7, #16
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fd7b 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fd8:	f7ff fe98 	bl	8002d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_UART_MspInit+0xb4>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_UART_MspInit+0xb4>)
 8002fe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_UART_MspInit+0xb4>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_UART_MspInit+0xb4>)
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff8:	4a12      	ldr	r2, [pc, #72]	; (8003044 <HAL_UART_MspInit+0xb4>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_UART_MspInit+0xb4>)
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800300c:	2303      	movs	r3, #3
 800300e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301e:	2303      	movs	r3, #3
 8003020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003024:	2308      	movs	r3, #8
 8003026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800302e:	4619      	mov	r1, r3
 8003030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003034:	f001 f934 	bl	80042a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003038:	bf00      	nop
 800303a:	37c0      	adds	r7, #192	; 0xc0
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40004c00 	.word	0x40004c00
 8003044:	40021000 	.word	0x40021000

08003048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800304c:	e7fe      	b.n	800304c <NMI_Handler+0x4>

0800304e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003052:	e7fe      	b.n	8003052 <HardFault_Handler+0x4>

08003054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <MemManage_Handler+0x4>

0800305a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800305e:	e7fe      	b.n	800305e <BusFault_Handler+0x4>

08003060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <UsageFault_Handler+0x4>

08003066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003094:	f000 f8ac 	bl	80031f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}

0800309c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sync_Pin);
 80030a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80030a4:	f001 faa6 	bl	80045f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}

080030ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pic_sw_Pin);
 80030b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030b4:	f001 fa9e 	bl	80045f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}

080030bc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <SPI3_IRQHandler+0x10>)
 80030c2:	f004 f92d 	bl	8007320 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000174 	.word	0x20000174

080030d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <SystemInit+0x20>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	4a05      	ldr	r2, [pc, #20]	; (80030f0 <SystemInit+0x20>)
 80030dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800312c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030f8:	f7ff ffea 	bl	80030d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030fc:	480c      	ldr	r0, [pc, #48]	; (8003130 <LoopForever+0x6>)
  ldr r1, =_edata
 80030fe:	490d      	ldr	r1, [pc, #52]	; (8003134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003100:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <LoopForever+0xe>)
  movs r3, #0
 8003102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003104:	e002      	b.n	800310c <LoopCopyDataInit>

08003106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800310a:	3304      	adds	r3, #4

0800310c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800310c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800310e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003110:	d3f9      	bcc.n	8003106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003114:	4c0a      	ldr	r4, [pc, #40]	; (8003140 <LoopForever+0x16>)
  movs r3, #0
 8003116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003118:	e001      	b.n	800311e <LoopFillZerobss>

0800311a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800311a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800311c:	3204      	adds	r2, #4

0800311e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800311e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003120:	d3fb      	bcc.n	800311a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003122:	f005 fc49 	bl	80089b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003126:	f7fd f9eb 	bl	8000500 <main>

0800312a <LoopForever>:

LoopForever:
    b LoopForever
 800312a:	e7fe      	b.n	800312a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800312c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003134:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8003138:	08008b28 	.word	0x08008b28
  ldr r2, =_sbss
 800313c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8003140:	200702fc 	.word	0x200702fc

08003144 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003144:	e7fe      	b.n	8003144 <ADC1_IRQHandler>

08003146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003150:	2003      	movs	r0, #3
 8003152:	f000 f961 	bl	8003418 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003156:	2002      	movs	r0, #2
 8003158:	f000 f80e 	bl	8003178 <HAL_InitTick>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	71fb      	strb	r3, [r7, #7]
 8003166:	e001      	b.n	800316c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003168:	f7ff fdd6 	bl	8002d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800316c:	79fb      	ldrb	r3, [r7, #7]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <HAL_InitTick+0x6c>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d023      	beq.n	80031d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800318c:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <HAL_InitTick+0x70>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <HAL_InitTick+0x6c>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800319a:	fbb3 f3f1 	udiv	r3, r3, r1
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f96d 	bl	8003482 <HAL_SYSTICK_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b0f      	cmp	r3, #15
 80031b2:	d809      	bhi.n	80031c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031b4:	2200      	movs	r2, #0
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	f000 f937 	bl	800342e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_InitTick+0x74>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e007      	b.n	80031d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e004      	b.n	80031d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e001      	b.n	80031d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000002c 	.word	0x2000002c
 80031e8:	20000024 	.word	0x20000024
 80031ec:	20000028 	.word	0x20000028

080031f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_IncTick+0x20>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_IncTick+0x24>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	4a04      	ldr	r2, [pc, #16]	; (8003214 <HAL_IncTick+0x24>)
 8003202:	6013      	str	r3, [r2, #0]
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	2000002c 	.word	0x2000002c
 8003214:	200702f8 	.word	0x200702f8

08003218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return uwTick;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_GetTick+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	200702f8 	.word	0x200702f8

08003230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003238:	f7ff ffee 	bl	8003218 <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d005      	beq.n	8003256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_Delay+0x44>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003256:	bf00      	nop
 8003258:	f7ff ffde 	bl	8003218 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	429a      	cmp	r2, r3
 8003266:	d8f7      	bhi.n	8003258 <HAL_Delay+0x28>
  {
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	2000002c 	.word	0x2000002c

08003278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <__NVIC_SetPriorityGrouping+0x44>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003294:	4013      	ands	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032aa:	4a04      	ldr	r2, [pc, #16]	; (80032bc <__NVIC_SetPriorityGrouping+0x44>)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	60d3      	str	r3, [r2, #12]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <__NVIC_GetPriorityGrouping+0x18>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f003 0307 	and.w	r3, r3, #7
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	db0b      	blt.n	8003306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	f003 021f 	and.w	r2, r3, #31
 80032f4:	4907      	ldr	r1, [pc, #28]	; (8003314 <__NVIC_EnableIRQ+0x38>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2001      	movs	r0, #1
 80032fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000e100 	.word	0xe000e100

08003318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	2b00      	cmp	r3, #0
 800332a:	db0a      	blt.n	8003342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	490c      	ldr	r1, [pc, #48]	; (8003364 <__NVIC_SetPriority+0x4c>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	440b      	add	r3, r1
 800333c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003340:	e00a      	b.n	8003358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <__NVIC_SetPriority+0x50>)
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3b04      	subs	r3, #4
 8003350:	0112      	lsls	r2, r2, #4
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	440b      	add	r3, r1
 8003356:	761a      	strb	r2, [r3, #24]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000e100 	.word	0xe000e100
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f1c3 0307 	rsb	r3, r3, #7
 8003386:	2b04      	cmp	r3, #4
 8003388:	bf28      	it	cs
 800338a:	2304      	movcs	r3, #4
 800338c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3304      	adds	r3, #4
 8003392:	2b06      	cmp	r3, #6
 8003394:	d902      	bls.n	800339c <NVIC_EncodePriority+0x30>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3b03      	subs	r3, #3
 800339a:	e000      	b.n	800339e <NVIC_EncodePriority+0x32>
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	401a      	ands	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b4:	f04f 31ff 	mov.w	r1, #4294967295
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	43d9      	mvns	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	4313      	orrs	r3, r2
         );
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033e4:	d301      	bcc.n	80033ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00f      	b.n	800340a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <SysTick_Config+0x40>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033f2:	210f      	movs	r1, #15
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	f7ff ff8e 	bl	8003318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <SysTick_Config+0x40>)
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <SysTick_Config+0x40>)
 8003404:	2207      	movs	r2, #7
 8003406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	e000e010 	.word	0xe000e010

08003418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff29 	bl	8003278 <__NVIC_SetPriorityGrouping>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003440:	f7ff ff3e 	bl	80032c0 <__NVIC_GetPriorityGrouping>
 8003444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	6978      	ldr	r0, [r7, #20]
 800344c:	f7ff ff8e 	bl	800336c <NVIC_EncodePriority>
 8003450:	4602      	mov	r2, r0
 8003452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff5d 	bl	8003318 <__NVIC_SetPriority>
}
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff31 	bl	80032dc <__NVIC_EnableIRQ>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ffa2 	bl	80033d4 <SysTick_Config>
 8003490:	4603      	mov	r3, r0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d005      	beq.n	80034be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2204      	movs	r2, #4
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e047      	b.n	800354e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 020e 	bic.w	r2, r2, #14
 80034cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f003 021c 	and.w	r2, r3, #28
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003500:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800350a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00c      	beq.n	800352e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003522:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800352c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
    }
  }
  return status;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	019a      	lsls	r2, r3, #6
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	431a      	orrs	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	431a      	orrs	r2, r3
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003598:	f7ff fe3e 	bl	8003218 <HAL_GetTick>
 800359c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800359e:	e009      	b.n	80035b4 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80035a0:	f7ff fe3a 	bl	8003218 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ae:	d901      	bls.n	80035b4 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e015      	b.n	80035e0 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0ee      	beq.n	80035a0 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	019a      	lsls	r2, r3, #6
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	ea42 0103 	orr.w	r1, r2, r3
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	041a      	lsls	r2, r3, #16
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e10b      	b.n	8003814 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7c5b      	ldrb	r3, [r3, #17]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fbaa 	bl	8002d60 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2203      	movs	r2, #3
 8003610:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003626:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800363a:	f7ff fded 	bl	8003218 <HAL_GetTick>
 800363e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003640:	e009      	b.n	8003656 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003642:	f7ff fde9 	bl	8003218 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003650:	d901      	bls.n	8003656 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0de      	b.n	8003814 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800365e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0ed      	beq.n	8003642 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003676:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800367a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003692:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800369a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80036ce:	2001      	movs	r0, #1
 80036d0:	f7ff fdae 	bl	8003230 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d4:	f7ff fda0 	bl	8003218 <HAL_GetTick>
 80036d8:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80036da:	e009      	b.n	80036f0 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80036dc:	f7ff fd9c 	bl	8003218 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ea:	d901      	bls.n	80036f0 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e091      	b.n	8003814 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ed      	beq.n	80036dc <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0206 	orr.w	r2, r2, #6
 8003710:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0203 	bic.w	r2, r2, #3
 8003724:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0203 	bic.w	r2, r2, #3
 8003752:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800377a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_DSI_Init+0x1b4>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	e000      	b.n	800379e <HAL_DSI_Init+0x1b6>
 800379c:	2301      	movs	r3, #1
 800379e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_DSI_Init+0x234>)
 80037a4:	fb03 f202 	mul.w	r2, r3, r2
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	409a      	lsls	r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80037d4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	003d0900 	.word	0x003d0900

08003820 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7c1b      	ldrb	r3, [r3, #16]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003832:	2302      	movs	r3, #2
 8003834:	e0ab      	b.n	800398e <HAL_DSI_ConfigErrorMonitor+0x16e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2200      	movs	r2, #0
 8003842:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003870:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003874:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003892:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0202 	orr.w	r2, r2, #2
 80038ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d009      	beq.n	80038f0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 020c 	orr.w	r2, r2, #12
 80038ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0210 	orr.w	r2, r2, #16
 800390a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d009      	beq.n	800392c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0220 	orr.w	r2, r2, #32
 8003928:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003946:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003964:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003982:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7c1b      	ldrb	r3, [r3, #16]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_DSI_SetGenericVCID+0x16>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e016      	b.n	80039de <HAL_DSI_SetGenericVCID+0x44>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0203 	bic.w	r2, r2, #3
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7c1b      	ldrb	r3, [r3, #16]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_DSI_ConfigVideoMode+0x16>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e1f6      	b.n	8003dee <HAL_DSI_ConfigVideoMode+0x404>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0203 	bic.w	r2, r2, #3
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a5e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003a80:	f023 031f 	bic.w	r3, r3, #31
 8003a84:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003aa6:	f023 031f 	bic.w	r3, r3, #31
 8003aaa:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0203 	bic.w	r2, r2, #3
 8003acc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68d9      	ldr	r1, [r3, #12]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0207 	bic.w	r2, r2, #7
 8003aee:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6959      	ldr	r1, [r3, #20]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 020f 	bic.w	r2, r2, #15
 8003b1c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6919      	ldr	r1, [r3, #16]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020e 	bic.w	r2, r2, #14
 8003b40:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	005a      	lsls	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d110      	bne.n	8003b86 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b72:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6919      	ldr	r1, [r3, #16]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003b94:	f023 030f 	bic.w	r3, r3, #15
 8003b98:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003bba:	f023 030f 	bic.w	r3, r3, #15
 8003bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003be0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003be4:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c2c:	f023 0303 	bic.w	r3, r3, #3
 8003c30:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c7c:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003cc0:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6999      	ldr	r1, [r3, #24]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ccc:	041a      	lsls	r2, r3, #16
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ce4:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6999      	ldr	r1, [r3, #24]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7c1b      	ldrb	r3, [r3, #16]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_DSI_ConfigPhyTimer+0x16>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e058      	b.n	8003ec2 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	bf38      	it	cc
 8003e22:	4613      	movcc	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003e36:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	041a      	lsls	r2, r3, #16
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003e64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003e9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	021a      	lsls	r2, r3, #8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	7c1b      	ldrb	r3, [r3, #16]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0b4      	b.n	800404e <HAL_DSI_ConfigHostTimeouts+0x180>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003ef8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6899      	ldr	r1, [r3, #8]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021a      	lsls	r2, r3, #8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	b292      	uxth	r2, r2
 8003f1a:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	041a      	lsls	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	0c1b      	lsrs	r3, r3, #16
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	0c1b      	lsrs	r3, r3, #16
 8003fac:	041b      	lsls	r3, r3, #16
 8003fae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800405a:	b480      	push	{r7}
 800405c:	b085      	sub	sp, #20
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7c1b      	ldrb	r3, [r3, #16]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_DSI_Start+0x14>
 800406a:	2302      	movs	r3, #2
 800406c:	e02b      	b.n	80040c6 <HAL_DSI_Start+0x6c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0208 	orr.w	r2, r2, #8
 80040aa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b088      	sub	sp, #32
 80040d6:	af02      	add	r7, sp, #8
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	7c1b      	ldrb	r3, [r3, #16]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_DSI_ShortWrite+0x1a>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e010      	b.n	800410e <HAL_DSI_ShortWrite+0x3c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fa44 	bl	800358a <DSI_ShortWrite>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	741a      	strb	r2, [r3, #16]

  return status;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b08c      	sub	sp, #48	; 0x30
 800411a:	af02      	add	r7, sp, #8
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004126:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	7c1b      	ldrb	r3, [r3, #16]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_DSI_LongWrite+0x1e>
 8004130:	2302      	movs	r3, #2
 8004132:	e084      	b.n	800423e <HAL_DSI_LongWrite+0x128>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800413a:	f7ff f86d 	bl	8003218 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004140:	e00c      	b.n	800415c <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004142:	f7ff f869 	bl	8003218 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004150:	d904      	bls.n	800415c <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e070      	b.n	800423e <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0eb      	beq.n	8004142 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b03      	cmp	r3, #3
 8004172:	bf28      	it	cs
 8004174:	2303      	movcs	r3, #3
 8004176:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004178:	2300      	movs	r3, #0
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	e00f      	b.n	800419e <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	3301      	adds	r3, #1
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	4313      	orrs	r3, r2
 8004196:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	3301      	adds	r3, #1
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	6a3a      	ldr	r2, [r7, #32]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d3eb      	bcc.n	800417e <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80041be:	e028      	b.n	8004212 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	bf28      	it	cs
 80041c6:	2304      	movcs	r3, #4
 80041c8:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	e00e      	b.n	80041f2 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	4413      	add	r3, r2
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	3301      	adds	r3, #1
 80041f0:	623b      	str	r3, [r7, #32]
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d3ec      	bcc.n	80041d4 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1d3      	bne.n	80041c0 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004220:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004228:	b2db      	uxtb	r3, r3
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	f7ff f991 	bl	8003558 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3728      	adds	r7, #40	; 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7c1b      	ldrb	r3, [r3, #16]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004258:	2302      	movs	r3, #2
 800425a:	e01b      	b.n	8004294 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004272:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	065a      	lsls	r2, r3, #25
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ae:	e166      	b.n	800457e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2101      	movs	r1, #1
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	4013      	ands	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8158 	beq.w	8004578 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d005      	beq.n	80042e0 <HAL_GPIO_Init+0x40>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d130      	bne.n	8004342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004316:	2201      	movs	r2, #1
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	091b      	lsrs	r3, r3, #4
 800432c:	f003 0201 	and.w	r2, r3, #1
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b03      	cmp	r3, #3
 800434c:	d017      	beq.n	800437e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	2203      	movs	r2, #3
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d123      	bne.n	80043d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	08da      	lsrs	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3208      	adds	r2, #8
 8004392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4013      	ands	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	08da      	lsrs	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3208      	adds	r2, #8
 80043cc:	6939      	ldr	r1, [r7, #16]
 80043ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	2203      	movs	r2, #3
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 0203 	and.w	r2, r3, #3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80b2 	beq.w	8004578 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004414:	4b61      	ldr	r3, [pc, #388]	; (800459c <HAL_GPIO_Init+0x2fc>)
 8004416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004418:	4a60      	ldr	r2, [pc, #384]	; (800459c <HAL_GPIO_Init+0x2fc>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	6613      	str	r3, [r2, #96]	; 0x60
 8004420:	4b5e      	ldr	r3, [pc, #376]	; (800459c <HAL_GPIO_Init+0x2fc>)
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800442c:	4a5c      	ldr	r2, [pc, #368]	; (80045a0 <HAL_GPIO_Init+0x300>)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	3302      	adds	r3, #2
 8004434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004438:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	220f      	movs	r2, #15
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4013      	ands	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004456:	d02b      	beq.n	80044b0 <HAL_GPIO_Init+0x210>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a52      	ldr	r2, [pc, #328]	; (80045a4 <HAL_GPIO_Init+0x304>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d025      	beq.n	80044ac <HAL_GPIO_Init+0x20c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a51      	ldr	r2, [pc, #324]	; (80045a8 <HAL_GPIO_Init+0x308>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d01f      	beq.n	80044a8 <HAL_GPIO_Init+0x208>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a50      	ldr	r2, [pc, #320]	; (80045ac <HAL_GPIO_Init+0x30c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d019      	beq.n	80044a4 <HAL_GPIO_Init+0x204>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a4f      	ldr	r2, [pc, #316]	; (80045b0 <HAL_GPIO_Init+0x310>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d013      	beq.n	80044a0 <HAL_GPIO_Init+0x200>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a4e      	ldr	r2, [pc, #312]	; (80045b4 <HAL_GPIO_Init+0x314>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00d      	beq.n	800449c <HAL_GPIO_Init+0x1fc>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a4d      	ldr	r2, [pc, #308]	; (80045b8 <HAL_GPIO_Init+0x318>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <HAL_GPIO_Init+0x1f8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a4c      	ldr	r2, [pc, #304]	; (80045bc <HAL_GPIO_Init+0x31c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d101      	bne.n	8004494 <HAL_GPIO_Init+0x1f4>
 8004490:	2307      	movs	r3, #7
 8004492:	e00e      	b.n	80044b2 <HAL_GPIO_Init+0x212>
 8004494:	2308      	movs	r3, #8
 8004496:	e00c      	b.n	80044b2 <HAL_GPIO_Init+0x212>
 8004498:	2306      	movs	r3, #6
 800449a:	e00a      	b.n	80044b2 <HAL_GPIO_Init+0x212>
 800449c:	2305      	movs	r3, #5
 800449e:	e008      	b.n	80044b2 <HAL_GPIO_Init+0x212>
 80044a0:	2304      	movs	r3, #4
 80044a2:	e006      	b.n	80044b2 <HAL_GPIO_Init+0x212>
 80044a4:	2303      	movs	r3, #3
 80044a6:	e004      	b.n	80044b2 <HAL_GPIO_Init+0x212>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e002      	b.n	80044b2 <HAL_GPIO_Init+0x212>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <HAL_GPIO_Init+0x212>
 80044b0:	2300      	movs	r3, #0
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	f002 0203 	and.w	r2, r2, #3
 80044b8:	0092      	lsls	r2, r2, #2
 80044ba:	4093      	lsls	r3, r2
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044c2:	4937      	ldr	r1, [pc, #220]	; (80045a0 <HAL_GPIO_Init+0x300>)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	3302      	adds	r3, #2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044d0:	4b3b      	ldr	r3, [pc, #236]	; (80045c0 <HAL_GPIO_Init+0x320>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	43db      	mvns	r3, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044f4:	4a32      	ldr	r2, [pc, #200]	; (80045c0 <HAL_GPIO_Init+0x320>)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044fa:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_GPIO_Init+0x320>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	43db      	mvns	r3, r3
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4013      	ands	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800451e:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <HAL_GPIO_Init+0x320>)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004524:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_GPIO_Init+0x320>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	43db      	mvns	r3, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004548:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <HAL_GPIO_Init+0x320>)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800454e:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <HAL_GPIO_Init+0x320>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <HAL_GPIO_Init+0x320>)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	3301      	adds	r3, #1
 800457c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	f47f ae91 	bne.w	80042b0 <HAL_GPIO_Init+0x10>
  }
}
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40021000 	.word	0x40021000
 80045a0:	40010000 	.word	0x40010000
 80045a4:	48000400 	.word	0x48000400
 80045a8:	48000800 	.word	0x48000800
 80045ac:	48000c00 	.word	0x48000c00
 80045b0:	48001000 	.word	0x48001000
 80045b4:	48001400 	.word	0x48001400
 80045b8:	48001800 	.word	0x48001800
 80045bc:	48001c00 	.word	0x48001c00
 80045c0:	40010400 	.word	0x40010400

080045c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	807b      	strh	r3, [r7, #2]
 80045d0:	4613      	mov	r3, r2
 80045d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045d4:	787b      	ldrb	r3, [r7, #1]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045da:	887a      	ldrh	r2, [r7, #2]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045e0:	e002      	b.n	80045e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045fe:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d006      	beq.n	8004618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800460a:	4a05      	ldr	r2, [pc, #20]	; (8004620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fb24 	bl	8002c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40010400 	.word	0x40010400

08004624 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e0bf      	b.n	80047b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fe fbbc 	bl	8002dc8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004666:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6999      	ldr	r1, [r3, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800467c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6899      	ldr	r1, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b4a      	ldr	r3, [pc, #296]	; (80047c0 <HAL_LTDC_Init+0x19c>)
 8004698:	400b      	ands	r3, r1
 800469a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6899      	ldr	r1, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68d9      	ldr	r1, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <HAL_LTDC_Init+0x19c>)
 80046c6:	400b      	ands	r3, r1
 80046c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68d9      	ldr	r1, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1a      	ldr	r2, [r3, #32]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6919      	ldr	r1, [r3, #16]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <HAL_LTDC_Init+0x19c>)
 80046f4:	400b      	ands	r3, r1
 80046f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6919      	ldr	r1, [r3, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6959      	ldr	r1, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <HAL_LTDC_Init+0x19c>)
 8004722:	400b      	ands	r3, r1
 8004724:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6959      	ldr	r1, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0206 	orr.w	r2, r2, #6
 8004792:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	f000f800 	.word	0xf000f800

080047c4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047c4:	b5b0      	push	{r4, r5, r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_LTDC_ConfigLayer+0x1a>
 80047da:	2302      	movs	r3, #2
 80047dc:	e02c      	b.n	8004838 <HAL_LTDC_ConfigLayer+0x74>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2134      	movs	r1, #52	; 0x34
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800480a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800480c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800480e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f811 	bl	8004840 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bdb0      	pop	{r4, r5, r7, pc}

08004840 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	0c1b      	lsrs	r3, r3, #16
 8004858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485c:	4413      	add	r3, r2
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	01db      	lsls	r3, r3, #7
 800486c:	4413      	add	r3, r2
 800486e:	3384      	adds	r3, #132	; 0x84
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	4611      	mov	r1, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	01d2      	lsls	r2, r2, #7
 800487c:	440a      	add	r2, r1
 800487e:	3284      	adds	r2, #132	; 0x84
 8004880:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8004884:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004896:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004898:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4619      	mov	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	01db      	lsls	r3, r3, #7
 80048a4:	440b      	add	r3, r1
 80048a6:	3384      	adds	r3, #132	; 0x84
 80048a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048be:	4413      	add	r3, r2
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	01db      	lsls	r3, r3, #7
 80048ce:	4413      	add	r3, r2
 80048d0:	3384      	adds	r3, #132	; 0x84
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	4611      	mov	r1, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	01d2      	lsls	r2, r2, #7
 80048de:	440a      	add	r2, r1
 80048e0:	3284      	adds	r2, #132	; 0x84
 80048e2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80048e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f6:	4413      	add	r3, r2
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4619      	mov	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	01db      	lsls	r3, r3, #7
 8004904:	440b      	add	r3, r1
 8004906:	3384      	adds	r3, #132	; 0x84
 8004908:	4619      	mov	r1, r3
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	01db      	lsls	r3, r3, #7
 800491a:	4413      	add	r3, r2
 800491c:	3384      	adds	r3, #132	; 0x84
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	4611      	mov	r1, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	01d2      	lsls	r2, r2, #7
 800492a:	440a      	add	r2, r1
 800492c:	3284      	adds	r2, #132	; 0x84
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	01db      	lsls	r3, r3, #7
 800493e:	4413      	add	r3, r2
 8004940:	3384      	adds	r3, #132	; 0x84
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	061b      	lsls	r3, r3, #24
 8004964:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	01db      	lsls	r3, r3, #7
 8004970:	4413      	add	r3, r2
 8004972:	3384      	adds	r3, #132	; 0x84
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	01db      	lsls	r3, r3, #7
 8004980:	4413      	add	r3, r2
 8004982:	3384      	adds	r3, #132	; 0x84
 8004984:	461a      	mov	r2, r3
 8004986:	2300      	movs	r3, #0
 8004988:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004990:	461a      	mov	r2, r3
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	431a      	orrs	r2, r3
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	431a      	orrs	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	01db      	lsls	r3, r3, #7
 80049a4:	440b      	add	r3, r1
 80049a6:	3384      	adds	r3, #132	; 0x84
 80049a8:	4619      	mov	r1, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	01db      	lsls	r3, r3, #7
 80049ba:	4413      	add	r3, r2
 80049bc:	3384      	adds	r3, #132	; 0x84
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	4611      	mov	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	01d2      	lsls	r2, r2, #7
 80049ca:	440a      	add	r2, r1
 80049cc:	3284      	adds	r2, #132	; 0x84
 80049ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	01db      	lsls	r3, r3, #7
 80049de:	4413      	add	r3, r2
 80049e0:	3384      	adds	r3, #132	; 0x84
 80049e2:	461a      	mov	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	4413      	add	r3, r2
 80049f6:	3384      	adds	r3, #132	; 0x84
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	4611      	mov	r1, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	01d2      	lsls	r2, r2, #7
 8004a04:	440a      	add	r2, r1
 8004a06:	3284      	adds	r2, #132	; 0x84
 8004a08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a0c:	f023 0307 	bic.w	r3, r3, #7
 8004a10:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	69da      	ldr	r2, [r3, #28]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	6809      	ldr	r1, [r1, #0]
 8004a1e:	4608      	mov	r0, r1
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	01c9      	lsls	r1, r1, #7
 8004a24:	4401      	add	r1, r0
 8004a26:	3184      	adds	r1, #132	; 0x84
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	4413      	add	r3, r2
 8004a38:	3384      	adds	r3, #132	; 0x84
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	01db      	lsls	r3, r3, #7
 8004a46:	4413      	add	r3, r2
 8004a48:	3384      	adds	r3, #132	; 0x84
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	01db      	lsls	r3, r3, #7
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3384      	adds	r3, #132	; 0x84
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004a6e:	2304      	movs	r3, #4
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e01b      	b.n	8004aac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d102      	bne.n	8004a82 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	61fb      	str	r3, [r7, #28]
 8004a80:	e014      	b.n	8004aac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d00b      	beq.n	8004aa2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d007      	beq.n	8004aa2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d003      	beq.n	8004aa2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a9e:	2b07      	cmp	r3, #7
 8004aa0:	d102      	bne.n	8004aa8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e001      	b.n	8004aac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	01db      	lsls	r3, r3, #7
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3384      	adds	r3, #132	; 0x84
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	01d2      	lsls	r2, r2, #7
 8004ac6:	440a      	add	r2, r1
 8004ac8:	3284      	adds	r2, #132	; 0x84
 8004aca:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004ace:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	6859      	ldr	r1, [r3, #4]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	1acb      	subs	r3, r1, r3
 8004ae6:	69f9      	ldr	r1, [r7, #28]
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	6809      	ldr	r1, [r1, #0]
 8004af2:	4608      	mov	r0, r1
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	01c9      	lsls	r1, r1, #7
 8004af8:	4401      	add	r1, r0
 8004afa:	3184      	adds	r1, #132	; 0x84
 8004afc:	4313      	orrs	r3, r2
 8004afe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	01db      	lsls	r3, r3, #7
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3384      	adds	r3, #132	; 0x84
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	4611      	mov	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	01d2      	lsls	r2, r2, #7
 8004b1a:	440a      	add	r2, r1
 8004b1c:	3284      	adds	r2, #132	; 0x84
 8004b1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b22:	f023 0307 	bic.w	r3, r3, #7
 8004b26:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	01db      	lsls	r3, r3, #7
 8004b32:	4413      	add	r3, r2
 8004b34:	3384      	adds	r3, #132	; 0x84
 8004b36:	461a      	mov	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	01db      	lsls	r3, r3, #7
 8004b48:	4413      	add	r3, r2
 8004b4a:	3384      	adds	r3, #132	; 0x84
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	4611      	mov	r1, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	01d2      	lsls	r2, r2, #7
 8004b58:	440a      	add	r2, r1
 8004b5a:	3284      	adds	r2, #132	; 0x84
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	6013      	str	r3, [r2, #0]
}
 8004b62:	bf00      	nop
 8004b64:	3724      	adds	r7, #36	; 0x24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b74:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b80:	d102      	bne.n	8004b88 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b86:	e00b      	b.n	8004ba0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004b88:	4b08      	ldr	r3, [pc, #32]	; (8004bac <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b96:	d102      	bne.n	8004b9e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b9c:	e000      	b.n	8004ba0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004b9e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40007000 	.word	0x40007000

08004bb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d141      	bne.n	8004c42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bbe:	4b4b      	ldr	r3, [pc, #300]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bca:	d131      	bne.n	8004c30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bcc:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd2:	4a46      	ldr	r2, [pc, #280]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bdc:	4b43      	ldr	r3, [pc, #268]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004be4:	4a41      	ldr	r2, [pc, #260]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004bec:	4b40      	ldr	r3, [pc, #256]	; (8004cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2232      	movs	r2, #50	; 0x32
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	4a3f      	ldr	r2, [pc, #252]	; (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	0c9b      	lsrs	r3, r3, #18
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c02:	e002      	b.n	8004c0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c0a:	4b38      	ldr	r3, [pc, #224]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	d102      	bne.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f2      	bne.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c1e:	4b33      	ldr	r3, [pc, #204]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2a:	d158      	bne.n	8004cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e057      	b.n	8004ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c30:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c36:	4a2d      	ldr	r2, [pc, #180]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c40:	e04d      	b.n	8004cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c48:	d141      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c4a:	4b28      	ldr	r3, [pc, #160]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c56:	d131      	bne.n	8004cbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c58:	4b24      	ldr	r3, [pc, #144]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5e:	4a23      	ldr	r2, [pc, #140]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c68:	4b20      	ldr	r3, [pc, #128]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c70:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004c78:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2232      	movs	r2, #50	; 0x32
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	4a1c      	ldr	r2, [pc, #112]	; (8004cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	0c9b      	lsrs	r3, r3, #18
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c8e:	e002      	b.n	8004c96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca2:	d102      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f2      	bne.n	8004c90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004caa:	4b10      	ldr	r3, [pc, #64]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	d112      	bne.n	8004cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e011      	b.n	8004ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ccc:	e007      	b.n	8004cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cd6:	4a05      	ldr	r2, [pc, #20]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cdc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	40007000 	.word	0x40007000
 8004cf0:	20000024 	.word	0x20000024
 8004cf4:	431bde83 	.word	0x431bde83

08004cf8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4a04      	ldr	r2, [pc, #16]	; (8004d14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d06:	6053      	str	r3, [r2, #4]
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40007000 	.word	0x40007000

08004d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f000 bc08 	b.w	800553c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d2c:	4b96      	ldr	r3, [pc, #600]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d36:	4b94      	ldr	r3, [pc, #592]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80e4 	beq.w	8004f16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4c>
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	f040 808b 	bne.w	8004e72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	f040 8087 	bne.w	8004e72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d64:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_OscConfig+0x64>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e3df      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1a      	ldr	r2, [r3, #32]
 8004d80:	4b81      	ldr	r3, [pc, #516]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <HAL_RCC_OscConfig+0x7e>
 8004d8c:	4b7e      	ldr	r3, [pc, #504]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d94:	e005      	b.n	8004da2 <HAL_RCC_OscConfig+0x8a>
 8004d96:	4b7c      	ldr	r3, [pc, #496]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d223      	bcs.n	8004dee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fdcc 	bl	8005948 <RCC_SetFlashLatencyFromMSIRange>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e3c0      	b.n	800553c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dba:	4b73      	ldr	r3, [pc, #460]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a72      	ldr	r2, [pc, #456]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004dc0:	f043 0308 	orr.w	r3, r3, #8
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	4b70      	ldr	r3, [pc, #448]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	496d      	ldr	r1, [pc, #436]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd8:	4b6b      	ldr	r3, [pc, #428]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	4968      	ldr	r1, [pc, #416]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
 8004dec:	e025      	b.n	8004e3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dee:	4b66      	ldr	r3, [pc, #408]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a65      	ldr	r2, [pc, #404]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004df4:	f043 0308 	orr.w	r3, r3, #8
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4b63      	ldr	r3, [pc, #396]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	4960      	ldr	r1, [pc, #384]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e0c:	4b5e      	ldr	r3, [pc, #376]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	495b      	ldr	r1, [pc, #364]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fd8c 	bl	8005948 <RCC_SetFlashLatencyFromMSIRange>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e380      	b.n	800553c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e3a:	f000 fcc1 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	4b51      	ldr	r3, [pc, #324]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	4950      	ldr	r1, [pc, #320]	; (8004f8c <HAL_RCC_OscConfig+0x274>)
 8004e4c:	5ccb      	ldrb	r3, [r1, r3]
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	4a4e      	ldr	r2, [pc, #312]	; (8004f90 <HAL_RCC_OscConfig+0x278>)
 8004e58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e5a:	4b4e      	ldr	r3, [pc, #312]	; (8004f94 <HAL_RCC_OscConfig+0x27c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe f98a 	bl	8003178 <HAL_InitTick>
 8004e64:	4603      	mov	r3, r0
 8004e66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d052      	beq.n	8004f14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	e364      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d032      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e7a:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a42      	ldr	r2, [pc, #264]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e86:	f7fe f9c7 	bl	8003218 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e8e:	f7fe f9c3 	bl	8003218 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e34d      	b.n	800553c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ea0:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eac:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a35      	ldr	r2, [pc, #212]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004eb2:	f043 0308 	orr.w	r3, r3, #8
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b33      	ldr	r3, [pc, #204]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	4930      	ldr	r1, [pc, #192]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eca:	4b2f      	ldr	r3, [pc, #188]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	492b      	ldr	r1, [pc, #172]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
 8004ede:	e01a      	b.n	8004f16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ee0:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a28      	ldr	r2, [pc, #160]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
 8004eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004eec:	f7fe f994 	bl	8003218 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ef4:	f7fe f990 	bl	8003218 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e31a      	b.n	800553c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f06:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x1dc>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d073      	beq.n	800500a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_OscConfig+0x21c>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d10e      	bne.n	8004f4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d10b      	bne.n	8004f4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f34:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d063      	beq.n	8005008 <HAL_RCC_OscConfig+0x2f0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d15f      	bne.n	8005008 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e2f7      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d106      	bne.n	8004f64 <HAL_RCC_OscConfig+0x24c>
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e025      	b.n	8004fb0 <HAL_RCC_OscConfig+0x298>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f6c:	d114      	bne.n	8004f98 <HAL_RCC_OscConfig+0x280>
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a02      	ldr	r2, [pc, #8]	; (8004f88 <HAL_RCC_OscConfig+0x270>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e013      	b.n	8004fb0 <HAL_RCC_OscConfig+0x298>
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	08008aa8 	.word	0x08008aa8
 8004f90:	20000024 	.word	0x20000024
 8004f94:	20000028 	.word	0x20000028
 8004f98:	4ba0      	ldr	r3, [pc, #640]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a9f      	ldr	r2, [pc, #636]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8004f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4b9d      	ldr	r3, [pc, #628]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a9c      	ldr	r2, [pc, #624]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8004faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d013      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fe f92e 	bl	8003218 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc0:	f7fe f92a 	bl	8003218 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b64      	cmp	r3, #100	; 0x64
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e2b4      	b.n	800553c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fd2:	4b92      	ldr	r3, [pc, #584]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x2a8>
 8004fde:	e014      	b.n	800500a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fe f91a 	bl	8003218 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe8:	f7fe f916 	bl	8003218 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	; 0x64
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e2a0      	b.n	800553c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ffa:	4b88      	ldr	r3, [pc, #544]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x2d0>
 8005006:	e000      	b.n	800500a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d060      	beq.n	80050d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d005      	beq.n	8005028 <HAL_RCC_OscConfig+0x310>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b0c      	cmp	r3, #12
 8005020:	d119      	bne.n	8005056 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d116      	bne.n	8005056 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005028:	4b7c      	ldr	r3, [pc, #496]	; (800521c <HAL_RCC_OscConfig+0x504>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_RCC_OscConfig+0x328>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e27d      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005040:	4b76      	ldr	r3, [pc, #472]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	061b      	lsls	r3, r3, #24
 800504e:	4973      	ldr	r1, [pc, #460]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005050:	4313      	orrs	r3, r2
 8005052:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005054:	e040      	b.n	80050d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d023      	beq.n	80050a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800505e:	4b6f      	ldr	r3, [pc, #444]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a6e      	ldr	r2, [pc, #440]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506a:	f7fe f8d5 	bl	8003218 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005072:	f7fe f8d1 	bl	8003218 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e25b      	b.n	800553c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005084:	4b65      	ldr	r3, [pc, #404]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005090:	4b62      	ldr	r3, [pc, #392]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	495f      	ldr	r1, [pc, #380]	; (800521c <HAL_RCC_OscConfig+0x504>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	604b      	str	r3, [r1, #4]
 80050a4:	e018      	b.n	80050d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050a6:	4b5d      	ldr	r3, [pc, #372]	; (800521c <HAL_RCC_OscConfig+0x504>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5c      	ldr	r2, [pc, #368]	; (800521c <HAL_RCC_OscConfig+0x504>)
 80050ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fe f8b1 	bl	8003218 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ba:	f7fe f8ad 	bl	8003218 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e237      	b.n	800553c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050cc:	4b53      	ldr	r3, [pc, #332]	; (800521c <HAL_RCC_OscConfig+0x504>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d03c      	beq.n	800515e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01c      	beq.n	8005126 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ec:	4b4b      	ldr	r3, [pc, #300]	; (800521c <HAL_RCC_OscConfig+0x504>)
 80050ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f2:	4a4a      	ldr	r2, [pc, #296]	; (800521c <HAL_RCC_OscConfig+0x504>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fc:	f7fe f88c 	bl	8003218 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005104:	f7fe f888 	bl	8003218 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e212      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005116:	4b41      	ldr	r3, [pc, #260]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0ef      	beq.n	8005104 <HAL_RCC_OscConfig+0x3ec>
 8005124:	e01b      	b.n	800515e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005126:	4b3d      	ldr	r3, [pc, #244]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512c:	4a3b      	ldr	r2, [pc, #236]	; (800521c <HAL_RCC_OscConfig+0x504>)
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fe f86f 	bl	8003218 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513e:	f7fe f86b 	bl	8003218 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e1f5      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005150:	4b32      	ldr	r3, [pc, #200]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1ef      	bne.n	800513e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80a6 	beq.w	80052b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800516c:	2300      	movs	r3, #0
 800516e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005170:	4b2a      	ldr	r3, [pc, #168]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10d      	bne.n	8005198 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800517c:	4b27      	ldr	r3, [pc, #156]	; (800521c <HAL_RCC_OscConfig+0x504>)
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	4a26      	ldr	r2, [pc, #152]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005186:	6593      	str	r3, [r2, #88]	; 0x58
 8005188:	4b24      	ldr	r3, [pc, #144]	; (800521c <HAL_RCC_OscConfig+0x504>)
 800518a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005194:	2301      	movs	r3, #1
 8005196:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005198:	4b21      	ldr	r3, [pc, #132]	; (8005220 <HAL_RCC_OscConfig+0x508>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d118      	bne.n	80051d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051a4:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <HAL_RCC_OscConfig+0x508>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <HAL_RCC_OscConfig+0x508>)
 80051aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051b0:	f7fe f832 	bl	8003218 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b8:	f7fe f82e 	bl	8003218 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e1b8      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ca:	4b15      	ldr	r3, [pc, #84]	; (8005220 <HAL_RCC_OscConfig+0x508>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d108      	bne.n	80051f0 <HAL_RCC_OscConfig+0x4d8>
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <HAL_RCC_OscConfig+0x504>)
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e4:	4a0d      	ldr	r2, [pc, #52]	; (800521c <HAL_RCC_OscConfig+0x504>)
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051ee:	e029      	b.n	8005244 <HAL_RCC_OscConfig+0x52c>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b05      	cmp	r3, #5
 80051f6:	d115      	bne.n	8005224 <HAL_RCC_OscConfig+0x50c>
 80051f8:	4b08      	ldr	r3, [pc, #32]	; (800521c <HAL_RCC_OscConfig+0x504>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	4a07      	ldr	r2, [pc, #28]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005200:	f043 0304 	orr.w	r3, r3, #4
 8005204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <HAL_RCC_OscConfig+0x504>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	4a03      	ldr	r2, [pc, #12]	; (800521c <HAL_RCC_OscConfig+0x504>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005218:	e014      	b.n	8005244 <HAL_RCC_OscConfig+0x52c>
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
 8005220:	40007000 	.word	0x40007000
 8005224:	4b9d      	ldr	r3, [pc, #628]	; (800549c <HAL_RCC_OscConfig+0x784>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	4a9c      	ldr	r2, [pc, #624]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005234:	4b99      	ldr	r3, [pc, #612]	; (800549c <HAL_RCC_OscConfig+0x784>)
 8005236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523a:	4a98      	ldr	r2, [pc, #608]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800523c:	f023 0304 	bic.w	r3, r3, #4
 8005240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d016      	beq.n	800527a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd ffe4 	bl	8003218 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005252:	e00a      	b.n	800526a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005254:	f7fd ffe0 	bl	8003218 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e168      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800526a:	4b8c      	ldr	r3, [pc, #560]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0ed      	beq.n	8005254 <HAL_RCC_OscConfig+0x53c>
 8005278:	e015      	b.n	80052a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527a:	f7fd ffcd 	bl	8003218 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005280:	e00a      	b.n	8005298 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005282:	f7fd ffc9 	bl	8003218 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005290:	4293      	cmp	r3, r2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e151      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005298:	4b80      	ldr	r3, [pc, #512]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1ed      	bne.n	8005282 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052a6:	7ffb      	ldrb	r3, [r7, #31]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d105      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ac:	4b7b      	ldr	r3, [pc, #492]	; (800549c <HAL_RCC_OscConfig+0x784>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	4a7a      	ldr	r2, [pc, #488]	; (800549c <HAL_RCC_OscConfig+0x784>)
 80052b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d03c      	beq.n	800533e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01c      	beq.n	8005306 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052cc:	4b73      	ldr	r3, [pc, #460]	; (800549c <HAL_RCC_OscConfig+0x784>)
 80052ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052d2:	4a72      	ldr	r2, [pc, #456]	; (800549c <HAL_RCC_OscConfig+0x784>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052dc:	f7fd ff9c 	bl	8003218 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052e4:	f7fd ff98 	bl	8003218 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e122      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052f6:	4b69      	ldr	r3, [pc, #420]	; (800549c <HAL_RCC_OscConfig+0x784>)
 80052f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ef      	beq.n	80052e4 <HAL_RCC_OscConfig+0x5cc>
 8005304:	e01b      	b.n	800533e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005306:	4b65      	ldr	r3, [pc, #404]	; (800549c <HAL_RCC_OscConfig+0x784>)
 8005308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800530c:	4a63      	ldr	r2, [pc, #396]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005316:	f7fd ff7f 	bl	8003218 <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800531e:	f7fd ff7b 	bl	8003218 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e105      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005330:	4b5a      	ldr	r3, [pc, #360]	; (800549c <HAL_RCC_OscConfig+0x784>)
 8005332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ef      	bne.n	800531e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 80f9 	beq.w	800553a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	2b02      	cmp	r3, #2
 800534e:	f040 80cf 	bne.w	80054f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005352:	4b52      	ldr	r3, [pc, #328]	; (800549c <HAL_RCC_OscConfig+0x784>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f003 0203 	and.w	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	429a      	cmp	r2, r3
 8005364:	d12c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	3b01      	subs	r3, #1
 8005372:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d123      	bne.n	80053c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d11b      	bne.n	80053c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d113      	bne.n	80053c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	3b01      	subs	r3, #1
 80053a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d109      	bne.n	80053c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	3b01      	subs	r3, #1
 80053ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d071      	beq.n	80054a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b0c      	cmp	r3, #12
 80053c4:	d068      	beq.n	8005498 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053c6:	4b35      	ldr	r3, [pc, #212]	; (800549c <HAL_RCC_OscConfig+0x784>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d105      	bne.n	80053de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053d2:	4b32      	ldr	r3, [pc, #200]	; (800549c <HAL_RCC_OscConfig+0x784>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e0ac      	b.n	800553c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053e2:	4b2e      	ldr	r3, [pc, #184]	; (800549c <HAL_RCC_OscConfig+0x784>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2d      	ldr	r2, [pc, #180]	; (800549c <HAL_RCC_OscConfig+0x784>)
 80053e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053ee:	f7fd ff13 	bl	8003218 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fd ff0f 	bl	8003218 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e099      	b.n	800553c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005408:	4b24      	ldr	r3, [pc, #144]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005414:	4b21      	ldr	r3, [pc, #132]	; (800549c <HAL_RCC_OscConfig+0x784>)
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <HAL_RCC_OscConfig+0x788>)
 800541a:	4013      	ands	r3, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005424:	3a01      	subs	r2, #1
 8005426:	0112      	lsls	r2, r2, #4
 8005428:	4311      	orrs	r1, r2
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800542e:	0212      	lsls	r2, r2, #8
 8005430:	4311      	orrs	r1, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005436:	0852      	lsrs	r2, r2, #1
 8005438:	3a01      	subs	r2, #1
 800543a:	0552      	lsls	r2, r2, #21
 800543c:	4311      	orrs	r1, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005442:	0852      	lsrs	r2, r2, #1
 8005444:	3a01      	subs	r2, #1
 8005446:	0652      	lsls	r2, r2, #25
 8005448:	4311      	orrs	r1, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800544e:	06d2      	lsls	r2, r2, #27
 8005450:	430a      	orrs	r2, r1
 8005452:	4912      	ldr	r1, [pc, #72]	; (800549c <HAL_RCC_OscConfig+0x784>)
 8005454:	4313      	orrs	r3, r2
 8005456:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0f      	ldr	r2, [pc, #60]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800545e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <HAL_RCC_OscConfig+0x784>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	4a0c      	ldr	r2, [pc, #48]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800546a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800546e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005470:	f7fd fed2 	bl	8003218 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005478:	f7fd fece 	bl	8003218 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e058      	b.n	800553c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800548a:	4b04      	ldr	r3, [pc, #16]	; (800549c <HAL_RCC_OscConfig+0x784>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005496:	e050      	b.n	800553a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e04f      	b.n	800553c <HAL_RCC_OscConfig+0x824>
 800549c:	40021000 	.word	0x40021000
 80054a0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a4:	4b27      	ldr	r3, [pc, #156]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d144      	bne.n	800553a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80054b0:	4b24      	ldr	r3, [pc, #144]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a23      	ldr	r2, [pc, #140]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 80054b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054bc:	4b21      	ldr	r3, [pc, #132]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4a20      	ldr	r2, [pc, #128]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 80054c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054c8:	f7fd fea6 	bl	8003218 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fd fea2 	bl	8003218 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e02c      	b.n	800553c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e2:	4b18      	ldr	r3, [pc, #96]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x7b8>
 80054ee:	e024      	b.n	800553a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b0c      	cmp	r3, #12
 80054f4:	d01f      	beq.n	8005536 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a12      	ldr	r2, [pc, #72]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 80054fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fd fe89 	bl	8003218 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800550a:	f7fd fe85 	bl	8003218 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e00f      	b.n	800553c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f0      	bne.n	800550a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	4905      	ldr	r1, [pc, #20]	; (8005544 <HAL_RCC_OscConfig+0x82c>)
 800552e:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_RCC_OscConfig+0x830>)
 8005530:	4013      	ands	r3, r2
 8005532:	60cb      	str	r3, [r1, #12]
 8005534:	e001      	b.n	800553a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	feeefffc 	.word	0xfeeefffc

0800554c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e11d      	b.n	80057a0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005564:	4b90      	ldr	r3, [pc, #576]	; (80057a8 <HAL_RCC_ClockConfig+0x25c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d910      	bls.n	8005594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b8d      	ldr	r3, [pc, #564]	; (80057a8 <HAL_RCC_ClockConfig+0x25c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 020f 	bic.w	r2, r3, #15
 800557a:	498b      	ldr	r1, [pc, #556]	; (80057a8 <HAL_RCC_ClockConfig+0x25c>)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	4b89      	ldr	r3, [pc, #548]	; (80057a8 <HAL_RCC_ClockConfig+0x25c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e105      	b.n	80057a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d010      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	4b81      	ldr	r3, [pc, #516]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d908      	bls.n	80055c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b0:	4b7e      	ldr	r3, [pc, #504]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	497b      	ldr	r1, [pc, #492]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d079      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d11e      	bne.n	8005614 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055d6:	4b75      	ldr	r3, [pc, #468]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e0dc      	b.n	80057a0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80055e6:	f000 fa09 	bl	80059fc <RCC_GetSysClockFreqFromPLLSource>
 80055ea:	4603      	mov	r3, r0
 80055ec:	4a70      	ldr	r2, [pc, #448]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d946      	bls.n	8005680 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80055f2:	4b6e      	ldr	r3, [pc, #440]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d140      	bne.n	8005680 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055fe:	4b6b      	ldr	r3, [pc, #428]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005606:	4a69      	ldr	r2, [pc, #420]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e035      	b.n	8005680 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d107      	bne.n	800562c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800561c:	4b63      	ldr	r3, [pc, #396]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d115      	bne.n	8005654 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0b9      	b.n	80057a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005634:	4b5d      	ldr	r3, [pc, #372]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0ad      	b.n	80057a0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005644:	4b59      	ldr	r3, [pc, #356]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0a5      	b.n	80057a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005654:	f000 f8b4 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8005658:	4603      	mov	r3, r0
 800565a:	4a55      	ldr	r2, [pc, #340]	; (80057b0 <HAL_RCC_ClockConfig+0x264>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d90f      	bls.n	8005680 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005660:	4b52      	ldr	r3, [pc, #328]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800566c:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005674:	4a4d      	ldr	r2, [pc, #308]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005680:	4b4a      	ldr	r3, [pc, #296]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f023 0203 	bic.w	r2, r3, #3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4947      	ldr	r1, [pc, #284]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005692:	f7fd fdc1 	bl	8003218 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005698:	e00a      	b.n	80056b0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569a:	f7fd fdbd 	bl	8003218 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e077      	b.n	80057a0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b0:	4b3e      	ldr	r3, [pc, #248]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 020c 	and.w	r2, r3, #12
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	429a      	cmp	r2, r3
 80056c0:	d1eb      	bne.n	800569a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b80      	cmp	r3, #128	; 0x80
 80056c6:	d105      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056c8:	4b38      	ldr	r3, [pc, #224]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	4a37      	ldr	r2, [pc, #220]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80056ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d010      	beq.n	8005702 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	4b31      	ldr	r3, [pc, #196]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d208      	bcs.n	8005702 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f0:	4b2e      	ldr	r3, [pc, #184]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	492b      	ldr	r1, [pc, #172]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005702:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <HAL_RCC_ClockConfig+0x25c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d210      	bcs.n	8005732 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005710:	4b25      	ldr	r3, [pc, #148]	; (80057a8 <HAL_RCC_ClockConfig+0x25c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 020f 	bic.w	r2, r3, #15
 8005718:	4923      	ldr	r1, [pc, #140]	; (80057a8 <HAL_RCC_ClockConfig+0x25c>)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	4313      	orrs	r3, r2
 800571e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005720:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <HAL_RCC_ClockConfig+0x25c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d001      	beq.n	8005732 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e036      	b.n	80057a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d008      	beq.n	8005750 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800573e:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4918      	ldr	r1, [pc, #96]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 800574c:	4313      	orrs	r3, r2
 800574e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800575c:	4b13      	ldr	r3, [pc, #76]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4910      	ldr	r1, [pc, #64]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 800576c:	4313      	orrs	r3, r2
 800576e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005770:	f000 f826 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8005774:	4602      	mov	r2, r0
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <HAL_RCC_ClockConfig+0x260>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	490c      	ldr	r1, [pc, #48]	; (80057b4 <HAL_RCC_ClockConfig+0x268>)
 8005782:	5ccb      	ldrb	r3, [r1, r3]
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <HAL_RCC_ClockConfig+0x26c>)
 800578e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f7fd fcef 	bl	8003178 <HAL_InitTick>
 800579a:	4603      	mov	r3, r0
 800579c:	73fb      	strb	r3, [r7, #15]

  return status;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40022000 	.word	0x40022000
 80057ac:	40021000 	.word	0x40021000
 80057b0:	04c4b400 	.word	0x04c4b400
 80057b4:	08008aa8 	.word	0x08008aa8
 80057b8:	20000024 	.word	0x20000024
 80057bc:	20000028 	.word	0x20000028

080057c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	; 0x24
 80057c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	2300      	movs	r3, #0
 80057cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ce:	4b3e      	ldr	r3, [pc, #248]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057d8:	4b3b      	ldr	r3, [pc, #236]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <HAL_RCC_GetSysClockFreq+0x34>
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b0c      	cmp	r3, #12
 80057ec:	d121      	bne.n	8005832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d11e      	bne.n	8005832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057f4:	4b34      	ldr	r3, [pc, #208]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d107      	bne.n	8005810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005800:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	e005      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005810:	4b2d      	ldr	r3, [pc, #180]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800581c:	4a2b      	ldr	r2, [pc, #172]	; (80058cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10d      	bne.n	8005848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005830:	e00a      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d102      	bne.n	800583e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005838:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	e004      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b08      	cmp	r3, #8
 8005842:	d101      	bne.n	8005848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005844:	4b23      	ldr	r3, [pc, #140]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b0c      	cmp	r3, #12
 800584c:	d134      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800584e:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d003      	beq.n	8005866 <HAL_RCC_GetSysClockFreq+0xa6>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d003      	beq.n	800586c <HAL_RCC_GetSysClockFreq+0xac>
 8005864:	e005      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005868:	617b      	str	r3, [r7, #20]
      break;
 800586a:	e005      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800586e:	617b      	str	r3, [r7, #20]
      break;
 8005870:	e002      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	617b      	str	r3, [r7, #20]
      break;
 8005876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005878:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	3301      	adds	r3, #1
 8005884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	0a1b      	lsrs	r3, r3, #8
 800588c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	fb03 f202 	mul.w	r2, r3, r2
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800589e:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	0e5b      	lsrs	r3, r3, #25
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	3301      	adds	r3, #1
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058b8:	69bb      	ldr	r3, [r7, #24]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3724      	adds	r7, #36	; 0x24
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000
 80058cc:	08008ac0 	.word	0x08008ac0
 80058d0:	00f42400 	.word	0x00f42400
 80058d4:	007a1200 	.word	0x007a1200

080058d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058dc:	4b03      	ldr	r3, [pc, #12]	; (80058ec <HAL_RCC_GetHCLKFreq+0x14>)
 80058de:	681b      	ldr	r3, [r3, #0]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	20000024 	.word	0x20000024

080058f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058f4:	f7ff fff0 	bl	80058d8 <HAL_RCC_GetHCLKFreq>
 80058f8:	4602      	mov	r2, r0
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	0a1b      	lsrs	r3, r3, #8
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	4904      	ldr	r1, [pc, #16]	; (8005918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005906:	5ccb      	ldrb	r3, [r1, r3]
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40021000 	.word	0x40021000
 8005918:	08008ab8 	.word	0x08008ab8

0800591c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005920:	f7ff ffda 	bl	80058d8 <HAL_RCC_GetHCLKFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	4b06      	ldr	r3, [pc, #24]	; (8005940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	0adb      	lsrs	r3, r3, #11
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	4904      	ldr	r1, [pc, #16]	; (8005944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005932:	5ccb      	ldrb	r3, [r1, r3]
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40021000 	.word	0x40021000
 8005944:	08008ab8 	.word	0x08008ab8

08005948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005960:	f7ff f906 	bl	8004b70 <HAL_PWREx_GetVoltageRange>
 8005964:	6178      	str	r0, [r7, #20]
 8005966:	e014      	b.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005968:	4b22      	ldr	r3, [pc, #136]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	4a21      	ldr	r2, [pc, #132]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800596e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005972:	6593      	str	r3, [r2, #88]	; 0x58
 8005974:	4b1f      	ldr	r3, [pc, #124]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005980:	f7ff f8f6 	bl	8004b70 <HAL_PWREx_GetVoltageRange>
 8005984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005986:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598a:	4a1a      	ldr	r2, [pc, #104]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800598c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d10b      	bne.n	80059b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b80      	cmp	r3, #128	; 0x80
 800599e:	d913      	bls.n	80059c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2ba0      	cmp	r3, #160	; 0xa0
 80059a4:	d902      	bls.n	80059ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059a6:	2302      	movs	r3, #2
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	e00d      	b.n	80059c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059ac:	2301      	movs	r3, #1
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	e00a      	b.n	80059c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b7f      	cmp	r3, #127	; 0x7f
 80059b6:	d902      	bls.n	80059be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80059b8:	2302      	movs	r3, #2
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	e004      	b.n	80059c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b70      	cmp	r3, #112	; 0x70
 80059c2:	d101      	bne.n	80059c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059c4:	2301      	movs	r3, #1
 80059c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f023 020f 	bic.w	r2, r3, #15
 80059d0:	4909      	ldr	r1, [pc, #36]	; (80059f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d001      	beq.n	80059ea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40022000 	.word	0x40022000

080059fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a02:	4b2d      	ldr	r3, [pc, #180]	; (8005ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d00b      	beq.n	8005a2a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d825      	bhi.n	8005a64 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d008      	beq.n	8005a30 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d11f      	bne.n	8005a64 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005a24:	4b25      	ldr	r3, [pc, #148]	; (8005abc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a26:	613b      	str	r3, [r7, #16]
    break;
 8005a28:	e01f      	b.n	8005a6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005a2c:	613b      	str	r3, [r7, #16]
    break;
 8005a2e:	e01c      	b.n	8005a6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a30:	4b21      	ldr	r3, [pc, #132]	; (8005ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d107      	bne.n	8005a4c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a3c:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e005      	b.n	8005a58 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005a58:	4a1a      	ldr	r2, [pc, #104]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a60:	613b      	str	r3, [r7, #16]
    break;
 8005a62:	e002      	b.n	8005a6a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	613b      	str	r3, [r7, #16]
    break;
 8005a68:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a6a:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	091b      	lsrs	r3, r3, #4
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	3301      	adds	r3, #1
 8005a76:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	0a1b      	lsrs	r3, r3, #8
 8005a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	fb03 f202 	mul.w	r2, r3, r2
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a90:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	0e5b      	lsrs	r3, r3, #25
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005aaa:	683b      	ldr	r3, [r7, #0]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	00f42400 	.word	0x00f42400
 8005ac0:	007a1200 	.word	0x007a1200
 8005ac4:	08008ac0 	.word	0x08008ac0

08005ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d040      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae8:	2b80      	cmp	r3, #128	; 0x80
 8005aea:	d02a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005aec:	2b80      	cmp	r3, #128	; 0x80
 8005aee:	d825      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005af0:	2b60      	cmp	r3, #96	; 0x60
 8005af2:	d026      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005af4:	2b60      	cmp	r3, #96	; 0x60
 8005af6:	d821      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d006      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d81d      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d010      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005b08:	e018      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b0a:	4b89      	ldr	r3, [pc, #548]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4a88      	ldr	r2, [pc, #544]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b14:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b16:	e015      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fb62 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b28:	e00c      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3320      	adds	r3, #32
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fc4d 	bl	80063d0 <RCCEx_PLLSAI2_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b3a:	e003      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	74fb      	strb	r3, [r7, #19]
      break;
 8005b40:	e000      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b44:	7cfb      	ldrb	r3, [r7, #19]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b4a:	4b79      	ldr	r3, [pc, #484]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b50:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b58:	4975      	ldr	r1, [pc, #468]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005b60:	e001      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	7cfb      	ldrb	r3, [r7, #19]
 8005b64:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d047      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7a:	d030      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b80:	d82a      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b86:	d02a      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b8c:	d824      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b92:	d008      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b98:	d81e      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba2:	d010      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ba4:	e018      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ba6:	4b62      	ldr	r3, [pc, #392]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	4a61      	ldr	r2, [pc, #388]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bb2:	e015      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fb14 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bc4:	e00c      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3320      	adds	r3, #32
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fbff 	bl	80063d0 <RCCEx_PLLSAI2_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bd6:	e003      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	74fb      	strb	r3, [r7, #19]
      break;
 8005bdc:	e000      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be0:	7cfb      	ldrb	r3, [r7, #19]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10b      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005be6:	4b52      	ldr	r3, [pc, #328]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf4:	494e      	ldr	r1, [pc, #312]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005bfc:	e001      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfe:	7cfb      	ldrb	r3, [r7, #19]
 8005c00:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 809f 	beq.w	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c10:	2300      	movs	r3, #0
 8005c12:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c14:	4b46      	ldr	r3, [pc, #280]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005c24:	2300      	movs	r3, #0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00d      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c2a:	4b41      	ldr	r3, [pc, #260]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2e:	4a40      	ldr	r2, [pc, #256]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c34:	6593      	str	r3, [r2, #88]	; 0x58
 8005c36:	4b3e      	ldr	r3, [pc, #248]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c42:	2301      	movs	r3, #1
 8005c44:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c46:	4b3b      	ldr	r3, [pc, #236]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a3a      	ldr	r2, [pc, #232]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c52:	f7fd fae1 	bl	8003218 <HAL_GetTick>
 8005c56:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c58:	e009      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5a:	f7fd fadd 	bl	8003218 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d902      	bls.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	74fb      	strb	r3, [r7, #19]
        break;
 8005c6c:	e005      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c6e:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0ef      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005c7a:	7cfb      	ldrb	r3, [r7, #19]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d15b      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c80:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01f      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d019      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c9e:	4b24      	ldr	r3, [pc, #144]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005caa:	4b21      	ldr	r3, [pc, #132]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cba:	4b1d      	ldr	r3, [pc, #116]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cca:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d016      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fd fa9c 	bl	8003218 <HAL_GetTick>
 8005ce0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce2:	e00b      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce4:	f7fd fa98 	bl	8003218 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d902      	bls.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	74fb      	strb	r3, [r7, #19]
            break;
 8005cfa:	e006      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0ec      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005d0a:	7cfb      	ldrb	r3, [r7, #19]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10c      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d20:	4903      	ldr	r1, [pc, #12]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d28:	e008      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	74bb      	strb	r3, [r7, #18]
 8005d2e:	e005      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005d30:	40021000 	.word	0x40021000
 8005d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d38:	7cfb      	ldrb	r3, [r7, #19]
 8005d3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d3c:	7c7b      	ldrb	r3, [r7, #17]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d105      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d42:	4ba0      	ldr	r3, [pc, #640]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	4a9f      	ldr	r2, [pc, #636]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d5a:	4b9a      	ldr	r3, [pc, #616]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f023 0203 	bic.w	r2, r3, #3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d68:	4996      	ldr	r1, [pc, #600]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d7c:	4b91      	ldr	r3, [pc, #580]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d82:	f023 020c 	bic.w	r2, r3, #12
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	498e      	ldr	r1, [pc, #568]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d9e:	4b89      	ldr	r3, [pc, #548]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	4985      	ldr	r1, [pc, #532]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dc0:	4b80      	ldr	r3, [pc, #512]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dce:	497d      	ldr	r1, [pc, #500]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005de2:	4b78      	ldr	r3, [pc, #480]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df0:	4974      	ldr	r1, [pc, #464]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e04:	4b6f      	ldr	r3, [pc, #444]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e12:	496c      	ldr	r1, [pc, #432]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e26:	4b67      	ldr	r3, [pc, #412]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e34:	4963      	ldr	r1, [pc, #396]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e48:	4b5e      	ldr	r3, [pc, #376]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e56:	495b      	ldr	r1, [pc, #364]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e6a:	4b56      	ldr	r3, [pc, #344]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e78:	4952      	ldr	r1, [pc, #328]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e8c:	4b4d      	ldr	r3, [pc, #308]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9a:	494a      	ldr	r1, [pc, #296]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005eae:	4b45      	ldr	r3, [pc, #276]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebc:	4941      	ldr	r1, [pc, #260]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ed0:	4b3c      	ldr	r3, [pc, #240]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ed6:	f023 0203 	bic.w	r2, r3, #3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ede:	4939      	ldr	r1, [pc, #228]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d028      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ef2:	4b34      	ldr	r3, [pc, #208]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f00:	4930      	ldr	r1, [pc, #192]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f10:	d106      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f12:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	4a2b      	ldr	r2, [pc, #172]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f1c:	60d3      	str	r3, [r2, #12]
 8005f1e:	e011      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f28:	d10c      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	2101      	movs	r1, #1
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 f959 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005f3a:	7cfb      	ldrb	r3, [r7, #19]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005f40:	7cfb      	ldrb	r3, [r7, #19]
 8005f42:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d04d      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f58:	d108      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f60:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f6a:	e012      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005f6c:	4b15      	ldr	r3, [pc, #84]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f72:	4a14      	ldr	r2, [pc, #80]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f8a:	490e      	ldr	r1, [pc, #56]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f9a:	d106      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fa6:	60d3      	str	r3, [r2, #12]
 8005fa8:	e020      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb2:	d109      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fb4:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4a02      	ldr	r2, [pc, #8]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fbe:	60d3      	str	r3, [r2, #12]
 8005fc0:	e014      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005fc2:	bf00      	nop
 8005fc4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fd0:	d10c      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 f905 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fe2:	7cfb      	ldrb	r3, [r7, #19]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005fe8:	7cfb      	ldrb	r3, [r7, #19]
 8005fea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d028      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ff8:	4b7a      	ldr	r3, [pc, #488]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006006:	4977      	ldr	r1, [pc, #476]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006016:	d106      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006018:	4b72      	ldr	r3, [pc, #456]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a71      	ldr	r2, [pc, #452]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800601e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006022:	60d3      	str	r3, [r2, #12]
 8006024:	e011      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800602a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800602e:	d10c      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f8d6 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006046:	7cfb      	ldrb	r3, [r7, #19]
 8006048:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01e      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006056:	4b63      	ldr	r3, [pc, #396]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006066:	495f      	ldr	r1, [pc, #380]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006078:	d10c      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3304      	adds	r3, #4
 800607e:	2102      	movs	r1, #2
 8006080:	4618      	mov	r0, r3
 8006082:	f000 f8b1 	bl	80061e8 <RCCEx_PLLSAI1_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800608a:	7cfb      	ldrb	r3, [r7, #19]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006090:	7cfb      	ldrb	r3, [r7, #19]
 8006092:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060a0:	4b50      	ldr	r3, [pc, #320]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060a6:	f023 0204 	bic.w	r2, r3, #4
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b0:	494c      	ldr	r1, [pc, #304]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00b      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80060c4:	4b47      	ldr	r3, [pc, #284]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ca:	f023 0218 	bic.w	r2, r3, #24
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d4:	4943      	ldr	r1, [pc, #268]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d035      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060e8:	4b3e      	ldr	r3, [pc, #248]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a3d      	ldr	r2, [pc, #244]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f4:	f7fd f890 	bl	8003218 <HAL_GetTick>
 80060f8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060fa:	e009      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060fc:	f7fd f88c 	bl	8003218 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d902      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	74fb      	strb	r3, [r7, #19]
        break;
 800610e:	e005      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006110:	4b34      	ldr	r3, [pc, #208]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1ef      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800611c:	7cfb      	ldrb	r3, [r7, #19]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d113      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006122:	4b30      	ldr	r3, [pc, #192]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006124:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006132:	492c      	ldr	r1, [pc, #176]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3320      	adds	r3, #32
 800613e:	2102      	movs	r1, #2
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f945 	bl	80063d0 <RCCEx_PLLSAI2_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006150:	7cfb      	ldrb	r3, [r7, #19]
 8006152:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d01e      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006160:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006170:	491c      	ldr	r1, [pc, #112]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006182:	d10c      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3320      	adds	r3, #32
 8006188:	2101      	movs	r1, #1
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f920 	bl	80063d0 <RCCEx_PLLSAI2_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006194:	7cfb      	ldrb	r3, [r7, #19]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800619a:	7cfb      	ldrb	r3, [r7, #19]
 800619c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d017      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80061aa:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ba:	490a      	ldr	r1, [pc, #40]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061cc:	d105      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80061da:	7cbb      	ldrb	r3, [r7, #18]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40021000 	.word	0x40021000

080061e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061f6:	4b72      	ldr	r3, [pc, #456]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00e      	beq.n	8006220 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006202:	4b6f      	ldr	r3, [pc, #444]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0203 	and.w	r2, r3, #3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d103      	bne.n	800621a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
       ||
 8006216:	2b00      	cmp	r3, #0
 8006218:	d142      	bne.n	80062a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	73fb      	strb	r3, [r7, #15]
 800621e:	e03f      	b.n	80062a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b03      	cmp	r3, #3
 8006226:	d018      	beq.n	800625a <RCCEx_PLLSAI1_Config+0x72>
 8006228:	2b03      	cmp	r3, #3
 800622a:	d825      	bhi.n	8006278 <RCCEx_PLLSAI1_Config+0x90>
 800622c:	2b01      	cmp	r3, #1
 800622e:	d002      	beq.n	8006236 <RCCEx_PLLSAI1_Config+0x4e>
 8006230:	2b02      	cmp	r3, #2
 8006232:	d009      	beq.n	8006248 <RCCEx_PLLSAI1_Config+0x60>
 8006234:	e020      	b.n	8006278 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006236:	4b62      	ldr	r3, [pc, #392]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11d      	bne.n	800627e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006246:	e01a      	b.n	800627e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006248:	4b5d      	ldr	r3, [pc, #372]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006250:	2b00      	cmp	r3, #0
 8006252:	d116      	bne.n	8006282 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006258:	e013      	b.n	8006282 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800625a:	4b59      	ldr	r3, [pc, #356]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10f      	bne.n	8006286 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006266:	4b56      	ldr	r3, [pc, #344]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006276:	e006      	b.n	8006286 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
      break;
 800627c:	e004      	b.n	8006288 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800627e:	bf00      	nop
 8006280:	e002      	b.n	8006288 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006286:	bf00      	nop
    }

    if(status == HAL_OK)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800628e:	4b4c      	ldr	r3, [pc, #304]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f023 0203 	bic.w	r2, r3, #3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4949      	ldr	r1, [pc, #292]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800629c:	4313      	orrs	r3, r2
 800629e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f040 8086 	bne.w	80063b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80062a8:	4b45      	ldr	r3, [pc, #276]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a44      	ldr	r2, [pc, #272]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b4:	f7fc ffb0 	bl	8003218 <HAL_GetTick>
 80062b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062ba:	e009      	b.n	80062d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062bc:	f7fc ffac 	bl	8003218 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d902      	bls.n	80062d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	73fb      	strb	r3, [r7, #15]
        break;
 80062ce:	e005      	b.n	80062dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062d0:	4b3b      	ldr	r3, [pc, #236]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1ef      	bne.n	80062bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d168      	bne.n	80063b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d113      	bne.n	8006310 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062e8:	4b35      	ldr	r3, [pc, #212]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	4b35      	ldr	r3, [pc, #212]	; (80063c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6892      	ldr	r2, [r2, #8]
 80062f4:	0211      	lsls	r1, r2, #8
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	68d2      	ldr	r2, [r2, #12]
 80062fa:	06d2      	lsls	r2, r2, #27
 80062fc:	4311      	orrs	r1, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6852      	ldr	r2, [r2, #4]
 8006302:	3a01      	subs	r2, #1
 8006304:	0112      	lsls	r2, r2, #4
 8006306:	430a      	orrs	r2, r1
 8006308:	492d      	ldr	r1, [pc, #180]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800630a:	4313      	orrs	r3, r2
 800630c:	610b      	str	r3, [r1, #16]
 800630e:	e02d      	b.n	800636c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d115      	bne.n	8006342 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006316:	4b2a      	ldr	r3, [pc, #168]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800631c:	4013      	ands	r3, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6892      	ldr	r2, [r2, #8]
 8006322:	0211      	lsls	r1, r2, #8
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6912      	ldr	r2, [r2, #16]
 8006328:	0852      	lsrs	r2, r2, #1
 800632a:	3a01      	subs	r2, #1
 800632c:	0552      	lsls	r2, r2, #21
 800632e:	4311      	orrs	r1, r2
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6852      	ldr	r2, [r2, #4]
 8006334:	3a01      	subs	r2, #1
 8006336:	0112      	lsls	r2, r2, #4
 8006338:	430a      	orrs	r2, r1
 800633a:	4921      	ldr	r1, [pc, #132]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800633c:	4313      	orrs	r3, r2
 800633e:	610b      	str	r3, [r1, #16]
 8006340:	e014      	b.n	800636c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006342:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	4b21      	ldr	r3, [pc, #132]	; (80063cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006348:	4013      	ands	r3, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6892      	ldr	r2, [r2, #8]
 800634e:	0211      	lsls	r1, r2, #8
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6952      	ldr	r2, [r2, #20]
 8006354:	0852      	lsrs	r2, r2, #1
 8006356:	3a01      	subs	r2, #1
 8006358:	0652      	lsls	r2, r2, #25
 800635a:	4311      	orrs	r1, r2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6852      	ldr	r2, [r2, #4]
 8006360:	3a01      	subs	r2, #1
 8006362:	0112      	lsls	r2, r2, #4
 8006364:	430a      	orrs	r2, r1
 8006366:	4916      	ldr	r1, [pc, #88]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006368:	4313      	orrs	r3, r2
 800636a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006372:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006376:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fc ff4e 	bl	8003218 <HAL_GetTick>
 800637c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800637e:	e009      	b.n	8006394 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006380:	f7fc ff4a 	bl	8003218 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d902      	bls.n	8006394 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	73fb      	strb	r3, [r7, #15]
          break;
 8006392:	e005      	b.n	80063a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0ef      	beq.n	8006380 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	4904      	ldr	r1, [pc, #16]	; (80063c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000
 80063c4:	07ff800f 	.word	0x07ff800f
 80063c8:	ff9f800f 	.word	0xff9f800f
 80063cc:	f9ff800f 	.word	0xf9ff800f

080063d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063de:	4b72      	ldr	r3, [pc, #456]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80063ea:	4b6f      	ldr	r3, [pc, #444]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0203 	and.w	r2, r3, #3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d103      	bne.n	8006402 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
       ||
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d142      	bne.n	8006488 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
 8006406:	e03f      	b.n	8006488 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d018      	beq.n	8006442 <RCCEx_PLLSAI2_Config+0x72>
 8006410:	2b03      	cmp	r3, #3
 8006412:	d825      	bhi.n	8006460 <RCCEx_PLLSAI2_Config+0x90>
 8006414:	2b01      	cmp	r3, #1
 8006416:	d002      	beq.n	800641e <RCCEx_PLLSAI2_Config+0x4e>
 8006418:	2b02      	cmp	r3, #2
 800641a:	d009      	beq.n	8006430 <RCCEx_PLLSAI2_Config+0x60>
 800641c:	e020      	b.n	8006460 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800641e:	4b62      	ldr	r3, [pc, #392]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11d      	bne.n	8006466 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800642e:	e01a      	b.n	8006466 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006430:	4b5d      	ldr	r3, [pc, #372]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006438:	2b00      	cmp	r3, #0
 800643a:	d116      	bne.n	800646a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006440:	e013      	b.n	800646a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006442:	4b59      	ldr	r3, [pc, #356]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10f      	bne.n	800646e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800644e:	4b56      	ldr	r3, [pc, #344]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800645e:	e006      	b.n	800646e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	e004      	b.n	8006470 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006466:	bf00      	nop
 8006468:	e002      	b.n	8006470 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800646e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d108      	bne.n	8006488 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006476:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f023 0203 	bic.w	r2, r3, #3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4949      	ldr	r1, [pc, #292]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006484:	4313      	orrs	r3, r2
 8006486:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	2b00      	cmp	r3, #0
 800648c:	f040 8086 	bne.w	800659c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006490:	4b45      	ldr	r3, [pc, #276]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a44      	ldr	r2, [pc, #272]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800649a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800649c:	f7fc febc 	bl	8003218 <HAL_GetTick>
 80064a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064a2:	e009      	b.n	80064b8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064a4:	f7fc feb8 	bl	8003218 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d902      	bls.n	80064b8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	73fb      	strb	r3, [r7, #15]
        break;
 80064b6:	e005      	b.n	80064c4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064b8:	4b3b      	ldr	r3, [pc, #236]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1ef      	bne.n	80064a4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d168      	bne.n	800659c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d113      	bne.n	80064f8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80064d0:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	4b35      	ldr	r3, [pc, #212]	; (80065ac <RCCEx_PLLSAI2_Config+0x1dc>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6892      	ldr	r2, [r2, #8]
 80064dc:	0211      	lsls	r1, r2, #8
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	68d2      	ldr	r2, [r2, #12]
 80064e2:	06d2      	lsls	r2, r2, #27
 80064e4:	4311      	orrs	r1, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6852      	ldr	r2, [r2, #4]
 80064ea:	3a01      	subs	r2, #1
 80064ec:	0112      	lsls	r2, r2, #4
 80064ee:	430a      	orrs	r2, r1
 80064f0:	492d      	ldr	r1, [pc, #180]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	614b      	str	r3, [r1, #20]
 80064f6:	e02d      	b.n	8006554 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d115      	bne.n	800652a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80064fe:	4b2a      	ldr	r3, [pc, #168]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006504:	4013      	ands	r3, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6892      	ldr	r2, [r2, #8]
 800650a:	0211      	lsls	r1, r2, #8
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6912      	ldr	r2, [r2, #16]
 8006510:	0852      	lsrs	r2, r2, #1
 8006512:	3a01      	subs	r2, #1
 8006514:	0552      	lsls	r2, r2, #21
 8006516:	4311      	orrs	r1, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6852      	ldr	r2, [r2, #4]
 800651c:	3a01      	subs	r2, #1
 800651e:	0112      	lsls	r2, r2, #4
 8006520:	430a      	orrs	r2, r1
 8006522:	4921      	ldr	r1, [pc, #132]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006524:	4313      	orrs	r3, r2
 8006526:	614b      	str	r3, [r1, #20]
 8006528:	e014      	b.n	8006554 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800652a:	4b1f      	ldr	r3, [pc, #124]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	4b21      	ldr	r3, [pc, #132]	; (80065b4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006530:	4013      	ands	r3, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6892      	ldr	r2, [r2, #8]
 8006536:	0211      	lsls	r1, r2, #8
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6952      	ldr	r2, [r2, #20]
 800653c:	0852      	lsrs	r2, r2, #1
 800653e:	3a01      	subs	r2, #1
 8006540:	0652      	lsls	r2, r2, #25
 8006542:	4311      	orrs	r1, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6852      	ldr	r2, [r2, #4]
 8006548:	3a01      	subs	r2, #1
 800654a:	0112      	lsls	r2, r2, #4
 800654c:	430a      	orrs	r2, r1
 800654e:	4916      	ldr	r1, [pc, #88]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006550:	4313      	orrs	r3, r2
 8006552:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006554:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a13      	ldr	r2, [pc, #76]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006560:	f7fc fe5a 	bl	8003218 <HAL_GetTick>
 8006564:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006566:	e009      	b.n	800657c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006568:	f7fc fe56 	bl	8003218 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d902      	bls.n	800657c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	73fb      	strb	r3, [r7, #15]
          break;
 800657a:	e005      	b.n	8006588 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0ef      	beq.n	8006568 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006590:	695a      	ldr	r2, [r3, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	4904      	ldr	r1, [pc, #16]	; (80065a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006598:	4313      	orrs	r3, r2
 800659a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40021000 	.word	0x40021000
 80065ac:	07ff800f 	.word	0x07ff800f
 80065b0:	ff9f800f 	.word	0xff9f800f
 80065b4:	f9ff800f 	.word	0xf9ff800f

080065b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e095      	b.n	80066f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d108      	bne.n	80065e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065da:	d009      	beq.n	80065f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	61da      	str	r2, [r3, #28]
 80065e2:	e005      	b.n	80065f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fc fc20 	bl	8002e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006626:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006630:	d902      	bls.n	8006638 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	e002      	b.n	800663e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800663c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006646:	d007      	beq.n	8006658 <HAL_SPI_Init+0xa0>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006650:	d002      	beq.n	8006658 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	ea42 0103 	orr.w	r1, r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	0c1b      	lsrs	r3, r3, #16
 80066b4:	f003 0204 	and.w	r2, r3, #4
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	f003 0310 	and.w	r3, r3, #16
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80066d4:	ea42 0103 	orr.w	r1, r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b088      	sub	sp, #32
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	603b      	str	r3, [r7, #0]
 800670a:	4613      	mov	r3, r2
 800670c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_SPI_Transmit+0x22>
 800671c:	2302      	movs	r3, #2
 800671e:	e158      	b.n	80069d2 <HAL_SPI_Transmit+0x2d4>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006728:	f7fc fd76 	bl	8003218 <HAL_GetTick>
 800672c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b01      	cmp	r3, #1
 800673c:	d002      	beq.n	8006744 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800673e:	2302      	movs	r3, #2
 8006740:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006742:	e13d      	b.n	80069c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <HAL_SPI_Transmit+0x52>
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006754:	e134      	b.n	80069c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2203      	movs	r2, #3
 800675a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	88fa      	ldrh	r2, [r7, #6]
 8006774:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a0:	d10f      	bne.n	80067c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067cc:	2b40      	cmp	r3, #64	; 0x40
 80067ce:	d007      	beq.n	80067e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067e8:	d94b      	bls.n	8006882 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_SPI_Transmit+0xfa>
 80067f2:	8afb      	ldrh	r3, [r7, #22]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d13e      	bne.n	8006876 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	881a      	ldrh	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	1c9a      	adds	r2, r3, #2
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800681c:	e02b      	b.n	8006876 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b02      	cmp	r3, #2
 800682a:	d112      	bne.n	8006852 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	881a      	ldrh	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	1c9a      	adds	r2, r3, #2
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006850:	e011      	b.n	8006876 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006852:	f7fc fce1 	bl	8003218 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d803      	bhi.n	800686a <HAL_SPI_Transmit+0x16c>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006868:	d102      	bne.n	8006870 <HAL_SPI_Transmit+0x172>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006874:	e0a4      	b.n	80069c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800687a:	b29b      	uxth	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1ce      	bne.n	800681e <HAL_SPI_Transmit+0x120>
 8006880:	e07c      	b.n	800697c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_SPI_Transmit+0x192>
 800688a:	8afb      	ldrh	r3, [r7, #22]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d170      	bne.n	8006972 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b01      	cmp	r3, #1
 8006898:	d912      	bls.n	80068c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	881a      	ldrh	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	1c9a      	adds	r2, r3, #2
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3b02      	subs	r3, #2
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068be:	e058      	b.n	8006972 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	7812      	ldrb	r2, [r2, #0]
 80068cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80068e6:	e044      	b.n	8006972 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d12b      	bne.n	800694e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d912      	bls.n	8006926 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	881a      	ldrh	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	1c9a      	adds	r2, r3, #2
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b02      	subs	r3, #2
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006924:	e025      	b.n	8006972 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	7812      	ldrb	r2, [r2, #0]
 8006932:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800694c:	e011      	b.n	8006972 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800694e:	f7fc fc63 	bl	8003218 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d803      	bhi.n	8006966 <HAL_SPI_Transmit+0x268>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d102      	bne.n	800696c <HAL_SPI_Transmit+0x26e>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d102      	bne.n	8006972 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006970:	e026      	b.n	80069c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1b5      	bne.n	80068e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f001 f8c5 	bl	8007b10 <SPI_EndRxTxTransaction>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2220      	movs	r2, #32
 8006990:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e000      	b.n	80069c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80069be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b088      	sub	sp, #32
 80069de:	af02      	add	r7, sp, #8
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	603b      	str	r3, [r7, #0]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f6:	d112      	bne.n	8006a1e <HAL_SPI_Receive+0x44>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10e      	bne.n	8006a1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2204      	movs	r2, #4
 8006a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a08:	88fa      	ldrh	r2, [r7, #6]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f910 	bl	8006c3a <HAL_SPI_TransmitReceive>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	e109      	b.n	8006c32 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_SPI_Receive+0x52>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e102      	b.n	8006c32 <HAL_SPI_Receive+0x258>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a34:	f7fc fbf0 	bl	8003218 <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d002      	beq.n	8006a4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a46:	2302      	movs	r3, #2
 8006a48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a4a:	e0e9      	b.n	8006c20 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_SPI_Receive+0x7e>
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a5c:	e0e0      	b.n	8006c20 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2204      	movs	r2, #4
 8006a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aa8:	d908      	bls.n	8006abc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ab8:	605a      	str	r2, [r3, #4]
 8006aba:	e007      	b.n	8006acc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad4:	d10f      	bne.n	8006af6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006af4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	d007      	beq.n	8006b14 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b1c:	d867      	bhi.n	8006bee <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b1e:	e030      	b.n	8006b82 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d117      	bne.n	8006b5e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f103 020c 	add.w	r2, r3, #12
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	7812      	ldrb	r2, [r2, #0]
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006b5c:	e011      	b.n	8006b82 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b5e:	f7fc fb5b 	bl	8003218 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d803      	bhi.n	8006b76 <HAL_SPI_Receive+0x19c>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d102      	bne.n	8006b7c <HAL_SPI_Receive+0x1a2>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b80:	e04e      	b.n	8006c20 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1c8      	bne.n	8006b20 <HAL_SPI_Receive+0x146>
 8006b8e:	e034      	b.n	8006bfa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d115      	bne.n	8006bca <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	b292      	uxth	r2, r2
 8006baa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	1c9a      	adds	r2, r3, #2
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006bc8:	e011      	b.n	8006bee <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bca:	f7fc fb25 	bl	8003218 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d803      	bhi.n	8006be2 <HAL_SPI_Receive+0x208>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d102      	bne.n	8006be8 <HAL_SPI_Receive+0x20e>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006bec:	e018      	b.n	8006c20 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1ca      	bne.n	8006b90 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 ff2e 	bl	8007a60 <SPI_EndRxTransaction>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
 8006c1c:	e000      	b.n	8006c20 <HAL_SPI_Receive+0x246>
  }

error :
 8006c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b08a      	sub	sp, #40	; 0x28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_SPI_TransmitReceive+0x26>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e1fb      	b.n	8007058 <HAL_SPI_TransmitReceive+0x41e>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c68:	f7fc fad6 	bl	8003218 <HAL_GetTick>
 8006c6c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c74:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006c7c:	887b      	ldrh	r3, [r7, #2]
 8006c7e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006c80:	887b      	ldrh	r3, [r7, #2]
 8006c82:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c84:	7efb      	ldrb	r3, [r7, #27]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d00e      	beq.n	8006ca8 <HAL_SPI_TransmitReceive+0x6e>
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c90:	d106      	bne.n	8006ca0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d102      	bne.n	8006ca0 <HAL_SPI_TransmitReceive+0x66>
 8006c9a:	7efb      	ldrb	r3, [r7, #27]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d003      	beq.n	8006ca8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ca6:	e1cd      	b.n	8007044 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_SPI_TransmitReceive+0x80>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_SPI_TransmitReceive+0x80>
 8006cb4:	887b      	ldrh	r3, [r7, #2]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d103      	bne.n	8006cc2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006cc0:	e1c0      	b.n	8007044 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d003      	beq.n	8006cd6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2205      	movs	r2, #5
 8006cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	887a      	ldrh	r2, [r7, #2]
 8006ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	887a      	ldrh	r2, [r7, #2]
 8006cee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	887a      	ldrh	r2, [r7, #2]
 8006cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	887a      	ldrh	r2, [r7, #2]
 8006d02:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d18:	d802      	bhi.n	8006d20 <HAL_SPI_TransmitReceive+0xe6>
 8006d1a:	8a3b      	ldrh	r3, [r7, #16]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d908      	bls.n	8006d32 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	e007      	b.n	8006d42 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d40:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b40      	cmp	r3, #64	; 0x40
 8006d4e:	d007      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d68:	d97c      	bls.n	8006e64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_SPI_TransmitReceive+0x13e>
 8006d72:	8a7b      	ldrh	r3, [r7, #18]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d169      	bne.n	8006e4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	881a      	ldrh	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	1c9a      	adds	r2, r3, #2
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d9c:	e056      	b.n	8006e4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d11b      	bne.n	8006de4 <HAL_SPI_TransmitReceive+0x1aa>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d016      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x1aa>
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d113      	bne.n	8006de4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	881a      	ldrh	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	1c9a      	adds	r2, r3, #2
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d11c      	bne.n	8006e2c <HAL_SPI_TransmitReceive+0x1f2>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	b292      	uxth	r2, r2
 8006e0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e10:	1c9a      	adds	r2, r3, #2
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e2c:	f7fc f9f4 	bl	8003218 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d807      	bhi.n	8006e4c <HAL_SPI_TransmitReceive+0x212>
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e42:	d003      	beq.n	8006e4c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006e4a:	e0fb      	b.n	8007044 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1a3      	bne.n	8006d9e <HAL_SPI_TransmitReceive+0x164>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d19d      	bne.n	8006d9e <HAL_SPI_TransmitReceive+0x164>
 8006e62:	e0df      	b.n	8007024 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <HAL_SPI_TransmitReceive+0x23a>
 8006e6c:	8a7b      	ldrh	r3, [r7, #18]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	f040 80cb 	bne.w	800700a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d912      	bls.n	8006ea4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	1c9a      	adds	r2, r3, #2
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b02      	subs	r3, #2
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ea2:	e0b2      	b.n	800700a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	330c      	adds	r3, #12
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eca:	e09e      	b.n	800700a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d134      	bne.n	8006f44 <HAL_SPI_TransmitReceive+0x30a>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d02f      	beq.n	8006f44 <HAL_SPI_TransmitReceive+0x30a>
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d12c      	bne.n	8006f44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d912      	bls.n	8006f1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	881a      	ldrh	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	1c9a      	adds	r2, r3, #2
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b02      	subs	r3, #2
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f18:	e012      	b.n	8006f40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d148      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x3aa>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d042      	beq.n	8006fe4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d923      	bls.n	8006fb2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	b292      	uxth	r2, r2
 8006f76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7c:	1c9a      	adds	r2, r3, #2
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b02      	subs	r3, #2
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d81f      	bhi.n	8006fe0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fae:	605a      	str	r2, [r3, #4]
 8006fb0:	e016      	b.n	8006fe0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f103 020c 	add.w	r2, r3, #12
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fe4:	f7fc f918 	bl	8003218 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d803      	bhi.n	8006ffc <HAL_SPI_TransmitReceive+0x3c2>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	d102      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x3c8>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007008:	e01c      	b.n	8007044 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	f47f af5b 	bne.w	8006ecc <HAL_SPI_TransmitReceive+0x292>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	f47f af54 	bne.w	8006ecc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 fd71 	bl	8007b10 <SPI_EndRxTxTransaction>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	661a      	str	r2, [r3, #96]	; 0x60
 8007040:	e000      	b.n	8007044 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007042:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007058:	4618      	mov	r0, r3
 800705a:	3728      	adds	r7, #40	; 0x28
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	4613      	mov	r3, r2
 800706c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d110      	bne.n	800709c <HAL_SPI_Receive_IT+0x3c>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007082:	d10b      	bne.n	800709c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2204      	movs	r2, #4
 8007088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800708c:	88fb      	ldrh	r3, [r7, #6]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	68b9      	ldr	r1, [r7, #8]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 f894 	bl	80071c0 <HAL_SPI_TransmitReceive_IT>
 8007098:	4603      	mov	r3, r0
 800709a:	e089      	b.n	80071b0 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_SPI_Receive_IT+0x4a>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e082      	b.n	80071b0 <HAL_SPI_Receive_IT+0x150>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d002      	beq.n	80070c4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80070be:	2302      	movs	r3, #2
 80070c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070c2:	e070      	b.n	80071a6 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_SPI_Receive_IT+0x70>
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070d4:	e067      	b.n	80071a6 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2204      	movs	r2, #4
 80070da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800711a:	d90b      	bls.n	8007134 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800712a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4a22      	ldr	r2, [pc, #136]	; (80071b8 <HAL_SPI_Receive_IT+0x158>)
 8007130:	64da      	str	r2, [r3, #76]	; 0x4c
 8007132:	e00a      	b.n	800714a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007142:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <HAL_SPI_Receive_IT+0x15c>)
 8007148:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007152:	d10f      	bne.n	8007174 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007162:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007172:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007182:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718e:	2b40      	cmp	r3, #64	; 0x40
 8007190:	d008      	beq.n	80071a4 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	e000      	b.n	80071a6 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80071a4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	080077d9 	.word	0x080077d9
 80071bc:	08007789 	.word	0x08007789

080071c0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_SPI_TransmitReceive_IT+0x20>
 80071dc:	2302      	movs	r3, #2
 80071de:	e091      	b.n	8007304 <HAL_SPI_TransmitReceive_IT+0x144>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071f6:	7dbb      	ldrb	r3, [r7, #22]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d00d      	beq.n	8007218 <HAL_SPI_TransmitReceive_IT+0x58>
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007202:	d106      	bne.n	8007212 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <HAL_SPI_TransmitReceive_IT+0x52>
 800720c:	7dbb      	ldrb	r3, [r7, #22]
 800720e:	2b04      	cmp	r3, #4
 8007210:	d002      	beq.n	8007218 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007212:	2302      	movs	r3, #2
 8007214:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007216:	e070      	b.n	80072fa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_SPI_TransmitReceive_IT+0x6a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <HAL_SPI_TransmitReceive_IT+0x6a>
 8007224:	887b      	ldrh	r3, [r7, #2]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800722e:	e064      	b.n	80072fa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b04      	cmp	r3, #4
 800723a:	d003      	beq.n	8007244 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2205      	movs	r2, #5
 8007240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	887a      	ldrh	r2, [r7, #2]
 8007254:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	887a      	ldrh	r2, [r7, #2]
 800725a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	887a      	ldrh	r2, [r7, #2]
 8007266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	887a      	ldrh	r2, [r7, #2]
 800726e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800727a:	d906      	bls.n	800728a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a24      	ldr	r2, [pc, #144]	; (8007310 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007280:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a23      	ldr	r2, [pc, #140]	; (8007314 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007286:	651a      	str	r2, [r3, #80]	; 0x50
 8007288:	e005      	b.n	8007296 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a22      	ldr	r2, [pc, #136]	; (8007318 <HAL_SPI_TransmitReceive_IT+0x158>)
 800728e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a22      	ldr	r2, [pc, #136]	; (800731c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007294:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800729e:	d802      	bhi.n	80072a6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80072a0:	887b      	ldrh	r3, [r7, #2]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d908      	bls.n	80072b8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	e007      	b.n	80072c8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072c6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80072d6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d008      	beq.n	80072f8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	e000      	b.n	80072fa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80072f8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
}
 8007304:	4618      	mov	r0, r3
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	080076c3 	.word	0x080076c3
 8007314:	08007729 	.word	0x08007729
 8007318:	08007573 	.word	0x08007573
 800731c:	08007631 	.word	0x08007631

08007320 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	099b      	lsrs	r3, r3, #6
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10f      	bne.n	8007364 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	099b      	lsrs	r3, r3, #6
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d004      	beq.n	8007364 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
    return;
 8007362:	e0d7      	b.n	8007514 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <HAL_SPI_IRQHandler+0x66>
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	09db      	lsrs	r3, r3, #7
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
    return;
 8007384:	e0c6      	b.n	8007514 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10c      	bne.n	80073ac <HAL_SPI_IRQHandler+0x8c>
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	099b      	lsrs	r3, r3, #6
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	0a1b      	lsrs	r3, r3, #8
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 80b4 	beq.w	8007514 <HAL_SPI_IRQHandler+0x1f4>
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80ad 	beq.w	8007514 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	099b      	lsrs	r3, r3, #6
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d023      	beq.n	800740e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d011      	beq.n	80073f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d6:	f043 0204 	orr.w	r2, r3, #4
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	617b      	str	r3, [r7, #20]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	e00b      	b.n	800740e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073f6:	2300      	movs	r3, #0
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	693b      	ldr	r3, [r7, #16]
        return;
 800740c:	e082      	b.n	8007514 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d014      	beq.n	8007444 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800741e:	f043 0201 	orr.w	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00c      	beq.n	800746a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007454:	f043 0208 	orr.w	r2, r3, #8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800745c:	2300      	movs	r3, #0
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746e:	2b00      	cmp	r3, #0
 8007470:	d04f      	beq.n	8007512 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007480:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <HAL_SPI_IRQHandler+0x17e>
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d034      	beq.n	8007508 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0203 	bic.w	r2, r2, #3
 80074ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d011      	beq.n	80074da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ba:	4a18      	ldr	r2, [pc, #96]	; (800751c <HAL_SPI_IRQHandler+0x1fc>)
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fb ffe9 	bl	800349a <HAL_DMA_Abort_IT>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d016      	beq.n	8007510 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	4a0d      	ldr	r2, [pc, #52]	; (800751c <HAL_SPI_IRQHandler+0x1fc>)
 80074e8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fb ffd3 	bl	800349a <HAL_DMA_Abort_IT>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007506:	e003      	b.n	8007510 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f813 	bl	8007534 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800750e:	e000      	b.n	8007512 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007510:	bf00      	nop
    return;
 8007512:	bf00      	nop
  }
}
 8007514:	3720      	adds	r7, #32
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	08007549 	.word	0x08007549

08007520 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7ff ffe5 	bl	8007534 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	d923      	bls.n	80075ce <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	b292      	uxth	r2, r2
 8007592:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	1c9a      	adds	r2, r3, #2
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b02      	subs	r3, #2
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d11f      	bne.n	80075fc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075ca:	605a      	str	r2, [r3, #4]
 80075cc:	e016      	b.n	80075fc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f103 020c 	add.w	r2, r3, #12
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10f      	bne.n	8007628 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007616:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 faba 	bl	8007b9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b01      	cmp	r3, #1
 8007640:	d912      	bls.n	8007668 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	881a      	ldrh	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	1c9a      	adds	r2, r3, #2
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b02      	subs	r3, #2
 8007660:	b29a      	uxth	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007666:	e012      	b.n	800768e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d110      	bne.n	80076ba <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076a6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d102      	bne.n	80076ba <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fa71 	bl	8007b9c <SPI_CloseRxTx_ISR>
    }
  }
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	b292      	uxth	r2, r2
 80076d6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10f      	bne.n	8007720 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800770e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa3e 	bl	8007b9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007734:	881a      	ldrh	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	1c9a      	adds	r2, r3, #2
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d110      	bne.n	8007780 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800776c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d102      	bne.n	8007780 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa0e 	bl	8007b9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f103 020c 	add.w	r2, r3, #12
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	7812      	ldrb	r2, [r2, #0]
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa28 	bl	8007c20 <SPI_CloseRx_ISR>
  }
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	b292      	uxth	r2, r2
 80077ec:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	1c9a      	adds	r2, r3, #2
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa02 	bl	8007c20 <SPI_CloseRx_ISR>
  }
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	4613      	mov	r3, r2
 8007832:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007834:	f7fb fcf0 	bl	8003218 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	4413      	add	r3, r2
 8007842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007844:	f7fb fce8 	bl	8003218 <HAL_GetTick>
 8007848:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800784a:	4b39      	ldr	r3, [pc, #228]	; (8007930 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	015b      	lsls	r3, r3, #5
 8007850:	0d1b      	lsrs	r3, r3, #20
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	fb02 f303 	mul.w	r3, r2, r3
 8007858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800785a:	e054      	b.n	8007906 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d050      	beq.n	8007906 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007864:	f7fb fcd8 	bl	8003218 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	429a      	cmp	r2, r3
 8007872:	d902      	bls.n	800787a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d13d      	bne.n	80078f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007892:	d111      	bne.n	80078b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800789c:	d004      	beq.n	80078a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a6:	d107      	bne.n	80078b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c0:	d10f      	bne.n	80078e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e017      	b.n	8007926 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	3b01      	subs	r3, #1
 8007904:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4013      	ands	r3, r2
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	429a      	cmp	r2, r3
 8007914:	bf0c      	ite	eq
 8007916:	2301      	moveq	r3, #1
 8007918:	2300      	movne	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	429a      	cmp	r2, r3
 8007922:	d19b      	bne.n	800785c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3720      	adds	r7, #32
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20000024 	.word	0x20000024

08007934 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	; 0x28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007946:	f7fb fc67 	bl	8003218 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	4413      	add	r3, r2
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007956:	f7fb fc5f 	bl	8003218 <HAL_GetTick>
 800795a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007964:	4b3d      	ldr	r3, [pc, #244]	; (8007a5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	00da      	lsls	r2, r3, #3
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	0d1b      	lsrs	r3, r3, #20
 8007974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007976:	fb02 f303 	mul.w	r3, r2, r3
 800797a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800797c:	e060      	b.n	8007a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007984:	d107      	bne.n	8007996 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007994:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d050      	beq.n	8007a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800799e:	f7fb fc3b 	bl	8003218 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d902      	bls.n	80079b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d13d      	bne.n	8007a30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079cc:	d111      	bne.n	80079f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d6:	d004      	beq.n	80079e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e0:	d107      	bne.n	80079f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079fa:	d10f      	bne.n	8007a1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e010      	b.n	8007a52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d196      	bne.n	800797e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3728      	adds	r7, #40	; 0x28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000024 	.word	0x20000024

08007a60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a74:	d111      	bne.n	8007a9a <SPI_EndRxTransaction+0x3a>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a7e:	d004      	beq.n	8007a8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a88:	d107      	bne.n	8007a9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2180      	movs	r1, #128	; 0x80
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7ff febd 	bl	8007824 <SPI_WaitFlagStateUntilTimeout>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab4:	f043 0220 	orr.w	r2, r3, #32
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e023      	b.n	8007b08 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ac8:	d11d      	bne.n	8007b06 <SPI_EndRxTransaction+0xa6>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad2:	d004      	beq.n	8007ade <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007adc:	d113      	bne.n	8007b06 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff ff22 	bl	8007934 <SPI_WaitFifoStateUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afa:	f043 0220 	orr.w	r2, r3, #32
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e000      	b.n	8007b08 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af02      	add	r7, sp, #8
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7ff ff03 	bl	8007934 <SPI_WaitFifoStateUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b38:	f043 0220 	orr.w	r2, r3, #32
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e027      	b.n	8007b94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2180      	movs	r1, #128	; 0x80
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff fe68 	bl	8007824 <SPI_WaitFlagStateUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d007      	beq.n	8007b6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e014      	b.n	8007b94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fedc 	bl	8007934 <SPI_WaitFifoStateUntilTimeout>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b86:	f043 0220 	orr.w	r2, r3, #32
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e000      	b.n	8007b94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ba4:	f7fb fb38 	bl	8003218 <HAL_GetTick>
 8007ba8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0220 	bic.w	r2, r2, #32
 8007bb8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	2164      	movs	r1, #100	; 0x64
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff ffa6 	bl	8007b10 <SPI_EndRxTxTransaction>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d005      	beq.n	8007bd6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bce:	f043 0220 	orr.w	r2, r3, #32
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d115      	bne.n	8007c0a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d107      	bne.n	8007bfa <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7f9 fd1e 	bl	8001634 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007bf8:	e00e      	b.n	8007c18 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff fc8c 	bl	8007520 <HAL_SPI_TxRxCpltCallback>
}
 8007c08:	e006      	b.n	8007c18 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fc8e 	bl	8007534 <HAL_SPI_ErrorCallback>
}
 8007c18:	bf00      	nop
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c36:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007c38:	f7fb faee 	bl	8003218 <HAL_GetTick>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	461a      	mov	r2, r3
 8007c40:	2164      	movs	r1, #100	; 0x64
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff ff0c 	bl	8007a60 <SPI_EndRxTransaction>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c52:	f043 0220 	orr.w	r2, r3, #32
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7f9 fce2 	bl	8001634 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007c70:	e002      	b.n	8007c78 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fc5e 	bl	8007534 <HAL_SPI_ErrorCallback>
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e042      	b.n	8007d18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7fb f973 	bl	8002f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2224      	movs	r2, #36	; 0x24
 8007cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 0201 	bic.w	r2, r2, #1
 8007cc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f8c4 	bl	8007e50 <UART_SetConfig>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d101      	bne.n	8007cd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e022      	b.n	8007d18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fbb4 	bl	8008448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0201 	orr.w	r2, r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fc3b 	bl	800858c <UART_CheckIdleState>
 8007d16:	4603      	mov	r3, r0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08a      	sub	sp, #40	; 0x28
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	f040 8084 	bne.w	8007e44 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <HAL_UART_Transmit+0x28>
 8007d42:	88fb      	ldrh	r3, [r7, #6]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e07c      	b.n	8007e46 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_UART_Transmit+0x3a>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e075      	b.n	8007e46 <HAL_UART_Transmit+0x126>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2221      	movs	r2, #33	; 0x21
 8007d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d72:	f7fb fa51 	bl	8003218 <HAL_GetTick>
 8007d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d90:	d108      	bne.n	8007da4 <HAL_UART_Transmit+0x84>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	61bb      	str	r3, [r7, #24]
 8007da2:	e003      	b.n	8007dac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007db4:	e02d      	b.n	8007e12 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2180      	movs	r1, #128	; 0x80
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fc2e 	bl	8008622 <UART_WaitOnFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e03a      	b.n	8007e46 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10b      	bne.n	8007dee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	881a      	ldrh	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007de2:	b292      	uxth	r2, r2
 8007de4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	3302      	adds	r3, #2
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e008      	b.n	8007e00 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	b292      	uxth	r2, r2
 8007df8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1cb      	bne.n	8007db6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2200      	movs	r2, #0
 8007e26:	2140      	movs	r1, #64	; 0x40
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fbfa 	bl	8008622 <UART_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e006      	b.n	8007e46 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e000      	b.n	8007e46 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007e44:	2302      	movs	r3, #2
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3720      	adds	r7, #32
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e54:	b08c      	sub	sp, #48	; 0x30
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4baa      	ldr	r3, [pc, #680]	; (8008128 <UART_SetConfig+0x2d8>)
 8007e80:	4013      	ands	r3, r2
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	6812      	ldr	r2, [r2, #0]
 8007e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a9f      	ldr	r2, [pc, #636]	; (800812c <UART_SetConfig+0x2dc>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d004      	beq.n	8007ebc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ec6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	6812      	ldr	r2, [r2, #0]
 8007ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	f023 010f 	bic.w	r1, r3, #15
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a90      	ldr	r2, [pc, #576]	; (8008130 <UART_SetConfig+0x2e0>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d125      	bne.n	8007f40 <UART_SetConfig+0xf0>
 8007ef4:	4b8f      	ldr	r3, [pc, #572]	; (8008134 <UART_SetConfig+0x2e4>)
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d81a      	bhi.n	8007f38 <UART_SetConfig+0xe8>
 8007f02:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <UART_SetConfig+0xb8>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f19 	.word	0x08007f19
 8007f0c:	08007f29 	.word	0x08007f29
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f31 	.word	0x08007f31
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f1e:	e116      	b.n	800814e <UART_SetConfig+0x2fe>
 8007f20:	2302      	movs	r3, #2
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f26:	e112      	b.n	800814e <UART_SetConfig+0x2fe>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f2e:	e10e      	b.n	800814e <UART_SetConfig+0x2fe>
 8007f30:	2308      	movs	r3, #8
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f36:	e10a      	b.n	800814e <UART_SetConfig+0x2fe>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3e:	e106      	b.n	800814e <UART_SetConfig+0x2fe>
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a7c      	ldr	r2, [pc, #496]	; (8008138 <UART_SetConfig+0x2e8>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d138      	bne.n	8007fbc <UART_SetConfig+0x16c>
 8007f4a:	4b7a      	ldr	r3, [pc, #488]	; (8008134 <UART_SetConfig+0x2e4>)
 8007f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f50:	f003 030c 	and.w	r3, r3, #12
 8007f54:	2b0c      	cmp	r3, #12
 8007f56:	d82d      	bhi.n	8007fb4 <UART_SetConfig+0x164>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <UART_SetConfig+0x110>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f95 	.word	0x08007f95
 8007f64:	08007fb5 	.word	0x08007fb5
 8007f68:	08007fb5 	.word	0x08007fb5
 8007f6c:	08007fb5 	.word	0x08007fb5
 8007f70:	08007fa5 	.word	0x08007fa5
 8007f74:	08007fb5 	.word	0x08007fb5
 8007f78:	08007fb5 	.word	0x08007fb5
 8007f7c:	08007fb5 	.word	0x08007fb5
 8007f80:	08007f9d 	.word	0x08007f9d
 8007f84:	08007fb5 	.word	0x08007fb5
 8007f88:	08007fb5 	.word	0x08007fb5
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fad 	.word	0x08007fad
 8007f94:	2300      	movs	r3, #0
 8007f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f9a:	e0d8      	b.n	800814e <UART_SetConfig+0x2fe>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fa2:	e0d4      	b.n	800814e <UART_SetConfig+0x2fe>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007faa:	e0d0      	b.n	800814e <UART_SetConfig+0x2fe>
 8007fac:	2308      	movs	r3, #8
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb2:	e0cc      	b.n	800814e <UART_SetConfig+0x2fe>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fba:	e0c8      	b.n	800814e <UART_SetConfig+0x2fe>
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a5e      	ldr	r2, [pc, #376]	; (800813c <UART_SetConfig+0x2ec>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d125      	bne.n	8008012 <UART_SetConfig+0x1c2>
 8007fc6:	4b5b      	ldr	r3, [pc, #364]	; (8008134 <UART_SetConfig+0x2e4>)
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fd0:	2b30      	cmp	r3, #48	; 0x30
 8007fd2:	d016      	beq.n	8008002 <UART_SetConfig+0x1b2>
 8007fd4:	2b30      	cmp	r3, #48	; 0x30
 8007fd6:	d818      	bhi.n	800800a <UART_SetConfig+0x1ba>
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d00a      	beq.n	8007ff2 <UART_SetConfig+0x1a2>
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d814      	bhi.n	800800a <UART_SetConfig+0x1ba>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <UART_SetConfig+0x19a>
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d008      	beq.n	8007ffa <UART_SetConfig+0x1aa>
 8007fe8:	e00f      	b.n	800800a <UART_SetConfig+0x1ba>
 8007fea:	2300      	movs	r3, #0
 8007fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ff0:	e0ad      	b.n	800814e <UART_SetConfig+0x2fe>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ff8:	e0a9      	b.n	800814e <UART_SetConfig+0x2fe>
 8007ffa:	2304      	movs	r3, #4
 8007ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008000:	e0a5      	b.n	800814e <UART_SetConfig+0x2fe>
 8008002:	2308      	movs	r3, #8
 8008004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008008:	e0a1      	b.n	800814e <UART_SetConfig+0x2fe>
 800800a:	2310      	movs	r3, #16
 800800c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008010:	e09d      	b.n	800814e <UART_SetConfig+0x2fe>
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a4a      	ldr	r2, [pc, #296]	; (8008140 <UART_SetConfig+0x2f0>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d125      	bne.n	8008068 <UART_SetConfig+0x218>
 800801c:	4b45      	ldr	r3, [pc, #276]	; (8008134 <UART_SetConfig+0x2e4>)
 800801e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008022:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008026:	2bc0      	cmp	r3, #192	; 0xc0
 8008028:	d016      	beq.n	8008058 <UART_SetConfig+0x208>
 800802a:	2bc0      	cmp	r3, #192	; 0xc0
 800802c:	d818      	bhi.n	8008060 <UART_SetConfig+0x210>
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	d00a      	beq.n	8008048 <UART_SetConfig+0x1f8>
 8008032:	2b80      	cmp	r3, #128	; 0x80
 8008034:	d814      	bhi.n	8008060 <UART_SetConfig+0x210>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <UART_SetConfig+0x1f0>
 800803a:	2b40      	cmp	r3, #64	; 0x40
 800803c:	d008      	beq.n	8008050 <UART_SetConfig+0x200>
 800803e:	e00f      	b.n	8008060 <UART_SetConfig+0x210>
 8008040:	2300      	movs	r3, #0
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008046:	e082      	b.n	800814e <UART_SetConfig+0x2fe>
 8008048:	2302      	movs	r3, #2
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800804e:	e07e      	b.n	800814e <UART_SetConfig+0x2fe>
 8008050:	2304      	movs	r3, #4
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008056:	e07a      	b.n	800814e <UART_SetConfig+0x2fe>
 8008058:	2308      	movs	r3, #8
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805e:	e076      	b.n	800814e <UART_SetConfig+0x2fe>
 8008060:	2310      	movs	r3, #16
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008066:	e072      	b.n	800814e <UART_SetConfig+0x2fe>
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a35      	ldr	r2, [pc, #212]	; (8008144 <UART_SetConfig+0x2f4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d12a      	bne.n	80080c8 <UART_SetConfig+0x278>
 8008072:	4b30      	ldr	r3, [pc, #192]	; (8008134 <UART_SetConfig+0x2e4>)
 8008074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800807c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008080:	d01a      	beq.n	80080b8 <UART_SetConfig+0x268>
 8008082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008086:	d81b      	bhi.n	80080c0 <UART_SetConfig+0x270>
 8008088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800808c:	d00c      	beq.n	80080a8 <UART_SetConfig+0x258>
 800808e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008092:	d815      	bhi.n	80080c0 <UART_SetConfig+0x270>
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <UART_SetConfig+0x250>
 8008098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809c:	d008      	beq.n	80080b0 <UART_SetConfig+0x260>
 800809e:	e00f      	b.n	80080c0 <UART_SetConfig+0x270>
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080a6:	e052      	b.n	800814e <UART_SetConfig+0x2fe>
 80080a8:	2302      	movs	r3, #2
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ae:	e04e      	b.n	800814e <UART_SetConfig+0x2fe>
 80080b0:	2304      	movs	r3, #4
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b6:	e04a      	b.n	800814e <UART_SetConfig+0x2fe>
 80080b8:	2308      	movs	r3, #8
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e046      	b.n	800814e <UART_SetConfig+0x2fe>
 80080c0:	2310      	movs	r3, #16
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e042      	b.n	800814e <UART_SetConfig+0x2fe>
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a17      	ldr	r2, [pc, #92]	; (800812c <UART_SetConfig+0x2dc>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d13a      	bne.n	8008148 <UART_SetConfig+0x2f8>
 80080d2:	4b18      	ldr	r3, [pc, #96]	; (8008134 <UART_SetConfig+0x2e4>)
 80080d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080e0:	d01a      	beq.n	8008118 <UART_SetConfig+0x2c8>
 80080e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080e6:	d81b      	bhi.n	8008120 <UART_SetConfig+0x2d0>
 80080e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ec:	d00c      	beq.n	8008108 <UART_SetConfig+0x2b8>
 80080ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f2:	d815      	bhi.n	8008120 <UART_SetConfig+0x2d0>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <UART_SetConfig+0x2b0>
 80080f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fc:	d008      	beq.n	8008110 <UART_SetConfig+0x2c0>
 80080fe:	e00f      	b.n	8008120 <UART_SetConfig+0x2d0>
 8008100:	2300      	movs	r3, #0
 8008102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008106:	e022      	b.n	800814e <UART_SetConfig+0x2fe>
 8008108:	2302      	movs	r3, #2
 800810a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810e:	e01e      	b.n	800814e <UART_SetConfig+0x2fe>
 8008110:	2304      	movs	r3, #4
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008116:	e01a      	b.n	800814e <UART_SetConfig+0x2fe>
 8008118:	2308      	movs	r3, #8
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811e:	e016      	b.n	800814e <UART_SetConfig+0x2fe>
 8008120:	2310      	movs	r3, #16
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008126:	e012      	b.n	800814e <UART_SetConfig+0x2fe>
 8008128:	cfff69f3 	.word	0xcfff69f3
 800812c:	40008000 	.word	0x40008000
 8008130:	40013800 	.word	0x40013800
 8008134:	40021000 	.word	0x40021000
 8008138:	40004400 	.word	0x40004400
 800813c:	40004800 	.word	0x40004800
 8008140:	40004c00 	.word	0x40004c00
 8008144:	40005000 	.word	0x40005000
 8008148:	2310      	movs	r3, #16
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4aae      	ldr	r2, [pc, #696]	; (800840c <UART_SetConfig+0x5bc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	f040 8097 	bne.w	8008288 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800815a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800815e:	2b08      	cmp	r3, #8
 8008160:	d823      	bhi.n	80081aa <UART_SetConfig+0x35a>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <UART_SetConfig+0x318>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	0800818d 	.word	0x0800818d
 800816c:	080081ab 	.word	0x080081ab
 8008170:	08008195 	.word	0x08008195
 8008174:	080081ab 	.word	0x080081ab
 8008178:	0800819b 	.word	0x0800819b
 800817c:	080081ab 	.word	0x080081ab
 8008180:	080081ab 	.word	0x080081ab
 8008184:	080081ab 	.word	0x080081ab
 8008188:	080081a3 	.word	0x080081a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800818c:	f7fd fbb0 	bl	80058f0 <HAL_RCC_GetPCLK1Freq>
 8008190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008192:	e010      	b.n	80081b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008194:	4b9e      	ldr	r3, [pc, #632]	; (8008410 <UART_SetConfig+0x5c0>)
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008198:	e00d      	b.n	80081b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800819a:	f7fd fb11 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 800819e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081a0:	e009      	b.n	80081b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081a8:	e005      	b.n	80081b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 8130 	beq.w	800841e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	4a94      	ldr	r2, [pc, #592]	; (8008414 <UART_SetConfig+0x5c4>)
 80081c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c8:	461a      	mov	r2, r3
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80081d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	4613      	mov	r3, r2
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	4413      	add	r3, r2
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d305      	bcc.n	80081ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d903      	bls.n	80081f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081f4:	e113      	b.n	800841e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	2200      	movs	r2, #0
 80081fa:	60bb      	str	r3, [r7, #8]
 80081fc:	60fa      	str	r2, [r7, #12]
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	4a84      	ldr	r2, [pc, #528]	; (8008414 <UART_SetConfig+0x5c4>)
 8008204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008208:	b29b      	uxth	r3, r3
 800820a:	2200      	movs	r2, #0
 800820c:	603b      	str	r3, [r7, #0]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008214:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008218:	f7f7 fff0 	bl	80001fc <__aeabi_uldivmod>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4610      	mov	r0, r2
 8008222:	4619      	mov	r1, r3
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	020b      	lsls	r3, r1, #8
 800822e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008232:	0202      	lsls	r2, r0, #8
 8008234:	6979      	ldr	r1, [r7, #20]
 8008236:	6849      	ldr	r1, [r1, #4]
 8008238:	0849      	lsrs	r1, r1, #1
 800823a:	2000      	movs	r0, #0
 800823c:	460c      	mov	r4, r1
 800823e:	4605      	mov	r5, r0
 8008240:	eb12 0804 	adds.w	r8, r2, r4
 8008244:	eb43 0905 	adc.w	r9, r3, r5
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	469a      	mov	sl, r3
 8008250:	4693      	mov	fp, r2
 8008252:	4652      	mov	r2, sl
 8008254:	465b      	mov	r3, fp
 8008256:	4640      	mov	r0, r8
 8008258:	4649      	mov	r1, r9
 800825a:	f7f7 ffcf 	bl	80001fc <__aeabi_uldivmod>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4613      	mov	r3, r2
 8008264:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800826c:	d308      	bcc.n	8008280 <UART_SetConfig+0x430>
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008274:	d204      	bcs.n	8008280 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6a3a      	ldr	r2, [r7, #32]
 800827c:	60da      	str	r2, [r3, #12]
 800827e:	e0ce      	b.n	800841e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008286:	e0ca      	b.n	800841e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008290:	d166      	bne.n	8008360 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008292:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008296:	2b08      	cmp	r3, #8
 8008298:	d827      	bhi.n	80082ea <UART_SetConfig+0x49a>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <UART_SetConfig+0x450>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082c5 	.word	0x080082c5
 80082a4:	080082cd 	.word	0x080082cd
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082eb 	.word	0x080082eb
 80082b0:	080082db 	.word	0x080082db
 80082b4:	080082eb 	.word	0x080082eb
 80082b8:	080082eb 	.word	0x080082eb
 80082bc:	080082eb 	.word	0x080082eb
 80082c0:	080082e3 	.word	0x080082e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082c4:	f7fd fb14 	bl	80058f0 <HAL_RCC_GetPCLK1Freq>
 80082c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082ca:	e014      	b.n	80082f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082cc:	f7fd fb26 	bl	800591c <HAL_RCC_GetPCLK2Freq>
 80082d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082d2:	e010      	b.n	80082f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082d4:	4b4e      	ldr	r3, [pc, #312]	; (8008410 <UART_SetConfig+0x5c0>)
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082d8:	e00d      	b.n	80082f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082da:	f7fd fa71 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 80082de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082e0:	e009      	b.n	80082f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082e8:	e005      	b.n	80082f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 8090 	beq.w	800841e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	4a44      	ldr	r2, [pc, #272]	; (8008414 <UART_SetConfig+0x5c4>)
 8008304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008308:	461a      	mov	r2, r3
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008310:	005a      	lsls	r2, r3, #1
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	085b      	lsrs	r3, r3, #1
 8008318:	441a      	add	r2, r3
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008322:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	2b0f      	cmp	r3, #15
 8008328:	d916      	bls.n	8008358 <UART_SetConfig+0x508>
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008330:	d212      	bcs.n	8008358 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	b29b      	uxth	r3, r3
 8008336:	f023 030f 	bic.w	r3, r3, #15
 800833a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	b29b      	uxth	r3, r3
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	b29a      	uxth	r2, r3
 8008348:	8bfb      	ldrh	r3, [r7, #30]
 800834a:	4313      	orrs	r3, r2
 800834c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	8bfa      	ldrh	r2, [r7, #30]
 8008354:	60da      	str	r2, [r3, #12]
 8008356:	e062      	b.n	800841e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800835e:	e05e      	b.n	800841e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008360:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008364:	2b08      	cmp	r3, #8
 8008366:	d828      	bhi.n	80083ba <UART_SetConfig+0x56a>
 8008368:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <UART_SetConfig+0x520>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	08008395 	.word	0x08008395
 8008374:	0800839d 	.word	0x0800839d
 8008378:	080083a5 	.word	0x080083a5
 800837c:	080083bb 	.word	0x080083bb
 8008380:	080083ab 	.word	0x080083ab
 8008384:	080083bb 	.word	0x080083bb
 8008388:	080083bb 	.word	0x080083bb
 800838c:	080083bb 	.word	0x080083bb
 8008390:	080083b3 	.word	0x080083b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008394:	f7fd faac 	bl	80058f0 <HAL_RCC_GetPCLK1Freq>
 8008398:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800839a:	e014      	b.n	80083c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800839c:	f7fd fabe 	bl	800591c <HAL_RCC_GetPCLK2Freq>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083a2:	e010      	b.n	80083c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a4:	4b1a      	ldr	r3, [pc, #104]	; (8008410 <UART_SetConfig+0x5c0>)
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083a8:	e00d      	b.n	80083c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083aa:	f7fd fa09 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 80083ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083b0:	e009      	b.n	80083c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083b8:	e005      	b.n	80083c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083c4:	bf00      	nop
    }

    if (pclk != 0U)
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d028      	beq.n	800841e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	4a10      	ldr	r2, [pc, #64]	; (8008414 <UART_SetConfig+0x5c4>)
 80083d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d6:	461a      	mov	r2, r3
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	fbb3 f2f2 	udiv	r2, r3, r2
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	441a      	add	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	2b0f      	cmp	r3, #15
 80083f4:	d910      	bls.n	8008418 <UART_SetConfig+0x5c8>
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fc:	d20c      	bcs.n	8008418 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	b29a      	uxth	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60da      	str	r2, [r3, #12]
 8008408:	e009      	b.n	800841e <UART_SetConfig+0x5ce>
 800840a:	bf00      	nop
 800840c:	40008000 	.word	0x40008000
 8008410:	00f42400 	.word	0x00f42400
 8008414:	08008af0 	.word	0x08008af0
      }
      else
      {
        ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2201      	movs	r2, #1
 8008422:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	2201      	movs	r2, #1
 800842a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2200      	movs	r2, #0
 8008432:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2200      	movs	r2, #0
 8008438:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800843a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800843e:	4618      	mov	r0, r3
 8008440:	3730      	adds	r7, #48	; 0x30
 8008442:	46bd      	mov	sp, r7
 8008444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00a      	beq.n	8008472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	f003 0308 	and.w	r3, r3, #8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01a      	beq.n	800855e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008546:	d10a      	bne.n	800855e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	605a      	str	r2, [r3, #4]
  }
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af02      	add	r7, sp, #8
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800859c:	f7fa fe3c 	bl	8003218 <HAL_GetTick>
 80085a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d10e      	bne.n	80085ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f82f 	bl	8008622 <UART_WaitOnFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e025      	b.n	800861a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d10e      	bne.n	80085fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f819 	bl	8008622 <UART_WaitOnFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e00f      	b.n	800861a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b09c      	sub	sp, #112	; 0x70
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	603b      	str	r3, [r7, #0]
 800862e:	4613      	mov	r3, r2
 8008630:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008632:	e0a9      	b.n	8008788 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863a:	f000 80a5 	beq.w	8008788 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863e:	f7fa fdeb 	bl	8003218 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800864a:	429a      	cmp	r2, r3
 800864c:	d302      	bcc.n	8008654 <UART_WaitOnFlagUntilTimeout+0x32>
 800864e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008650:	2b00      	cmp	r3, #0
 8008652:	d140      	bne.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008664:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008668:	667b      	str	r3, [r7, #100]	; 0x64
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008674:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008678:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e6      	bne.n	8008654 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	f023 0301 	bic.w	r3, r3, #1
 800869c:	663b      	str	r3, [r7, #96]	; 0x60
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80086a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e5      	bne.n	8008686 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e069      	b.n	80087aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d051      	beq.n	8008788 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086f2:	d149      	bne.n	8008788 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871c:	637b      	str	r3, [r7, #52]	; 0x34
 800871e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e6      	bne.n	80086fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3308      	adds	r3, #8
 8008736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	613b      	str	r3, [r7, #16]
   return(result);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	66bb      	str	r3, [r7, #104]	; 0x68
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3308      	adds	r3, #8
 800874e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008750:	623a      	str	r2, [r7, #32]
 8008752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	69f9      	ldr	r1, [r7, #28]
 8008756:	6a3a      	ldr	r2, [r7, #32]
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	61bb      	str	r3, [r7, #24]
   return(result);
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e5      	bne.n	8008730 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2220      	movs	r2, #32
 8008768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2220      	movs	r2, #32
 8008770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2220      	movs	r2, #32
 8008778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e010      	b.n	80087aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69da      	ldr	r2, [r3, #28]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	4013      	ands	r3, r2
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	429a      	cmp	r2, r3
 8008796:	bf0c      	ite	eq
 8008798:	2301      	moveq	r3, #1
 800879a:	2300      	movne	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	461a      	mov	r2, r3
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	f43f af46 	beq.w	8008634 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3770      	adds	r7, #112	; 0x70
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d101      	bne.n	80087c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e027      	b.n	8008818 <HAL_UARTEx_DisableFifoMode+0x66>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2224      	movs	r2, #36	; 0x24
 80087d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f022 0201 	bic.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2220      	movs	r2, #32
 800880a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008838:	2302      	movs	r3, #2
 800883a:	e02d      	b.n	8008898 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2224      	movs	r2, #36	; 0x24
 8008848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0201 	bic.w	r2, r2, #1
 8008862:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f84f 	bl	800891c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2220      	movs	r2, #32
 800888a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e02d      	b.n	8008914 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2224      	movs	r2, #36	; 0x24
 80088c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0201 	bic.w	r2, r2, #1
 80088de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f811 	bl	800891c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2220      	movs	r2, #32
 8008906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008928:	2b00      	cmp	r3, #0
 800892a:	d108      	bne.n	800893e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800893c:	e031      	b.n	80089a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800893e:	2308      	movs	r3, #8
 8008940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008942:	2308      	movs	r3, #8
 8008944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	0e5b      	lsrs	r3, r3, #25
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	0f5b      	lsrs	r3, r3, #29
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	7b3a      	ldrb	r2, [r7, #12]
 800896a:	4911      	ldr	r1, [pc, #68]	; (80089b0 <UARTEx_SetNbDataToProcess+0x94>)
 800896c:	5c8a      	ldrb	r2, [r1, r2]
 800896e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008972:	7b3a      	ldrb	r2, [r7, #12]
 8008974:	490f      	ldr	r1, [pc, #60]	; (80089b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008978:	fb93 f3f2 	sdiv	r3, r3, r2
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	7b7a      	ldrb	r2, [r7, #13]
 8008988:	4909      	ldr	r1, [pc, #36]	; (80089b0 <UARTEx_SetNbDataToProcess+0x94>)
 800898a:	5c8a      	ldrb	r2, [r1, r2]
 800898c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008990:	7b7a      	ldrb	r2, [r7, #13]
 8008992:	4908      	ldr	r1, [pc, #32]	; (80089b4 <UARTEx_SetNbDataToProcess+0x98>)
 8008994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008996:	fb93 f3f2 	sdiv	r3, r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	08008b08 	.word	0x08008b08
 80089b4:	08008b10 	.word	0x08008b10

080089b8 <__libc_init_array>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	4d0d      	ldr	r5, [pc, #52]	; (80089f0 <__libc_init_array+0x38>)
 80089bc:	4c0d      	ldr	r4, [pc, #52]	; (80089f4 <__libc_init_array+0x3c>)
 80089be:	1b64      	subs	r4, r4, r5
 80089c0:	10a4      	asrs	r4, r4, #2
 80089c2:	2600      	movs	r6, #0
 80089c4:	42a6      	cmp	r6, r4
 80089c6:	d109      	bne.n	80089dc <__libc_init_array+0x24>
 80089c8:	4d0b      	ldr	r5, [pc, #44]	; (80089f8 <__libc_init_array+0x40>)
 80089ca:	4c0c      	ldr	r4, [pc, #48]	; (80089fc <__libc_init_array+0x44>)
 80089cc:	f000 f820 	bl	8008a10 <_init>
 80089d0:	1b64      	subs	r4, r4, r5
 80089d2:	10a4      	asrs	r4, r4, #2
 80089d4:	2600      	movs	r6, #0
 80089d6:	42a6      	cmp	r6, r4
 80089d8:	d105      	bne.n	80089e6 <__libc_init_array+0x2e>
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e0:	4798      	blx	r3
 80089e2:	3601      	adds	r6, #1
 80089e4:	e7ee      	b.n	80089c4 <__libc_init_array+0xc>
 80089e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ea:	4798      	blx	r3
 80089ec:	3601      	adds	r6, #1
 80089ee:	e7f2      	b.n	80089d6 <__libc_init_array+0x1e>
 80089f0:	08008b20 	.word	0x08008b20
 80089f4:	08008b20 	.word	0x08008b20
 80089f8:	08008b20 	.word	0x08008b20
 80089fc:	08008b24 	.word	0x08008b24

08008a00 <memset>:
 8008a00:	4402      	add	r2, r0
 8008a02:	4603      	mov	r3, r0
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d100      	bne.n	8008a0a <memset+0xa>
 8008a08:	4770      	bx	lr
 8008a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a0e:	e7f9      	b.n	8008a04 <memset+0x4>

08008a10 <_init>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	bf00      	nop
 8008a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	469e      	mov	lr, r3
 8008a1a:	4770      	bx	lr

08008a1c <_fini>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	bf00      	nop
 8008a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a22:	bc08      	pop	{r3}
 8008a24:	469e      	mov	lr, r3
 8008a26:	4770      	bx	lr
