
GL_REV2_R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cdc  08008cdc  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ce4  08008ce4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ce4  08008ce4  00018ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08008cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000702d0  20000030  08008d1c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20070300  08008d1c  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015456  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025aa  00000000  00000000  000354b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00037a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00038a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003011d  00000000  00000000  000399a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001486c  00000000  00000000  00069ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00122393  00000000  00000000  0007e331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a06c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004374  00000000  00000000  001a0714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000030 	.word	0x20000030
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008bd4 	.word	0x08008bd4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000034 	.word	0x20000034
 80001f8:	08008bd4 	.word	0x08008bd4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f002 fe72 	bl	80031ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 fa35 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fcaf 	bl	8000e70 <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 8000512:	f000 fa7f 	bl	8000a14 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000516:	f000 fb69 	bl	8000bec <MX_LTDC_Init>
  MX_SPI2_Init();
 800051a:	f000 fbe7 	bl	8000cec <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fc23 	bl	8000d68 <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fc59 	bl	8000dd8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 8000526:	f000 fd79 	bl	800101c <mipi_config>
  HAL_UART_Transmit(&huart4, "start_s", 7, 1000);
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	2207      	movs	r2, #7
 8000530:	4996      	ldr	r1, [pc, #600]	; (800078c <main+0x28c>)
 8000532:	4897      	ldr	r0, [pc, #604]	; (8000790 <main+0x290>)
 8000534:	f007 fc7a 	bl	8007e2c <HAL_UART_Transmit>

  play_mode = 3;
 8000538:	4b96      	ldr	r3, [pc, #600]	; (8000794 <main+0x294>)
 800053a:	2203      	movs	r2, #3
 800053c:	701a      	strb	r2, [r3, #0]
  play_mode_source = 0;
 800053e:	4b96      	ldr	r3, [pc, #600]	; (8000798 <main+0x298>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
  mode_init();
 8000544:	f001 fc48 	bl	8001dd8 <mode_init>
  write_flash_config();
 8000548:	f001 fddc 	bl	8002104 <write_flash_config>
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	e00d      	b.n	800056e <main+0x6e>
	  Mode_config[i*2]=0;    //picture_id
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4a91      	ldr	r2, [pc, #580]	; (800079c <main+0x29c>)
 8000558:	2100      	movs	r1, #0
 800055a:	54d1      	strb	r1, [r2, r3]
	  Mode_config[i*2+1]=0;  //picture_delay_time
 800055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	3301      	adds	r3, #1
 8000562:	4a8e      	ldr	r2, [pc, #568]	; (800079c <main+0x29c>)
 8000564:	2100      	movs	r1, #0
 8000566:	54d1      	strb	r1, [r2, r3]
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	3301      	adds	r3, #1
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	2b37      	cmp	r3, #55	; 0x37
 8000572:	ddee      	ble.n	8000552 <main+0x52>
  }
  Mode_config[Max_pic_per_mode*2*Max_mode_num-1] = 0; //playing_mode
 8000574:	4b89      	ldr	r3, [pc, #548]	; (800079c <main+0x29c>)
 8000576:	2200      	movs	r2, #0
 8000578:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  read_flash_config();
 800057c:	f001 fe90 	bl	80022a0 <read_flash_config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2102      	movs	r1, #2
 8000584:	4886      	ldr	r0, [pc, #536]	; (80007a0 <main+0x2a0>)
 8000586:	f004 f889 	bl	800469c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	4884      	ldr	r0, [pc, #528]	; (80007a4 <main+0x2a4>)
 8000592:	f004 f883 	bl	800469c <HAL_GPIO_WritePin>

  HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8000596:	2202      	movs	r2, #2
 8000598:	4983      	ldr	r1, [pc, #524]	; (80007a8 <main+0x2a8>)
 800059a:	4884      	ldr	r0, [pc, #528]	; (80007ac <main+0x2ac>)
 800059c:	f006 fdea 	bl	8007174 <HAL_SPI_Receive_IT>
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
 80005a4:	e007      	b.n	80005b6 <main+0xb6>
  {
	  image_arr_rgb888[i] = 0xFF;
 80005a6:	4a82      	ldr	r2, [pc, #520]	; (80007b0 <main+0x2b0>)
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	4413      	add	r3, r2
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	3301      	adds	r3, #1
 80005b4:	623b      	str	r3, [r7, #32]
 80005b6:	4b7f      	ldr	r3, [pc, #508]	; (80007b4 <main+0x2b4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a7f      	ldr	r2, [pc, #508]	; (80007b8 <main+0x2b8>)
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	fb03 f202 	mul.w	r2, r3, r2
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	441a      	add	r2, r3
 80005c8:	6a3b      	ldr	r3, [r7, #32]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d8eb      	bhi.n	80005a6 <main+0xa6>
    while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode_source == 0)
 80005ce:	4b72      	ldr	r3, [pc, #456]	; (8000798 <main+0x298>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f040 8102 	bne.w	80007dc <main+0x2dc>
	  {
		  if (play_mode == 0)
 80005d8:	4b6e      	ldr	r3, [pc, #440]	; (8000794 <main+0x294>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d109      	bne.n	80005f4 <main+0xf4>
		  {
			  read_flash_page(&frame_buf_flash, display_image_number);
 80005e0:	4b76      	ldr	r3, [pc, #472]	; (80007bc <main+0x2bc>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4876      	ldr	r0, [pc, #472]	; (80007c0 <main+0x2c0>)
 80005e8:	f001 ffb8 	bl	800255c <read_flash_page>
			  display_panel(&frame_buf_flash);
 80005ec:	4874      	ldr	r0, [pc, #464]	; (80007c0 <main+0x2c0>)
 80005ee:	f001 fb3f 	bl	8001c70 <display_panel>
 80005f2:	e143      	b.n	800087c <main+0x37c>
		  }
		  else if (play_mode == 1)
 80005f4:	4b67      	ldr	r3, [pc, #412]	; (8000794 <main+0x294>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d143      	bne.n	8000684 <main+0x184>
		  {
			  uint8_t should_break = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	77fb      	strb	r3, [r7, #31]
			  while(1)
			  {
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 8000600:	4b70      	ldr	r3, [pc, #448]	; (80007c4 <main+0x2c4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	e02b      	b.n	8000660 <main+0x160>
				  {
					  HAL_Delay(5);
 8000608:	2005      	movs	r0, #5
 800060a:	f002 fe65 	bl	80032d8 <HAL_Delay>
					  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
 800060e:	bf00      	nop
 8000610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f004 f828 	bl	800466c <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d0f6      	beq.n	8000610 <main+0x110>
					  if (play_mode_source != 0 || play_mode != 1 || setting_changed == 1)
 8000622:	4b5d      	ldr	r3, [pc, #372]	; (8000798 <main+0x298>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d107      	bne.n	800063a <main+0x13a>
 800062a:	4b5a      	ldr	r3, [pc, #360]	; (8000794 <main+0x294>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d103      	bne.n	800063a <main+0x13a>
 8000632:	4b65      	ldr	r3, [pc, #404]	; (80007c8 <main+0x2c8>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d102      	bne.n	8000640 <main+0x140>
					  {
						  should_break = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	77fb      	strb	r3, [r7, #31]
						  break;
 800063e:	e015      	b.n	800066c <main+0x16c>
					  }
					  read_flash_page(&frame_buf_flash, i);
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	485e      	ldr	r0, [pc, #376]	; (80007c0 <main+0x2c0>)
 8000648:	f001 ff88 	bl	800255c <read_flash_page>
					  display_panel(&frame_buf_flash);
 800064c:	485c      	ldr	r0, [pc, #368]	; (80007c0 <main+0x2c0>)
 800064e:	f001 fb0f 	bl	8001c70 <display_panel>
					  display_image_number = i;
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b59      	ldr	r3, [pc, #356]	; (80007bc <main+0x2bc>)
 8000658:	701a      	strb	r2, [r3, #0]
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	3301      	adds	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <main+0x2cc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	4293      	cmp	r3, r2
 800066a:	ddcd      	ble.n	8000608 <main+0x108>
				  }
				  if (should_break == 0)
 800066c:	7ffb      	ldrb	r3, [r7, #31]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d103      	bne.n	800067a <main+0x17a>
				  {
					  display_image_number = 0;
 8000672:	4b52      	ldr	r3, [pc, #328]	; (80007bc <main+0x2bc>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	e7c2      	b.n	8000600 <main+0x100>
				  }
				  else if (should_break == 1)
 800067a:	7ffb      	ldrb	r3, [r7, #31]
 800067c:	2b01      	cmp	r3, #1
 800067e:	f000 80fa 	beq.w	8000876 <main+0x376>
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 8000682:	e7bd      	b.n	8000600 <main+0x100>
				  {
				  	  break;
				  }
			  }
		  }
		  else if (play_mode == 3)
 8000684:	4b43      	ldr	r3, [pc, #268]	; (8000794 <main+0x294>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b03      	cmp	r3, #3
 800068a:	f040 80f7 	bne.w	800087c <main+0x37c>
		  {
			  uint8_t should_break = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]
			  uint8_t Picture_count = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	75bb      	strb	r3, [r7, #22]
			  //initial or change mode
			  if( Mode_changed )
 8000696:	4b4e      	ldr	r3, [pc, #312]	; (80007d0 <main+0x2d0>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d042      	beq.n	8000724 <main+0x224>
			  {
				  read_flash_config();
 800069e:	f001 fdff 	bl	80022a0 <read_flash_config>
				  Playing_mode = Mode_config[100];//playing_mode_store = [Max_pic_per_mode*2*(Max_mode_num-1)]
 80006a2:	4b3e      	ldr	r3, [pc, #248]	; (800079c <main+0x29c>)
 80006a4:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80006a8:	4b4a      	ldr	r3, [pc, #296]	; (80007d4 <main+0x2d4>)
 80006aa:	701a      	strb	r2, [r3, #0]
				  //fill Current_mode_config from Mode_config by using Playing_mode
				  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 80006ac:	4b49      	ldr	r3, [pc, #292]	; (80007d4 <main+0x2d4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4613      	mov	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	e00e      	b.n	80006e0 <main+0x1e0>
					 Current_mode_config[j]=Mode_config[i];
 80006c2:	4a36      	ldr	r2, [pc, #216]	; (800079c <main+0x29c>)
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	4413      	add	r3, r2
 80006c8:	7819      	ldrb	r1, [r3, #0]
 80006ca:	4a43      	ldr	r2, [pc, #268]	; (80007d8 <main+0x2d8>)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	460a      	mov	r2, r1
 80006d2:	701a      	strb	r2, [r3, #0]
					 j++;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
				  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	3301      	adds	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <main+0x2d4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	461a      	mov	r2, r3
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	4293      	cmp	r3, r2
 80006f4:	dbe5      	blt.n	80006c2 <main+0x1c2>
				  }
				  Mode_changed = 0;
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <main+0x2d0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
				  //check how many pics to display
				  //warning don't set Current_mode_config = [255 255 1 2 10 2 255 255 255 255]
				  Picture_count = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	75bb      	strb	r3, [r7, #22]
				  for(int i = 0 ; i < 5 ; i++){
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	e00b      	b.n	800071e <main+0x21e>
					 if(Current_mode_config[i*2] != 255)
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4a33      	ldr	r2, [pc, #204]	; (80007d8 <main+0x2d8>)
 800070c:	5cd3      	ldrb	r3, [r2, r3]
 800070e:	2bff      	cmp	r3, #255	; 0xff
 8000710:	d002      	beq.n	8000718 <main+0x218>
						 Picture_count++;
 8000712:	7dbb      	ldrb	r3, [r7, #22]
 8000714:	3301      	adds	r3, #1
 8000716:	75bb      	strb	r3, [r7, #22]
				  for(int i = 0 ; i < 5 ; i++){
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	3301      	adds	r3, #1
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	2b04      	cmp	r3, #4
 8000722:	ddf0      	ble.n	8000706 <main+0x206>
				  }
			  }
			  while(1)//display
			  {
				  for (int i = 0; i < Picture_count*2; i = i+2)
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	e026      	b.n	8000778 <main+0x278>
				  {
					  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);// wait to sync
 800072a:	bf00      	nop
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000734:	f003 ff9a 	bl	800466c <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d0f6      	beq.n	800072c <main+0x22c>
					  //int current_pic_delay=(Current_mode_config[i+1])*250;//ms
					  //HAL_Delay(current_pic_delay);
					  if (play_mode_source != 0 || play_mode != 3 || Mode_changed == 1)
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <main+0x298>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d107      	bne.n	8000756 <main+0x256>
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <main+0x294>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d103      	bne.n	8000756 <main+0x256>
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <main+0x2d0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d102      	bne.n	800075c <main+0x25c>
					  {
						  should_break = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	75fb      	strb	r3, [r7, #23]
						  break;
 800075a:	e012      	b.n	8000782 <main+0x282>
					  }
					  read_flash_page(&frame_buf_flash, Current_mode_config[i]);
 800075c:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <main+0x2d8>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <main+0x2c0>)
 8000768:	f001 fef8 	bl	800255c <read_flash_page>
					  display_panel(&frame_buf_flash);
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <main+0x2c0>)
 800076e:	f001 fa7f 	bl	8001c70 <display_panel>
				  for (int i = 0; i < Picture_count*2; i = i+2)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3302      	adds	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	7dbb      	ldrb	r3, [r7, #22]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	429a      	cmp	r2, r3
 8000780:	dbd3      	blt.n	800072a <main+0x22a>
				  }
				  if (should_break == 1)
 8000782:	7dfb      	ldrb	r3, [r7, #23]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d078      	beq.n	800087a <main+0x37a>
				  for (int i = 0; i < Picture_count*2; i = i+2)
 8000788:	e7cc      	b.n	8000724 <main+0x224>
 800078a:	bf00      	nop
 800078c:	08008bec 	.word	0x08008bec
 8000790:	200001d8 	.word	0x200001d8
 8000794:	20040270 	.word	0x20040270
 8000798:	20040271 	.word	0x20040271
 800079c:	2007027c 	.word	0x2007027c
 80007a0:	48000800 	.word	0x48000800
 80007a4:	48001400 	.word	0x48001400
 80007a8:	20070278 	.word	0x20070278
 80007ac:	20000174 	.word	0x20000174
 80007b0:	20040274 	.word	0x20040274
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000004 	.word	0x20000004
 80007bc:	20070274 	.word	0x20070274
 80007c0:	20030270 	.word	0x20030270
 80007c4:	2000026c 	.word	0x2000026c
 80007c8:	2007027a 	.word	0x2007027a
 80007cc:	2000000a 	.word	0x2000000a
 80007d0:	20000020 	.word	0x20000020
 80007d4:	2000001f 	.word	0x2000001f
 80007d8:	200702ec 	.word	0x200702ec
					  break;
				  }
			  }
		  }
	  }
	  else if (play_mode_source == 1)
 80007dc:	4b56      	ldr	r3, [pc, #344]	; (8000938 <main+0x438>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d140      	bne.n	8000866 <main+0x366>
	  {
		  if (play_mode == 2)
 80007e4:	4b55      	ldr	r3, [pc, #340]	; (800093c <main+0x43c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d138      	bne.n	800085e <main+0x35e>
		  {
			  while(1)
			  {
				  HAL_Delay(5);
 80007ec:	2005      	movs	r0, #5
 80007ee:	f002 fd73 	bl	80032d8 <HAL_Delay>
				  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
 80007f2:	bf00      	nop
 80007f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f003 ff36 	bl	800466c <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d0f6      	beq.n	80007f4 <main+0x2f4>
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <main+0x438>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d136      	bne.n	800087c <main+0x37c>
 800080e:	4b4b      	ldr	r3, [pc, #300]	; (800093c <main+0x43c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d132      	bne.n	800087c <main+0x37c>
 8000816:	4b4a      	ldr	r3, [pc, #296]	; (8000940 <main+0x440>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d02e      	beq.n	800087c <main+0x37c>
				  {
					  break;
				  }
				  display_panel(&frame_buf_0);
 800081e:	4849      	ldr	r0, [pc, #292]	; (8000944 <main+0x444>)
 8000820:	f001 fa26 	bl	8001c70 <display_panel>

				  HAL_Delay(5);
 8000824:	2005      	movs	r0, #5
 8000826:	f002 fd57 	bl	80032d8 <HAL_Delay>
				  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
 800082a:	bf00      	nop
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f003 ff1a 	bl	800466c <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d0f6      	beq.n	800082c <main+0x32c>
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 800083e:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <main+0x438>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d11a      	bne.n	800087c <main+0x37c>
 8000846:	4b3d      	ldr	r3, [pc, #244]	; (800093c <main+0x43c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d116      	bne.n	800087c <main+0x37c>
 800084e:	4b3c      	ldr	r3, [pc, #240]	; (8000940 <main+0x440>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d012      	beq.n	800087c <main+0x37c>
				  {
					  break;
				  }
				  display_panel(&frame_buf_1);
 8000856:	483c      	ldr	r0, [pc, #240]	; (8000948 <main+0x448>)
 8000858:	f001 fa0a 	bl	8001c70 <display_panel>
				  HAL_Delay(5);
 800085c:	e7c6      	b.n	80007ec <main+0x2ec>
			  }
		  }
		  else
		  {
			  display_panel(&frame_buf_0);
 800085e:	4839      	ldr	r0, [pc, #228]	; (8000944 <main+0x444>)
 8000860:	f001 fa06 	bl	8001c70 <display_panel>
 8000864:	e00a      	b.n	800087c <main+0x37c>
		  }
	  }
	  else if (play_mode_source == 2)
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <main+0x438>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d106      	bne.n	800087c <main+0x37c>
	  {
		  display_panel(&frame_buf_1);
 800086e:	4836      	ldr	r0, [pc, #216]	; (8000948 <main+0x448>)
 8000870:	f001 f9fe 	bl	8001c70 <display_panel>
 8000874:	e002      	b.n	800087c <main+0x37c>
				  	  break;
 8000876:	bf00      	nop
 8000878:	e000      	b.n	800087c <main+0x37c>
					  break;
 800087a:	bf00      	nop
	  }

	  if(setting_changed == 1)
 800087c:	4b30      	ldr	r3, [pc, #192]	; (8000940 <main+0x440>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d155      	bne.n	8000930 <main+0x430>
	  {
		  uint16_t Horizontal_blanking_total = Horizontal_blanking_H*256 + Horizontal_blanking_L;
 8000884:	4b31      	ldr	r3, [pc, #196]	; (800094c <main+0x44c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b29b      	uxth	r3, r3
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	b29a      	uxth	r2, r3
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <main+0x450>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b29b      	uxth	r3, r3
 8000894:	4413      	add	r3, r2
 8000896:	807b      	strh	r3, [r7, #2]
		  HBP = Horizontal_blanking_total / 3;
 8000898:	887b      	ldrh	r3, [r7, #2]
 800089a:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <main+0x454>)
 800089c:	fba2 2303 	umull	r2, r3, r2, r3
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <main+0x458>)
 80008a6:	801a      	strh	r2, [r3, #0]
		  HFP = Horizontal_blanking_total / 3;
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	4a2a      	ldr	r2, [pc, #168]	; (8000954 <main+0x454>)
 80008ac:	fba2 2303 	umull	r2, r3, r2, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	4b29      	ldr	r3, [pc, #164]	; (800095c <main+0x45c>)
 80008b6:	801a      	strh	r2, [r3, #0]
		  HSA = Horizontal_blanking_total - (HBP + HFP);
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <main+0x458>)
 80008ba:	881a      	ldrh	r2, [r3, #0]
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <main+0x45c>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	4413      	add	r3, r2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	887a      	ldrh	r2, [r7, #2]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <main+0x460>)
 80008cc:	801a      	strh	r2, [r3, #0]

		  uint16_t Vertical_blanking_total = Vertical_blanking_H*256 + Vertical_blanking_L;
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <main+0x464>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <main+0x468>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	4413      	add	r3, r2
 80008e0:	803b      	strh	r3, [r7, #0]
		  VBP = Vertical_blanking_total / 3;
 80008e2:	883b      	ldrh	r3, [r7, #0]
 80008e4:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <main+0x454>)
 80008e6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ea:	085b      	lsrs	r3, r3, #1
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <main+0x46c>)
 80008f0:	801a      	strh	r2, [r3, #0]
		  VFP = Vertical_blanking_total / 3;
 80008f2:	883b      	ldrh	r3, [r7, #0]
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <main+0x454>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	085b      	lsrs	r3, r3, #1
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <main+0x470>)
 8000900:	801a      	strh	r2, [r3, #0]
		  VSA = Vertical_blanking_total - (VBP + VFP);
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <main+0x46c>)
 8000904:	881a      	ldrh	r2, [r3, #0]
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <main+0x470>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	b29b      	uxth	r3, r3
 800090e:	883a      	ldrh	r2, [r7, #0]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <main+0x474>)
 8000916:	801a      	strh	r2, [r3, #0]

		  my_MX_DSIHOST_DSI_Init();
 8000918:	f001 ffcc 	bl	80028b4 <my_MX_DSIHOST_DSI_Init>
		  my_MX_LTDC_Init();
 800091c:	f002 f8d8 	bl	8002ad0 <my_MX_LTDC_Init>
		  mipi_config();
 8000920:	f000 fb7c 	bl	800101c <mipi_config>
		  HAL_Delay(10);
 8000924:	200a      	movs	r0, #10
 8000926:	f002 fcd7 	bl	80032d8 <HAL_Delay>

		  setting_changed = 0;
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <main+0x440>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(10);
 8000930:	200a      	movs	r0, #10
 8000932:	f002 fcd1 	bl	80032d8 <HAL_Delay>
	  if (play_mode_source == 0)
 8000936:	e64a      	b.n	80005ce <main+0xce>
 8000938:	20040271 	.word	0x20040271
 800093c:	20040270 	.word	0x20040270
 8000940:	2007027a 	.word	0x2007027a
 8000944:	20010270 	.word	0x20010270
 8000948:	20020270 	.word	0x20020270
 800094c:	2000000c 	.word	0x2000000c
 8000950:	2000000d 	.word	0x2000000d
 8000954:	aaaaaaab 	.word	0xaaaaaaab
 8000958:	20000012 	.word	0x20000012
 800095c:	20000014 	.word	0x20000014
 8000960:	20000010 	.word	0x20000010
 8000964:	2000000e 	.word	0x2000000e
 8000968:	2000000f 	.word	0x2000000f
 800096c:	20000018 	.word	0x20000018
 8000970:	2000001a 	.word	0x2000001a
 8000974:	20000016 	.word	0x20000016

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b096      	sub	sp, #88	; 0x58
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2244      	movs	r2, #68	; 0x44
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f008 f91c 	bl	8008bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800099a:	2000      	movs	r0, #0
 800099c:	f004 f974 	bl	8004c88 <HAL_PWREx_ControlVoltageScaling>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80009a6:	f002 fa0d 	bl	8002dc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b8:	2303      	movs	r3, #3
 80009ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009bc:	2301      	movs	r3, #1
 80009be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80009c0:	231e      	movs	r3, #30
 80009c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4618      	mov	r0, r3
 80009d6:	f004 fa0b 	bl	8004df0 <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009e0:	f002 f9f0 	bl	8002dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2303      	movs	r3, #3
 80009ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	2105      	movs	r1, #5
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fe11 	bl	8005624 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a08:	f002 f9dc 	bl	8002dc4 <Error_Handler>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3758      	adds	r7, #88	; 0x58
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ae      	sub	sp, #184	; 0xb8
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a26:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a2a:	2224      	movs	r2, #36	; 0x24
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f008 f8c8 	bl	8008bc4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	226c      	movs	r2, #108	; 0x6c
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f008 f8b9 	bl	8008bc4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a52:	4b64      	ldr	r3, [pc, #400]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a54:	4a64      	ldr	r2, [pc, #400]	; (8000be8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8000a56:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a58:	4b62      	ldr	r3, [pc, #392]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8000a5e:	4b61      	ldr	r3, [pc, #388]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000a64:	4b5f      	ldr	r3, [pc, #380]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8000a6a:	2332      	movs	r3, #50	; 0x32
 8000a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000a76:	2301      	movs	r3, #1
 8000a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a80:	4619      	mov	r1, r3
 8000a82:	4858      	ldr	r0, [pc, #352]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a84:	f002 fe04 	bl	8003690 <HAL_DSI_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000a8e:	f002 f999 	bl	8002dc4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ac8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000acc:	4619      	mov	r1, r3
 8000ace:	4845      	ldr	r0, [pc, #276]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000ad0:	f003 fa51 	bl	8003f76 <HAL_DSI_ConfigHostTimeouts>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000ada:	f002 f973 	bl	8002dc4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000ade:	2313      	movs	r3, #19
 8000ae0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000ae6:	2309      	movs	r3, #9
 8000ae8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000aea:	230a      	movs	r3, #10
 8000aec:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000afa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000afe:	4619      	mov	r1, r3
 8000b00:	4838      	ldr	r0, [pc, #224]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b02:	f003 f9ce 	bl	8003ea2 <HAL_DSI_ConfigPhyTimer>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000b0c:	f002 f95a 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000b10:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b14:	4833      	ldr	r0, [pc, #204]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b16:	f003 fbea 	bl	80042ee <HAL_DSI_SetLowPowerRXFilter>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000b20:	f002 f950 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	482f      	ldr	r0, [pc, #188]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b28:	f002 fece 	bl	80038c8 <HAL_DSI_ConfigErrorMonitor>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000b32:	f002 f947 	bl	8002dc4 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000b42:	2301      	movs	r3, #1
 8000b44:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8000b46:	2378      	movs	r3, #120	; 0x78
 8000b48:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 184;
 8000b5e:	23b8      	movs	r3, #184	; 0xb8
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 180;
 8000b62:	23b4      	movs	r3, #180	; 0xb4
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 664;
 8000b66:	f44f 7326 	mov.w	r3, #664	; 0x298
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 9;
 8000b6c:	2309      	movs	r3, #9
 8000b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000b70:	2308      	movs	r3, #8
 8000b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000b74:	2308      	movs	r3, #8
 8000b76:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 156;
 8000b78:	239c      	movs	r3, #156	; 0x9c
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b80:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000b82:	231c      	movs	r3, #28
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000b86:	2350      	movs	r3, #80	; 0x50
 8000b88:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba0:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba6:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bac:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480b      	ldr	r0, [pc, #44]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bb8:	f002 ff6b 	bl	8003a92 <HAL_DSI_ConfigVideoMode>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000bc2:	f002 f8ff 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bca:	f002 ff3a 	bl	8003a42 <HAL_DSI_SetGenericVCID>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000bd4:	f002 f8f6 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
  LCD_PowerOn();
 8000bd8:	f000 fc2c 	bl	8001434 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	37b8      	adds	r7, #184	; 0xb8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000004c 	.word	0x2000004c
 8000be8:	40016c00 	.word	0x40016c00

08000bec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	; 0x38
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2234      	movs	r2, #52	; 0x34
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 ffe3 	bl	8008bc4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bfe:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c00:	4a38      	ldr	r2, [pc, #224]	; (8000ce4 <MX_LTDC_Init+0xf8>)
 8000c02:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000c04:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c0a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000c0c:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c14:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 183;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c22:	22b7      	movs	r2, #183	; 0xb7
 8000c24:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c28:	2208      	movs	r2, #8
 8000c2a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 363;
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c2e:	f240 126b 	movw	r2, #363	; 0x16b
 8000c32:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 16;
 8000c34:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c36:	2210      	movs	r2, #16
 8000c38:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 483;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c3c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 172;
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c44:	22ac      	movs	r2, #172	; 0xac
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 663;
 8000c48:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c4a:	f240 2297 	movw	r2, #663	; 0x297
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 180;
 8000c50:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c52:	22b4      	movs	r2, #180	; 0xb4
 8000c54:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c68:	22ff      	movs	r2, #255	; 0xff
 8000c6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c6e:	481c      	ldr	r0, [pc, #112]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000c70:	f003 fd44 	bl	80046fc <HAL_LTDC_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000c7a:	f002 f8a3 	bl	8002dc4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 120;
 8000c82:	2378      	movs	r3, #120	; 0x78
 8000c84:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 156;
 8000c8a:	239c      	movs	r3, #156	; 0x9c
 8000c8c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c92:	23ff      	movs	r3, #255	; 0xff
 8000c94:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_LTDC_Init+0xfc>)
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 120;
 8000ca8:	2378      	movs	r3, #120	; 0x78
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 156;
 8000cac:	239c      	movs	r3, #156	; 0x9c
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000cb0:	23ff      	movs	r3, #255	; 0xff
 8000cb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000cb6:	23ff      	movs	r3, #255	; 0xff
 8000cb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000cbc:	23ff      	movs	r3, #255	; 0xff
 8000cbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_LTDC_Init+0xf4>)
 8000cca:	f003 fde7 	bl	800489c <HAL_LTDC_ConfigLayer>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000cd4:	f002 f876 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3738      	adds	r7, #56	; 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000068 	.word	0x20000068
 8000ce4:	40016800 	.word	0x40016800
 8000ce8:	20040274 	.word	0x20040274

08000cec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_SPI2_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d22:	2208      	movs	r2, #8
 8000d24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_SPI2_Init+0x74>)
 8000d4c:	f005 fca0 	bl	8006690 <HAL_SPI_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f002 f835 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000110 	.word	0x20000110
 8000d64:	40003800 	.word	0x40003800

08000d68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000d6e:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <MX_SPI3_Init+0x6c>)
 8000d70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000d80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d84:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_SPI3_Init+0x68>)
 8000dbe:	f005 fc67 	bl	8006690 <HAL_SPI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000dc8:	f001 fffc 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000174 	.word	0x20000174
 8000dd4:	40003c00 	.word	0x40003c00

08000dd8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_UART4_Init+0x90>)
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <MX_UART4_Init+0x94>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_UART4_Init+0x90>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_UART4_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_UART4_Init+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_UART4_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_UART4_Init+0x90>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e22:	f006 ffb3 	bl	8007d8c <HAL_UART_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000e2c:	f001 ffca 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e34:	f007 fdd8 	bl	80089e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e3e:	f001 ffc1 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e46:	f007 fe0d 	bl	8008a64 <HAL_UARTEx_SetRxFifoThreshold>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e50:	f001 ffb8 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_UART4_Init+0x90>)
 8000e56:	f007 fd8e 	bl	8008976 <HAL_UARTEx_DisableFifoMode>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e60:	f001 ffb0 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001d8 	.word	0x200001d8
 8000e6c:	40004c00 	.word	0x40004c00

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e86:	4b60      	ldr	r3, [pc, #384]	; (8001008 <MX_GPIO_Init+0x198>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a5f      	ldr	r2, [pc, #380]	; (8001008 <MX_GPIO_Init+0x198>)
 8000e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b5d      	ldr	r3, [pc, #372]	; (8001008 <MX_GPIO_Init+0x198>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000e9e:	f003 ff97 	bl	8004dd0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b59      	ldr	r3, [pc, #356]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a58      	ldr	r2, [pc, #352]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b56      	ldr	r3, [pc, #344]	; (8001008 <MX_GPIO_Init+0x198>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b53      	ldr	r3, [pc, #332]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a52      	ldr	r2, [pc, #328]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b50      	ldr	r3, [pc, #320]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed2:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <MX_GPIO_Init+0x198>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a46      	ldr	r2, [pc, #280]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b44      	ldr	r3, [pc, #272]	; (8001008 <MX_GPIO_Init+0x198>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <MX_GPIO_Init+0x198>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a40      	ldr	r2, [pc, #256]	; (8001008 <MX_GPIO_Init+0x198>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <MX_GPIO_Init+0x198>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <MX_GPIO_Init+0x198>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	; (8001008 <MX_GPIO_Init+0x198>)
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <MX_GPIO_Init+0x198>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0320 	and.w	r3, r3, #32
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	4834      	ldr	r0, [pc, #208]	; (800100c <MX_GPIO_Init+0x19c>)
 8000f3a:	f003 fbaf 	bl	800469c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESXP_Pin|flash_cs_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8000f44:	4831      	ldr	r0, [pc, #196]	; (800100c <MX_GPIO_Init+0x19c>)
 8000f46:	f003 fba9 	bl	800469c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4830      	ldr	r0, [pc, #192]	; (8001010 <MX_GPIO_Init+0x1a0>)
 8000f50:	f003 fba4 	bl	800469c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5a:	482e      	ldr	r0, [pc, #184]	; (8001014 <MX_GPIO_Init+0x1a4>)
 8000f5c:	f003 fb9e 	bl	800469c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin RESXP_Pin flash_cs_Pin */
  GPIO_InitStruct.Pin = led_Pin|RESXP_Pin|flash_cs_Pin;
 8000f60:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4824      	ldr	r0, [pc, #144]	; (800100c <MX_GPIO_Init+0x19c>)
 8000f7a:	f003 f9e5 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pin : sync_Pin */
  GPIO_InitStruct.Pin = sync_Pin;
 8000f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(sync_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f003 f9d7 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pin : pic_sw_Pin */
  GPIO_InitStruct.Pin = pic_sw_Pin;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(pic_sw_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4819      	ldr	r0, [pc, #100]	; (8001018 <MX_GPIO_Init+0x1a8>)
 8000fb2:	f003 f9c9 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pin : bat_en_Pin */
  GPIO_InitStruct.Pin = bat_en_Pin;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(bat_en_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <MX_GPIO_Init+0x1a0>)
 8000fce:	f003 f9bb 	bl	8004348 <HAL_GPIO_Init>

  /*Configure GPIO pin : en_Pin */
  GPIO_InitStruct.Pin = en_Pin;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(en_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480a      	ldr	r0, [pc, #40]	; (8001014 <MX_GPIO_Init+0x1a4>)
 8000fec:	f003 f9ac 	bl	8004348 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	2028      	movs	r0, #40	; 0x28
 8000ff6:	f002 fa6e 	bl	80034d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ffa:	2028      	movs	r0, #40	; 0x28
 8000ffc:	f002 fa87 	bl	800350e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001000:	bf00      	nop
 8001002:	3730      	adds	r7, #48	; 0x30
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400
 8001010:	48000800 	.word	0x48000800
 8001014:	48001400 	.word	0x48001400
 8001018:	48000c00 	.word	0x48000c00

0800101c <mipi_config>:

/* USER CODE BEGIN 4 */

void mipi_config()
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b0af      	sub	sp, #188	; 0xbc
 8001020:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8001022:	48c4      	ldr	r0, [pc, #784]	; (8001334 <mipi_config+0x318>)
 8001024:	f003 f86d 	bl	8004102 <HAL_DSI_Start>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <mipi_config+0x16>
	{
		Error_Handler();
 800102e:	f001 fec9 	bl	8002dc4 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8001032:	23c3      	movs	r3, #195	; 0xc3
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	23f0      	movs	r3, #240	; 0xf0
 8001038:	2215      	movs	r2, #21
 800103a:	2100      	movs	r1, #0
 800103c:	48bd      	ldr	r0, [pc, #756]	; (8001334 <mipi_config+0x318>)
 800103e:	f003 f89c 	bl	800417a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8001042:	2396      	movs	r3, #150	; 0x96
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	23f0      	movs	r3, #240	; 0xf0
 8001048:	2215      	movs	r2, #21
 800104a:	2100      	movs	r1, #0
 800104c:	48b9      	ldr	r0, [pc, #740]	; (8001334 <mipi_config+0x318>)
 800104e:	f003 f894 	bl	800417a <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = {0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33};
 8001052:	4ab9      	ldr	r2, [pc, #740]	; (8001338 <mipi_config+0x31c>)
 8001054:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001058:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105c:	6018      	str	r0, [r3, #0]
 800105e:	3304      	adds	r3, #4
 8001060:	8019      	strh	r1, [r3, #0]
 8001062:	3302      	adds	r3, #2
 8001064:	0c0a      	lsrs	r2, r1, #16
 8001066:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8001068:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	23e7      	movs	r3, #231	; 0xe7
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2308      	movs	r3, #8
 8001074:	2239      	movs	r2, #57	; 0x39
 8001076:	2100      	movs	r1, #0
 8001078:	48ae      	ldr	r0, [pc, #696]	; (8001334 <mipi_config+0x318>)
 800107a:	f003 f8a0 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = {0xC0, 0x68, 0xE0};
 800107e:	4aaf      	ldr	r2, [pc, #700]	; (800133c <mipi_config+0x320>)
 8001080:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	4611      	mov	r1, r2
 8001088:	8019      	strh	r1, [r3, #0]
 800108a:	3302      	adds	r3, #2
 800108c:	0c12      	lsrs	r2, r2, #16
 800108e:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8001090:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	23a4      	movs	r3, #164	; 0xa4
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2304      	movs	r3, #4
 800109c:	2239      	movs	r2, #57	; 0x39
 800109e:	2100      	movs	r1, #0
 80010a0:	48a4      	ldr	r0, [pc, #656]	; (8001334 <mipi_config+0x318>)
 80010a2:	f003 f88c 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = {0x42, 0x05, 0x24, 0x03};
 80010a6:	4ba6      	ldr	r3, [pc, #664]	; (8001340 <mipi_config+0x324>)
 80010a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 80010ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	23c3      	movs	r3, #195	; 0xc3
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2305      	movs	r3, #5
 80010b8:	2239      	movs	r2, #57	; 0x39
 80010ba:	2100      	movs	r1, #0
 80010bc:	489d      	ldr	r0, [pc, #628]	; (8001334 <mipi_config+0x318>)
 80010be:	f003 f87e 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = {0x42, 0x05, 0x24, 0x03};
 80010c2:	4b9f      	ldr	r3, [pc, #636]	; (8001340 <mipi_config+0x324>)
 80010c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 80010c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	23c4      	movs	r3, #196	; 0xc4
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2305      	movs	r3, #5
 80010d4:	2239      	movs	r2, #57	; 0x39
 80010d6:	2100      	movs	r1, #0
 80010d8:	4896      	ldr	r0, [pc, #600]	; (8001334 <mipi_config+0x318>)
 80010da:	f003 f870 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 80010de:	4a99      	ldr	r2, [pc, #612]	; (8001344 <mipi_config+0x328>)
 80010e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 80010ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	23e5      	movs	r3, #229	; 0xe5
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	230d      	movs	r3, #13
 80010f6:	2239      	movs	r2, #57	; 0x39
 80010f8:	2100      	movs	r1, #0
 80010fa:	488e      	ldr	r0, [pc, #568]	; (8001334 <mipi_config+0x318>)
 80010fc:	f003 f85f 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 8001100:	4a90      	ldr	r2, [pc, #576]	; (8001344 <mipi_config+0x328>)
 8001102:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001106:	ca07      	ldmia	r2, {r0, r1, r2}
 8001108:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 800110c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	23e6      	movs	r3, #230	; 0xe6
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	230d      	movs	r3, #13
 8001118:	2239      	movs	r2, #57	; 0x39
 800111a:	2100      	movs	r1, #0
 800111c:	4885      	ldr	r0, [pc, #532]	; (8001334 <mipi_config+0x318>)
 800111e:	f003 f84e 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = {0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22};
 8001122:	4a89      	ldr	r2, [pc, #548]	; (8001348 <mipi_config+0x32c>)
 8001124:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112c:	6018      	str	r0, [r3, #0]
 800112e:	3304      	adds	r3, #4
 8001130:	8019      	strh	r1, [r3, #0]
 8001132:	3302      	adds	r3, #2
 8001134:	0c0a      	lsrs	r2, r1, #16
 8001136:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 8001138:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	23ec      	movs	r3, #236	; 0xec
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2308      	movs	r3, #8
 8001144:	2239      	movs	r2, #57	; 0x39
 8001146:	2100      	movs	r1, #0
 8001148:	487a      	ldr	r0, [pc, #488]	; (8001334 <mipi_config+0x318>)
 800114a:	f003 f838 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = {0x88, 0x05, 0x0F, 0x18};
 800114e:	4b7f      	ldr	r3, [pc, #508]	; (800134c <mipi_config+0x330>)
 8001150:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 8001152:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	23c1      	movs	r3, #193	; 0xc1
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2305      	movs	r3, #5
 800115e:	2239      	movs	r2, #57	; 0x39
 8001160:	2100      	movs	r1, #0
 8001162:	4874      	ldr	r0, [pc, #464]	; (8001334 <mipi_config+0x318>)
 8001164:	f003 f82b 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = {0x88, 0x05, 0x0F, 0x18};
 8001168:	4b78      	ldr	r3, [pc, #480]	; (800134c <mipi_config+0x330>)
 800116a:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 800116c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	23c2      	movs	r3, #194	; 0xc2
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2305      	movs	r3, #5
 8001178:	2239      	movs	r2, #57	; 0x39
 800117a:	2100      	movs	r1, #0
 800117c:	486d      	ldr	r0, [pc, #436]	; (8001334 <mipi_config+0x318>)
 800117e:	f003 f81e 	bl	80041be <HAL_DSI_LongWrite>
	//HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x08);
 8001182:	2308      	movs	r3, #8
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2336      	movs	r3, #54	; 0x36
 8001188:	2215      	movs	r2, #21
 800118a:	2100      	movs	r1, #0
 800118c:	4869      	ldr	r0, [pc, #420]	; (8001334 <mipi_config+0x318>)
 800118e:	f002 fff4 	bl	800417a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 8001192:	2307      	movs	r3, #7
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	233a      	movs	r3, #58	; 0x3a
 8001198:	2215      	movs	r2, #21
 800119a:	2100      	movs	r1, #0
 800119c:	4865      	ldr	r0, [pc, #404]	; (8001334 <mipi_config+0x318>)
 800119e:	f002 ffec 	bl	800417a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 80011a2:	23be      	movs	r3, #190	; 0xbe
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	23c5      	movs	r3, #197	; 0xc5
 80011a8:	2215      	movs	r2, #21
 80011aa:	2100      	movs	r1, #0
 80011ac:	4861      	ldr	r0, [pc, #388]	; (8001334 <mipi_config+0x318>)
 80011ae:	f002 ffe4 	bl	800417a <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = {0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55, 0x3D, 0x19, 0x18, 0x24, 0x27};
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <mipi_config+0x334>)
 80011b4:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80011b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ba:	c407      	stmia	r4!, {r0, r1, r2}
 80011bc:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 80011be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	23e0      	movs	r3, #224	; 0xe0
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	230f      	movs	r3, #15
 80011ca:	2239      	movs	r2, #57	; 0x39
 80011cc:	2100      	movs	r1, #0
 80011ce:	4859      	ldr	r0, [pc, #356]	; (8001334 <mipi_config+0x318>)
 80011d0:	f002 fff5 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = {0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56, 0x3E, 0x1A, 0x18, 0x24, 0x28};
 80011d4:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <mipi_config+0x338>)
 80011d6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80011da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011dc:	c407      	stmia	r4!, {r0, r1, r2}
 80011de:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 80011e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	23e1      	movs	r3, #225	; 0xe1
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	230f      	movs	r3, #15
 80011ec:	2239      	movs	r2, #57	; 0x39
 80011ee:	2100      	movs	r1, #0
 80011f0:	4850      	ldr	r0, [pc, #320]	; (8001334 <mipi_config+0x318>)
 80011f2:	f002 ffe4 	bl	80041be <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 80011f6:	2310      	movs	r3, #16
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	23b2      	movs	r3, #178	; 0xb2
 80011fc:	2215      	movs	r2, #21
 80011fe:	2100      	movs	r1, #0
 8001200:	484c      	ldr	r0, [pc, #304]	; (8001334 <mipi_config+0x318>)
 8001202:	f002 ffba 	bl	800417a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 8001206:	2301      	movs	r3, #1
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	23b3      	movs	r3, #179	; 0xb3
 800120c:	2215      	movs	r2, #21
 800120e:	2100      	movs	r1, #0
 8001210:	4848      	ldr	r0, [pc, #288]	; (8001334 <mipi_config+0x318>)
 8001212:	f002 ffb2 	bl	800417a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 8001216:	2301      	movs	r3, #1
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	23b4      	movs	r3, #180	; 0xb4
 800121c:	2215      	movs	r2, #21
 800121e:	2100      	movs	r1, #0
 8001220:	4844      	ldr	r0, [pc, #272]	; (8001334 <mipi_config+0x318>)
 8001222:	f002 ffaa 	bl	800417a <HAL_DSI_ShortWrite>
	//uint8_t cmd20[2] = {0x27, 0x09};
	uint8_t cmd20[2] = {0x4D, 0x0E};
 8001226:	f640 634d 	movw	r3, #3661	; 0xe4d
 800122a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 800122e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	23b6      	movs	r3, #182	; 0xb6
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2303      	movs	r3, #3
 800123a:	2239      	movs	r2, #57	; 0x39
 800123c:	2100      	movs	r1, #0
 800123e:	483d      	ldr	r0, [pc, #244]	; (8001334 <mipi_config+0x318>)
 8001240:	f002 ffbd 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = {0x00, 0x54, 0x00, 0x54};
 8001244:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 800124a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	23b5      	movs	r3, #181	; 0xb5
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2305      	movs	r3, #5
 8001256:	2239      	movs	r2, #57	; 0x39
 8001258:	2100      	movs	r1, #0
 800125a:	4836      	ldr	r0, [pc, #216]	; (8001334 <mipi_config+0x318>)
 800125c:	f002 ffaf 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001260:	4a3d      	ldr	r2, [pc, #244]	; (8001358 <mipi_config+0x33c>)
 8001262:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001266:	ca07      	ldmia	r2, {r0, r1, r2}
 8001268:	c303      	stmia	r3!, {r0, r1}
 800126a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 800126c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	23a5      	movs	r3, #165	; 0xa5
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	230a      	movs	r3, #10
 8001278:	2239      	movs	r2, #57	; 0x39
 800127a:	2100      	movs	r1, #0
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <mipi_config+0x318>)
 800127e:	f002 ff9e 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001282:	4a35      	ldr	r2, [pc, #212]	; (8001358 <mipi_config+0x33c>)
 8001284:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001288:	ca07      	ldmia	r2, {r0, r1, r2}
 800128a:	c303      	stmia	r3!, {r0, r1}
 800128c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 800128e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	23a6      	movs	r3, #166	; 0xa6
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	230a      	movs	r3, #10
 800129a:	2239      	movs	r2, #57	; 0x39
 800129c:	2100      	movs	r1, #0
 800129e:	4825      	ldr	r0, [pc, #148]	; (8001334 <mipi_config+0x318>)
 80012a0:	f002 ff8d 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = {0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00};
 80012a4:	4a2d      	ldr	r2, [pc, #180]	; (800135c <mipi_config+0x340>)
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ae:	6018      	str	r0, [r3, #0]
 80012b0:	3304      	adds	r3, #4
 80012b2:	8019      	strh	r1, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	0c0a      	lsrs	r2, r1, #16
 80012b8:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 80012ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	23ba      	movs	r3, #186	; 0xba
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2308      	movs	r3, #8
 80012c6:	2239      	movs	r2, #57	; 0x39
 80012c8:	2100      	movs	r1, #0
 80012ca:	481a      	ldr	r0, [pc, #104]	; (8001334 <mipi_config+0x318>)
 80012cc:	f002 ff77 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 80012d0:	4a23      	ldr	r2, [pc, #140]	; (8001360 <mipi_config+0x344>)
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012da:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	23bb      	movs	r3, #187	; 0xbb
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2309      	movs	r3, #9
 80012ea:	2239      	movs	r2, #57	; 0x39
 80012ec:	2100      	movs	r1, #0
 80012ee:	4811      	ldr	r0, [pc, #68]	; (8001334 <mipi_config+0x318>)
 80012f0:	f002 ff65 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <mipi_config+0x344>)
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012fe:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	23bc      	movs	r3, #188	; 0xbc
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2309      	movs	r3, #9
 800130e:	2239      	movs	r2, #57	; 0x39
 8001310:	2100      	movs	r1, #0
 8001312:	4808      	ldr	r0, [pc, #32]	; (8001334 <mipi_config+0x318>)
 8001314:	f002 ff53 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = {0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF, 0xFF, 0xF9};
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <mipi_config+0x348>)
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001320:	c303      	stmia	r3!, {r0, r1}
 8001322:	801a      	strh	r2, [r3, #0]
 8001324:	3302      	adds	r3, #2
 8001326:	0c12      	lsrs	r2, r2, #16
 8001328:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	e01a      	b.n	8001368 <mipi_config+0x34c>
 8001332:	bf00      	nop
 8001334:	2000004c 	.word	0x2000004c
 8001338:	08008bf4 	.word	0x08008bf4
 800133c:	08008bfc 	.word	0x08008bfc
 8001340:	03240542 	.word	0x03240542
 8001344:	08008c00 	.word	0x08008c00
 8001348:	08008c0c 	.word	0x08008c0c
 800134c:	180f0588 	.word	0x180f0588
 8001350:	08008c14 	.word	0x08008c14
 8001354:	08008c24 	.word	0x08008c24
 8001358:	08008c34 	.word	0x08008c34
 800135c:	08008c40 	.word	0x08008c40
 8001360:	08008c48 	.word	0x08008c48
 8001364:	08008c50 	.word	0x08008c50
 8001368:	23bd      	movs	r3, #189	; 0xbd
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	230c      	movs	r3, #12
 800136e:	2239      	movs	r2, #57	; 0x39
 8001370:	2100      	movs	r1, #0
 8001372:	482d      	ldr	r0, [pc, #180]	; (8001428 <mipi_config+0x40c>)
 8001374:	f002 ff23 	bl	80041be <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 8001378:	23c3      	movs	r3, #195	; 0xc3
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	23ed      	movs	r3, #237	; 0xed
 800137e:	2215      	movs	r2, #21
 8001380:	2100      	movs	r1, #0
 8001382:	4829      	ldr	r0, [pc, #164]	; (8001428 <mipi_config+0x40c>)
 8001384:	f002 fef9 	bl	800417a <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = {0x40, 0x0F, 0x00};
 8001388:	4a28      	ldr	r2, [pc, #160]	; (800142c <mipi_config+0x410>)
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	4611      	mov	r1, r2
 8001392:	8019      	strh	r1, [r3, #0]
 8001394:	3302      	adds	r3, #2
 8001396:	0c12      	lsrs	r2, r2, #16
 8001398:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	23e4      	movs	r3, #228	; 0xe4
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2304      	movs	r3, #4
 80013a6:	2239      	movs	r2, #57	; 0x39
 80013a8:	2100      	movs	r1, #0
 80013aa:	481f      	ldr	r0, [pc, #124]	; (8001428 <mipi_config+0x40c>)
 80013ac:	f002 ff07 	bl	80041be <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = {0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25};
 80013b0:	4a1f      	ldr	r2, [pc, #124]	; (8001430 <mipi_config+0x414>)
 80013b2:	463b      	mov	r3, r7
 80013b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80013b6:	c303      	stmia	r3!, {r0, r1}
 80013b8:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 80013ba:	463b      	mov	r3, r7
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	23cc      	movs	r3, #204	; 0xcc
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	230a      	movs	r3, #10
 80013c4:	2239      	movs	r2, #57	; 0x39
 80013c6:	2100      	movs	r1, #0
 80013c8:	4817      	ldr	r0, [pc, #92]	; (8001428 <mipi_config+0x40c>)
 80013ca:	f002 fef8 	bl	80041be <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80013ce:	2300      	movs	r3, #0
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2335      	movs	r3, #53	; 0x35
 80013d4:	2215      	movs	r2, #21
 80013d6:	2100      	movs	r1, #0
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <mipi_config+0x40c>)
 80013da:	f002 fece 	bl	800417a <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 80013de:	2000      	movs	r0, #0
 80013e0:	f001 ff7a 	bl	80032d8 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80013e4:	2300      	movs	r3, #0
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2311      	movs	r3, #17
 80013ea:	2205      	movs	r2, #5
 80013ec:	2100      	movs	r1, #0
 80013ee:	480e      	ldr	r0, [pc, #56]	; (8001428 <mipi_config+0x40c>)
 80013f0:	f002 fec3 	bl	800417a <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80013f4:	2078      	movs	r0, #120	; 0x78
 80013f6:	f001 ff6f 	bl	80032d8 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 80013fa:	2300      	movs	r3, #0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2329      	movs	r3, #41	; 0x29
 8001400:	2205      	movs	r2, #5
 8001402:	2100      	movs	r1, #0
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <mipi_config+0x40c>)
 8001406:	f002 feb8 	bl	800417a <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800140a:	2078      	movs	r0, #120	; 0x78
 800140c:	f001 ff64 	bl	80032d8 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001410:	2300      	movs	r3, #0
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2335      	movs	r3, #53	; 0x35
 8001416:	2215      	movs	r2, #21
 8001418:	2100      	movs	r1, #0
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <mipi_config+0x40c>)
 800141c:	f002 fead 	bl	800417a <HAL_DSI_ShortWrite>
}
 8001420:	bf00      	nop
 8001422:	37b4      	adds	r7, #180	; 0xb4
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	2000004c 	.word	0x2000004c
 800142c:	08008c5c 	.word	0x08008c5c
 8001430:	08008c60 	.word	0x08008c60

08001434 <LCD_PowerOn>:

static void LCD_PowerOn(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <LCD_PowerOn+0x28>)
 800143e:	f003 f92d 	bl	800469c <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 8001442:	2014      	movs	r0, #20
 8001444:	f001 ff48 	bl	80032d8 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <LCD_PowerOn+0x28>)
 800144e:	f003 f925 	bl	800469c <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 8001452:	2078      	movs	r0, #120	; 0x78
 8001454:	f001 ff40 	bl	80032d8 <HAL_Delay>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	48000400 	.word	0x48000400

08001460 <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = {0};
 800146a:	2300      	movs	r3, #0
 800146c:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = {0};
 800146e:	2300      	movs	r3, #0
 8001470:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 1000);
 8001472:	f107 010c 	add.w	r1, r7, #12
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	2201      	movs	r2, #1
 800147c:	4879      	ldr	r0, [pc, #484]	; (8001664 <Write_Registers_data+0x204>)
 800147e:	f005 fb1f 	bl	8006ac0 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)data, 1, 1000);
 8001482:	f107 0108 	add.w	r1, r7, #8
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	2201      	movs	r2, #1
 800148c:	4875      	ldr	r0, [pc, #468]	; (8001664 <Write_Registers_data+0x204>)
 800148e:	f005 fb17 	bl	8006ac0 <HAL_SPI_Receive>
	if (do_flag == 1)
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b01      	cmp	r3, #1
 8001496:	f040 80dc 	bne.w	8001652 <Write_Registers_data+0x1f2>
	{
		switch (Register_Address[0])
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	2b21      	cmp	r3, #33	; 0x21
 800149e:	f200 80dd 	bhi.w	800165c <Write_Registers_data+0x1fc>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <Write_Registers_data+0x48>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	08001531 	.word	0x08001531
 80014ac:	08001541 	.word	0x08001541
 80014b0:	08001551 	.word	0x08001551
 80014b4:	0800155f 	.word	0x0800155f
 80014b8:	0800156d 	.word	0x0800156d
 80014bc:	0800157b 	.word	0x0800157b
 80014c0:	08001589 	.word	0x08001589
 80014c4:	08001591 	.word	0x08001591
 80014c8:	08001657 	.word	0x08001657
 80014cc:	08001657 	.word	0x08001657
 80014d0:	08001657 	.word	0x08001657
 80014d4:	08001599 	.word	0x08001599
 80014d8:	080015a1 	.word	0x080015a1
 80014dc:	080015a9 	.word	0x080015a9
 80014e0:	080015b1 	.word	0x080015b1
 80014e4:	080015b9 	.word	0x080015b9
 80014e8:	080015c1 	.word	0x080015c1
 80014ec:	08001657 	.word	0x08001657
 80014f0:	08001657 	.word	0x08001657
 80014f4:	08001657 	.word	0x08001657
 80014f8:	08001657 	.word	0x08001657
 80014fc:	08001657 	.word	0x08001657
 8001500:	08001657 	.word	0x08001657
 8001504:	08001657 	.word	0x08001657
 8001508:	08001623 	.word	0x08001623
 800150c:	0800162b 	.word	0x0800162b
 8001510:	0800165d 	.word	0x0800165d
 8001514:	0800165d 	.word	0x0800165d
 8001518:	0800165d 	.word	0x0800165d
 800151c:	0800165d 	.word	0x0800165d
 8001520:	0800165d 	.word	0x0800165d
 8001524:	0800165d 	.word	0x0800165d
 8001528:	0800165d 	.word	0x0800165d
 800152c:	08001639 	.word	0x08001639
		{
		case 0: //Horizontal Resolution
			IMAGE_H = (uint32_t)data[0];
 8001530:	7a3b      	ldrb	r3, [r7, #8]
 8001532:	461a      	mov	r2, r3
 8001534:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <Write_Registers_data+0x208>)
 8001536:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 8001538:	4b4c      	ldr	r3, [pc, #304]	; (800166c <Write_Registers_data+0x20c>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
			break;
 800153e:	e08d      	b.n	800165c <Write_Registers_data+0x1fc>
		case 1: //Vertical Resolution
			IMAGE_W = (uint32_t)data[0];
 8001540:	7a3b      	ldrb	r3, [r7, #8]
 8001542:	461a      	mov	r2, r3
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <Write_Registers_data+0x210>)
 8001546:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 8001548:	4b48      	ldr	r3, [pc, #288]	; (800166c <Write_Registers_data+0x20c>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
			break;
 800154e:	e085      	b.n	800165c <Write_Registers_data+0x1fc>
		case 2: //Horizontal blanking (High byte)
			Horizontal_blanking_H = data[0];
 8001550:	7a3a      	ldrb	r2, [r7, #8]
 8001552:	4b48      	ldr	r3, [pc, #288]	; (8001674 <Write_Registers_data+0x214>)
 8001554:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001556:	4b45      	ldr	r3, [pc, #276]	; (800166c <Write_Registers_data+0x20c>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
			break;
 800155c:	e07e      	b.n	800165c <Write_Registers_data+0x1fc>
		case 3: //Horizontal blanking (Low byte)
			Horizontal_blanking_L = data[0];
 800155e:	7a3a      	ldrb	r2, [r7, #8]
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <Write_Registers_data+0x218>)
 8001562:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001564:	4b41      	ldr	r3, [pc, #260]	; (800166c <Write_Registers_data+0x20c>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
			break;
 800156a:	e077      	b.n	800165c <Write_Registers_data+0x1fc>
		case 4: //Vertical blanking (High byte)
			Vertical_blanking_H = data[0];
 800156c:	7a3a      	ldrb	r2, [r7, #8]
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <Write_Registers_data+0x21c>)
 8001570:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001572:	4b3e      	ldr	r3, [pc, #248]	; (800166c <Write_Registers_data+0x20c>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
			break;
 8001578:	e070      	b.n	800165c <Write_Registers_data+0x1fc>
		case 5: //Vertical blanking (Low byte)
			Vertical_blanking_L = data[0];
 800157a:	7a3a      	ldrb	r2, [r7, #8]
 800157c:	4b40      	ldr	r3, [pc, #256]	; (8001680 <Write_Registers_data+0x220>)
 800157e:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001580:	4b3a      	ldr	r3, [pc, #232]	; (800166c <Write_Registers_data+0x20c>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
			break;
 8001586:	e069      	b.n	800165c <Write_Registers_data+0x1fc>
		case 6: //Frame rate x 2 (Hz)
			frame_rate_r = data[0];
 8001588:	7a3a      	ldrb	r2, [r7, #8]
 800158a:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <Write_Registers_data+0x224>)
 800158c:	701a      	strb	r2, [r3, #0]
			break;
 800158e:	e065      	b.n	800165c <Write_Registers_data+0x1fc>
		case 7: //Show SPI flash content length
			spi_flash_content_length = data[0];
 8001590:	7a3a      	ldrb	r2, [r7, #8]
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <Write_Registers_data+0x228>)
 8001594:	701a      	strb	r2, [r3, #0]
			break;
 8001596:	e061      	b.n	800165c <Write_Registers_data+0x1fc>
		case 9: //Clock rate of SPI
			break;
		case 10: //Clock rate of I2C
			break;
		case 11: //Pixel Mapping one_L
			Pixel_Mapping_one_L = data[0];
 8001598:	7a3a      	ldrb	r2, [r7, #8]
 800159a:	4b3c      	ldr	r3, [pc, #240]	; (800168c <Write_Registers_data+0x22c>)
 800159c:	701a      	strb	r2, [r3, #0]
			break;
 800159e:	e05d      	b.n	800165c <Write_Registers_data+0x1fc>
		case 12: //Pixel Mapping one_H
			Pixel_Mapping_one_H = data[0];
 80015a0:	7a3a      	ldrb	r2, [r7, #8]
 80015a2:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <Write_Registers_data+0x230>)
 80015a4:	701a      	strb	r2, [r3, #0]
			break;
 80015a6:	e059      	b.n	800165c <Write_Registers_data+0x1fc>
		case 13: //Auto Run start content of SPI flash
			auto_run_start_content = data[0];
 80015a8:	7a3a      	ldrb	r2, [r7, #8]
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <Write_Registers_data+0x234>)
 80015ac:	701a      	strb	r2, [r3, #0]
			break;
 80015ae:	e055      	b.n	800165c <Write_Registers_data+0x1fc>
		case 14: //Show first content number of SPI flash
			display_image_number = data[0];
 80015b0:	7a3a      	ldrb	r2, [r7, #8]
 80015b2:	4b39      	ldr	r3, [pc, #228]	; (8001698 <Write_Registers_data+0x238>)
 80015b4:	701a      	strb	r2, [r3, #0]
			break;
 80015b6:	e051      	b.n	800165c <Write_Registers_data+0x1fc>
		case 15: //Auto Run end content of SPI flash
			auto_run_end_content = data[0];
 80015b8:	7a3a      	ldrb	r2, [r7, #8]
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <Write_Registers_data+0x23c>)
 80015bc:	701a      	strb	r2, [r3, #0]
			break;
 80015be:	e04d      	b.n	800165c <Write_Registers_data+0x1fc>
		case 16: //Control A
			switch (data[0] & 0b00000011) //Display Mode
 80015c0:	7a3b      	ldrb	r3, [r7, #8]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d00e      	beq.n	80015e8 <Write_Registers_data+0x188>
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	dc10      	bgt.n	80015f0 <Write_Registers_data+0x190>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <Write_Registers_data+0x178>
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d004      	beq.n	80015e0 <Write_Registers_data+0x180>
 80015d6:	e00b      	b.n	80015f0 <Write_Registers_data+0x190>
			{
			case 0b00000000: //Display content of frame buffer (0)
				play_mode_source = 1;
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <Write_Registers_data+0x240>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
				break;
 80015de:	e007      	b.n	80015f0 <Write_Registers_data+0x190>
			case 0b00000001: //Display content of frame buffer (1)
				play_mode_source = 2;
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <Write_Registers_data+0x240>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	701a      	strb	r2, [r3, #0]
				break;
 80015e6:	e003      	b.n	80015f0 <Write_Registers_data+0x190>
			case 0b00000011: //Display Flash content
				play_mode_source = 0;
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <Write_Registers_data+0x240>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
				break;
 80015ee:	bf00      	nop
			}
			switch (data[0] & 0b00001100) //Static or Dynamic mode
 80015f0:	7a3b      	ldrb	r3, [r7, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d00e      	beq.n	8001618 <Write_Registers_data+0x1b8>
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	dc2d      	bgt.n	800165a <Write_Registers_data+0x1fa>
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <Write_Registers_data+0x1a8>
 8001602:	2b04      	cmp	r3, #4
 8001604:	d004      	beq.n	8001610 <Write_Registers_data+0x1b0>
				break;
			case 0b00001000: //Dynamic display flash content
				play_mode = 1;
				break;
			}
			break;
 8001606:	e028      	b.n	800165a <Write_Registers_data+0x1fa>
				play_mode = 0;
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <Write_Registers_data+0x244>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
				break;
 800160e:	e007      	b.n	8001620 <Write_Registers_data+0x1c0>
				play_mode = 2;
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <Write_Registers_data+0x244>)
 8001612:	2202      	movs	r2, #2
 8001614:	701a      	strb	r2, [r3, #0]
				break;
 8001616:	e003      	b.n	8001620 <Write_Registers_data+0x1c0>
				play_mode = 1;
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <Write_Registers_data+0x244>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
				break;
 800161e:	bf00      	nop
			break;
 8001620:	e01b      	b.n	800165a <Write_Registers_data+0x1fa>
		case 22: //Power Status
			break;
		case 23: //Serial number
			break;
		case 24: //content size
			content_size = data[0];
 8001622:	7a3a      	ldrb	r2, [r7, #8]
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <Write_Registers_data+0x248>)
 8001626:	701a      	strb	r2, [r3, #0]
			break;
 8001628:	e018      	b.n	800165c <Write_Registers_data+0x1fc>
		case 25:// force play buffer to write flash.
			play_mode_source = 1;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <Write_Registers_data+0x240>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
			play_mode = 2;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <Write_Registers_data+0x244>)
 8001632:	2202      	movs	r2, #2
 8001634:	701a      	strb	r2, [r3, #0]
			break;
 8001636:	e011      	b.n	800165c <Write_Registers_data+0x1fc>
		case 33:// force play buffer to write flash.
			Mode_config[100] = data[0];
 8001638:	7a3a      	ldrb	r2, [r7, #8]
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <Write_Registers_data+0x24c>)
 800163c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			Playing_mode = data[0];
 8001640:	7a3a      	ldrb	r2, [r7, #8]
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <Write_Registers_data+0x250>)
 8001644:	701a      	strb	r2, [r3, #0]

			write_flash_config();
 8001646:	f000 fd5d 	bl	8002104 <write_flash_config>
			Mode_changed = 1;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <Write_Registers_data+0x254>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]

			break;
 8001650:	e004      	b.n	800165c <Write_Registers_data+0x1fc>
		}
	}
 8001652:	bf00      	nop
 8001654:	e002      	b.n	800165c <Write_Registers_data+0x1fc>
			break;
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <Write_Registers_data+0x1fc>
			break;
 800165a:	bf00      	nop
	//HAL_UART_Transmit(&huart4, &Register_Address, 1, 1000);
	//HAL_UART_Transmit(&huart4, &data, 1, 1000);
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000174 	.word	0x20000174
 8001668:	20000000 	.word	0x20000000
 800166c:	2007027a 	.word	0x2007027a
 8001670:	20000004 	.word	0x20000004
 8001674:	2000000c 	.word	0x2000000c
 8001678:	2000000d 	.word	0x2000000d
 800167c:	2000000e 	.word	0x2000000e
 8001680:	2000000f 	.word	0x2000000f
 8001684:	20000008 	.word	0x20000008
 8001688:	20000009 	.word	0x20000009
 800168c:	2000001c 	.word	0x2000001c
 8001690:	2000001d 	.word	0x2000001d
 8001694:	2000026c 	.word	0x2000026c
 8001698:	20070274 	.word	0x20070274
 800169c:	2000000a 	.word	0x2000000a
 80016a0:	20040271 	.word	0x20040271
 80016a4:	20040270 	.word	0x20040270
 80016a8:	2000000b 	.word	0x2000000b
 80016ac:	2007027c 	.word	0x2007027c
 80016b0:	2000001f 	.word	0x2000001f
 80016b4:	20000020 	.word	0x20000020

080016b8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, &spi_rev_2byte, 2, 1000);
	// USB command: Type and command
	if(hspi == SPI2){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4aae      	ldr	r2, [pc, #696]	; (800197c <HAL_SPI_RxCpltCallback+0x2c4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_SPI_RxCpltCallback+0x14>
		int a=2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
	}
	if(hspi == SPI3){
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4aac      	ldr	r2, [pc, #688]	; (8001980 <HAL_SPI_RxCpltCallback+0x2c8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_SPI_RxCpltCallback+0x20>
		int a=3;
 80016d4:	2303      	movs	r3, #3
 80016d6:	60bb      	str	r3, [r7, #8]
	}
	switch (spi_rev_2byte[0] & 0b11000000)
 80016d8:	4baa      	ldr	r3, [pc, #680]	; (8001984 <HAL_SPI_RxCpltCallback+0x2cc>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016e0:	2bc0      	cmp	r3, #192	; 0xc0
 80016e2:	f000 81e9 	beq.w	8001ab8 <HAL_SPI_RxCpltCallback+0x400>
 80016e6:	2bc0      	cmp	r3, #192	; 0xc0
 80016e8:	f300 82a0 	bgt.w	8001c2c <HAL_SPI_RxCpltCallback+0x574>
 80016ec:	2b80      	cmp	r3, #128	; 0x80
 80016ee:	f000 81d7 	beq.w	8001aa0 <HAL_SPI_RxCpltCallback+0x3e8>
 80016f2:	2b80      	cmp	r3, #128	; 0x80
 80016f4:	f300 829a 	bgt.w	8001c2c <HAL_SPI_RxCpltCallback+0x574>
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_SPI_RxCpltCallback+0x4c>
 80016fc:	2b40      	cmp	r3, #64	; 0x40
 80016fe:	f000 8171 	beq.w	80019e4 <HAL_SPI_RxCpltCallback+0x32c>
 8001702:	e293      	b.n	8001c2c <HAL_SPI_RxCpltCallback+0x574>
	{
	case 0b00000000: //Chain SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001704:	4b9f      	ldr	r3, [pc, #636]	; (8001984 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800170c:	2b38      	cmp	r3, #56	; 0x38
 800170e:	f200 8286 	bhi.w	8001c1e <HAL_SPI_RxCpltCallback+0x566>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <HAL_SPI_RxCpltCallback+0x60>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	080017fd 	.word	0x080017fd
 800171c:	08001c1f 	.word	0x08001c1f
 8001720:	08001c1f 	.word	0x08001c1f
 8001724:	08001c1f 	.word	0x08001c1f
 8001728:	08001c1f 	.word	0x08001c1f
 800172c:	08001c1f 	.word	0x08001c1f
 8001730:	08001c1f 	.word	0x08001c1f
 8001734:	08001c1f 	.word	0x08001c1f
 8001738:	080018af 	.word	0x080018af
 800173c:	08001c1f 	.word	0x08001c1f
 8001740:	08001c1f 	.word	0x08001c1f
 8001744:	08001c1f 	.word	0x08001c1f
 8001748:	08001c1f 	.word	0x08001c1f
 800174c:	08001c1f 	.word	0x08001c1f
 8001750:	08001c1f 	.word	0x08001c1f
 8001754:	08001c1f 	.word	0x08001c1f
 8001758:	08001961 	.word	0x08001961
 800175c:	08001c1f 	.word	0x08001c1f
 8001760:	08001c1f 	.word	0x08001c1f
 8001764:	08001c1f 	.word	0x08001c1f
 8001768:	08001c1f 	.word	0x08001c1f
 800176c:	08001c1f 	.word	0x08001c1f
 8001770:	08001c1f 	.word	0x08001c1f
 8001774:	08001c1f 	.word	0x08001c1f
 8001778:	080019e1 	.word	0x080019e1
 800177c:	08001c1f 	.word	0x08001c1f
 8001780:	08001c1f 	.word	0x08001c1f
 8001784:	08001c1f 	.word	0x08001c1f
 8001788:	08001c1f 	.word	0x08001c1f
 800178c:	08001c1f 	.word	0x08001c1f
 8001790:	08001c1f 	.word	0x08001c1f
 8001794:	08001c1f 	.word	0x08001c1f
 8001798:	080019e1 	.word	0x080019e1
 800179c:	08001c1f 	.word	0x08001c1f
 80017a0:	08001c1f 	.word	0x08001c1f
 80017a4:	08001c1f 	.word	0x08001c1f
 80017a8:	08001c1f 	.word	0x08001c1f
 80017ac:	08001c1f 	.word	0x08001c1f
 80017b0:	08001c1f 	.word	0x08001c1f
 80017b4:	08001c1f 	.word	0x08001c1f
 80017b8:	080019e1 	.word	0x080019e1
 80017bc:	08001c1f 	.word	0x08001c1f
 80017c0:	08001c1f 	.word	0x08001c1f
 80017c4:	08001c1f 	.word	0x08001c1f
 80017c8:	08001c1f 	.word	0x08001c1f
 80017cc:	08001c1f 	.word	0x08001c1f
 80017d0:	08001c1f 	.word	0x08001c1f
 80017d4:	08001c1f 	.word	0x08001c1f
 80017d8:	080019e1 	.word	0x080019e1
 80017dc:	08001c1f 	.word	0x08001c1f
 80017e0:	08001c1f 	.word	0x08001c1f
 80017e4:	08001c1f 	.word	0x08001c1f
 80017e8:	08001c1f 	.word	0x08001c1f
 80017ec:	08001c1f 	.word	0x08001c1f
 80017f0:	08001c1f 	.word	0x08001c1f
 80017f4:	08001c1f 	.word	0x08001c1f
 80017f8:	080019e1 	.word	0x080019e1
		{
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi_rev_2byte[0] & 0b00000111)
 80017fc:	4b61      	ldr	r3, [pc, #388]	; (8001984 <HAL_SPI_RxCpltCallback+0x2cc>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	2b04      	cmp	r3, #4
 8001806:	d03e      	beq.n	8001886 <HAL_SPI_RxCpltCallback+0x1ce>
 8001808:	2b04      	cmp	r3, #4
 800180a:	dc4c      	bgt.n	80018a6 <HAL_SPI_RxCpltCallback+0x1ee>
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_SPI_RxCpltCallback+0x15e>
 8001810:	2b01      	cmp	r3, #1
 8001812:	d014      	beq.n	800183e <HAL_SPI_RxCpltCallback+0x186>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 8001814:	e047      	b.n	80018a6 <HAL_SPI_RxCpltCallback+0x1ee>
				if (BOARD_NUMBER == 1)
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d145      	bne.n	80018aa <HAL_SPI_RxCpltCallback+0x1f2>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 800181e:	4b5b      	ldr	r3, [pc, #364]	; (800198c <HAL_SPI_RxCpltCallback+0x2d4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <HAL_SPI_RxCpltCallback+0x2d8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b29b      	uxth	r3, r3
 800182a:	fb12 f303 	smulbb	r3, r2, r3
 800182e:	b29a      	uxth	r2, r3
 8001830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001834:	4957      	ldr	r1, [pc, #348]	; (8001994 <HAL_SPI_RxCpltCallback+0x2dc>)
 8001836:	4858      	ldr	r0, [pc, #352]	; (8001998 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001838:	f005 f942 	bl	8006ac0 <HAL_SPI_Receive>
				break;
 800183c:	e035      	b.n	80018aa <HAL_SPI_RxCpltCallback+0x1f2>
				if (BOARD_NUMBER == 2)
 800183e:	4b52      	ldr	r3, [pc, #328]	; (8001988 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d10f      	bne.n	8001866 <HAL_SPI_RxCpltCallback+0x1ae>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <HAL_SPI_RxCpltCallback+0x2d4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_SPI_RxCpltCallback+0x2d8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	fb12 f303 	smulbb	r3, r2, r3
 8001856:	b29a      	uxth	r2, r3
 8001858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185c:	494d      	ldr	r1, [pc, #308]	; (8001994 <HAL_SPI_RxCpltCallback+0x2dc>)
 800185e:	484e      	ldr	r0, [pc, #312]	; (8001998 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001860:	f005 f92e 	bl	8006ac0 <HAL_SPI_Receive>
				break;
 8001864:	e022      	b.n	80018ac <HAL_SPI_RxCpltCallback+0x1f4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001866:	4b49      	ldr	r3, [pc, #292]	; (800198c <HAL_SPI_RxCpltCallback+0x2d4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b48      	ldr	r3, [pc, #288]	; (8001990 <HAL_SPI_RxCpltCallback+0x2d8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	fb12 f303 	smulbb	r3, r2, r3
 8001876:	b29a      	uxth	r2, r3
 8001878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187c:	4947      	ldr	r1, [pc, #284]	; (800199c <HAL_SPI_RxCpltCallback+0x2e4>)
 800187e:	4846      	ldr	r0, [pc, #280]	; (8001998 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001880:	f005 f91e 	bl	8006ac0 <HAL_SPI_Receive>
				break;
 8001884:	e012      	b.n	80018ac <HAL_SPI_RxCpltCallback+0x1f4>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <HAL_SPI_RxCpltCallback+0x2d4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29a      	uxth	r2, r3
 800188c:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_SPI_RxCpltCallback+0x2d8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	fb12 f303 	smulbb	r3, r2, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189c:	493d      	ldr	r1, [pc, #244]	; (8001994 <HAL_SPI_RxCpltCallback+0x2dc>)
 800189e:	483e      	ldr	r0, [pc, #248]	; (8001998 <HAL_SPI_RxCpltCallback+0x2e0>)
 80018a0:	f005 f90e 	bl	8006ac0 <HAL_SPI_Receive>
				break;
 80018a4:	e002      	b.n	80018ac <HAL_SPI_RxCpltCallback+0x1f4>
				break;
 80018a6:	bf00      	nop
 80018a8:	e09b      	b.n	80019e2 <HAL_SPI_RxCpltCallback+0x32a>
				break;
 80018aa:	bf00      	nop
			}
			break;
 80018ac:	e099      	b.n	80019e2 <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi_rev_2byte[0] & 0b00000111)
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_SPI_RxCpltCallback+0x2cc>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d03e      	beq.n	8001938 <HAL_SPI_RxCpltCallback+0x280>
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	dc4c      	bgt.n	8001958 <HAL_SPI_RxCpltCallback+0x2a0>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_SPI_RxCpltCallback+0x210>
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d014      	beq.n	80018f0 <HAL_SPI_RxCpltCallback+0x238>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 80018c6:	e047      	b.n	8001958 <HAL_SPI_RxCpltCallback+0x2a0>
				if (BOARD_NUMBER == 1)
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_SPI_RxCpltCallback+0x2d0>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d145      	bne.n	800195c <HAL_SPI_RxCpltCallback+0x2a4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 80018d0:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_SPI_RxCpltCallback+0x2d4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <HAL_SPI_RxCpltCallback+0x2d8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	fb12 f303 	smulbb	r3, r2, r3
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	492e      	ldr	r1, [pc, #184]	; (80019a0 <HAL_SPI_RxCpltCallback+0x2e8>)
 80018e8:	482b      	ldr	r0, [pc, #172]	; (8001998 <HAL_SPI_RxCpltCallback+0x2e0>)
 80018ea:	f005 f8e9 	bl	8006ac0 <HAL_SPI_Receive>
				break;
 80018ee:	e035      	b.n	800195c <HAL_SPI_RxCpltCallback+0x2a4>
				if (BOARD_NUMBER == 2)
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_SPI_RxCpltCallback+0x2d0>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d10f      	bne.n	8001918 <HAL_SPI_RxCpltCallback+0x260>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_SPI_RxCpltCallback+0x2d4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_SPI_RxCpltCallback+0x2d8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	fb12 f303 	smulbb	r3, r2, r3
 8001908:	b29a      	uxth	r2, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	4924      	ldr	r1, [pc, #144]	; (80019a0 <HAL_SPI_RxCpltCallback+0x2e8>)
 8001910:	4821      	ldr	r0, [pc, #132]	; (8001998 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001912:	f005 f8d5 	bl	8006ac0 <HAL_SPI_Receive>
				break;
 8001916:	e022      	b.n	800195e <HAL_SPI_RxCpltCallback+0x2a6>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_SPI_RxCpltCallback+0x2d4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	b29a      	uxth	r2, r3
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_SPI_RxCpltCallback+0x2d8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	fb12 f303 	smulbb	r3, r2, r3
 8001928:	b29a      	uxth	r2, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	491b      	ldr	r1, [pc, #108]	; (800199c <HAL_SPI_RxCpltCallback+0x2e4>)
 8001930:	4819      	ldr	r0, [pc, #100]	; (8001998 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001932:	f005 f8c5 	bl	8006ac0 <HAL_SPI_Receive>
				break;
 8001936:	e012      	b.n	800195e <HAL_SPI_RxCpltCallback+0x2a6>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_SPI_RxCpltCallback+0x2d4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_SPI_RxCpltCallback+0x2d8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	fb12 f303 	smulbb	r3, r2, r3
 8001948:	b29a      	uxth	r2, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	4914      	ldr	r1, [pc, #80]	; (80019a0 <HAL_SPI_RxCpltCallback+0x2e8>)
 8001950:	4811      	ldr	r0, [pc, #68]	; (8001998 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001952:	f005 f8b5 	bl	8006ac0 <HAL_SPI_Receive>
				break;
 8001956:	e002      	b.n	800195e <HAL_SPI_RxCpltCallback+0x2a6>
				break;
 8001958:	bf00      	nop
 800195a:	e042      	b.n	80019e2 <HAL_SPI_RxCpltCallback+0x32a>
				break;
 800195c:	bf00      	nop
			}
			break;
 800195e:	e040      	b.n	80019e2 <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00010000: //Write Registers data
			switch (spi_rev_2byte[0] & 0b00000111)
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	2b04      	cmp	r3, #4
 800196a:	d033      	beq.n	80019d4 <HAL_SPI_RxCpltCallback+0x31c>
 800196c:	2b04      	cmp	r3, #4
 800196e:	dc35      	bgt.n	80019dc <HAL_SPI_RxCpltCallback+0x324>
 8001970:	2b00      	cmp	r3, #0
 8001972:	d017      	beq.n	80019a4 <HAL_SPI_RxCpltCallback+0x2ec>
 8001974:	2b01      	cmp	r3, #1
 8001976:	d021      	beq.n	80019bc <HAL_SPI_RxCpltCallback+0x304>
				break;
			case 0b00000100: //Broadcast to every board
				Write_Registers_data(1);
				break;
			default:
				break;
 8001978:	e030      	b.n	80019dc <HAL_SPI_RxCpltCallback+0x324>
 800197a:	bf00      	nop
 800197c:	40003800 	.word	0x40003800
 8001980:	40003c00 	.word	0x40003c00
 8001984:	20070278 	.word	0x20070278
 8001988:	2000001e 	.word	0x2000001e
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004
 8001994:	20010270 	.word	0x20010270
 8001998:	20000174 	.word	0x20000174
 800199c:	20000270 	.word	0x20000270
 80019a0:	20020270 	.word	0x20020270
				if (BOARD_NUMBER == 1)
 80019a4:	4bac      	ldr	r3, [pc, #688]	; (8001c58 <HAL_SPI_RxCpltCallback+0x5a0>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d103      	bne.n	80019b4 <HAL_SPI_RxCpltCallback+0x2fc>
					Write_Registers_data(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7ff fd57 	bl	8001460 <Write_Registers_data>
				break;
 80019b2:	e014      	b.n	80019de <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fd53 	bl	8001460 <Write_Registers_data>
				break;
 80019ba:	e010      	b.n	80019de <HAL_SPI_RxCpltCallback+0x326>
				if (BOARD_NUMBER == 2)
 80019bc:	4ba6      	ldr	r3, [pc, #664]	; (8001c58 <HAL_SPI_RxCpltCallback+0x5a0>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d103      	bne.n	80019cc <HAL_SPI_RxCpltCallback+0x314>
					Write_Registers_data(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff fd4b 	bl	8001460 <Write_Registers_data>
				break;
 80019ca:	e008      	b.n	80019de <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff fd47 	bl	8001460 <Write_Registers_data>
				break;
 80019d2:	e004      	b.n	80019de <HAL_SPI_RxCpltCallback+0x326>
				Write_Registers_data(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff fd43 	bl	8001460 <Write_Registers_data>
				break;
 80019da:	e000      	b.n	80019de <HAL_SPI_RxCpltCallback+0x326>
				break;
 80019dc:	bf00      	nop
			}
			break;
 80019de:	e000      	b.n	80019e2 <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00011000: //Write partial content of frame buffer
			break;
 80019e0:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 80019e2:	e11c      	b.n	8001c1e <HAL_SPI_RxCpltCallback+0x566>
	case 0b01000000: //Master SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 80019e4:	4b9d      	ldr	r3, [pc, #628]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ec:	2b28      	cmp	r3, #40	; 0x28
 80019ee:	f200 8118 	bhi.w	8001c22 <HAL_SPI_RxCpltCallback+0x56a>
 80019f2:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <HAL_SPI_RxCpltCallback+0x340>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a9d 	.word	0x08001a9d
 80019fc:	08001c23 	.word	0x08001c23
 8001a00:	08001c23 	.word	0x08001c23
 8001a04:	08001c23 	.word	0x08001c23
 8001a08:	08001c23 	.word	0x08001c23
 8001a0c:	08001c23 	.word	0x08001c23
 8001a10:	08001c23 	.word	0x08001c23
 8001a14:	08001c23 	.word	0x08001c23
 8001a18:	08001a9d 	.word	0x08001a9d
 8001a1c:	08001c23 	.word	0x08001c23
 8001a20:	08001c23 	.word	0x08001c23
 8001a24:	08001c23 	.word	0x08001c23
 8001a28:	08001c23 	.word	0x08001c23
 8001a2c:	08001c23 	.word	0x08001c23
 8001a30:	08001c23 	.word	0x08001c23
 8001a34:	08001c23 	.word	0x08001c23
 8001a38:	08001a9d 	.word	0x08001a9d
 8001a3c:	08001c23 	.word	0x08001c23
 8001a40:	08001c23 	.word	0x08001c23
 8001a44:	08001c23 	.word	0x08001c23
 8001a48:	08001c23 	.word	0x08001c23
 8001a4c:	08001c23 	.word	0x08001c23
 8001a50:	08001c23 	.word	0x08001c23
 8001a54:	08001c23 	.word	0x08001c23
 8001a58:	08001a9d 	.word	0x08001a9d
 8001a5c:	08001c23 	.word	0x08001c23
 8001a60:	08001c23 	.word	0x08001c23
 8001a64:	08001c23 	.word	0x08001c23
 8001a68:	08001c23 	.word	0x08001c23
 8001a6c:	08001c23 	.word	0x08001c23
 8001a70:	08001c23 	.word	0x08001c23
 8001a74:	08001c23 	.word	0x08001c23
 8001a78:	08001a9d 	.word	0x08001a9d
 8001a7c:	08001c23 	.word	0x08001c23
 8001a80:	08001c23 	.word	0x08001c23
 8001a84:	08001c23 	.word	0x08001c23
 8001a88:	08001c23 	.word	0x08001c23
 8001a8c:	08001c23 	.word	0x08001c23
 8001a90:	08001c23 	.word	0x08001c23
 8001a94:	08001c23 	.word	0x08001c23
 8001a98:	08001a9d 	.word	0x08001a9d
		{
		case 0b00000000: //Start SPI write data
			break;
 8001a9c:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001a9e:	e0c0      	b.n	8001c22 <HAL_SPI_RxCpltCallback+0x56a>
	case 0b10000000: //I2C command
		switch (spi_rev_2byte[0] & 0b00111000)
 8001aa0:	4b6e      	ldr	r3, [pc, #440]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_SPI_RxCpltCallback+0x3fc>
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	f040 80ba 	bne.w	8001c26 <HAL_SPI_RxCpltCallback+0x56e>
		{
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001ab2:	e000      	b.n	8001ab6 <HAL_SPI_RxCpltCallback+0x3fe>
			break;
 8001ab4:	bf00      	nop
		}
		break;
 8001ab6:	e0b6      	b.n	8001c26 <HAL_SPI_RxCpltCallback+0x56e>
	case 0b11000000: //SPI flash function & Slave SPI
		switch (spi_rev_2byte[0] & 0b00111000)
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	f000 80aa 	beq.w	8001c1a <HAL_SPI_RxCpltCallback+0x562>
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	f300 80af 	bgt.w	8001c2a <HAL_SPI_RxCpltCallback+0x572>
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_SPI_RxCpltCallback+0x41e>
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d078      	beq.n	8001bc6 <HAL_SPI_RxCpltCallback+0x50e>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001ad4:	e0a9      	b.n	8001c2a <HAL_SPI_RxCpltCallback+0x572>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001ad6:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d04c      	beq.n	8001b7c <HAL_SPI_RxCpltCallback+0x4c4>
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	dc69      	bgt.n	8001bba <HAL_SPI_RxCpltCallback+0x502>
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_SPI_RxCpltCallback+0x438>
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d023      	beq.n	8001b36 <HAL_SPI_RxCpltCallback+0x47e>
				break;
 8001aee:	e064      	b.n	8001bba <HAL_SPI_RxCpltCallback+0x502>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001af0:	4b5b      	ldr	r3, [pc, #364]	; (8001c60 <HAL_SPI_RxCpltCallback+0x5a8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	fb12 f303 	smulbb	r3, r2, r3
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	4958      	ldr	r1, [pc, #352]	; (8001c68 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b08:	4858      	ldr	r0, [pc, #352]	; (8001c6c <HAL_SPI_RxCpltCallback+0x5b4>)
 8001b0a:	f004 ffd9 	bl	8006ac0 <HAL_SPI_Receive>
				if (BOARD_NUMBER == 1)
 8001b0e:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d153      	bne.n	8001bbe <HAL_SPI_RxCpltCallback+0x506>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001b16:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b18:	785b      	ldrb	r3, [r3, #1]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fdb2 	bl	8002688 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001b24:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	484e      	ldr	r0, [pc, #312]	; (8001c68 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b30:	f000 fc44 	bl	80023bc <write_flash_page>
				break;
 8001b34:	e043      	b.n	8001bbe <HAL_SPI_RxCpltCallback+0x506>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001b36:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_SPI_RxCpltCallback+0x5a8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	fb12 f303 	smulbb	r3, r2, r3
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4c:	4946      	ldr	r1, [pc, #280]	; (8001c68 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b4e:	4847      	ldr	r0, [pc, #284]	; (8001c6c <HAL_SPI_RxCpltCallback+0x5b4>)
 8001b50:	f004 ffb6 	bl	8006ac0 <HAL_SPI_Receive>
				if (BOARD_NUMBER == 2)
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d132      	bne.n	8001bc2 <HAL_SPI_RxCpltCallback+0x50a>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001b5c:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b5e:	785b      	ldrb	r3, [r3, #1]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fd8f 	bl	8002688 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b6c:	785b      	ldrb	r3, [r3, #1]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4619      	mov	r1, r3
 8001b74:	483c      	ldr	r0, [pc, #240]	; (8001c68 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b76:	f000 fc21 	bl	80023bc <write_flash_page>
				break;
 8001b7a:	e022      	b.n	8001bc2 <HAL_SPI_RxCpltCallback+0x50a>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_SPI_RxCpltCallback+0x5a8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	fb12 f303 	smulbb	r3, r2, r3
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	4935      	ldr	r1, [pc, #212]	; (8001c68 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b94:	4835      	ldr	r0, [pc, #212]	; (8001c6c <HAL_SPI_RxCpltCallback+0x5b4>)
 8001b96:	f004 ff93 	bl	8006ac0 <HAL_SPI_Receive>
				erase_flash_sector(spi_rev_2byte[1] - 1);
 8001b9a:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fd70 	bl	8002688 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482d      	ldr	r0, [pc, #180]	; (8001c68 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001bb4:	f000 fc02 	bl	80023bc <write_flash_page>
				break;
 8001bb8:	e004      	b.n	8001bc4 <HAL_SPI_RxCpltCallback+0x50c>
				break;
 8001bba:	bf00      	nop
 8001bbc:	e02e      	b.n	8001c1c <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001bbe:	bf00      	nop
 8001bc0:	e02c      	b.n	8001c1c <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001bc2:	bf00      	nop
			break;
 8001bc4:	e02a      	b.n	8001c1c <HAL_SPI_RxCpltCallback+0x564>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001bc6:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d014      	beq.n	8001bfc <HAL_SPI_RxCpltCallback+0x544>
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	dc1d      	bgt.n	8001c12 <HAL_SPI_RxCpltCallback+0x55a>
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_SPI_RxCpltCallback+0x526>
 8001bda:	2b01      	cmp	r3, #1
				break;
 8001bdc:	e01c      	b.n	8001c18 <HAL_SPI_RxCpltCallback+0x560>
				if (BOARD_NUMBER == 1)
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d117      	bne.n	8001c16 <HAL_SPI_RxCpltCallback+0x55e>
					reset_flash_software();
 8001be6:	f000 fe25 	bl	8002834 <reset_flash_software>
					read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bec:	785b      	ldrb	r3, [r3, #1]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	481c      	ldr	r0, [pc, #112]	; (8001c68 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001bf6:	f000 fcb1 	bl	800255c <read_flash_page>
				break;
 8001bfa:	e00c      	b.n	8001c16 <HAL_SPI_RxCpltCallback+0x55e>
				reset_flash_software();
 8001bfc:	f000 fe1a 	bl	8002834 <reset_flash_software>
				read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4817      	ldr	r0, [pc, #92]	; (8001c68 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c0c:	f000 fca6 	bl	800255c <read_flash_page>
				break;
 8001c10:	e002      	b.n	8001c18 <HAL_SPI_RxCpltCallback+0x560>
				break;
 8001c12:	bf00      	nop
 8001c14:	e002      	b.n	8001c1c <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001c16:	bf00      	nop
			break;
 8001c18:	e000      	b.n	8001c1c <HAL_SPI_RxCpltCallback+0x564>
			break;
 8001c1a:	bf00      	nop
		break;
 8001c1c:	e005      	b.n	8001c2a <HAL_SPI_RxCpltCallback+0x572>
		break;
 8001c1e:	bf00      	nop
 8001c20:	e004      	b.n	8001c2c <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001c22:	bf00      	nop
 8001c24:	e002      	b.n	8001c2c <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001c26:	bf00      	nop
 8001c28:	e000      	b.n	8001c2c <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001c2a:	bf00      	nop
	}
	// USB command: ID
	switch (spi_rev_2byte[0] & 0b00000111)
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_SPI_RxCpltCallback+0x586>
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d002      	beq.n	8001c42 <HAL_SPI_RxCpltCallback+0x58a>
	case 0b00000000: //Command for DIP switch ID = 00
		break;
	case 0b00000001: //Command for DIP switch ID = 01
		break;
	default: //Broadcast to every board
		break;
 8001c3c:	e002      	b.n	8001c44 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001c3e:	bf00      	nop
 8001c40:	e000      	b.n	8001c44 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001c42:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8001c44:	2202      	movs	r2, #2
 8001c46:	4905      	ldr	r1, [pc, #20]	; (8001c5c <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c4a:	f005 fa93 	bl	8007174 <HAL_SPI_Receive_IT>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000001e 	.word	0x2000001e
 8001c5c:	20070278 	.word	0x20070278
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004
 8001c68:	20000270 	.word	0x20000270
 8001c6c:	20000174 	.word	0x20000174

08001c70 <display_panel>:

void display_panel(uint8_t *frame_buf)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b08b      	sub	sp, #44	; 0x2c
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	int num_ones = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 8001c7c:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <display_panel+0xe4>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <display_panel+0xe8>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 12; i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	e00d      	b.n	8001cb2 <display_panel+0x42>
	{
		if (Pixel_Mapping_one & (1 << i))
 8001c96:	897a      	ldrh	r2, [r7, #10]
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	fa42 f303 	asr.w	r3, r2, r3
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <display_panel+0x3c>
		{
			num_ones++;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	3301      	adds	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	623b      	str	r3, [r7, #32]
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	2b0b      	cmp	r3, #11
 8001cb6:	ddee      	ble.n	8001c96 <display_panel+0x26>
		}
	}

	int frame_buf_count = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
	int Pixel_Mapping_one_count = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
	int c = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e034      	b.n	8001d34 <display_panel+0xc4>
	{
		Pixel_Mapping_one_count = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
		c = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 12; j++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e022      	b.n	8001d1e <display_panel+0xae>
		{
			if (Pixel_Mapping_one & (1 << j))
 8001cd8:	897a      	ldrh	r2, [r7, #10]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	fa42 f303 	asr.w	r3, r2, r3
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d014      	beq.n	8001d12 <display_panel+0xa2>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4413      	add	r3, r2
 8001cee:	61fb      	str	r3, [r7, #28]
				image_arr_rgb888[frame_buf_count] = frame_buf[i + c];
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	7819      	ldrb	r1, [r3, #0]
 8001cfe:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <display_panel+0xec>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	4413      	add	r3, r2
 8001d04:	460a      	mov	r2, r1
 8001d06:	701a      	strb	r2, [r3, #0]
				c++;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
				Pixel_Mapping_one_count = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
			}
			Pixel_Mapping_one_count++;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61bb      	str	r3, [r7, #24]
		for (int j = 0; j < 12; j++)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b0b      	cmp	r3, #11
 8001d22:	ddd9      	ble.n	8001cd8 <display_panel+0x68>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	4413      	add	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <display_panel+0xf0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <display_panel+0xf4>)
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	fb03 f202 	mul.w	r2, r3, r2
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d8c1      	bhi.n	8001cca <display_panel+0x5a>
	}
}
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	372c      	adds	r7, #44	; 0x2c
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	2000001c 	.word	0x2000001c
 8001d58:	2000001d 	.word	0x2000001d
 8001d5c:	20040274 	.word	0x20040274
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <read_flash_SR>:

/*====================================flash function begin====================================*/
uint8_t read_flash_SR()
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
	uint8_t dat[1] = {0x00};
 8001d6e:	2300      	movs	r3, #0
 8001d70:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d78:	480e      	ldr	r0, [pc, #56]	; (8001db4 <read_flash_SR+0x4c>)
 8001d7a:	f002 fc8f 	bl	800469c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x05}, 1, 1000);
 8001d7e:	2305      	movs	r3, #5
 8001d80:	703b      	strb	r3, [r7, #0]
 8001d82:	4639      	mov	r1, r7
 8001d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d88:	2201      	movs	r2, #1
 8001d8a:	480b      	ldr	r0, [pc, #44]	; (8001db8 <read_flash_SR+0x50>)
 8001d8c:	f004 fd23 	bl	80067d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)dat, 1, 1000);
 8001d90:	1d39      	adds	r1, r7, #4
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	2201      	movs	r2, #1
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <read_flash_SR+0x50>)
 8001d9a:	f004 fe91 	bl	8006ac0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <read_flash_SR+0x4c>)
 8001da6:	f002 fc79 	bl	800469c <HAL_GPIO_WritePin>

	return dat[0];
 8001daa:	793b      	ldrb	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	48000400 	.word	0x48000400
 8001db8:	20000110 	.word	0x20000110

08001dbc <flash_wait_nobusy>:

void flash_wait_nobusy(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
    while(((read_flash_SR()) & 0x01)==0x01);
 8001dc0:	bf00      	nop
 8001dc2:	f7ff ffd1 	bl	8001d68 <read_flash_SR>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d0f8      	beq.n	8001dc2 <flash_wait_nobusy+0x6>
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <mode_init>:
		delay_us(10);

		flash_wait_nobusy();
	}
}*/
void mode_init(){
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	e00f      	b.n	8001e04 <mode_init+0x2c>
		Mode_config[i*2]=i;//picture_id
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	b2d1      	uxtb	r1, r2
 8001dec:	4ac4      	ldr	r2, [pc, #784]	; (8002100 <mode_init+0x328>)
 8001dee:	54d1      	strb	r1, [r2, r3]
		Mode_config[i*2+1]=i;//picture_delay_time
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	3301      	adds	r3, #1
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	b2d1      	uxtb	r1, r2
 8001dfa:	4ac1      	ldr	r2, [pc, #772]	; (8002100 <mode_init+0x328>)
 8001dfc:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3301      	adds	r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b6e      	cmp	r3, #110	; 0x6e
 8001e08:	ddec      	ble.n	8001de4 <mode_init+0xc>
	}
	Mode_config[Max_pic_per_mode*(Max_mode_num-1)*2]=0;
 8001e0a:	4bbd      	ldr	r3, [pc, #756]	; (8002100 <mode_init+0x328>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	//test mode 1
	Mode_config[0]=0;
 8001e12:	4bbb      	ldr	r3, [pc, #748]	; (8002100 <mode_init+0x328>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
	Mode_config[1]=1;
 8001e18:	4bb9      	ldr	r3, [pc, #740]	; (8002100 <mode_init+0x328>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	705a      	strb	r2, [r3, #1]
	Mode_config[2]=1;
 8001e1e:	4bb8      	ldr	r3, [pc, #736]	; (8002100 <mode_init+0x328>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	709a      	strb	r2, [r3, #2]
	Mode_config[3]=1;
 8001e24:	4bb6      	ldr	r3, [pc, #728]	; (8002100 <mode_init+0x328>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	70da      	strb	r2, [r3, #3]
	Mode_config[4]=255;
 8001e2a:	4bb5      	ldr	r3, [pc, #724]	; (8002100 <mode_init+0x328>)
 8001e2c:	22ff      	movs	r2, #255	; 0xff
 8001e2e:	711a      	strb	r2, [r3, #4]
	Mode_config[5]=1;
 8001e30:	4bb3      	ldr	r3, [pc, #716]	; (8002100 <mode_init+0x328>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	715a      	strb	r2, [r3, #5]
	Mode_config[6]=255;
 8001e36:	4bb2      	ldr	r3, [pc, #712]	; (8002100 <mode_init+0x328>)
 8001e38:	22ff      	movs	r2, #255	; 0xff
 8001e3a:	719a      	strb	r2, [r3, #6]
	Mode_config[7]=1;
 8001e3c:	4bb0      	ldr	r3, [pc, #704]	; (8002100 <mode_init+0x328>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	71da      	strb	r2, [r3, #7]
	Mode_config[8]=255;
 8001e42:	4baf      	ldr	r3, [pc, #700]	; (8002100 <mode_init+0x328>)
 8001e44:	22ff      	movs	r2, #255	; 0xff
 8001e46:	721a      	strb	r2, [r3, #8]
	Mode_config[9]=1;
 8001e48:	4bad      	ldr	r3, [pc, #692]	; (8002100 <mode_init+0x328>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	725a      	strb	r2, [r3, #9]
	//test mode 2
	Mode_config[10]=0;
 8001e4e:	4bac      	ldr	r3, [pc, #688]	; (8002100 <mode_init+0x328>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	729a      	strb	r2, [r3, #10]
	Mode_config[11]=4;
 8001e54:	4baa      	ldr	r3, [pc, #680]	; (8002100 <mode_init+0x328>)
 8001e56:	2204      	movs	r2, #4
 8001e58:	72da      	strb	r2, [r3, #11]
	Mode_config[12]=1;
 8001e5a:	4ba9      	ldr	r3, [pc, #676]	; (8002100 <mode_init+0x328>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	731a      	strb	r2, [r3, #12]
	Mode_config[13]=4;
 8001e60:	4ba7      	ldr	r3, [pc, #668]	; (8002100 <mode_init+0x328>)
 8001e62:	2204      	movs	r2, #4
 8001e64:	735a      	strb	r2, [r3, #13]
	Mode_config[14]=255;
 8001e66:	4ba6      	ldr	r3, [pc, #664]	; (8002100 <mode_init+0x328>)
 8001e68:	22ff      	movs	r2, #255	; 0xff
 8001e6a:	739a      	strb	r2, [r3, #14]
	Mode_config[15]=1;
 8001e6c:	4ba4      	ldr	r3, [pc, #656]	; (8002100 <mode_init+0x328>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	73da      	strb	r2, [r3, #15]
	Mode_config[16]=255;
 8001e72:	4ba3      	ldr	r3, [pc, #652]	; (8002100 <mode_init+0x328>)
 8001e74:	22ff      	movs	r2, #255	; 0xff
 8001e76:	741a      	strb	r2, [r3, #16]
	Mode_config[17]=1;
 8001e78:	4ba1      	ldr	r3, [pc, #644]	; (8002100 <mode_init+0x328>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	745a      	strb	r2, [r3, #17]
	Mode_config[18]=255;
 8001e7e:	4ba0      	ldr	r3, [pc, #640]	; (8002100 <mode_init+0x328>)
 8001e80:	22ff      	movs	r2, #255	; 0xff
 8001e82:	749a      	strb	r2, [r3, #18]
	Mode_config[19]=1;
 8001e84:	4b9e      	ldr	r3, [pc, #632]	; (8002100 <mode_init+0x328>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	74da      	strb	r2, [r3, #19]
	//test mode 3
	Mode_config[20]=2;
 8001e8a:	4b9d      	ldr	r3, [pc, #628]	; (8002100 <mode_init+0x328>)
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	751a      	strb	r2, [r3, #20]
	Mode_config[21]=1;
 8001e90:	4b9b      	ldr	r3, [pc, #620]	; (8002100 <mode_init+0x328>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	755a      	strb	r2, [r3, #21]
	Mode_config[22]=3;
 8001e96:	4b9a      	ldr	r3, [pc, #616]	; (8002100 <mode_init+0x328>)
 8001e98:	2203      	movs	r2, #3
 8001e9a:	759a      	strb	r2, [r3, #22]
	Mode_config[23]=1;
 8001e9c:	4b98      	ldr	r3, [pc, #608]	; (8002100 <mode_init+0x328>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	75da      	strb	r2, [r3, #23]
	Mode_config[24]=4;
 8001ea2:	4b97      	ldr	r3, [pc, #604]	; (8002100 <mode_init+0x328>)
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	761a      	strb	r2, [r3, #24]
	Mode_config[25]=1;
 8001ea8:	4b95      	ldr	r3, [pc, #596]	; (8002100 <mode_init+0x328>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	765a      	strb	r2, [r3, #25]
	Mode_config[26]=5;
 8001eae:	4b94      	ldr	r3, [pc, #592]	; (8002100 <mode_init+0x328>)
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	769a      	strb	r2, [r3, #26]
	Mode_config[27]=1;
 8001eb4:	4b92      	ldr	r3, [pc, #584]	; (8002100 <mode_init+0x328>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	76da      	strb	r2, [r3, #27]
	Mode_config[28]=255;
 8001eba:	4b91      	ldr	r3, [pc, #580]	; (8002100 <mode_init+0x328>)
 8001ebc:	22ff      	movs	r2, #255	; 0xff
 8001ebe:	771a      	strb	r2, [r3, #28]
	Mode_config[29]=1;
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	; (8002100 <mode_init+0x328>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	775a      	strb	r2, [r3, #29]
	//test mode 3
	Mode_config[30]=2;
 8001ec6:	4b8e      	ldr	r3, [pc, #568]	; (8002100 <mode_init+0x328>)
 8001ec8:	2202      	movs	r2, #2
 8001eca:	779a      	strb	r2, [r3, #30]
	Mode_config[31]=4;
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <mode_init+0x328>)
 8001ece:	2204      	movs	r2, #4
 8001ed0:	77da      	strb	r2, [r3, #31]
	Mode_config[32]=3;
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <mode_init+0x328>)
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	f883 2020 	strb.w	r2, [r3, #32]
	Mode_config[33]=4;
 8001eda:	4b89      	ldr	r3, [pc, #548]	; (8002100 <mode_init+0x328>)
 8001edc:	2204      	movs	r2, #4
 8001ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Mode_config[34]=4;
 8001ee2:	4b87      	ldr	r3, [pc, #540]	; (8002100 <mode_init+0x328>)
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Mode_config[35]=4;
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <mode_init+0x328>)
 8001eec:	2204      	movs	r2, #4
 8001eee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Mode_config[36]=5;
 8001ef2:	4b83      	ldr	r3, [pc, #524]	; (8002100 <mode_init+0x328>)
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Mode_config[37]=4;
 8001efa:	4b81      	ldr	r3, [pc, #516]	; (8002100 <mode_init+0x328>)
 8001efc:	2204      	movs	r2, #4
 8001efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Mode_config[38]=255;
 8001f02:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <mode_init+0x328>)
 8001f04:	22ff      	movs	r2, #255	; 0xff
 8001f06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Mode_config[39]=1;
 8001f0a:	4b7d      	ldr	r3, [pc, #500]	; (8002100 <mode_init+0x328>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//test mode 4
	Mode_config[40]=6;
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <mode_init+0x328>)
 8001f14:	2206      	movs	r2, #6
 8001f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Mode_config[41]=1;
 8001f1a:	4b79      	ldr	r3, [pc, #484]	; (8002100 <mode_init+0x328>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Mode_config[42]=7;
 8001f22:	4b77      	ldr	r3, [pc, #476]	; (8002100 <mode_init+0x328>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Mode_config[43]=1;
 8001f2a:	4b75      	ldr	r3, [pc, #468]	; (8002100 <mode_init+0x328>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Mode_config[44]=8;
 8001f32:	4b73      	ldr	r3, [pc, #460]	; (8002100 <mode_init+0x328>)
 8001f34:	2208      	movs	r2, #8
 8001f36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Mode_config[45]=1;
 8001f3a:	4b71      	ldr	r3, [pc, #452]	; (8002100 <mode_init+0x328>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Mode_config[46]=9;
 8001f42:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <mode_init+0x328>)
 8001f44:	2209      	movs	r2, #9
 8001f46:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Mode_config[47]=1;
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <mode_init+0x328>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Mode_config[48]=10;
 8001f52:	4b6b      	ldr	r3, [pc, #428]	; (8002100 <mode_init+0x328>)
 8001f54:	220a      	movs	r2, #10
 8001f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Mode_config[49]=1;
 8001f5a:	4b69      	ldr	r3, [pc, #420]	; (8002100 <mode_init+0x328>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	//test mode 5
	Mode_config[50]=6;
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <mode_init+0x328>)
 8001f64:	2206      	movs	r2, #6
 8001f66:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Mode_config[51]=4;
 8001f6a:	4b65      	ldr	r3, [pc, #404]	; (8002100 <mode_init+0x328>)
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Mode_config[52]=7;
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <mode_init+0x328>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Mode_config[53]=4;
 8001f7a:	4b61      	ldr	r3, [pc, #388]	; (8002100 <mode_init+0x328>)
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	Mode_config[54]=8;
 8001f82:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <mode_init+0x328>)
 8001f84:	2208      	movs	r2, #8
 8001f86:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Mode_config[55]=4;
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <mode_init+0x328>)
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Mode_config[56]=9;
 8001f92:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <mode_init+0x328>)
 8001f94:	2209      	movs	r2, #9
 8001f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Mode_config[57]=4;
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <mode_init+0x328>)
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Mode_config[58]=10;
 8001fa2:	4b57      	ldr	r3, [pc, #348]	; (8002100 <mode_init+0x328>)
 8001fa4:	220a      	movs	r2, #10
 8001fa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Mode_config[59]=4;
 8001faa:	4b55      	ldr	r3, [pc, #340]	; (8002100 <mode_init+0x328>)
 8001fac:	2204      	movs	r2, #4
 8001fae:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//test mode 6
	Mode_config[60]=11;
 8001fb2:	4b53      	ldr	r3, [pc, #332]	; (8002100 <mode_init+0x328>)
 8001fb4:	220b      	movs	r2, #11
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Mode_config[61]=1;
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <mode_init+0x328>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Mode_config[62]=12;
 8001fc2:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <mode_init+0x328>)
 8001fc4:	220c      	movs	r2, #12
 8001fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Mode_config[63]=1;
 8001fca:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <mode_init+0x328>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Mode_config[64]=255;
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <mode_init+0x328>)
 8001fd4:	22ff      	movs	r2, #255	; 0xff
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Mode_config[65]=1;
 8001fda:	4b49      	ldr	r3, [pc, #292]	; (8002100 <mode_init+0x328>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Mode_config[66]=255;
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <mode_init+0x328>)
 8001fe4:	22ff      	movs	r2, #255	; 0xff
 8001fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Mode_config[67]=1;
 8001fea:	4b45      	ldr	r3, [pc, #276]	; (8002100 <mode_init+0x328>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Mode_config[68]=255;
 8001ff2:	4b43      	ldr	r3, [pc, #268]	; (8002100 <mode_init+0x328>)
 8001ff4:	22ff      	movs	r2, #255	; 0xff
 8001ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Mode_config[69]=1;
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <mode_init+0x328>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	//test mode 7
	Mode_config[70]=11;
 8002002:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <mode_init+0x328>)
 8002004:	220b      	movs	r2, #11
 8002006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Mode_config[71]=4;
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <mode_init+0x328>)
 800200c:	2204      	movs	r2, #4
 800200e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	Mode_config[72]=12;
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <mode_init+0x328>)
 8002014:	220c      	movs	r2, #12
 8002016:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Mode_config[73]=4;
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <mode_init+0x328>)
 800201c:	2204      	movs	r2, #4
 800201e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Mode_config[74]=255;
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <mode_init+0x328>)
 8002024:	22ff      	movs	r2, #255	; 0xff
 8002026:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Mode_config[75]=1;
 800202a:	4b35      	ldr	r3, [pc, #212]	; (8002100 <mode_init+0x328>)
 800202c:	2201      	movs	r2, #1
 800202e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Mode_config[76]=255;
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <mode_init+0x328>)
 8002034:	22ff      	movs	r2, #255	; 0xff
 8002036:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Mode_config[77]=1;
 800203a:	4b31      	ldr	r3, [pc, #196]	; (8002100 <mode_init+0x328>)
 800203c:	2201      	movs	r2, #1
 800203e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Mode_config[78]=255;
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <mode_init+0x328>)
 8002044:	22ff      	movs	r2, #255	; 0xff
 8002046:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Mode_config[79]=1;
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <mode_init+0x328>)
 800204c:	2201      	movs	r2, #1
 800204e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	//test mode 8
	Mode_config[80]=13;
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <mode_init+0x328>)
 8002054:	220d      	movs	r2, #13
 8002056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Mode_config[81]=1;
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <mode_init+0x328>)
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Mode_config[82]=14;
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <mode_init+0x328>)
 8002064:	220e      	movs	r2, #14
 8002066:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Mode_config[83]=1;
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <mode_init+0x328>)
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Mode_config[84]=255;
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <mode_init+0x328>)
 8002074:	22ff      	movs	r2, #255	; 0xff
 8002076:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Mode_config[85]=1;
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <mode_init+0x328>)
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Mode_config[86]=255;
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <mode_init+0x328>)
 8002084:	22ff      	movs	r2, #255	; 0xff
 8002086:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Mode_config[87]=1;
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <mode_init+0x328>)
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Mode_config[88]=255;
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <mode_init+0x328>)
 8002094:	22ff      	movs	r2, #255	; 0xff
 8002096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	Mode_config[89]=1;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <mode_init+0x328>)
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//test mode 8
	Mode_config[90]=13;
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <mode_init+0x328>)
 80020a4:	220d      	movs	r2, #13
 80020a6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	Mode_config[91]=4;
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <mode_init+0x328>)
 80020ac:	2204      	movs	r2, #4
 80020ae:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Mode_config[92]=14;
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <mode_init+0x328>)
 80020b4:	220e      	movs	r2, #14
 80020b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	Mode_config[93]=4;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <mode_init+0x328>)
 80020bc:	2204      	movs	r2, #4
 80020be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	Mode_config[94]=255;
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <mode_init+0x328>)
 80020c4:	22ff      	movs	r2, #255	; 0xff
 80020c6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Mode_config[95]=1;
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <mode_init+0x328>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	Mode_config[96]=255;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <mode_init+0x328>)
 80020d4:	22ff      	movs	r2, #255	; 0xff
 80020d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	Mode_config[97]=1;
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <mode_init+0x328>)
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	Mode_config[98]=255;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <mode_init+0x328>)
 80020e4:	22ff      	movs	r2, #255	; 0xff
 80020e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	Mode_config[99]=1;
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <mode_init+0x328>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	2007027c 	.word	0x2007027c

08002104 <write_flash_config>:
void write_flash_config()
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af00      	add	r7, sp, #0
	//content_size：0=16kb, 1=32kb, 2=32kb, 3=64kb
	int divide_value = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64; //divide_value=4
 800210e:	4b60      	ldr	r3, [pc, #384]	; (8002290 <write_flash_config+0x18c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <write_flash_config+0x18>
 8002116:	2304      	movs	r3, #4
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800211a:	e00c      	b.n	8002136 <write_flash_config+0x32>
	else if(content_size==1) divide_value=256/128; //divide_value=2
 800211c:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <write_flash_config+0x18c>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d102      	bne.n	800212a <write_flash_config+0x26>
 8002124:	2302      	movs	r3, #2
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002128:	e005      	b.n	8002136 <write_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;//divide_value=1
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <write_flash_config+0x18c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d101      	bne.n	8002136 <write_flash_config+0x32>
 8002132:	2301      	movs	r3, #1
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
	int image_id = 31;
 8002136:	231f      	movs	r3, #31
 8002138:	623b      	str	r3, [r7, #32]
	erase_flash_sector(image_id);
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f000 faa2 	bl	8002688 <erase_flash_sector>

	int image_id_H = image_id / divide_value;
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002148:	fb92 f3f3 	sdiv	r3, r2, r3
 800214c:	61fb      	str	r3, [r7, #28]
	int image_id_L = image_id % divide_value;
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002152:	fb93 f2f2 	sdiv	r2, r3, r2
 8002156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002158:	fb01 f202 	mul.w	r2, r1, r2
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
	int count = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	fb92 f3f3 	sdiv	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	e076      	b.n	8002266 <write_flash_config+0x162>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800217e:	4845      	ldr	r0, [pc, #276]	; (8002294 <write_flash_config+0x190>)
 8002180:	f002 fa8c 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002184:	2306      	movs	r3, #6
 8002186:	753b      	strb	r3, [r7, #20]
 8002188:	f107 0114 	add.w	r1, r7, #20
 800218c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002190:	2201      	movs	r2, #1
 8002192:	4841      	ldr	r0, [pc, #260]	; (8002298 <write_flash_config+0x194>)
 8002194:	f004 fb1f 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219e:	483d      	ldr	r0, [pc, #244]	; (8002294 <write_flash_config+0x190>)
 80021a0:	f002 fa7c 	bl	800469c <HAL_GPIO_WritePin>
		delay_us(10);
 80021a4:	200a      	movs	r0, #10
 80021a6:	f000 fd67 	bl	8002c78 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b0:	4838      	ldr	r0, [pc, #224]	; (8002294 <write_flash_config+0x190>)
 80021b2:	f002 fa73 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 80021b6:	2302      	movs	r3, #2
 80021b8:	743b      	strb	r3, [r7, #16]
 80021ba:	f107 0110 	add.w	r1, r7, #16
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	2201      	movs	r2, #1
 80021c4:	4834      	ldr	r0, [pc, #208]	; (8002298 <write_flash_config+0x194>)
 80021c6:	f004 fb06 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	733b      	strb	r3, [r7, #12]
 80021d0:	f107 010c 	add.w	r1, r7, #12
 80021d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d8:	2201      	movs	r2, #1
 80021da:	482f      	ldr	r0, [pc, #188]	; (8002298 <write_flash_config+0x194>)
 80021dc:	f004 fafb 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	723b      	strb	r3, [r7, #8]
 80021e6:	f107 0108 	add.w	r1, r7, #8
 80021ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ee:	2201      	movs	r2, #1
 80021f0:	4829      	ldr	r0, [pc, #164]	; (8002298 <write_flash_config+0x194>)
 80021f2:	f004 faf0 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80021f6:	2300      	movs	r3, #0
 80021f8:	713b      	strb	r3, [r7, #4]
 80021fa:	1d39      	adds	r1, r7, #4
 80021fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002200:	2201      	movs	r2, #1
 8002202:	4825      	ldr	r0, [pc, #148]	; (8002298 <write_flash_config+0x194>)
 8002204:	f004 fae7 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &Mode_config[0], Max_pic_per_mode*Max_mode_num*2, 1000);
 8002208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220c:	226e      	movs	r2, #110	; 0x6e
 800220e:	4923      	ldr	r1, [pc, #140]	; (800229c <write_flash_config+0x198>)
 8002210:	4821      	ldr	r0, [pc, #132]	; (8002298 <write_flash_config+0x194>)
 8002212:	f004 fae0 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002216:	2201      	movs	r2, #1
 8002218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800221c:	481d      	ldr	r0, [pc, #116]	; (8002294 <write_flash_config+0x190>)
 800221e:	f002 fa3d 	bl	800469c <HAL_GPIO_WritePin>
		delay_us(10);
 8002222:	200a      	movs	r0, #10
 8002224:	f000 fd28 	bl	8002c78 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002228:	2200      	movs	r2, #0
 800222a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800222e:	4819      	ldr	r0, [pc, #100]	; (8002294 <write_flash_config+0x190>)
 8002230:	f002 fa34 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002234:	2304      	movs	r3, #4
 8002236:	703b      	strb	r3, [r7, #0]
 8002238:	4639      	mov	r1, r7
 800223a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223e:	2201      	movs	r2, #1
 8002240:	4815      	ldr	r0, [pc, #84]	; (8002298 <write_flash_config+0x194>)
 8002242:	f004 fac8 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224c:	4811      	ldr	r0, [pc, #68]	; (8002294 <write_flash_config+0x190>)
 800224e:	f002 fa25 	bl	800469c <HAL_GPIO_WritePin>
		delay_us(1000);
 8002252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002256:	f000 fd0f 	bl	8002c78 <delay_us>
		count++;
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	3301      	adds	r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	3301      	adds	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	3301      	adds	r3, #1
 800226a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800226e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002270:	fb91 f2f2 	sdiv	r2, r1, r2
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	461a      	mov	r2, r3
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	4293      	cmp	r3, r2
 800227e:	f4ff af7b 	bcc.w	8002178 <write_flash_config+0x74>
	}

	flash_wait_nobusy();
 8002282:	f7ff fd9b 	bl	8001dbc <flash_wait_nobusy>
}
 8002286:	bf00      	nop
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000000b 	.word	0x2000000b
 8002294:	48000400 	.word	0x48000400
 8002298:	20000110 	.word	0x20000110
 800229c:	2007027c 	.word	0x2007027c

080022a0 <read_flash_config>:
void read_flash_config()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
	int divide_value = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
	if(content_size==0) divide_value=256/64;
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <read_flash_config+0x10c>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <read_flash_config+0x18>
 80022b2:	2304      	movs	r3, #4
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	e00c      	b.n	80022d2 <read_flash_config+0x32>
	else if(content_size==1) divide_value=256/128;
 80022b8:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <read_flash_config+0x10c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d102      	bne.n	80022c6 <read_flash_config+0x26>
 80022c0:	2302      	movs	r3, #2
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
 80022c4:	e005      	b.n	80022d2 <read_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;
 80022c6:	4b39      	ldr	r3, [pc, #228]	; (80023ac <read_flash_config+0x10c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d101      	bne.n	80022d2 <read_flash_config+0x32>
 80022ce:	2301      	movs	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24

	int image_id= 31;
 80022d2:	231f      	movs	r3, #31
 80022d4:	61fb      	str	r3, [r7, #28]
	int image_id_H = image_id / divide_value;
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	fb92 f3f3 	sdiv	r3, r2, r3
 80022de:	61bb      	str	r3, [r7, #24]
	int image_id_L = image_id % divide_value;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e4:	fb93 f2f2 	sdiv	r2, r3, r2
 80022e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ea:	fb01 f202 	mul.w	r2, r1, r2
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
	int count = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80022f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	e03d      	b.n	8002386 <read_flash_config+0xe6>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 800230a:	2200      	movs	r2, #0
 800230c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002310:	4827      	ldr	r0, [pc, #156]	; (80023b0 <read_flash_config+0x110>)
 8002312:	f002 f9c3 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 8002316:	2303      	movs	r3, #3
 8002318:	733b      	strb	r3, [r7, #12]
 800231a:	f107 010c 	add.w	r1, r7, #12
 800231e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002322:	2201      	movs	r2, #1
 8002324:	4823      	ldr	r0, [pc, #140]	; (80023b4 <read_flash_config+0x114>)
 8002326:	f004 fa56 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	723b      	strb	r3, [r7, #8]
 8002330:	f107 0108 	add.w	r1, r7, #8
 8002334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002338:	2201      	movs	r2, #1
 800233a:	481e      	ldr	r0, [pc, #120]	; (80023b4 <read_flash_config+0x114>)
 800233c:	f004 fa4b 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	713b      	strb	r3, [r7, #4]
 8002346:	1d39      	adds	r1, r7, #4
 8002348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234c:	2201      	movs	r2, #1
 800234e:	4819      	ldr	r0, [pc, #100]	; (80023b4 <read_flash_config+0x114>)
 8002350:	f004 fa41 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002354:	2300      	movs	r3, #0
 8002356:	703b      	strb	r3, [r7, #0]
 8002358:	4639      	mov	r1, r7
 800235a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235e:	2201      	movs	r2, #1
 8002360:	4814      	ldr	r0, [pc, #80]	; (80023b4 <read_flash_config+0x114>)
 8002362:	f004 fa38 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &Mode_config[0],  Max_pic_per_mode*Max_mode_num*2, 1000);
 8002366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236a:	226e      	movs	r2, #110	; 0x6e
 800236c:	4912      	ldr	r1, [pc, #72]	; (80023b8 <read_flash_config+0x118>)
 800236e:	4811      	ldr	r0, [pc, #68]	; (80023b4 <read_flash_config+0x114>)
 8002370:	f004 fba6 	bl	8006ac0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <read_flash_config+0x110>)
 800237c:	f002 f98e 	bl	800469c <HAL_GPIO_WritePin>
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	3301      	adds	r3, #1
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	fb91 f2f2 	sdiv	r2, r1, r2
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	461a      	mov	r2, r3
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	4293      	cmp	r3, r2
 800239e:	d3b4      	bcc.n	800230a <read_flash_config+0x6a>
	}
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3728      	adds	r7, #40	; 0x28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000000b 	.word	0x2000000b
 80023b0:	48000400 	.word	0x48000400
 80023b4:	20000110 	.word	0x20000110
 80023b8:	2007027c 	.word	0x2007027c

080023bc <write_flash_page>:
void write_flash_page(uint8_t *data, uint8_t image_id)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08e      	sub	sp, #56	; 0x38
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
	if(content_size==0) divide_value=256/64;
 80023cc:	4b60      	ldr	r3, [pc, #384]	; (8002550 <write_flash_page+0x194>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <write_flash_page+0x1e>
 80023d4:	2304      	movs	r3, #4
 80023d6:	637b      	str	r3, [r7, #52]	; 0x34
 80023d8:	e00c      	b.n	80023f4 <write_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 80023da:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <write_flash_page+0x194>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <write_flash_page+0x2c>
 80023e2:	2302      	movs	r3, #2
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
 80023e6:	e005      	b.n	80023f4 <write_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <write_flash_page+0x194>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d101      	bne.n	80023f4 <write_flash_page+0x38>
 80023f0:	2301      	movs	r3, #1
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34

	int image_id_H = image_id / divide_value;
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
	int image_id_L = image_id % divide_value;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002402:	fb93 f2f2 	sdiv	r2, r3, r2
 8002406:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002408:	fb01 f202 	mul.w	r2, r1, r2
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
	int count = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	fb92 f3f3 	sdiv	r3, r2, r3
 800241e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002420:	fb02 f303 	mul.w	r3, r2, r3
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002426:	e07e      	b.n	8002526 <write_flash_page+0x16a>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800242e:	4849      	ldr	r0, [pc, #292]	; (8002554 <write_flash_page+0x198>)
 8002430:	f002 f934 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002434:	2306      	movs	r3, #6
 8002436:	f887 3020 	strb.w	r3, [r7, #32]
 800243a:	f107 0120 	add.w	r1, r7, #32
 800243e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002442:	2201      	movs	r2, #1
 8002444:	4844      	ldr	r0, [pc, #272]	; (8002558 <write_flash_page+0x19c>)
 8002446:	f004 f9c6 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 800244a:	2201      	movs	r2, #1
 800244c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002450:	4840      	ldr	r0, [pc, #256]	; (8002554 <write_flash_page+0x198>)
 8002452:	f002 f923 	bl	800469c <HAL_GPIO_WritePin>
		delay_us(10);
 8002456:	200a      	movs	r0, #10
 8002458:	f000 fc0e 	bl	8002c78 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002462:	483c      	ldr	r0, [pc, #240]	; (8002554 <write_flash_page+0x198>)
 8002464:	f002 f91a 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 8002468:	2302      	movs	r3, #2
 800246a:	773b      	strb	r3, [r7, #28]
 800246c:	f107 011c 	add.w	r1, r7, #28
 8002470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002474:	2201      	movs	r2, #1
 8002476:	4838      	ldr	r0, [pc, #224]	; (8002558 <write_flash_page+0x19c>)
 8002478:	f004 f9ad 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	b2db      	uxtb	r3, r3
 8002480:	763b      	strb	r3, [r7, #24]
 8002482:	f107 0118 	add.w	r1, r7, #24
 8002486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248a:	2201      	movs	r2, #1
 800248c:	4832      	ldr	r0, [pc, #200]	; (8002558 <write_flash_page+0x19c>)
 800248e:	f004 f9a2 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	b2db      	uxtb	r3, r3
 8002496:	753b      	strb	r3, [r7, #20]
 8002498:	f107 0114 	add.w	r1, r7, #20
 800249c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a0:	2201      	movs	r2, #1
 80024a2:	482d      	ldr	r0, [pc, #180]	; (8002558 <write_flash_page+0x19c>)
 80024a4:	f004 f997 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80024a8:	2300      	movs	r3, #0
 80024aa:	743b      	strb	r3, [r7, #16]
 80024ac:	f107 0110 	add.w	r1, r7, #16
 80024b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b4:	2201      	movs	r2, #1
 80024b6:	4828      	ldr	r0, [pc, #160]	; (8002558 <write_flash_page+0x19c>)
 80024b8:	f004 f98d 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &data[count*256], 256, 1000);
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1899      	adds	r1, r3, r2
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ce:	4822      	ldr	r0, [pc, #136]	; (8002558 <write_flash_page+0x19c>)
 80024d0:	f004 f981 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024da:	481e      	ldr	r0, [pc, #120]	; (8002554 <write_flash_page+0x198>)
 80024dc:	f002 f8de 	bl	800469c <HAL_GPIO_WritePin>
		delay_us(10);
 80024e0:	200a      	movs	r0, #10
 80024e2:	f000 fbc9 	bl	8002c78 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80024e6:	2200      	movs	r2, #0
 80024e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ec:	4819      	ldr	r0, [pc, #100]	; (8002554 <write_flash_page+0x198>)
 80024ee:	f002 f8d5 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 80024f2:	2304      	movs	r3, #4
 80024f4:	733b      	strb	r3, [r7, #12]
 80024f6:	f107 010c 	add.w	r1, r7, #12
 80024fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fe:	2201      	movs	r2, #1
 8002500:	4815      	ldr	r0, [pc, #84]	; (8002558 <write_flash_page+0x19c>)
 8002502:	f004 f968 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002506:	2201      	movs	r2, #1
 8002508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800250c:	4811      	ldr	r0, [pc, #68]	; (8002554 <write_flash_page+0x198>)
 800250e:	f002 f8c5 	bl	800469c <HAL_GPIO_WritePin>
		delay_us(1000);
 8002512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002516:	f000 fbaf 	bl	8002c78 <delay_us>
		count++;
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	3301      	adds	r3, #1
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002522:	3301      	adds	r3, #1
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	3301      	adds	r3, #1
 800252a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800252e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002530:	fb91 f2f2 	sdiv	r2, r1, r2
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	461a      	mov	r2, r3
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	4293      	cmp	r3, r2
 800253e:	f4ff af73 	bcc.w	8002428 <write_flash_page+0x6c>
	}

	flash_wait_nobusy();
 8002542:	f7ff fc3b 	bl	8001dbc <flash_wait_nobusy>
}
 8002546:	bf00      	nop
 8002548:	3738      	adds	r7, #56	; 0x38
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000000b 	.word	0x2000000b
 8002554:	48000400 	.word	0x48000400
 8002558:	20000110 	.word	0x20000110

0800255c <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	; 0x30
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 800256c:	4b43      	ldr	r3, [pc, #268]	; (800267c <read_flash_page+0x120>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <read_flash_page+0x1e>
 8002574:	2304      	movs	r3, #4
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002578:	e00c      	b.n	8002594 <read_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 800257a:	4b40      	ldr	r3, [pc, #256]	; (800267c <read_flash_page+0x120>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <read_flash_page+0x2c>
 8002582:	2302      	movs	r3, #2
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002586:	e005      	b.n	8002594 <read_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8002588:	4b3c      	ldr	r3, [pc, #240]	; (800267c <read_flash_page+0x120>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d101      	bne.n	8002594 <read_flash_page+0x38>
 8002590:	2301      	movs	r3, #1
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c

	int image_id_H = image_id / divide_value;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	fb92 f3f3 	sdiv	r3, r2, r3
 800259c:	623b      	str	r3, [r7, #32]
	int image_id_L = image_id % divide_value;
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a2:	fb93 f2f2 	sdiv	r2, r3, r2
 80025a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025a8:	fb01 f202 	mul.w	r2, r1, r2
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	61fb      	str	r3, [r7, #28]
	int count = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80025b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	e047      	b.n	8002658 <read_flash_page+0xfc>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ce:	482c      	ldr	r0, [pc, #176]	; (8002680 <read_flash_page+0x124>)
 80025d0:	f002 f864 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 80025d4:	2303      	movs	r3, #3
 80025d6:	763b      	strb	r3, [r7, #24]
 80025d8:	f107 0118 	add.w	r1, r7, #24
 80025dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e0:	2201      	movs	r2, #1
 80025e2:	4828      	ldr	r0, [pc, #160]	; (8002684 <read_flash_page+0x128>)
 80025e4:	f004 f8f7 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	753b      	strb	r3, [r7, #20]
 80025ee:	f107 0114 	add.w	r1, r7, #20
 80025f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f6:	2201      	movs	r2, #1
 80025f8:	4822      	ldr	r0, [pc, #136]	; (8002684 <read_flash_page+0x128>)
 80025fa:	f004 f8ec 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	b2db      	uxtb	r3, r3
 8002602:	743b      	strb	r3, [r7, #16]
 8002604:	f107 0110 	add.w	r1, r7, #16
 8002608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260c:	2201      	movs	r2, #1
 800260e:	481d      	ldr	r0, [pc, #116]	; (8002684 <read_flash_page+0x128>)
 8002610:	f004 f8e1 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002614:	2300      	movs	r3, #0
 8002616:	733b      	strb	r3, [r7, #12]
 8002618:	f107 010c 	add.w	r1, r7, #12
 800261c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002620:	2201      	movs	r2, #1
 8002622:	4818      	ldr	r0, [pc, #96]	; (8002684 <read_flash_page+0x128>)
 8002624:	f004 f8d7 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &data[count*256], 256, 1000);
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	461a      	mov	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	1899      	adds	r1, r3, r2
 8002632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263a:	4812      	ldr	r0, [pc, #72]	; (8002684 <read_flash_page+0x128>)
 800263c:	f004 fa40 	bl	8006ac0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002640:	2201      	movs	r2, #1
 8002642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002646:	480e      	ldr	r0, [pc, #56]	; (8002680 <read_flash_page+0x124>)
 8002648:	f002 f828 	bl	800469c <HAL_GPIO_WritePin>
		count++;
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	3301      	adds	r3, #1
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	3301      	adds	r3, #1
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002662:	fb91 f2f2 	sdiv	r2, r1, r2
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	461a      	mov	r2, r3
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	4293      	cmp	r3, r2
 8002670:	d3aa      	bcc.n	80025c8 <read_flash_page+0x6c>
	}
}
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	3730      	adds	r7, #48	; 0x30
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000000b 	.word	0x2000000b
 8002680:	48000400 	.word	0x48000400
 8002684:	20000110 	.word	0x20000110

08002688 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
	int divide_value = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8002696:	4b64      	ldr	r3, [pc, #400]	; (8002828 <erase_flash_sector+0x1a0>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <erase_flash_sector+0x1c>
 800269e:	2304      	movs	r3, #4
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a2:	e00c      	b.n	80026be <erase_flash_sector+0x36>
	else if(content_size==1) divide_value=256/128;
 80026a4:	4b60      	ldr	r3, [pc, #384]	; (8002828 <erase_flash_sector+0x1a0>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d102      	bne.n	80026b2 <erase_flash_sector+0x2a>
 80026ac:	2302      	movs	r3, #2
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b0:	e005      	b.n	80026be <erase_flash_sector+0x36>
	else if(content_size==2) divide_value=256/256;
 80026b2:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <erase_flash_sector+0x1a0>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d101      	bne.n	80026be <erase_flash_sector+0x36>
 80026ba:	2301      	movs	r3, #1
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t page_count = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(content_size==0) page_count=16/4;
 80026c4:	4b58      	ldr	r3, [pc, #352]	; (8002828 <erase_flash_sector+0x1a0>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <erase_flash_sector+0x4c>
 80026cc:	2304      	movs	r3, #4
 80026ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026d2:	e00e      	b.n	80026f2 <erase_flash_sector+0x6a>
	else if(content_size==1) page_count=32/4;
 80026d4:	4b54      	ldr	r3, [pc, #336]	; (8002828 <erase_flash_sector+0x1a0>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d103      	bne.n	80026e4 <erase_flash_sector+0x5c>
 80026dc:	2308      	movs	r3, #8
 80026de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026e2:	e006      	b.n	80026f2 <erase_flash_sector+0x6a>
	else if(content_size==2) page_count=64/4;
 80026e4:	4b50      	ldr	r3, [pc, #320]	; (8002828 <erase_flash_sector+0x1a0>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d102      	bne.n	80026f2 <erase_flash_sector+0x6a>
 80026ec:	2310      	movs	r3, #16
 80026ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	int image_id_H = image_id / divide_value;
 80026f2:	79fa      	ldrb	r2, [r7, #7]
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
	int image_id_L = image_id % divide_value;
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002700:	fb93 f2f2 	sdiv	r2, r3, r2
 8002704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002706:	fb01 f202 	mul.w	r2, r1, r2
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	623b      	str	r3, [r7, #32]

	reset_flash_software();
 800270e:	f000 f891 	bl	8002834 <reset_flash_software>

	for(uint8_t i = 0; i < page_count; i++)
 8002712:	2300      	movs	r3, #0
 8002714:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002718:	e07a      	b.n	8002810 <erase_flash_sector+0x188>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002720:	4842      	ldr	r0, [pc, #264]	; (800282c <erase_flash_sector+0x1a4>)
 8002722:	f001 ffbb 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002726:	2306      	movs	r3, #6
 8002728:	773b      	strb	r3, [r7, #28]
 800272a:	f107 011c 	add.w	r1, r7, #28
 800272e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002732:	2201      	movs	r2, #1
 8002734:	483e      	ldr	r0, [pc, #248]	; (8002830 <erase_flash_sector+0x1a8>)
 8002736:	f004 f84e 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 800273a:	2201      	movs	r2, #1
 800273c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002740:	483a      	ldr	r0, [pc, #232]	; (800282c <erase_flash_sector+0x1a4>)
 8002742:	f001 ffab 	bl	800469c <HAL_GPIO_WritePin>
		delay_us(10);
 8002746:	200a      	movs	r0, #10
 8002748:	f000 fa96 	bl	8002c78 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002752:	4836      	ldr	r0, [pc, #216]	; (800282c <erase_flash_sector+0x1a4>)
 8002754:	f001 ffa2 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x20}, 1, 1000);
 8002758:	2320      	movs	r3, #32
 800275a:	763b      	strb	r3, [r7, #24]
 800275c:	f107 0118 	add.w	r1, r7, #24
 8002760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002764:	2201      	movs	r2, #1
 8002766:	4832      	ldr	r0, [pc, #200]	; (8002830 <erase_flash_sector+0x1a8>)
 8002768:	f004 f835 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	b2db      	uxtb	r3, r3
 8002770:	753b      	strb	r3, [r7, #20]
 8002772:	f107 0114 	add.w	r1, r7, #20
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	2201      	movs	r2, #1
 800277c:	482c      	ldr	r0, [pc, #176]	; (8002830 <erase_flash_sector+0x1a8>)
 800277e:	f004 f82a 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){(image_id_L*(0x10*page_count)) + (0x10*i)}, 1, 1000);
 8002782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002786:	6a3a      	ldr	r2, [r7, #32]
 8002788:	fb03 f202 	mul.w	r2, r3, r2
 800278c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002790:	4413      	add	r3, r2
 8002792:	b2db      	uxtb	r3, r3
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	b2db      	uxtb	r3, r3
 8002798:	743b      	strb	r3, [r7, #16]
 800279a:	f107 0110 	add.w	r1, r7, #16
 800279e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a2:	2201      	movs	r2, #1
 80027a4:	4822      	ldr	r0, [pc, #136]	; (8002830 <erase_flash_sector+0x1a8>)
 80027a6:	f004 f816 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80027aa:	2300      	movs	r3, #0
 80027ac:	733b      	strb	r3, [r7, #12]
 80027ae:	f107 010c 	add.w	r1, r7, #12
 80027b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b6:	2201      	movs	r2, #1
 80027b8:	481d      	ldr	r0, [pc, #116]	; (8002830 <erase_flash_sector+0x1a8>)
 80027ba:	f004 f80c 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80027be:	2201      	movs	r2, #1
 80027c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c4:	4819      	ldr	r0, [pc, #100]	; (800282c <erase_flash_sector+0x1a4>)
 80027c6:	f001 ff69 	bl	800469c <HAL_GPIO_WritePin>
		delay_us(10);
 80027ca:	200a      	movs	r0, #10
 80027cc:	f000 fa54 	bl	8002c78 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80027d0:	2200      	movs	r2, #0
 80027d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027d6:	4815      	ldr	r0, [pc, #84]	; (800282c <erase_flash_sector+0x1a4>)
 80027d8:	f001 ff60 	bl	800469c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 80027dc:	2304      	movs	r3, #4
 80027de:	723b      	strb	r3, [r7, #8]
 80027e0:	f107 0108 	add.w	r1, r7, #8
 80027e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e8:	2201      	movs	r2, #1
 80027ea:	4811      	ldr	r0, [pc, #68]	; (8002830 <erase_flash_sector+0x1a8>)
 80027ec:	f003 fff3 	bl	80067d6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80027f0:	2201      	movs	r2, #1
 80027f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027f6:	480d      	ldr	r0, [pc, #52]	; (800282c <erase_flash_sector+0x1a4>)
 80027f8:	f001 ff50 	bl	800469c <HAL_GPIO_WritePin>
		delay_us(10);
 80027fc:	200a      	movs	r0, #10
 80027fe:	f000 fa3b 	bl	8002c78 <delay_us>

		flash_wait_nobusy();
 8002802:	f7ff fadb 	bl	8001dbc <flash_wait_nobusy>
	for(uint8_t i = 0; i < page_count; i++)
 8002806:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800280a:	3301      	adds	r3, #1
 800280c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002810:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002814:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002818:	429a      	cmp	r2, r3
 800281a:	f4ff af7e 	bcc.w	800271a <erase_flash_sector+0x92>
	}
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	3730      	adds	r7, #48	; 0x30
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	2000000b 	.word	0x2000000b
 800282c:	48000400 	.word	0x48000400
 8002830:	20000110 	.word	0x20000110

08002834 <reset_flash_software>:

void reset_flash_software()
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002840:	481a      	ldr	r0, [pc, #104]	; (80028ac <reset_flash_software+0x78>)
 8002842:	f001 ff2b 	bl	800469c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x66}, 1, 1000);
 8002846:	2366      	movs	r3, #102	; 0x66
 8002848:	713b      	strb	r3, [r7, #4]
 800284a:	1d39      	adds	r1, r7, #4
 800284c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002850:	2201      	movs	r2, #1
 8002852:	4817      	ldr	r0, [pc, #92]	; (80028b0 <reset_flash_software+0x7c>)
 8002854:	f003 ffbf 	bl	80067d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800285e:	4813      	ldr	r0, [pc, #76]	; (80028ac <reset_flash_software+0x78>)
 8002860:	f001 ff1c 	bl	800469c <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002864:	2001      	movs	r0, #1
 8002866:	f000 fa22 	bl	8002cae <delay_100ns>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 800286a:	2200      	movs	r2, #0
 800286c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002870:	480e      	ldr	r0, [pc, #56]	; (80028ac <reset_flash_software+0x78>)
 8002872:	f001 ff13 	bl	800469c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x99}, 1, 1000);
 8002876:	2399      	movs	r3, #153	; 0x99
 8002878:	703b      	strb	r3, [r7, #0]
 800287a:	4639      	mov	r1, r7
 800287c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002880:	2201      	movs	r2, #1
 8002882:	480b      	ldr	r0, [pc, #44]	; (80028b0 <reset_flash_software+0x7c>)
 8002884:	f003 ffa7 	bl	80067d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002888:	2201      	movs	r2, #1
 800288a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800288e:	4807      	ldr	r0, [pc, #28]	; (80028ac <reset_flash_software+0x78>)
 8002890:	f001 ff04 	bl	800469c <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002894:	2001      	movs	r0, #1
 8002896:	f000 fa0a 	bl	8002cae <delay_100ns>
	delay_us(1000);
 800289a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800289e:	f000 f9eb 	bl	8002c78 <delay_us>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	48000400 	.word	0x48000400
 80028b0:	20000110 	.word	0x20000110

080028b4 <my_MX_DSIHOST_DSI_Init>:
/*====================================flash function end====================================*/

/*====================================customized function start====================================*/
static void my_MX_DSIHOST_DSI_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b0ae      	sub	sp, #184	; 0xb8
 80028b8:	af00      	add	r7, sp, #0
  DSI_PLLInitTypeDef PLLInit = {0};
 80028ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80028c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f006 f978 	bl	8008bc4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80028d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	226c      	movs	r2, #108	; 0x6c
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f006 f969 	bl	8008bc4 <memset>
  hdsi.Instance = DSI;
 80028f2:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80028f4:	4a6d      	ldr	r2, [pc, #436]	; (8002aac <my_MX_DSIHOST_DSI_Init+0x1f8>)
 80028f6:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80028f8:	4b6b      	ldr	r3, [pc, #428]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 80028fe:	4b6a      	ldr	r3, [pc, #424]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002900:	2202      	movs	r2, #2
 8002902:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 800290a:	2332      	movs	r3, #50	; 0x32
 800290c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8002910:	2301      	movs	r3, #1
 8002912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8002916:	2301      	movs	r3, #1
 8002918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800291c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002920:	4619      	mov	r1, r3
 8002922:	4861      	ldr	r0, [pc, #388]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002924:	f000 feb4 	bl	8003690 <HAL_DSI_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <my_MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800292e:	f000 fa49 	bl	8002dc4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002968:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800296c:	4619      	mov	r1, r3
 800296e:	484e      	ldr	r0, [pc, #312]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002970:	f001 fb01 	bl	8003f76 <HAL_DSI_ConfigHostTimeouts>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <my_MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 800297a:	f000 fa23 	bl	8002dc4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 800297e:	2313      	movs	r3, #19
 8002980:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8002982:	230f      	movs	r3, #15
 8002984:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8002986:	2309      	movs	r3, #9
 8002988:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 800298a:	230a      	movs	r3, #10
 800298c:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800299a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800299e:	4619      	mov	r1, r3
 80029a0:	4841      	ldr	r0, [pc, #260]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80029a2:	f001 fa7e 	bl	8003ea2 <HAL_DSI_ConfigPhyTimer>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <my_MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 80029ac:	f000 fa0a 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80029b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80029b4:	483c      	ldr	r0, [pc, #240]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80029b6:	f001 fc9a 	bl	80042ee <HAL_DSI_SetLowPowerRXFilter>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <my_MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 80029c0:	f000 fa00 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80029c4:	2100      	movs	r1, #0
 80029c6:	4838      	ldr	r0, [pc, #224]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80029c8:	f000 ff7e 	bl	80038c8 <HAL_DSI_ConfigErrorMonitor>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <my_MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 80029d2:	f000 f9f7 	bl	8002dc4 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 80029da:	2305      	movs	r3, #5
 80029dc:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 80029e2:	2301      	movs	r3, #1
 80029e4:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 80029e6:	2378      	movs	r3, #120	; 0x78
 80029e8:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = HSA;
 80029fe:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = HBP;
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <my_MX_DSIHOST_DSI_Init+0x200>)
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = HSA+HBP+IMAGE_H+HFP;
 8002a0a:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <my_MX_DSIHOST_DSI_Init+0x200>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <my_MX_DSIHOST_DSI_Init+0x204>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	4a27      	ldr	r2, [pc, #156]	; (8002abc <my_MX_DSIHOST_DSI_Init+0x208>)
 8002a20:	8812      	ldrh	r2, [r2, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = VSA;
 8002a26:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <my_MX_DSIHOST_DSI_Init+0x20c>)
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = VBP;
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x210>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = VFP;
 8002a32:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <my_MX_DSIHOST_DSI_Init+0x214>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = IMAGE_W;
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <my_MX_DSIHOST_DSI_Init+0x218>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8002a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a42:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8002a44:	231c      	movs	r3, #28
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8002a48:	2350      	movs	r3, #80	; 0x50
 8002a4a:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8002a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a50:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8002a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a56:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8002a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8002a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a62:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8002a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a68:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8002a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a6e:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	480b      	ldr	r0, [pc, #44]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002a7a:	f001 f80a 	bl	8003a92 <HAL_DSI_ConfigVideoMode>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <my_MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8002a84:	f000 f99e 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002a8c:	f000 ffd9 	bl	8003a42 <HAL_DSI_SetGenericVCID>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <my_MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8002a96:	f000 f995 	bl	8002dc4 <Error_Handler>
  }
  LCD_PowerOn();
 8002a9a:	f7fe fccb 	bl	8001434 <LCD_PowerOn>
}
 8002a9e:	bf00      	nop
 8002aa0:	37b8      	adds	r7, #184	; 0xb8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000004c 	.word	0x2000004c
 8002aac:	40016c00 	.word	0x40016c00
 8002ab0:	20000010 	.word	0x20000010
 8002ab4:	20000012 	.word	0x20000012
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	20000014 	.word	0x20000014
 8002ac0:	20000016 	.word	0x20000016
 8002ac4:	20000018 	.word	0x20000018
 8002ac8:	2000001a 	.word	0x2000001a
 8002acc:	20000004 	.word	0x20000004

08002ad0 <my_MX_LTDC_Init>:
static void my_MX_LTDC_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08e      	sub	sp, #56	; 0x38
 8002ad4:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	2234      	movs	r2, #52	; 0x34
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f006 f871 	bl	8008bc4 <memset>
  hltdc.Instance = LTDC;
 8002ae2:	4b5a      	ldr	r3, [pc, #360]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002ae4:	4a5a      	ldr	r2, [pc, #360]	; (8002c50 <my_MX_LTDC_Init+0x180>)
 8002ae6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8002ae8:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002aea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002aee:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8002af0:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002af6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002af8:	4b54      	ldr	r3, [pc, #336]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002afe:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = HSA-1;
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <my_MX_LTDC_Init+0x184>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b4f      	ldr	r3, [pc, #316]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002b0e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = VSA-1;
 8002b10:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <my_MX_LTDC_Init+0x188>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b4c      	ldr	r3, [pc, #304]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002b1a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = HSA+HBP-1;
 8002b1c:	4b4d      	ldr	r3, [pc, #308]	; (8002c54 <my_MX_LTDC_Init+0x184>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <my_MX_LTDC_Init+0x18c>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002b2e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = VSA+VBP-1;
 8002b30:	4b49      	ldr	r3, [pc, #292]	; (8002c58 <my_MX_LTDC_Init+0x188>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <my_MX_LTDC_Init+0x190>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002b42:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = HSA+HBP+IMAGE_H-1;
 8002b44:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <my_MX_LTDC_Init+0x184>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b44      	ldr	r3, [pc, #272]	; (8002c5c <my_MX_LTDC_Init+0x18c>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <my_MX_LTDC_Init+0x194>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	4a3c      	ldr	r2, [pc, #240]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002b5c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = VSA+VBP+IMAGE_W-1;
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <my_MX_LTDC_Init+0x188>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <my_MX_LTDC_Init+0x190>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <my_MX_LTDC_Init+0x198>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	3b01      	subs	r3, #1
 8002b74:	4a35      	ldr	r2, [pc, #212]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002b76:	6293      	str	r3, [r2, #40]	; 0x28
  hltdc.Init.TotalWidth = HSA+HBP+IMAGE_H+HFP-1;
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <my_MX_LTDC_Init+0x184>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <my_MX_LTDC_Init+0x18c>)
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <my_MX_LTDC_Init+0x194>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a37      	ldr	r2, [pc, #220]	; (8002c6c <my_MX_LTDC_Init+0x19c>)
 8002b8e:	8812      	ldrh	r2, [r2, #0]
 8002b90:	4413      	add	r3, r2
 8002b92:	3b01      	subs	r3, #1
 8002b94:	4a2d      	ldr	r2, [pc, #180]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002b96:	62d3      	str	r3, [r2, #44]	; 0x2c
  hltdc.Init.TotalHeigh = VSA+VBP+IMAGE_W+VFP-1;
 8002b98:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <my_MX_LTDC_Init+0x188>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <my_MX_LTDC_Init+0x190>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <my_MX_LTDC_Init+0x198>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	4a30      	ldr	r2, [pc, #192]	; (8002c70 <my_MX_LTDC_Init+0x1a0>)
 8002bae:	8812      	ldrh	r2, [r2, #0]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002bb6:	6313      	str	r3, [r2, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8002bb8:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002bba:	22ff      	movs	r2, #255	; 0xff
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8002bc0:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002bc2:	22ff      	movs	r2, #255	; 0xff
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002bca:	22ff      	movs	r2, #255	; 0xff
 8002bcc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002bd0:	481e      	ldr	r0, [pc, #120]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002bd2:	f001 fd93 	bl	80046fc <HAL_LTDC_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <my_MX_LTDC_Init+0x110>
  {
    Error_Handler();
 8002bdc:	f000 f8f2 	bl	8002dc4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = IMAGE_H;
 8002be4:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <my_MX_LTDC_Init+0x194>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = IMAGE_W;
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <my_MX_LTDC_Init+0x198>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002bf8:	23ff      	movs	r3, #255	; 0xff
 8002bfa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c04:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002c06:	2305      	movs	r3, #5
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <my_MX_LTDC_Init+0x1a4>)
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = IMAGE_H;
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <my_MX_LTDC_Init+0x194>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = IMAGE_W;
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <my_MX_LTDC_Init+0x198>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8002c1a:	23ff      	movs	r3, #255	; 0xff
 8002c1c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8002c20:	23ff      	movs	r3, #255	; 0xff
 8002c22:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8002c26:	23ff      	movs	r3, #255	; 0xff
 8002c28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4619      	mov	r1, r3
 8002c32:	4806      	ldr	r0, [pc, #24]	; (8002c4c <my_MX_LTDC_Init+0x17c>)
 8002c34:	f001 fe32 	bl	800489c <HAL_LTDC_ConfigLayer>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <my_MX_LTDC_Init+0x172>
  {
    Error_Handler();
 8002c3e:	f000 f8c1 	bl	8002dc4 <Error_Handler>
  }
}
 8002c42:	bf00      	nop
 8002c44:	3738      	adds	r7, #56	; 0x38
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000068 	.word	0x20000068
 8002c50:	40016800 	.word	0x40016800
 8002c54:	20000010 	.word	0x20000010
 8002c58:	20000016 	.word	0x20000016
 8002c5c:	20000012 	.word	0x20000012
 8002c60:	20000018 	.word	0x20000018
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	20000014 	.word	0x20000014
 8002c70:	2000001a 	.word	0x2000001a
 8002c74:	20040274 	.word	0x20040274

08002c78 <delay_us>:
/*====================================customized function end====================================*/

void delay_us(int time)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
	while (time--)
 8002c84:	e007      	b.n	8002c96 <delay_us+0x1e>
	{
		i = 13;
 8002c86:	230d      	movs	r3, #13
 8002c88:	60fb      	str	r3, [r7, #12]
		while (i--);
 8002c8a:	bf00      	nop
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e5a      	subs	r2, r3, #1
 8002c90:	60fa      	str	r2, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1fa      	bne.n	8002c8c <delay_us+0x14>
	while (time--)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	1e5a      	subs	r2, r3, #1
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f2      	bne.n	8002c86 <delay_us+0xe>
	}
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <delay_100ns>:

void delay_100ns(int time)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
	while (time--)
 8002cba:	e007      	b.n	8002ccc <delay_100ns+0x1e>
	{
		i = 1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
		while (i--);
 8002cc0:	bf00      	nop
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e5a      	subs	r2, r3, #1
 8002cc6:	60fa      	str	r2, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1fa      	bne.n	8002cc2 <delay_100ns+0x14>
	while (time--)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1e5a      	subs	r2, r3, #1
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f2      	bne.n	8002cbc <delay_100ns+0xe>
	}
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_GPIO_EXTI_Callback>:

int button_count = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf4:	d158      	bne.n	8002da8 <HAL_GPIO_EXTI_Callback+0xc4>
	{
		button_count++;
 8002cf6:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a2c      	ldr	r2, [pc, #176]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002cfe:	6013      	str	r3, [r2, #0]
		delay_us(50000);
 8002d00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d04:	f7ff ffb8 	bl	8002c78 <delay_us>
		for (int i = 0; i < 1200; i++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e032      	b.n	8002d74 <HAL_GPIO_EXTI_Callback+0x90>
		{
			if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET)
 8002d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d12:	4828      	ldr	r0, [pc, #160]	; (8002db4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002d14:	f001 fcaa 	bl	800466c <HAL_GPIO_ReadPin>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d11e      	bne.n	8002d5c <HAL_GPIO_EXTI_Callback+0x78>
			{
				if (button_count < 80 && button_count > 5 && play_mode == 0)
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b4f      	cmp	r3, #79	; 0x4f
 8002d24:	dc16      	bgt.n	8002d54 <HAL_GPIO_EXTI_Callback+0x70>
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	dd12      	ble.n	8002d54 <HAL_GPIO_EXTI_Callback+0x70>
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10e      	bne.n	8002d54 <HAL_GPIO_EXTI_Callback+0x70>
				{
					display_image_number++;
 8002d36:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002d40:	701a      	strb	r2, [r3, #0]
					if (display_image_number >= spi_flash_content_length)
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <HAL_GPIO_EXTI_Callback+0x70>
						display_image_number = 0;
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_GPIO_EXTI_Callback+0xd8>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
				}
				button_count = 0;
 8002d54:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
				return;
 8002d5a:	e025      	b.n	8002da8 <HAL_GPIO_EXTI_Callback+0xc4>
			}
			button_count++;
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002d64:	6013      	str	r3, [r2, #0]
			delay_us(10000);
 8002d66:	f242 7010 	movw	r0, #10000	; 0x2710
 8002d6a:	f7ff ff85 	bl	8002c78 <delay_us>
		for (int i = 0; i < 1200; i++)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3301      	adds	r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002d7a:	dbc8      	blt.n	8002d0e <HAL_GPIO_EXTI_Callback+0x2a>
		}
		if (play_mode == 1 || play_mode == 2)
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_EXTI_Callback+0xa8>
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d103      	bne.n	8002d94 <HAL_GPIO_EXTI_Callback+0xb0>
		{
			play_mode = 0;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e006      	b.n	8002da2 <HAL_GPIO_EXTI_Callback+0xbe>
		}
		else if (play_mode == 0)
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <HAL_GPIO_EXTI_Callback+0xbe>
		{
			play_mode = 1;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		}
		button_count = 0;
 8002da2:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
	}
}
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200702f8 	.word	0x200702f8
 8002db4:	48000c00 	.word	0x48000c00
 8002db8:	20040270 	.word	0x20040270
 8002dbc:	20070274 	.word	0x20070274
 8002dc0:	20000009 	.word	0x20000009

08002dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <Error_Handler+0x8>
	...

08002dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_MspInit+0x44>)
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dda:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_MspInit+0x44>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6613      	str	r3, [r2, #96]	; 0x60
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_MspInit+0x44>)
 8002de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_MspInit+0x44>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_MspInit+0x44>)
 8002df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_MspInit+0x44>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b0aa      	sub	sp, #168	; 0xa8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	229c      	movs	r2, #156	; 0x9c
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f005 fecb 	bl	8008bc4 <memset>
  if(hdsi->Instance==DSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a11      	ldr	r2, [pc, #68]	; (8002e78 <HAL_DSI_MspInit+0x60>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d11b      	bne.n	8002e70 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002e38:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002e3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e44:	f107 030c 	add.w	r3, r7, #12
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fea9 	bl	8005ba0 <HAL_RCCEx_PeriphCLKConfig>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8002e54:	f7ff ffb6 	bl	8002dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_DSI_MspInit+0x64>)
 8002e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <HAL_DSI_MspInit+0x64>)
 8002e5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e62:	6613      	str	r3, [r2, #96]	; 0x60
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_DSI_MspInit+0x64>)
 8002e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	37a8      	adds	r7, #168	; 0xa8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40016c00 	.word	0x40016c00
 8002e7c:	40021000 	.word	0x40021000

08002e80 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b0aa      	sub	sp, #168	; 0xa8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e88:	f107 030c 	add.w	r3, r7, #12
 8002e8c:	229c      	movs	r2, #156	; 0x9c
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f005 fe97 	bl	8008bc4 <memset>
  if(hltdc->Instance==LTDC)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_LTDC_MspInit+0x80>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d12b      	bne.n	8002ef8 <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ea0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ea4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 8002ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eaa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8002ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eca:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ecc:	f107 030c 	add.w	r3, r7, #12
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 fe65 	bl	8005ba0 <HAL_RCCEx_PeriphCLKConfig>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 8002edc:	f7ff ff72 	bl	8002dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_LTDC_MspInit+0x84>)
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_LTDC_MspInit+0x84>)
 8002ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eea:	6613      	str	r3, [r2, #96]	; 0x60
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_LTDC_MspInit+0x84>)
 8002eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002ef8:	bf00      	nop
 8002efa:	37a8      	adds	r7, #168	; 0xa8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40016800 	.word	0x40016800
 8002f04:	40021000 	.word	0x40021000

08002f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	; 0x30
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 031c 	add.w	r3, r7, #28
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a42      	ldr	r2, [pc, #264]	; (8003030 <HAL_SPI_MspInit+0x128>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d128      	bne.n	8002f7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f2a:	4b42      	ldr	r3, [pc, #264]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	4a41      	ldr	r2, [pc, #260]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6593      	str	r3, [r2, #88]	; 0x58
 8002f36:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f42:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	4a3b      	ldr	r2, [pc, #236]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002f48:	f043 0308 	orr.w	r3, r3, #8
 8002f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f4e:	4b39      	ldr	r3, [pc, #228]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3;
 8002f5a:	231a      	movs	r3, #26
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f6a:	2305      	movs	r3, #5
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f6e:	f107 031c 	add.w	r3, r7, #28
 8002f72:	4619      	mov	r1, r3
 8002f74:	4830      	ldr	r0, [pc, #192]	; (8003038 <HAL_SPI_MspInit+0x130>)
 8002f76:	f001 f9e7 	bl	8004348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f7a:	e054      	b.n	8003026 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2e      	ldr	r2, [pc, #184]	; (800303c <HAL_SPI_MspInit+0x134>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d14f      	bne.n	8003026 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f86:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	4a2a      	ldr	r2, [pc, #168]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f90:	6593      	str	r3, [r2, #88]	; 0x58
 8002f92:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f9e:	4b25      	ldr	r3, [pc, #148]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	4a24      	ldr	r2, [pc, #144]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002faa:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002fb6:	f001 ff0b 	bl	8004dd0 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_SPI_MspInit+0x12c>)
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002fd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fe4:	2306      	movs	r3, #6
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fe8:	f107 031c 	add.w	r3, r7, #28
 8002fec:	4619      	mov	r1, r3
 8002fee:	4814      	ldr	r0, [pc, #80]	; (8003040 <HAL_SPI_MspInit+0x138>)
 8002ff0:	f001 f9aa 	bl	8004348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002ff4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003006:	2306      	movs	r3, #6
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	4619      	mov	r1, r3
 8003010:	480c      	ldr	r0, [pc, #48]	; (8003044 <HAL_SPI_MspInit+0x13c>)
 8003012:	f001 f999 	bl	8004348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	2033      	movs	r0, #51	; 0x33
 800301c:	f000 fa5b 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003020:	2033      	movs	r0, #51	; 0x33
 8003022:	f000 fa74 	bl	800350e <HAL_NVIC_EnableIRQ>
}
 8003026:	bf00      	nop
 8003028:	3730      	adds	r7, #48	; 0x30
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40003800 	.word	0x40003800
 8003034:	40021000 	.word	0x40021000
 8003038:	48000c00 	.word	0x48000c00
 800303c:	40003c00 	.word	0x40003c00
 8003040:	48001800 	.word	0x48001800
 8003044:	48000800 	.word	0x48000800

08003048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b0b0      	sub	sp, #192	; 0xc0
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	229c      	movs	r2, #156	; 0x9c
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f005 fdab 	bl	8008bc4 <memset>
  if(huart->Instance==UART4)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <HAL_UART_MspInit+0xb0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d13b      	bne.n	80030f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003078:	2308      	movs	r3, #8
 800307a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800307c:	2300      	movs	r3, #0
 800307e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003080:	f107 0310 	add.w	r3, r7, #16
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fd8b 	bl	8005ba0 <HAL_RCCEx_PeriphCLKConfig>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003090:	f7ff fe98 	bl	8002dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_UART_MspInit+0xb4>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_UART_MspInit+0xb4>)
 800309a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800309e:	6593      	str	r3, [r2, #88]	; 0x58
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_UART_MspInit+0xb4>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_UART_MspInit+0xb4>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	4a12      	ldr	r2, [pc, #72]	; (80030fc <HAL_UART_MspInit+0xb4>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b8:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_UART_MspInit+0xb4>)
 80030ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030c4:	2303      	movs	r3, #3
 80030c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80030dc:	2308      	movs	r3, #8
 80030de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030e6:	4619      	mov	r1, r3
 80030e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ec:	f001 f92c 	bl	8004348 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80030f0:	bf00      	nop
 80030f2:	37c0      	adds	r7, #192	; 0xc0
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40004c00 	.word	0x40004c00
 80030fc:	40021000 	.word	0x40021000

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003104:	e7fe      	b.n	8003104 <NMI_Handler+0x4>

08003106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <MemManage_Handler+0x4>

08003112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <BusFault_Handler+0x4>

08003118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <UsageFault_Handler+0x4>

0800311e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800314c:	f000 f8a4 	bl	8003298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}

08003154 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pic_sw_Pin);
 8003158:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800315c:	f001 fab6 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}

08003164 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <SPI3_IRQHandler+0x10>)
 800316a:	f004 f95f 	bl	800742c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000174 	.word	0x20000174

08003178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <SystemInit+0x20>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <SystemInit+0x20>)
 8003184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800319c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031a0:	f7ff ffea 	bl	8003178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031a4:	480c      	ldr	r0, [pc, #48]	; (80031d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80031a6:	490d      	ldr	r1, [pc, #52]	; (80031dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <LoopForever+0xe>)
  movs r3, #0
 80031aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031ac:	e002      	b.n	80031b4 <LoopCopyDataInit>

080031ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b2:	3304      	adds	r3, #4

080031b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b8:	d3f9      	bcc.n	80031ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031bc:	4c0a      	ldr	r4, [pc, #40]	; (80031e8 <LoopForever+0x16>)
  movs r3, #0
 80031be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c0:	e001      	b.n	80031c6 <LoopFillZerobss>

080031c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c4:	3204      	adds	r2, #4

080031c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c8:	d3fb      	bcc.n	80031c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ca:	f005 fcd7 	bl	8008b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ce:	f7fd f997 	bl	8000500 <main>

080031d2 <LoopForever>:

LoopForever:
    b LoopForever
 80031d2:	e7fe      	b.n	80031d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031d4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80031d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031dc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80031e0:	08008cec 	.word	0x08008cec
  ldr r2, =_sbss
 80031e4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80031e8:	20070300 	.word	0x20070300

080031ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031ec:	e7fe      	b.n	80031ec <ADC1_IRQHandler>

080031ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f8:	2003      	movs	r0, #3
 80031fa:	f000 f961 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031fe:	2002      	movs	r0, #2
 8003200:	f000 f80e 	bl	8003220 <HAL_InitTick>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	71fb      	strb	r3, [r7, #7]
 800320e:	e001      	b.n	8003214 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003210:	f7ff fdde 	bl	8002dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003214:	79fb      	ldrb	r3, [r7, #7]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_InitTick+0x6c>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d023      	beq.n	800327c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_InitTick+0x70>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_InitTick+0x6c>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003242:	fbb3 f3f1 	udiv	r3, r3, r1
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f96d 	bl	800352a <HAL_SYSTICK_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10f      	bne.n	8003276 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b0f      	cmp	r3, #15
 800325a:	d809      	bhi.n	8003270 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800325c:	2200      	movs	r2, #0
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	f000 f937 	bl	80034d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_InitTick+0x74>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e007      	b.n	8003280 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e004      	b.n	8003280 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	e001      	b.n	8003280 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000002c 	.word	0x2000002c
 8003290:	20000024 	.word	0x20000024
 8003294:	20000028 	.word	0x20000028

08003298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_IncTick+0x20>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_IncTick+0x24>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_IncTick+0x24>)
 80032aa:	6013      	str	r3, [r2, #0]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	2000002c 	.word	0x2000002c
 80032bc:	200702fc 	.word	0x200702fc

080032c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return uwTick;
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_GetTick+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	200702fc 	.word	0x200702fc

080032d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e0:	f7ff ffee 	bl	80032c0 <HAL_GetTick>
 80032e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d005      	beq.n	80032fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_Delay+0x44>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032fe:	bf00      	nop
 8003300:	f7ff ffde 	bl	80032c0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	429a      	cmp	r2, r3
 800330e:	d8f7      	bhi.n	8003300 <HAL_Delay+0x28>
  {
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	2000002c 	.word	0x2000002c

08003320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	60d3      	str	r3, [r2, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <__NVIC_GetPriorityGrouping+0x18>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 0307 	and.w	r3, r3, #7
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0b      	blt.n	80033ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <__NVIC_EnableIRQ+0x38>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d301      	bcc.n	8003492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348e:	2301      	movs	r3, #1
 8003490:	e00f      	b.n	80034b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <SysTick_Config+0x40>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349a:	210f      	movs	r1, #15
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7ff ff8e 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <SysTick_Config+0x40>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <SysTick_Config+0x40>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff29 	bl	8003320 <__NVIC_SetPriorityGrouping>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034e8:	f7ff ff3e 	bl	8003368 <__NVIC_GetPriorityGrouping>
 80034ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff8e 	bl	8003414 <NVIC_EncodePriority>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff5d 	bl	80033c0 <__NVIC_SetPriority>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff31 	bl	8003384 <__NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffa2 	bl	800347c <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d005      	beq.n	8003566 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2204      	movs	r2, #4
 800355e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e047      	b.n	80035f6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 020e 	bic.w	r2, r2, #14
 8003574:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003594:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f003 021c 	and.w	r2, r3, #28
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2101      	movs	r1, #1
 80035a4:	fa01 f202 	lsl.w	r2, r1, r2
 80035a8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035b2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035d4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
    }
  }
  return status;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	019a      	lsls	r2, r3, #6
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	431a      	orrs	r2, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	431a      	orrs	r2, r3
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	431a      	orrs	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b086      	sub	sp, #24
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003640:	f7ff fe3e 	bl	80032c0 <HAL_GetTick>
 8003644:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003646:	e009      	b.n	800365c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003648:	f7ff fe3a 	bl	80032c0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003656:	d901      	bls.n	800365c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e015      	b.n	8003688 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ee      	beq.n	8003648 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	019a      	lsls	r2, r3, #6
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	431a      	orrs	r2, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	ea42 0103 	orr.w	r1, r2, r3
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e10b      	b.n	80038bc <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7c5b      	ldrb	r3, [r3, #17]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff fbb2 	bl	8002e18 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2203      	movs	r2, #3
 80036b8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80036ce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80036da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e2:	f7ff fded 	bl	80032c0 <HAL_GetTick>
 80036e6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80036e8:	e009      	b.n	80036fe <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80036ea:	f7ff fde9 	bl	80032c0 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f8:	d901      	bls.n	80036fe <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0de      	b.n	80038bc <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ed      	beq.n	80036ea <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800371e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003722:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800373a:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003742:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003776:	2001      	movs	r0, #1
 8003778:	f7ff fdae 	bl	80032d8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800377c:	f7ff fda0 	bl	80032c0 <HAL_GetTick>
 8003780:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003782:	e009      	b.n	8003798 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003784:	f7ff fd9c 	bl	80032c0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003792:	d901      	bls.n	8003798 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e091      	b.n	80038bc <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ed      	beq.n	8003784 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0206 	orr.w	r2, r2, #6
 80037b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0203 	bic.w	r2, r2, #3
 80037cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0203 	bic.w	r2, r2, #3
 80037fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003822:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6899      	ldr	r1, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_DSI_Init+0x1b4>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	e000      	b.n	8003846 <HAL_DSI_Init+0x1b6>
 8003844:	2301      	movs	r3, #1
 8003846:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_DSI_Init+0x234>)
 800384c:	fb03 f202 	mul.w	r2, r3, r2
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	409a      	lsls	r2, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800387c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	430a      	orrs	r2, r1
 8003890:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2200      	movs	r2, #0
 800389a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	003d0900 	.word	0x003d0900

080038c8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7c1b      	ldrb	r3, [r3, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_DSI_ConfigErrorMonitor+0x16>
 80038da:	2302      	movs	r3, #2
 80038dc:	e0ab      	b.n	8003a36 <HAL_DSI_ConfigErrorMonitor+0x16e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003918:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800391c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800393a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0202 	orr.w	r2, r2, #2
 8003976:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 020c 	orr.w	r2, r2, #12
 8003994:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0210 	orr.w	r2, r2, #16
 80039b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0220 	orr.w	r2, r2, #32
 80039d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003a2a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7c1b      	ldrb	r3, [r3, #16]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_DSI_SetGenericVCID+0x16>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e016      	b.n	8003a86 <HAL_DSI_SetGenericVCID+0x44>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0203 	bic.w	r2, r2, #3
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	7c1b      	ldrb	r3, [r3, #16]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_DSI_ConfigVideoMode+0x16>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e1f6      	b.n	8003e96 <HAL_DSI_ConfigVideoMode+0x404>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0203 	bic.w	r2, r2, #3
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b06:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003b28:	f023 031f 	bic.w	r3, r3, #31
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003b4e:	f023 031f 	bic.w	r3, r3, #31
 8003b52:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0203 	bic.w	r2, r2, #3
 8003b74:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68d9      	ldr	r1, [r3, #12]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0207 	bic.w	r2, r2, #7
 8003b96:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6959      	ldr	r1, [r3, #20]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 020f 	bic.w	r2, r2, #15
 8003bc4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6919      	ldr	r1, [r3, #16]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 020e 	bic.w	r2, r2, #14
 8003be8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	005a      	lsls	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d110      	bne.n	8003c2e <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c1a:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6919      	ldr	r1, [r3, #16]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003c3c:	f023 030f 	bic.w	r3, r3, #15
 8003c40:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003c62:	f023 030f 	bic.w	r3, r3, #15
 8003c66:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c8c:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cd4:	f023 0303 	bic.w	r3, r3, #3
 8003cd8:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d24:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003d68:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6999      	ldr	r1, [r3, #24]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d74:	041a      	lsls	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d8c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6999      	ldr	r1, [r3, #24]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7c1b      	ldrb	r3, [r3, #16]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DSI_ConfigPhyTimer+0x16>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e058      	b.n	8003f6a <HAL_DSI_ConfigPhyTimer+0xc8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	bf38      	it	cc
 8003eca:	4613      	movcc	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003ede:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	041a      	lsls	r2, r3, #16
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003f0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003f46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7c1b      	ldrb	r3, [r3, #16]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_DSI_ConfigHostTimeouts+0x16>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e0b4      	b.n	80040f6 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003fa0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6899      	ldr	r1, [r3, #8]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	021a      	lsls	r2, r3, #8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	b292      	uxth	r2, r2
 8003fc2:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	041a      	lsls	r2, r3, #16
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	041b      	lsls	r3, r3, #16
 8004008:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	6a1a      	ldr	r2, [r3, #32]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	7c1b      	ldrb	r3, [r3, #16]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_DSI_Start+0x14>
 8004112:	2302      	movs	r3, #2
 8004114:	e02b      	b.n	800416e <HAL_DSI_Start+0x6c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0208 	orr.w	r2, r2, #8
 8004152:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b088      	sub	sp, #32
 800417e:	af02      	add	r7, sp, #8
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	7c1b      	ldrb	r3, [r3, #16]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_DSI_ShortWrite+0x1a>
 8004190:	2302      	movs	r3, #2
 8004192:	e010      	b.n	80041b6 <HAL_DSI_ShortWrite+0x3c>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff fa44 	bl	8003632 <DSI_ShortWrite>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	741a      	strb	r2, [r3, #16]

  return status;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b08c      	sub	sp, #48	; 0x30
 80041c2:	af02      	add	r7, sp, #8
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	7c1b      	ldrb	r3, [r3, #16]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_DSI_LongWrite+0x1e>
 80041d8:	2302      	movs	r3, #2
 80041da:	e084      	b.n	80042e6 <HAL_DSI_LongWrite+0x128>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80041e2:	f7ff f86d 	bl	80032c0 <HAL_GetTick>
 80041e6:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80041e8:	e00c      	b.n	8004204 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80041ea:	f7ff f869 	bl	80032c0 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041f8:	d904      	bls.n	8004204 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e070      	b.n	80042e6 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0eb      	beq.n	80041ea <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b03      	cmp	r3, #3
 800421a:	bf28      	it	cs
 800421c:	2303      	movcs	r3, #3
 800421e:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004220:	2300      	movs	r3, #0
 8004222:	623b      	str	r3, [r7, #32]
 8004224:	e00f      	b.n	8004246 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	4413      	add	r3, r2
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	3301      	adds	r3, #1
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	4313      	orrs	r3, r2
 800423e:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	3301      	adds	r3, #1
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	429a      	cmp	r2, r3
 800424c:	d3eb      	bcc.n	8004226 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004266:	e028      	b.n	80042ba <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf28      	it	cs
 800426e:	2304      	movcs	r3, #4
 8004270:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004276:	2300      	movs	r3, #0
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	e00e      	b.n	800429a <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	4413      	add	r3, r2
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	4313      	orrs	r3, r2
 8004292:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	3301      	adds	r3, #1
 8004298:	623b      	str	r3, [r7, #32]
 800429a:	6a3a      	ldr	r2, [r7, #32]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d3ec      	bcc.n	800427c <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1d3      	bne.n	8004268 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80042c8:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	f7ff f991 	bl	8003600 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3728      	adds	r7, #40	; 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	7c1b      	ldrb	r3, [r3, #16]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004300:	2302      	movs	r3, #2
 8004302:	e01b      	b.n	800433c <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800431a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	065a      	lsls	r2, r3, #25
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004356:	e166      	b.n	8004626 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	2101      	movs	r1, #1
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8158 	beq.w	8004620 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d005      	beq.n	8004388 <HAL_GPIO_Init+0x40>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d130      	bne.n	80043ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	2203      	movs	r2, #3
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4013      	ands	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043be:	2201      	movs	r2, #1
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4013      	ands	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	f003 0201 	and.w	r2, r3, #1
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d017      	beq.n	8004426 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	2203      	movs	r2, #3
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4013      	ands	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d123      	bne.n	800447a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	08da      	lsrs	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3208      	adds	r2, #8
 800443a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	220f      	movs	r2, #15
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	08da      	lsrs	r2, r3, #3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3208      	adds	r2, #8
 8004474:	6939      	ldr	r1, [r7, #16]
 8004476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	2203      	movs	r2, #3
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0203 	and.w	r2, r3, #3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80b2 	beq.w	8004620 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044bc:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_GPIO_Init+0x2fc>)
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	4a60      	ldr	r2, [pc, #384]	; (8004644 <HAL_GPIO_Init+0x2fc>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6613      	str	r3, [r2, #96]	; 0x60
 80044c8:	4b5e      	ldr	r3, [pc, #376]	; (8004644 <HAL_GPIO_Init+0x2fc>)
 80044ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044d4:	4a5c      	ldr	r2, [pc, #368]	; (8004648 <HAL_GPIO_Init+0x300>)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	089b      	lsrs	r3, r3, #2
 80044da:	3302      	adds	r3, #2
 80044dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	220f      	movs	r2, #15
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044fe:	d02b      	beq.n	8004558 <HAL_GPIO_Init+0x210>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a52      	ldr	r2, [pc, #328]	; (800464c <HAL_GPIO_Init+0x304>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d025      	beq.n	8004554 <HAL_GPIO_Init+0x20c>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a51      	ldr	r2, [pc, #324]	; (8004650 <HAL_GPIO_Init+0x308>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01f      	beq.n	8004550 <HAL_GPIO_Init+0x208>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a50      	ldr	r2, [pc, #320]	; (8004654 <HAL_GPIO_Init+0x30c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d019      	beq.n	800454c <HAL_GPIO_Init+0x204>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a4f      	ldr	r2, [pc, #316]	; (8004658 <HAL_GPIO_Init+0x310>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_GPIO_Init+0x200>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a4e      	ldr	r2, [pc, #312]	; (800465c <HAL_GPIO_Init+0x314>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00d      	beq.n	8004544 <HAL_GPIO_Init+0x1fc>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a4d      	ldr	r2, [pc, #308]	; (8004660 <HAL_GPIO_Init+0x318>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <HAL_GPIO_Init+0x1f8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a4c      	ldr	r2, [pc, #304]	; (8004664 <HAL_GPIO_Init+0x31c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_GPIO_Init+0x1f4>
 8004538:	2307      	movs	r3, #7
 800453a:	e00e      	b.n	800455a <HAL_GPIO_Init+0x212>
 800453c:	2308      	movs	r3, #8
 800453e:	e00c      	b.n	800455a <HAL_GPIO_Init+0x212>
 8004540:	2306      	movs	r3, #6
 8004542:	e00a      	b.n	800455a <HAL_GPIO_Init+0x212>
 8004544:	2305      	movs	r3, #5
 8004546:	e008      	b.n	800455a <HAL_GPIO_Init+0x212>
 8004548:	2304      	movs	r3, #4
 800454a:	e006      	b.n	800455a <HAL_GPIO_Init+0x212>
 800454c:	2303      	movs	r3, #3
 800454e:	e004      	b.n	800455a <HAL_GPIO_Init+0x212>
 8004550:	2302      	movs	r3, #2
 8004552:	e002      	b.n	800455a <HAL_GPIO_Init+0x212>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <HAL_GPIO_Init+0x212>
 8004558:	2300      	movs	r3, #0
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	f002 0203 	and.w	r2, r2, #3
 8004560:	0092      	lsls	r2, r2, #2
 8004562:	4093      	lsls	r3, r2
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800456a:	4937      	ldr	r1, [pc, #220]	; (8004648 <HAL_GPIO_Init+0x300>)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	3302      	adds	r3, #2
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004578:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <HAL_GPIO_Init+0x320>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	43db      	mvns	r3, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800459c:	4a32      	ldr	r2, [pc, #200]	; (8004668 <HAL_GPIO_Init+0x320>)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045a2:	4b31      	ldr	r3, [pc, #196]	; (8004668 <HAL_GPIO_Init+0x320>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045c6:	4a28      	ldr	r2, [pc, #160]	; (8004668 <HAL_GPIO_Init+0x320>)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045cc:	4b26      	ldr	r3, [pc, #152]	; (8004668 <HAL_GPIO_Init+0x320>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4013      	ands	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <HAL_GPIO_Init+0x320>)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045f6:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <HAL_GPIO_Init+0x320>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	43db      	mvns	r3, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800461a:	4a13      	ldr	r2, [pc, #76]	; (8004668 <HAL_GPIO_Init+0x320>)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	3301      	adds	r3, #1
 8004624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	f47f ae91 	bne.w	8004358 <HAL_GPIO_Init+0x10>
  }
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	40021000 	.word	0x40021000
 8004648:	40010000 	.word	0x40010000
 800464c:	48000400 	.word	0x48000400
 8004650:	48000800 	.word	0x48000800
 8004654:	48000c00 	.word	0x48000c00
 8004658:	48001000 	.word	0x48001000
 800465c:	48001400 	.word	0x48001400
 8004660:	48001800 	.word	0x48001800
 8004664:	48001c00 	.word	0x48001c00
 8004668:	40010400 	.word	0x40010400

0800466c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	887b      	ldrh	r3, [r7, #2]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
 8004688:	e001      	b.n	800468e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	807b      	strh	r3, [r7, #2]
 80046a8:	4613      	mov	r3, r2
 80046aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046ac:	787b      	ldrb	r3, [r7, #1]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046b2:	887a      	ldrh	r2, [r7, #2]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046b8:	e002      	b.n	80046c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ba:	887a      	ldrh	r2, [r7, #2]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046d6:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046e2:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fafa 	bl	8002ce4 <HAL_GPIO_EXTI_Callback>
  }
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40010400 	.word	0x40010400

080046fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e0bf      	b.n	800488e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fe fbac 	bl	8002e80 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800473e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6999      	ldr	r1, [r3, #24]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004754:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6899      	ldr	r1, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b4a      	ldr	r3, [pc, #296]	; (8004898 <HAL_LTDC_Init+0x19c>)
 8004770:	400b      	ands	r3, r1
 8004772:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6899      	ldr	r1, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68d9      	ldr	r1, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b3e      	ldr	r3, [pc, #248]	; (8004898 <HAL_LTDC_Init+0x19c>)
 800479e:	400b      	ands	r3, r1
 80047a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68d9      	ldr	r1, [r3, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1a      	ldr	r2, [r3, #32]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6919      	ldr	r1, [r3, #16]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b33      	ldr	r3, [pc, #204]	; (8004898 <HAL_LTDC_Init+0x19c>)
 80047cc:	400b      	ands	r3, r1
 80047ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	041b      	lsls	r3, r3, #16
 80047d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6919      	ldr	r1, [r3, #16]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6959      	ldr	r1, [r3, #20]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b27      	ldr	r3, [pc, #156]	; (8004898 <HAL_LTDC_Init+0x19c>)
 80047fa:	400b      	ands	r3, r1
 80047fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6959      	ldr	r1, [r3, #20]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800483e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0206 	orr.w	r2, r2, #6
 800486a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	f000f800 	.word	0xf000f800

0800489c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800489c:	b5b0      	push	{r4, r5, r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_LTDC_ConfigLayer+0x1a>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e02c      	b.n	8004910 <HAL_LTDC_ConfigLayer+0x74>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2134      	movs	r1, #52	; 0x34
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4614      	mov	r4, r2
 80048da:	461d      	mov	r5, r3
 80048dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f811 	bl	8004918 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bdb0      	pop	{r4, r5, r7, pc}

08004918 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004918:	b480      	push	{r7}
 800491a:	b089      	sub	sp, #36	; 0x24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	0c1b      	lsrs	r3, r3, #16
 8004930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004934:	4413      	add	r3, r2
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	01db      	lsls	r3, r3, #7
 8004944:	4413      	add	r3, r2
 8004946:	3384      	adds	r3, #132	; 0x84
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	4611      	mov	r1, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	01d2      	lsls	r2, r2, #7
 8004954:	440a      	add	r2, r1
 8004956:	3284      	adds	r2, #132	; 0x84
 8004958:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800495c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800496e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004970:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4619      	mov	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	01db      	lsls	r3, r3, #7
 800497c:	440b      	add	r3, r1
 800497e:	3384      	adds	r3, #132	; 0x84
 8004980:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004986:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004996:	4413      	add	r3, r2
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	01db      	lsls	r3, r3, #7
 80049a6:	4413      	add	r3, r2
 80049a8:	3384      	adds	r3, #132	; 0x84
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	4611      	mov	r1, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	01d2      	lsls	r2, r2, #7
 80049b6:	440a      	add	r2, r1
 80049b8:	3284      	adds	r2, #132	; 0x84
 80049ba:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80049be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ce:	4413      	add	r3, r2
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4619      	mov	r1, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	01db      	lsls	r3, r3, #7
 80049dc:	440b      	add	r3, r1
 80049de:	3384      	adds	r3, #132	; 0x84
 80049e0:	4619      	mov	r1, r3
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	01db      	lsls	r3, r3, #7
 80049f2:	4413      	add	r3, r2
 80049f4:	3384      	adds	r3, #132	; 0x84
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	4611      	mov	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	01d2      	lsls	r2, r2, #7
 8004a02:	440a      	add	r2, r1
 8004a04:	3284      	adds	r2, #132	; 0x84
 8004a06:	f023 0307 	bic.w	r3, r3, #7
 8004a0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	01db      	lsls	r3, r3, #7
 8004a16:	4413      	add	r3, r2
 8004a18:	3384      	adds	r3, #132	; 0x84
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	061b      	lsls	r3, r3, #24
 8004a3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	01db      	lsls	r3, r3, #7
 8004a48:	4413      	add	r3, r2
 8004a4a:	3384      	adds	r3, #132	; 0x84
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	01db      	lsls	r3, r3, #7
 8004a58:	4413      	add	r3, r2
 8004a5a:	3384      	adds	r3, #132	; 0x84
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a68:	461a      	mov	r2, r3
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4619      	mov	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	01db      	lsls	r3, r3, #7
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3384      	adds	r3, #132	; 0x84
 8004a80:	4619      	mov	r1, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	01db      	lsls	r3, r3, #7
 8004a92:	4413      	add	r3, r2
 8004a94:	3384      	adds	r3, #132	; 0x84
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	01d2      	lsls	r2, r2, #7
 8004aa2:	440a      	add	r2, r1
 8004aa4:	3284      	adds	r2, #132	; 0x84
 8004aa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aaa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	01db      	lsls	r3, r3, #7
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3384      	adds	r3, #132	; 0x84
 8004aba:	461a      	mov	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	01db      	lsls	r3, r3, #7
 8004acc:	4413      	add	r3, r2
 8004ace:	3384      	adds	r3, #132	; 0x84
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	01d2      	lsls	r2, r2, #7
 8004adc:	440a      	add	r2, r1
 8004ade:	3284      	adds	r2, #132	; 0x84
 8004ae0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ae4:	f023 0307 	bic.w	r3, r3, #7
 8004ae8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	6809      	ldr	r1, [r1, #0]
 8004af6:	4608      	mov	r0, r1
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	01c9      	lsls	r1, r1, #7
 8004afc:	4401      	add	r1, r0
 8004afe:	3184      	adds	r1, #132	; 0x84
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	01db      	lsls	r3, r3, #7
 8004b0e:	4413      	add	r3, r2
 8004b10:	3384      	adds	r3, #132	; 0x84
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	01db      	lsls	r3, r3, #7
 8004b1e:	4413      	add	r3, r2
 8004b20:	3384      	adds	r3, #132	; 0x84
 8004b22:	461a      	mov	r2, r3
 8004b24:	2300      	movs	r3, #0
 8004b26:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	01db      	lsls	r3, r3, #7
 8004b32:	4413      	add	r3, r2
 8004b34:	3384      	adds	r3, #132	; 0x84
 8004b36:	461a      	mov	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004b46:	2304      	movs	r3, #4
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e01b      	b.n	8004b84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d102      	bne.n	8004b5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004b54:	2303      	movs	r3, #3
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e014      	b.n	8004b84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d00b      	beq.n	8004b7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d007      	beq.n	8004b7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d003      	beq.n	8004b7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b76:	2b07      	cmp	r3, #7
 8004b78:	d102      	bne.n	8004b80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	e001      	b.n	8004b84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004b80:	2301      	movs	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	01db      	lsls	r3, r3, #7
 8004b8e:	4413      	add	r3, r2
 8004b90:	3384      	adds	r3, #132	; 0x84
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	01d2      	lsls	r2, r2, #7
 8004b9e:	440a      	add	r2, r1
 8004ba0:	3284      	adds	r2, #132	; 0x84
 8004ba2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	1acb      	subs	r3, r1, r3
 8004bbe:	69f9      	ldr	r1, [r7, #28]
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	6809      	ldr	r1, [r1, #0]
 8004bca:	4608      	mov	r0, r1
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	01c9      	lsls	r1, r1, #7
 8004bd0:	4401      	add	r1, r0
 8004bd2:	3184      	adds	r1, #132	; 0x84
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	01db      	lsls	r3, r3, #7
 8004be2:	4413      	add	r3, r2
 8004be4:	3384      	adds	r3, #132	; 0x84
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	4611      	mov	r1, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	01d2      	lsls	r2, r2, #7
 8004bf2:	440a      	add	r2, r1
 8004bf4:	3284      	adds	r2, #132	; 0x84
 8004bf6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	01db      	lsls	r3, r3, #7
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3384      	adds	r3, #132	; 0x84
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	4413      	add	r3, r2
 8004c22:	3384      	adds	r3, #132	; 0x84
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	01d2      	lsls	r2, r2, #7
 8004c30:	440a      	add	r2, r1
 8004c32:	3284      	adds	r2, #132	; 0x84
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6013      	str	r3, [r2, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3724      	adds	r7, #36	; 0x24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c58:	d102      	bne.n	8004c60 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c5e:	e00b      	b.n	8004c78 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004c60:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6e:	d102      	bne.n	8004c76 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c74:	e000      	b.n	8004c78 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004c76:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40007000 	.word	0x40007000

08004c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d141      	bne.n	8004d1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c96:	4b4b      	ldr	r3, [pc, #300]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca2:	d131      	bne.n	8004d08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ca4:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004caa:	4a46      	ldr	r2, [pc, #280]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cb4:	4b43      	ldr	r3, [pc, #268]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cbc:	4a41      	ldr	r2, [pc, #260]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004cc4:	4b40      	ldr	r3, [pc, #256]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2232      	movs	r2, #50	; 0x32
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	4a3f      	ldr	r2, [pc, #252]	; (8004dcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd4:	0c9b      	lsrs	r3, r3, #18
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cda:	e002      	b.n	8004ce2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ce2:	4b38      	ldr	r3, [pc, #224]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cee:	d102      	bne.n	8004cf6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f2      	bne.n	8004cdc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d02:	d158      	bne.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e057      	b.n	8004db8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d08:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0e:	4a2d      	ldr	r2, [pc, #180]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d18:	e04d      	b.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d20:	d141      	bne.n	8004da6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d22:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2e:	d131      	bne.n	8004d94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d36:	4a23      	ldr	r2, [pc, #140]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d40:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d48:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2232      	movs	r2, #50	; 0x32
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	0c9b      	lsrs	r3, r3, #18
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d66:	e002      	b.n	8004d6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7a:	d102      	bne.n	8004d82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f2      	bne.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8e:	d112      	bne.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e011      	b.n	8004db8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004da4:	e007      	b.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004da6:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dae:	4a05      	ldr	r2, [pc, #20]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004db4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	20000024 	.word	0x20000024
 8004dcc:	431bde83 	.word	0x431bde83

08004dd0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_PWREx_EnableVddIO2+0x1c>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a04      	ldr	r2, [pc, #16]	; (8004dec <HAL_PWREx_EnableVddIO2+0x1c>)
 8004dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dde:	6053      	str	r3, [r2, #4]
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40007000 	.word	0x40007000

08004df0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f000 bc08 	b.w	8005614 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e04:	4b96      	ldr	r3, [pc, #600]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 030c 	and.w	r3, r3, #12
 8004e0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e0e:	4b94      	ldr	r3, [pc, #592]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80e4 	beq.w	8004fee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_RCC_OscConfig+0x4c>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	f040 808b 	bne.w	8004f4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	f040 8087 	bne.w	8004f4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e3c:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_OscConfig+0x64>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e3df      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1a      	ldr	r2, [r3, #32]
 8004e58:	4b81      	ldr	r3, [pc, #516]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <HAL_RCC_OscConfig+0x7e>
 8004e64:	4b7e      	ldr	r3, [pc, #504]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6c:	e005      	b.n	8004e7a <HAL_RCC_OscConfig+0x8a>
 8004e6e:	4b7c      	ldr	r3, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d223      	bcs.n	8004ec6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fdcc 	bl	8005a20 <RCC_SetFlashLatencyFromMSIRange>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e3c0      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e92:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a72      	ldr	r2, [pc, #456]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004e98:	f043 0308 	orr.w	r3, r3, #8
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	4b70      	ldr	r3, [pc, #448]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	496d      	ldr	r1, [pc, #436]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eb0:	4b6b      	ldr	r3, [pc, #428]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4968      	ldr	r1, [pc, #416]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
 8004ec4:	e025      	b.n	8004f12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ec6:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a65      	ldr	r2, [pc, #404]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004ecc:	f043 0308 	orr.w	r3, r3, #8
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b63      	ldr	r3, [pc, #396]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	4960      	ldr	r1, [pc, #384]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ee4:	4b5e      	ldr	r3, [pc, #376]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	495b      	ldr	r1, [pc, #364]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fd8c 	bl	8005a20 <RCC_SetFlashLatencyFromMSIRange>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e380      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f12:	f000 fcc1 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 8004f16:	4602      	mov	r2, r0
 8004f18:	4b51      	ldr	r3, [pc, #324]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	4950      	ldr	r1, [pc, #320]	; (8005064 <HAL_RCC_OscConfig+0x274>)
 8004f24:	5ccb      	ldrb	r3, [r1, r3]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2e:	4a4e      	ldr	r2, [pc, #312]	; (8005068 <HAL_RCC_OscConfig+0x278>)
 8004f30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f32:	4b4e      	ldr	r3, [pc, #312]	; (800506c <HAL_RCC_OscConfig+0x27c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe f972 	bl	8003220 <HAL_InitTick>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d052      	beq.n	8004fec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	e364      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d032      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f52:	4b43      	ldr	r3, [pc, #268]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a42      	ldr	r2, [pc, #264]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f5e:	f7fe f9af 	bl	80032c0 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f66:	f7fe f9ab 	bl	80032c0 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e34d      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f78:	4b39      	ldr	r3, [pc, #228]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f84:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a35      	ldr	r2, [pc, #212]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004f8a:	f043 0308 	orr.w	r3, r3, #8
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	4b33      	ldr	r3, [pc, #204]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	4930      	ldr	r1, [pc, #192]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	492b      	ldr	r1, [pc, #172]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	604b      	str	r3, [r1, #4]
 8004fb6:	e01a      	b.n	8004fee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fb8:	4b29      	ldr	r3, [pc, #164]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a28      	ldr	r2, [pc, #160]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fc4:	f7fe f97c 	bl	80032c0 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fcc:	f7fe f978 	bl	80032c0 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e31a      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fde:	4b20      	ldr	r3, [pc, #128]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x1dc>
 8004fea:	e000      	b.n	8004fee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d073      	beq.n	80050e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_OscConfig+0x21c>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b0c      	cmp	r3, #12
 8005004:	d10e      	bne.n	8005024 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d10b      	bne.n	8005024 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d063      	beq.n	80050e0 <HAL_RCC_OscConfig+0x2f0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d15f      	bne.n	80050e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e2f7      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502c:	d106      	bne.n	800503c <HAL_RCC_OscConfig+0x24c>
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a0b      	ldr	r2, [pc, #44]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e025      	b.n	8005088 <HAL_RCC_OscConfig+0x298>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005044:	d114      	bne.n	8005070 <HAL_RCC_OscConfig+0x280>
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a05      	ldr	r2, [pc, #20]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 800504c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	4b03      	ldr	r3, [pc, #12]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a02      	ldr	r2, [pc, #8]	; (8005060 <HAL_RCC_OscConfig+0x270>)
 8005058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e013      	b.n	8005088 <HAL_RCC_OscConfig+0x298>
 8005060:	40021000 	.word	0x40021000
 8005064:	08008c6c 	.word	0x08008c6c
 8005068:	20000024 	.word	0x20000024
 800506c:	20000028 	.word	0x20000028
 8005070:	4ba0      	ldr	r3, [pc, #640]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a9f      	ldr	r2, [pc, #636]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b9d      	ldr	r3, [pc, #628]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a9c      	ldr	r2, [pc, #624]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d013      	beq.n	80050b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fe f916 	bl	80032c0 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005098:	f7fe f912 	bl	80032c0 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e2b4      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050aa:	4b92      	ldr	r3, [pc, #584]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x2a8>
 80050b6:	e014      	b.n	80050e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fe f902 	bl	80032c0 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c0:	f7fe f8fe 	bl	80032c0 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	; 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e2a0      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050d2:	4b88      	ldr	r3, [pc, #544]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x2d0>
 80050de:	e000      	b.n	80050e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d060      	beq.n	80051b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_OscConfig+0x310>
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d119      	bne.n	800512e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d116      	bne.n	800512e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005100:	4b7c      	ldr	r3, [pc, #496]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_OscConfig+0x328>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e27d      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005118:	4b76      	ldr	r3, [pc, #472]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	061b      	lsls	r3, r3, #24
 8005126:	4973      	ldr	r1, [pc, #460]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005128:	4313      	orrs	r3, r2
 800512a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800512c:	e040      	b.n	80051b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d023      	beq.n	800517e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005136:	4b6f      	ldr	r3, [pc, #444]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a6e      	ldr	r2, [pc, #440]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 800513c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fe f8bd 	bl	80032c0 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514a:	f7fe f8b9 	bl	80032c0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e25b      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800515c:	4b65      	ldr	r3, [pc, #404]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005168:	4b62      	ldr	r3, [pc, #392]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	061b      	lsls	r3, r3, #24
 8005176:	495f      	ldr	r1, [pc, #380]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]
 800517c:	e018      	b.n	80051b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517e:	4b5d      	ldr	r3, [pc, #372]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a5c      	ldr	r2, [pc, #368]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fe f899 	bl	80032c0 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005192:	f7fe f895 	bl	80032c0 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e237      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051a4:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d03c      	beq.n	8005236 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01c      	beq.n	80051fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c4:	4b4b      	ldr	r3, [pc, #300]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80051c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ca:	4a4a      	ldr	r2, [pc, #296]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fe f874 	bl	80032c0 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051dc:	f7fe f870 	bl	80032c0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e212      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051ee:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80051f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ef      	beq.n	80051dc <HAL_RCC_OscConfig+0x3ec>
 80051fc:	e01b      	b.n	8005236 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051fe:	4b3d      	ldr	r3, [pc, #244]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005204:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005206:	f023 0301 	bic.w	r3, r3, #1
 800520a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520e:	f7fe f857 	bl	80032c0 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005216:	f7fe f853 	bl	80032c0 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e1f5      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005228:	4b32      	ldr	r3, [pc, #200]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 800522a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1ef      	bne.n	8005216 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a6 	beq.w	8005390 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005244:	2300      	movs	r3, #0
 8005246:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005248:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10d      	bne.n	8005270 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	4a26      	ldr	r2, [pc, #152]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 800525a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525e:	6593      	str	r3, [r2, #88]	; 0x58
 8005260:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005268:	60bb      	str	r3, [r7, #8]
 800526a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526c:	2301      	movs	r3, #1
 800526e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005270:	4b21      	ldr	r3, [pc, #132]	; (80052f8 <HAL_RCC_OscConfig+0x508>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005278:	2b00      	cmp	r3, #0
 800527a:	d118      	bne.n	80052ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800527c:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <HAL_RCC_OscConfig+0x508>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <HAL_RCC_OscConfig+0x508>)
 8005282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005286:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005288:	f7fe f81a 	bl	80032c0 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005290:	f7fe f816 	bl	80032c0 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e1b8      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a2:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <HAL_RCC_OscConfig+0x508>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d108      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4d8>
 80052b6:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80052b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052bc:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052c6:	e029      	b.n	800531c <HAL_RCC_OscConfig+0x52c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	d115      	bne.n	80052fc <HAL_RCC_OscConfig+0x50c>
 80052d0:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	4a07      	ldr	r2, [pc, #28]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80052d8:	f043 0304 	orr.w	r3, r3, #4
 80052dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	4a03      	ldr	r2, [pc, #12]	; (80052f4 <HAL_RCC_OscConfig+0x504>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052f0:	e014      	b.n	800531c <HAL_RCC_OscConfig+0x52c>
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40007000 	.word	0x40007000
 80052fc:	4b9d      	ldr	r3, [pc, #628]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	4a9c      	ldr	r2, [pc, #624]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800530c:	4b99      	ldr	r3, [pc, #612]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	4a98      	ldr	r2, [pc, #608]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 8005314:	f023 0304 	bic.w	r3, r3, #4
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d016      	beq.n	8005352 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fd ffcc 	bl	80032c0 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532a:	e00a      	b.n	8005342 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7fd ffc8 	bl	80032c0 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e168      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005342:	4b8c      	ldr	r3, [pc, #560]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0ed      	beq.n	800532c <HAL_RCC_OscConfig+0x53c>
 8005350:	e015      	b.n	800537e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005352:	f7fd ffb5 	bl	80032c0 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005358:	e00a      	b.n	8005370 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535a:	f7fd ffb1 	bl	80032c0 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	f241 3288 	movw	r2, #5000	; 0x1388
 8005368:	4293      	cmp	r3, r2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e151      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005370:	4b80      	ldr	r3, [pc, #512]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1ed      	bne.n	800535a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800537e:	7ffb      	ldrb	r3, [r7, #31]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d105      	bne.n	8005390 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005384:	4b7b      	ldr	r3, [pc, #492]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	4a7a      	ldr	r2, [pc, #488]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 800538a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d03c      	beq.n	8005416 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01c      	beq.n	80053de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053a4:	4b73      	ldr	r3, [pc, #460]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80053a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053aa:	4a72      	ldr	r2, [pc, #456]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fd ff84 	bl	80032c0 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053bc:	f7fd ff80 	bl	80032c0 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e122      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ce:	4b69      	ldr	r3, [pc, #420]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80053d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ef      	beq.n	80053bc <HAL_RCC_OscConfig+0x5cc>
 80053dc:	e01b      	b.n	8005416 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053de:	4b65      	ldr	r3, [pc, #404]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80053e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053e4:	4a63      	ldr	r2, [pc, #396]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fd ff67 	bl	80032c0 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053f6:	f7fd ff63 	bl	80032c0 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e105      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005408:	4b5a      	ldr	r3, [pc, #360]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 800540a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1ef      	bne.n	80053f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 80f9 	beq.w	8005612 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	2b02      	cmp	r3, #2
 8005426:	f040 80cf 	bne.w	80055c8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800542a:	4b52      	ldr	r3, [pc, #328]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f003 0203 	and.w	r2, r3, #3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	429a      	cmp	r2, r3
 800543c:	d12c      	bne.n	8005498 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	3b01      	subs	r3, #1
 800544a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800544c:	429a      	cmp	r2, r3
 800544e:	d123      	bne.n	8005498 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d11b      	bne.n	8005498 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d113      	bne.n	8005498 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	3b01      	subs	r3, #1
 800547e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d109      	bne.n	8005498 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	085b      	lsrs	r3, r3, #1
 8005490:	3b01      	subs	r3, #1
 8005492:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005494:	429a      	cmp	r2, r3
 8005496:	d071      	beq.n	800557c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	2b0c      	cmp	r3, #12
 800549c:	d068      	beq.n	8005570 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800549e:	4b35      	ldr	r3, [pc, #212]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054aa:	4b32      	ldr	r3, [pc, #200]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0ac      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054ba:	4b2e      	ldr	r3, [pc, #184]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2d      	ldr	r2, [pc, #180]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80054c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054c6:	f7fd fefb 	bl	80032c0 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ce:	f7fd fef7 	bl	80032c0 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e099      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054e0:	4b24      	ldr	r3, [pc, #144]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f0      	bne.n	80054ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ec:	4b21      	ldr	r3, [pc, #132]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	4b21      	ldr	r3, [pc, #132]	; (8005578 <HAL_RCC_OscConfig+0x788>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054fc:	3a01      	subs	r2, #1
 80054fe:	0112      	lsls	r2, r2, #4
 8005500:	4311      	orrs	r1, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005506:	0212      	lsls	r2, r2, #8
 8005508:	4311      	orrs	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800550e:	0852      	lsrs	r2, r2, #1
 8005510:	3a01      	subs	r2, #1
 8005512:	0552      	lsls	r2, r2, #21
 8005514:	4311      	orrs	r1, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800551a:	0852      	lsrs	r2, r2, #1
 800551c:	3a01      	subs	r2, #1
 800551e:	0652      	lsls	r2, r2, #25
 8005520:	4311      	orrs	r1, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005526:	06d2      	lsls	r2, r2, #27
 8005528:	430a      	orrs	r2, r1
 800552a:	4912      	ldr	r1, [pc, #72]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 800552c:	4313      	orrs	r3, r2
 800552e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005530:	4b10      	ldr	r3, [pc, #64]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0f      	ldr	r2, [pc, #60]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 8005536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a0c      	ldr	r2, [pc, #48]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 8005542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005546:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005548:	f7fd feba 	bl	80032c0 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005550:	f7fd feb6 	bl	80032c0 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e058      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005562:	4b04      	ldr	r3, [pc, #16]	; (8005574 <HAL_RCC_OscConfig+0x784>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800556e:	e050      	b.n	8005612 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e04f      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
 8005574:	40021000 	.word	0x40021000
 8005578:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557c:	4b27      	ldr	r3, [pc, #156]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d144      	bne.n	8005612 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a23      	ldr	r2, [pc, #140]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 800558e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005592:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005594:	4b21      	ldr	r3, [pc, #132]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4a20      	ldr	r2, [pc, #128]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 800559a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800559e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055a0:	f7fd fe8e 	bl	80032c0 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a8:	f7fd fe8a 	bl	80032c0 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e02c      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ba:	4b18      	ldr	r3, [pc, #96]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x7b8>
 80055c6:	e024      	b.n	8005612 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b0c      	cmp	r3, #12
 80055cc:	d01f      	beq.n	800560e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a12      	ldr	r2, [pc, #72]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 80055d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fd fe71 	bl	80032c0 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fd fe6d 	bl	80032c0 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e00f      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f0      	bne.n	80055e2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	4905      	ldr	r1, [pc, #20]	; (800561c <HAL_RCC_OscConfig+0x82c>)
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <HAL_RCC_OscConfig+0x830>)
 8005608:	4013      	ands	r3, r2
 800560a:	60cb      	str	r3, [r1, #12]
 800560c:	e001      	b.n	8005612 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40021000 	.word	0x40021000
 8005620:	feeefffc 	.word	0xfeeefffc

08005624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e11d      	b.n	8005878 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800563c:	4b90      	ldr	r3, [pc, #576]	; (8005880 <HAL_RCC_ClockConfig+0x25c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d910      	bls.n	800566c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b8d      	ldr	r3, [pc, #564]	; (8005880 <HAL_RCC_ClockConfig+0x25c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 020f 	bic.w	r2, r3, #15
 8005652:	498b      	ldr	r1, [pc, #556]	; (8005880 <HAL_RCC_ClockConfig+0x25c>)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800565a:	4b89      	ldr	r3, [pc, #548]	; (8005880 <HAL_RCC_ClockConfig+0x25c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d001      	beq.n	800566c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e105      	b.n	8005878 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d010      	beq.n	800569a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	4b81      	ldr	r3, [pc, #516]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005684:	429a      	cmp	r2, r3
 8005686:	d908      	bls.n	800569a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005688:	4b7e      	ldr	r3, [pc, #504]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	497b      	ldr	r1, [pc, #492]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005696:	4313      	orrs	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d079      	beq.n	800579a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d11e      	bne.n	80056ec <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ae:	4b75      	ldr	r3, [pc, #468]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e0dc      	b.n	8005878 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80056be:	f000 fa09 	bl	8005ad4 <RCC_GetSysClockFreqFromPLLSource>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4a70      	ldr	r2, [pc, #448]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d946      	bls.n	8005758 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80056ca:	4b6e      	ldr	r3, [pc, #440]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d140      	bne.n	8005758 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056d6:	4b6b      	ldr	r3, [pc, #428]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056de:	4a69      	ldr	r2, [pc, #420]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80056e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	e035      	b.n	8005758 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d107      	bne.n	8005704 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056f4:	4b63      	ldr	r3, [pc, #396]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d115      	bne.n	800572c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0b9      	b.n	8005878 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d107      	bne.n	800571c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800570c:	4b5d      	ldr	r3, [pc, #372]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0ad      	b.n	8005878 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800571c:	4b59      	ldr	r3, [pc, #356]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0a5      	b.n	8005878 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800572c:	f000 f8b4 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 8005730:	4603      	mov	r3, r0
 8005732:	4a55      	ldr	r2, [pc, #340]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d90f      	bls.n	8005758 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005738:	4b52      	ldr	r3, [pc, #328]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005744:	4b4f      	ldr	r3, [pc, #316]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800574c:	4a4d      	ldr	r2, [pc, #308]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800574e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005752:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005758:	4b4a      	ldr	r3, [pc, #296]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f023 0203 	bic.w	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4947      	ldr	r1, [pc, #284]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005766:	4313      	orrs	r3, r2
 8005768:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576a:	f7fd fda9 	bl	80032c0 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005770:	e00a      	b.n	8005788 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005772:	f7fd fda5 	bl	80032c0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005780:	4293      	cmp	r3, r2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e077      	b.n	8005878 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005788:	4b3e      	ldr	r3, [pc, #248]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 020c 	and.w	r2, r3, #12
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	429a      	cmp	r2, r3
 8005798:	d1eb      	bne.n	8005772 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b80      	cmp	r3, #128	; 0x80
 800579e:	d105      	bne.n	80057ac <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057a0:	4b38      	ldr	r3, [pc, #224]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a37      	ldr	r2, [pc, #220]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80057a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057aa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d010      	beq.n	80057da <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	4b31      	ldr	r3, [pc, #196]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d208      	bcs.n	80057da <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c8:	4b2e      	ldr	r3, [pc, #184]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	492b      	ldr	r1, [pc, #172]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057da:	4b29      	ldr	r3, [pc, #164]	; (8005880 <HAL_RCC_ClockConfig+0x25c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d210      	bcs.n	800580a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e8:	4b25      	ldr	r3, [pc, #148]	; (8005880 <HAL_RCC_ClockConfig+0x25c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f023 020f 	bic.w	r2, r3, #15
 80057f0:	4923      	ldr	r1, [pc, #140]	; (8005880 <HAL_RCC_ClockConfig+0x25c>)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057f8:	4b21      	ldr	r3, [pc, #132]	; (8005880 <HAL_RCC_ClockConfig+0x25c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d001      	beq.n	800580a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e036      	b.n	8005878 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d008      	beq.n	8005828 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005816:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	4918      	ldr	r1, [pc, #96]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005824:	4313      	orrs	r3, r2
 8005826:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005834:	4b13      	ldr	r3, [pc, #76]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	4910      	ldr	r1, [pc, #64]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005844:	4313      	orrs	r3, r2
 8005846:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005848:	f000 f826 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 800584c:	4602      	mov	r2, r0
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	f003 030f 	and.w	r3, r3, #15
 8005858:	490c      	ldr	r1, [pc, #48]	; (800588c <HAL_RCC_ClockConfig+0x268>)
 800585a:	5ccb      	ldrb	r3, [r1, r3]
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <HAL_RCC_ClockConfig+0x26c>)
 8005866:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x270>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f7fd fcd7 	bl	8003220 <HAL_InitTick>
 8005872:	4603      	mov	r3, r0
 8005874:	73fb      	strb	r3, [r7, #15]

  return status;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40022000 	.word	0x40022000
 8005884:	40021000 	.word	0x40021000
 8005888:	04c4b400 	.word	0x04c4b400
 800588c:	08008c6c 	.word	0x08008c6c
 8005890:	20000024 	.word	0x20000024
 8005894:	20000028 	.word	0x20000028

08005898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	; 0x24
 800589c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	2300      	movs	r3, #0
 80058a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a6:	4b3e      	ldr	r3, [pc, #248]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
 80058ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058b0:	4b3b      	ldr	r3, [pc, #236]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0x34>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b0c      	cmp	r3, #12
 80058c4:	d121      	bne.n	800590a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d11e      	bne.n	800590a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058cc:	4b34      	ldr	r3, [pc, #208]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d107      	bne.n	80058e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058d8:	4b31      	ldr	r3, [pc, #196]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	e005      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058e8:	4b2d      	ldr	r3, [pc, #180]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058f4:	4a2b      	ldr	r2, [pc, #172]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10d      	bne.n	8005920 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005908:	e00a      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d102      	bne.n	8005916 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005910:	4b25      	ldr	r3, [pc, #148]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e004      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b08      	cmp	r3, #8
 800591a:	d101      	bne.n	8005920 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800591c:	4b23      	ldr	r3, [pc, #140]	; (80059ac <HAL_RCC_GetSysClockFreq+0x114>)
 800591e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b0c      	cmp	r3, #12
 8005924:	d134      	bne.n	8005990 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005926:	4b1e      	ldr	r3, [pc, #120]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d003      	beq.n	800593e <HAL_RCC_GetSysClockFreq+0xa6>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b03      	cmp	r3, #3
 800593a:	d003      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0xac>
 800593c:	e005      	b.n	800594a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800593e:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005940:	617b      	str	r3, [r7, #20]
      break;
 8005942:	e005      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005944:	4b19      	ldr	r3, [pc, #100]	; (80059ac <HAL_RCC_GetSysClockFreq+0x114>)
 8005946:	617b      	str	r3, [r7, #20]
      break;
 8005948:	e002      	b.n	8005950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	617b      	str	r3, [r7, #20]
      break;
 800594e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005950:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	3301      	adds	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800595e:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	fb03 f202 	mul.w	r2, r3, r2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005976:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	0e5b      	lsrs	r3, r3, #25
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	3301      	adds	r3, #1
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005990:	69bb      	ldr	r3, [r7, #24]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3724      	adds	r7, #36	; 0x24
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40021000 	.word	0x40021000
 80059a4:	08008c84 	.word	0x08008c84
 80059a8:	00f42400 	.word	0x00f42400
 80059ac:	007a1200 	.word	0x007a1200

080059b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b4:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059b6:	681b      	ldr	r3, [r3, #0]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000024 	.word	0x20000024

080059c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059cc:	f7ff fff0 	bl	80059b0 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4904      	ldr	r1, [pc, #16]	; (80059f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40021000 	.word	0x40021000
 80059f0:	08008c7c 	.word	0x08008c7c

080059f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059f8:	f7ff ffda 	bl	80059b0 <HAL_RCC_GetHCLKFreq>
 80059fc:	4602      	mov	r2, r0
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	0adb      	lsrs	r3, r3, #11
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	4904      	ldr	r1, [pc, #16]	; (8005a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a0a:	5ccb      	ldrb	r3, [r1, r3]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	08008c7c 	.word	0x08008c7c

08005a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a28:	2300      	movs	r3, #0
 8005a2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a2c:	4b27      	ldr	r3, [pc, #156]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a38:	f7ff f906 	bl	8004c48 <HAL_PWREx_GetVoltageRange>
 8005a3c:	6178      	str	r0, [r7, #20]
 8005a3e:	e014      	b.n	8005a6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a40:	4b22      	ldr	r3, [pc, #136]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a44:	4a21      	ldr	r2, [pc, #132]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a4c:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a58:	f7ff f8f6 	bl	8004c48 <HAL_PWREx_GetVoltageRange>
 8005a5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a5e:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a62:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d10b      	bne.n	8005a8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b80      	cmp	r3, #128	; 0x80
 8005a76:	d913      	bls.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a7c:	d902      	bls.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a7e:	2302      	movs	r3, #2
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	e00d      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a84:	2301      	movs	r3, #1
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	e00a      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8e:	d902      	bls.n	8005a96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005a90:	2302      	movs	r3, #2
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	e004      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b70      	cmp	r3, #112	; 0x70
 8005a9a:	d101      	bne.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f023 020f 	bic.w	r2, r3, #15
 8005aa8:	4909      	ldr	r1, [pc, #36]	; (8005ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d001      	beq.n	8005ac2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40022000 	.word	0x40022000

08005ad4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ada:	4b2d      	ldr	r3, [pc, #180]	; (8005b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d00b      	beq.n	8005b02 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d825      	bhi.n	8005b3c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d008      	beq.n	8005b08 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d11f      	bne.n	8005b3c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005afe:	613b      	str	r3, [r7, #16]
    break;
 8005b00:	e01f      	b.n	8005b42 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005b02:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005b04:	613b      	str	r3, [r7, #16]
    break;
 8005b06:	e01c      	b.n	8005b42 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b08:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d107      	bne.n	8005b24 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b14:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	e005      	b.n	8005b30 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b24:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	091b      	lsrs	r3, r3, #4
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005b30:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b38:	613b      	str	r3, [r7, #16]
    break;
 8005b3a:	e002      	b.n	8005b42 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
    break;
 8005b40:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	091b      	lsrs	r3, r3, #4
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b50:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	fb03 f202 	mul.w	r2, r3, r2
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b68:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	0e5b      	lsrs	r3, r3, #25
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	3301      	adds	r3, #1
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005b82:	683b      	ldr	r3, [r7, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	40021000 	.word	0x40021000
 8005b94:	00f42400 	.word	0x00f42400
 8005b98:	007a1200 	.word	0x007a1200
 8005b9c:	08008c84 	.word	0x08008c84

08005ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ba8:	2300      	movs	r3, #0
 8005baa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bac:	2300      	movs	r3, #0
 8005bae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d040      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc0:	2b80      	cmp	r3, #128	; 0x80
 8005bc2:	d02a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d825      	bhi.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005bc8:	2b60      	cmp	r3, #96	; 0x60
 8005bca:	d026      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005bcc:	2b60      	cmp	r3, #96	; 0x60
 8005bce:	d821      	bhi.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d006      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005bd4:	2b40      	cmp	r3, #64	; 0x40
 8005bd6:	d81d      	bhi.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d009      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d010      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005be0:	e018      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005be2:	4b89      	ldr	r3, [pc, #548]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	4a88      	ldr	r2, [pc, #544]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bec:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bee:	e015      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fb62 	bl	80062c0 <RCCEx_PLLSAI1_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c00:	e00c      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3320      	adds	r3, #32
 8005c06:	2100      	movs	r1, #0
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fc4d 	bl	80064a8 <RCCEx_PLLSAI2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c12:	e003      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	74fb      	strb	r3, [r7, #19]
      break;
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c22:	4b79      	ldr	r3, [pc, #484]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c28:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c30:	4975      	ldr	r1, [pc, #468]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005c38:	e001      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3a:	7cfb      	ldrb	r3, [r7, #19]
 8005c3c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d047      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c52:	d030      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c58:	d82a      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c5e:	d02a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c64:	d824      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6a:	d008      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c70:	d81e      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7a:	d010      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c7c:	e018      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c7e:	4b62      	ldr	r3, [pc, #392]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	4a61      	ldr	r2, [pc, #388]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c88:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c8a:	e015      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fb14 	bl	80062c0 <RCCEx_PLLSAI1_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c9c:	e00c      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3320      	adds	r3, #32
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fbff 	bl	80064a8 <RCCEx_PLLSAI2_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005cae:	e003      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	74fb      	strb	r3, [r7, #19]
      break;
 8005cb4:	e000      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005cbe:	4b52      	ldr	r3, [pc, #328]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	494e      	ldr	r1, [pc, #312]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005cd4:	e001      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 809f 	beq.w	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005cec:	4b46      	ldr	r3, [pc, #280]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00d      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d06:	4a40      	ldr	r2, [pc, #256]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d0e:	4b3e      	ldr	r3, [pc, #248]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	60bb      	str	r3, [r7, #8]
 8005d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d1e:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a3a      	ldr	r2, [pc, #232]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d2a:	f7fd fac9 	bl	80032c0 <HAL_GetTick>
 8005d2e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d30:	e009      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d32:	f7fd fac5 	bl	80032c0 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d902      	bls.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	74fb      	strb	r3, [r7, #19]
        break;
 8005d44:	e005      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d46:	4b31      	ldr	r3, [pc, #196]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0ef      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005d52:	7cfb      	ldrb	r3, [r7, #19]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d15b      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d58:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d62:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01f      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d019      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d76:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d82:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d88:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d98:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005da2:	4a19      	ldr	r2, [pc, #100]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d016      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db4:	f7fd fa84 	bl	80032c0 <HAL_GetTick>
 8005db8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dbc:	f7fd fa80 	bl	80032c0 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d902      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	74fb      	strb	r3, [r7, #19]
            break;
 8005dd2:	e006      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0ec      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005de2:	7cfb      	ldrb	r3, [r7, #19]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10c      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005df8:	4903      	ldr	r1, [pc, #12]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e00:	e008      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e02:	7cfb      	ldrb	r3, [r7, #19]
 8005e04:	74bb      	strb	r3, [r7, #18]
 8005e06:	e005      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e10:	7cfb      	ldrb	r3, [r7, #19]
 8005e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e14:	7c7b      	ldrb	r3, [r7, #17]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d105      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e1a:	4ba0      	ldr	r3, [pc, #640]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1e:	4a9f      	ldr	r2, [pc, #636]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e32:	4b9a      	ldr	r3, [pc, #616]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e38:	f023 0203 	bic.w	r2, r3, #3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e40:	4996      	ldr	r1, [pc, #600]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e54:	4b91      	ldr	r3, [pc, #580]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	f023 020c 	bic.w	r2, r3, #12
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	498e      	ldr	r1, [pc, #568]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e76:	4b89      	ldr	r3, [pc, #548]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	4985      	ldr	r1, [pc, #532]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e98:	4b80      	ldr	r3, [pc, #512]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea6:	497d      	ldr	r1, [pc, #500]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005eba:	4b78      	ldr	r3, [pc, #480]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec8:	4974      	ldr	r1, [pc, #464]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005edc:	4b6f      	ldr	r3, [pc, #444]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eea:	496c      	ldr	r1, [pc, #432]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005efe:	4b67      	ldr	r3, [pc, #412]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f0c:	4963      	ldr	r1, [pc, #396]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f20:	4b5e      	ldr	r3, [pc, #376]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f2e:	495b      	ldr	r1, [pc, #364]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f42:	4b56      	ldr	r3, [pc, #344]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f50:	4952      	ldr	r1, [pc, #328]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f64:	4b4d      	ldr	r3, [pc, #308]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	494a      	ldr	r1, [pc, #296]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f86:	4b45      	ldr	r3, [pc, #276]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f94:	4941      	ldr	r1, [pc, #260]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fa8:	4b3c      	ldr	r3, [pc, #240]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fae:	f023 0203 	bic.w	r2, r3, #3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb6:	4939      	ldr	r1, [pc, #228]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d028      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fca:	4b34      	ldr	r3, [pc, #208]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd8:	4930      	ldr	r1, [pc, #192]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe8:	d106      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fea:	4b2c      	ldr	r3, [pc, #176]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4a2b      	ldr	r2, [pc, #172]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ff4:	60d3      	str	r3, [r2, #12]
 8005ff6:	e011      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006000:	d10c      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	2101      	movs	r1, #1
 8006008:	4618      	mov	r0, r3
 800600a:	f000 f959 	bl	80062c0 <RCCEx_PLLSAI1_Config>
 800600e:	4603      	mov	r3, r0
 8006010:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006012:	7cfb      	ldrb	r3, [r7, #19]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006018:	7cfb      	ldrb	r3, [r7, #19]
 800601a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d04d      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800602c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006030:	d108      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006032:	4b1a      	ldr	r3, [pc, #104]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006038:	4a18      	ldr	r2, [pc, #96]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800603a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800603e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006042:	e012      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006044:	4b15      	ldr	r3, [pc, #84]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800604a:	4a14      	ldr	r2, [pc, #80]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006050:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006054:	4b11      	ldr	r3, [pc, #68]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006062:	490e      	ldr	r1, [pc, #56]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800606e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006072:	d106      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006074:	4b09      	ldr	r3, [pc, #36]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4a08      	ldr	r2, [pc, #32]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800607a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800607e:	60d3      	str	r3, [r2, #12]
 8006080:	e020      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800608a:	d109      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800608c:	4b03      	ldr	r3, [pc, #12]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	4a02      	ldr	r2, [pc, #8]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006096:	60d3      	str	r3, [r2, #12]
 8006098:	e014      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800609a:	bf00      	nop
 800609c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3304      	adds	r3, #4
 80060ae:	2101      	movs	r1, #1
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 f905 	bl	80062c0 <RCCEx_PLLSAI1_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060ba:	7cfb      	ldrb	r3, [r7, #19]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80060c0:	7cfb      	ldrb	r3, [r7, #19]
 80060c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d028      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060d0:	4b7a      	ldr	r3, [pc, #488]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060de:	4977      	ldr	r1, [pc, #476]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ee:	d106      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f0:	4b72      	ldr	r3, [pc, #456]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a71      	ldr	r2, [pc, #452]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060fa:	60d3      	str	r3, [r2, #12]
 80060fc:	e011      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006102:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006106:	d10c      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	2101      	movs	r1, #1
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f8d6 	bl	80062c0 <RCCEx_PLLSAI1_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006118:	7cfb      	ldrb	r3, [r7, #19]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800611e:	7cfb      	ldrb	r3, [r7, #19]
 8006120:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01e      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800612e:	4b63      	ldr	r3, [pc, #396]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006134:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800613e:	495f      	ldr	r1, [pc, #380]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800614c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006150:	d10c      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	2102      	movs	r1, #2
 8006158:	4618      	mov	r0, r3
 800615a:	f000 f8b1 	bl	80062c0 <RCCEx_PLLSAI1_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006162:	7cfb      	ldrb	r3, [r7, #19]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006178:	4b50      	ldr	r3, [pc, #320]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800617a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800617e:	f023 0204 	bic.w	r2, r3, #4
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006188:	494c      	ldr	r1, [pc, #304]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800619c:	4b47      	ldr	r3, [pc, #284]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800619e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061a2:	f023 0218 	bic.w	r2, r3, #24
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ac:	4943      	ldr	r1, [pc, #268]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d035      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061c0:	4b3e      	ldr	r3, [pc, #248]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a3d      	ldr	r2, [pc, #244]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061cc:	f7fd f878 	bl	80032c0 <HAL_GetTick>
 80061d0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061d2:	e009      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061d4:	f7fd f874 	bl	80032c0 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d902      	bls.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	74fb      	strb	r3, [r7, #19]
        break;
 80061e6:	e005      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061e8:	4b34      	ldr	r3, [pc, #208]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1ef      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d113      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80061fa:	4b30      	ldr	r3, [pc, #192]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800620a:	492c      	ldr	r1, [pc, #176]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3320      	adds	r3, #32
 8006216:	2102      	movs	r1, #2
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f945 	bl	80064a8 <RCCEx_PLLSAI2_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006222:	7cfb      	ldrb	r3, [r7, #19]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006228:	7cfb      	ldrb	r3, [r7, #19]
 800622a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01e      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006238:	4b20      	ldr	r3, [pc, #128]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800623a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800623e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006248:	491c      	ldr	r1, [pc, #112]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625a:	d10c      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3320      	adds	r3, #32
 8006260:	2101      	movs	r1, #1
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f920 	bl	80064a8 <RCCEx_PLLSAI2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800626c:	7cfb      	ldrb	r3, [r7, #19]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006272:	7cfb      	ldrb	r3, [r7, #19]
 8006274:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d017      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006282:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006284:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006292:	490a      	ldr	r1, [pc, #40]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a4:	d105      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	4a04      	ldr	r2, [pc, #16]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062b0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80062b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40021000 	.word	0x40021000

080062c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062ce:	4b72      	ldr	r3, [pc, #456]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00e      	beq.n	80062f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062da:	4b6f      	ldr	r3, [pc, #444]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f003 0203 	and.w	r2, r3, #3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d103      	bne.n	80062f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
       ||
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d142      	bne.n	8006378 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
 80062f6:	e03f      	b.n	8006378 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d018      	beq.n	8006332 <RCCEx_PLLSAI1_Config+0x72>
 8006300:	2b03      	cmp	r3, #3
 8006302:	d825      	bhi.n	8006350 <RCCEx_PLLSAI1_Config+0x90>
 8006304:	2b01      	cmp	r3, #1
 8006306:	d002      	beq.n	800630e <RCCEx_PLLSAI1_Config+0x4e>
 8006308:	2b02      	cmp	r3, #2
 800630a:	d009      	beq.n	8006320 <RCCEx_PLLSAI1_Config+0x60>
 800630c:	e020      	b.n	8006350 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800630e:	4b62      	ldr	r3, [pc, #392]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d11d      	bne.n	8006356 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800631e:	e01a      	b.n	8006356 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006320:	4b5d      	ldr	r3, [pc, #372]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006328:	2b00      	cmp	r3, #0
 800632a:	d116      	bne.n	800635a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006330:	e013      	b.n	800635a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006332:	4b59      	ldr	r3, [pc, #356]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10f      	bne.n	800635e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800633e:	4b56      	ldr	r3, [pc, #344]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800634e:	e006      	b.n	800635e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
      break;
 8006354:	e004      	b.n	8006360 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006356:	bf00      	nop
 8006358:	e002      	b.n	8006360 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800635e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d108      	bne.n	8006378 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006366:	4b4c      	ldr	r3, [pc, #304]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f023 0203 	bic.w	r2, r3, #3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4949      	ldr	r1, [pc, #292]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006374:	4313      	orrs	r3, r2
 8006376:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 8086 	bne.w	800648c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006380:	4b45      	ldr	r3, [pc, #276]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a44      	ldr	r2, [pc, #272]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800638a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638c:	f7fc ff98 	bl	80032c0 <HAL_GetTick>
 8006390:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006392:	e009      	b.n	80063a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006394:	f7fc ff94 	bl	80032c0 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d902      	bls.n	80063a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	73fb      	strb	r3, [r7, #15]
        break;
 80063a6:	e005      	b.n	80063b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063a8:	4b3b      	ldr	r3, [pc, #236]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ef      	bne.n	8006394 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d168      	bne.n	800648c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d113      	bne.n	80063e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063c0:	4b35      	ldr	r3, [pc, #212]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	4b35      	ldr	r3, [pc, #212]	; (800649c <RCCEx_PLLSAI1_Config+0x1dc>)
 80063c6:	4013      	ands	r3, r2
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6892      	ldr	r2, [r2, #8]
 80063cc:	0211      	lsls	r1, r2, #8
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68d2      	ldr	r2, [r2, #12]
 80063d2:	06d2      	lsls	r2, r2, #27
 80063d4:	4311      	orrs	r1, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6852      	ldr	r2, [r2, #4]
 80063da:	3a01      	subs	r2, #1
 80063dc:	0112      	lsls	r2, r2, #4
 80063de:	430a      	orrs	r2, r1
 80063e0:	492d      	ldr	r1, [pc, #180]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	610b      	str	r3, [r1, #16]
 80063e6:	e02d      	b.n	8006444 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d115      	bne.n	800641a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063ee:	4b2a      	ldr	r3, [pc, #168]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	4b2b      	ldr	r3, [pc, #172]	; (80064a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6892      	ldr	r2, [r2, #8]
 80063fa:	0211      	lsls	r1, r2, #8
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6912      	ldr	r2, [r2, #16]
 8006400:	0852      	lsrs	r2, r2, #1
 8006402:	3a01      	subs	r2, #1
 8006404:	0552      	lsls	r2, r2, #21
 8006406:	4311      	orrs	r1, r2
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6852      	ldr	r2, [r2, #4]
 800640c:	3a01      	subs	r2, #1
 800640e:	0112      	lsls	r2, r2, #4
 8006410:	430a      	orrs	r2, r1
 8006412:	4921      	ldr	r1, [pc, #132]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006414:	4313      	orrs	r3, r2
 8006416:	610b      	str	r3, [r1, #16]
 8006418:	e014      	b.n	8006444 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800641a:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006420:	4013      	ands	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6892      	ldr	r2, [r2, #8]
 8006426:	0211      	lsls	r1, r2, #8
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6952      	ldr	r2, [r2, #20]
 800642c:	0852      	lsrs	r2, r2, #1
 800642e:	3a01      	subs	r2, #1
 8006430:	0652      	lsls	r2, r2, #25
 8006432:	4311      	orrs	r1, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6852      	ldr	r2, [r2, #4]
 8006438:	3a01      	subs	r2, #1
 800643a:	0112      	lsls	r2, r2, #4
 800643c:	430a      	orrs	r2, r1
 800643e:	4916      	ldr	r1, [pc, #88]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006440:	4313      	orrs	r3, r2
 8006442:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006444:	4b14      	ldr	r3, [pc, #80]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a13      	ldr	r2, [pc, #76]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 800644a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800644e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006450:	f7fc ff36 	bl	80032c0 <HAL_GetTick>
 8006454:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006456:	e009      	b.n	800646c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006458:	f7fc ff32 	bl	80032c0 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d902      	bls.n	800646c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	73fb      	strb	r3, [r7, #15]
          break;
 800646a:	e005      	b.n	8006478 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ef      	beq.n	8006458 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800647e:	4b06      	ldr	r3, [pc, #24]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	4904      	ldr	r1, [pc, #16]	; (8006498 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006488:	4313      	orrs	r3, r2
 800648a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40021000 	.word	0x40021000
 800649c:	07ff800f 	.word	0x07ff800f
 80064a0:	ff9f800f 	.word	0xff9f800f
 80064a4:	f9ff800f 	.word	0xf9ff800f

080064a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064b6:	4b72      	ldr	r3, [pc, #456]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00e      	beq.n	80064e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064c2:	4b6f      	ldr	r3, [pc, #444]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 0203 	and.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d103      	bne.n	80064da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
       ||
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d142      	bne.n	8006560 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	73fb      	strb	r3, [r7, #15]
 80064de:	e03f      	b.n	8006560 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d018      	beq.n	800651a <RCCEx_PLLSAI2_Config+0x72>
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d825      	bhi.n	8006538 <RCCEx_PLLSAI2_Config+0x90>
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d002      	beq.n	80064f6 <RCCEx_PLLSAI2_Config+0x4e>
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d009      	beq.n	8006508 <RCCEx_PLLSAI2_Config+0x60>
 80064f4:	e020      	b.n	8006538 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064f6:	4b62      	ldr	r3, [pc, #392]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d11d      	bne.n	800653e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006506:	e01a      	b.n	800653e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006508:	4b5d      	ldr	r3, [pc, #372]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006510:	2b00      	cmp	r3, #0
 8006512:	d116      	bne.n	8006542 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006518:	e013      	b.n	8006542 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800651a:	4b59      	ldr	r3, [pc, #356]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10f      	bne.n	8006546 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006526:	4b56      	ldr	r3, [pc, #344]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006536:	e006      	b.n	8006546 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
      break;
 800653c:	e004      	b.n	8006548 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800653e:	bf00      	nop
 8006540:	e002      	b.n	8006548 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006546:	bf00      	nop
    }

    if(status == HAL_OK)
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d108      	bne.n	8006560 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800654e:	4b4c      	ldr	r3, [pc, #304]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f023 0203 	bic.w	r2, r3, #3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4949      	ldr	r1, [pc, #292]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800655c:	4313      	orrs	r3, r2
 800655e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 8086 	bne.w	8006674 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006568:	4b45      	ldr	r3, [pc, #276]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a44      	ldr	r2, [pc, #272]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800656e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006574:	f7fc fea4 	bl	80032c0 <HAL_GetTick>
 8006578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800657a:	e009      	b.n	8006590 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800657c:	f7fc fea0 	bl	80032c0 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d902      	bls.n	8006590 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	73fb      	strb	r3, [r7, #15]
        break;
 800658e:	e005      	b.n	800659c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006590:	4b3b      	ldr	r3, [pc, #236]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1ef      	bne.n	800657c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d168      	bne.n	8006674 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d113      	bne.n	80065d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065a8:	4b35      	ldr	r3, [pc, #212]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	4b35      	ldr	r3, [pc, #212]	; (8006684 <RCCEx_PLLSAI2_Config+0x1dc>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6892      	ldr	r2, [r2, #8]
 80065b4:	0211      	lsls	r1, r2, #8
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68d2      	ldr	r2, [r2, #12]
 80065ba:	06d2      	lsls	r2, r2, #27
 80065bc:	4311      	orrs	r1, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6852      	ldr	r2, [r2, #4]
 80065c2:	3a01      	subs	r2, #1
 80065c4:	0112      	lsls	r2, r2, #4
 80065c6:	430a      	orrs	r2, r1
 80065c8:	492d      	ldr	r1, [pc, #180]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	614b      	str	r3, [r1, #20]
 80065ce:	e02d      	b.n	800662c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d115      	bne.n	8006602 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065d6:	4b2a      	ldr	r3, [pc, #168]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d8:	695a      	ldr	r2, [r3, #20]
 80065da:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <RCCEx_PLLSAI2_Config+0x1e0>)
 80065dc:	4013      	ands	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6892      	ldr	r2, [r2, #8]
 80065e2:	0211      	lsls	r1, r2, #8
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6912      	ldr	r2, [r2, #16]
 80065e8:	0852      	lsrs	r2, r2, #1
 80065ea:	3a01      	subs	r2, #1
 80065ec:	0552      	lsls	r2, r2, #21
 80065ee:	4311      	orrs	r1, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6852      	ldr	r2, [r2, #4]
 80065f4:	3a01      	subs	r2, #1
 80065f6:	0112      	lsls	r2, r2, #4
 80065f8:	430a      	orrs	r2, r1
 80065fa:	4921      	ldr	r1, [pc, #132]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	614b      	str	r3, [r1, #20]
 8006600:	e014      	b.n	800662c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006602:	4b1f      	ldr	r3, [pc, #124]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006604:	695a      	ldr	r2, [r3, #20]
 8006606:	4b21      	ldr	r3, [pc, #132]	; (800668c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6892      	ldr	r2, [r2, #8]
 800660e:	0211      	lsls	r1, r2, #8
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6952      	ldr	r2, [r2, #20]
 8006614:	0852      	lsrs	r2, r2, #1
 8006616:	3a01      	subs	r2, #1
 8006618:	0652      	lsls	r2, r2, #25
 800661a:	4311      	orrs	r1, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6852      	ldr	r2, [r2, #4]
 8006620:	3a01      	subs	r2, #1
 8006622:	0112      	lsls	r2, r2, #4
 8006624:	430a      	orrs	r2, r1
 8006626:	4916      	ldr	r1, [pc, #88]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006628:	4313      	orrs	r3, r2
 800662a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800662c:	4b14      	ldr	r3, [pc, #80]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a13      	ldr	r2, [pc, #76]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006638:	f7fc fe42 	bl	80032c0 <HAL_GetTick>
 800663c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800663e:	e009      	b.n	8006654 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006640:	f7fc fe3e 	bl	80032c0 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d902      	bls.n	8006654 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	73fb      	strb	r3, [r7, #15]
          break;
 8006652:	e005      	b.n	8006660 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0ef      	beq.n	8006640 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006666:	4b06      	ldr	r3, [pc, #24]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	4904      	ldr	r1, [pc, #16]	; (8006680 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006670:	4313      	orrs	r3, r2
 8006672:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40021000 	.word	0x40021000
 8006684:	07ff800f 	.word	0x07ff800f
 8006688:	ff9f800f 	.word	0xff9f800f
 800668c:	f9ff800f 	.word	0xf9ff800f

08006690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e095      	b.n	80067ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d108      	bne.n	80066bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b2:	d009      	beq.n	80066c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	61da      	str	r2, [r3, #28]
 80066ba:	e005      	b.n	80066c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fc fc10 	bl	8002f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006708:	d902      	bls.n	8006710 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	e002      	b.n	8006716 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006714:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800671e:	d007      	beq.n	8006730 <HAL_SPI_Init+0xa0>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006728:	d002      	beq.n	8006730 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006772:	ea42 0103 	orr.w	r1, r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	0c1b      	lsrs	r3, r3, #16
 800678c:	f003 0204 	and.w	r2, r3, #4
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067ac:	ea42 0103 	orr.w	r1, r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b088      	sub	sp, #32
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_SPI_Transmit+0x22>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e15f      	b.n	8006ab8 <HAL_SPI_Transmit+0x2e2>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006800:	f7fc fd5e 	bl	80032c0 <HAL_GetTick>
 8006804:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	d002      	beq.n	800681c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006816:	2302      	movs	r3, #2
 8006818:	77fb      	strb	r3, [r7, #31]
    goto error;
 800681a:	e148      	b.n	8006aae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <HAL_SPI_Transmit+0x52>
 8006822:	88fb      	ldrh	r3, [r7, #6]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800682c:	e13f      	b.n	8006aae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2203      	movs	r2, #3
 8006832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	88fa      	ldrh	r2, [r7, #6]
 8006846:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006878:	d10f      	bne.n	800689a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006888:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b40      	cmp	r3, #64	; 0x40
 80068a6:	d007      	beq.n	80068b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068c0:	d94f      	bls.n	8006962 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_SPI_Transmit+0xfa>
 80068ca:	8afb      	ldrh	r3, [r7, #22]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d142      	bne.n	8006956 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	881a      	ldrh	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	1c9a      	adds	r2, r3, #2
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068f4:	e02f      	b.n	8006956 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b02      	cmp	r3, #2
 8006902:	d112      	bne.n	800692a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	881a      	ldrh	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	1c9a      	adds	r2, r3, #2
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006928:	e015      	b.n	8006956 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800692a:	f7fc fcc9 	bl	80032c0 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d803      	bhi.n	8006942 <HAL_SPI_Transmit+0x16c>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d102      	bne.n	8006948 <HAL_SPI_Transmit+0x172>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006954:	e0ab      	b.n	8006aae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ca      	bne.n	80068f6 <HAL_SPI_Transmit+0x120>
 8006960:	e080      	b.n	8006a64 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_SPI_Transmit+0x19a>
 800696a:	8afb      	ldrh	r3, [r7, #22]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d174      	bne.n	8006a5a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b01      	cmp	r3, #1
 8006978:	d912      	bls.n	80069a0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	881a      	ldrh	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	1c9a      	adds	r2, r3, #2
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b02      	subs	r3, #2
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800699e:	e05c      	b.n	8006a5a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	7812      	ldrb	r2, [r2, #0]
 80069ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80069c6:	e048      	b.n	8006a5a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d12b      	bne.n	8006a2e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d912      	bls.n	8006a06 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	881a      	ldrh	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	1c9a      	adds	r2, r3, #2
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b02      	subs	r3, #2
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a04:	e029      	b.n	8006a5a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a2c:	e015      	b.n	8006a5a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a2e:	f7fc fc47 	bl	80032c0 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d803      	bhi.n	8006a46 <HAL_SPI_Transmit+0x270>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d102      	bne.n	8006a4c <HAL_SPI_Transmit+0x276>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006a58:	e029      	b.n	8006aae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1b1      	bne.n	80069c8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f001 f8d7 	bl	8007c1c <SPI_EndRxTxTransaction>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	613b      	str	r3, [r7, #16]
 8006a96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	e003      	b.n	8006aae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	4613      	mov	r3, r2
 8006ace:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d002      	beq.n	8006ae6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ae4:	e11a      	b.n	8006d1c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aee:	d112      	bne.n	8006b16 <HAL_SPI_Receive+0x56>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10e      	bne.n	8006b16 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2204      	movs	r2, #4
 8006afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b00:	88fa      	ldrh	r2, [r7, #6]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	4613      	mov	r3, r2
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f90e 	bl	8006d2e <HAL_SPI_TransmitReceive>
 8006b12:	4603      	mov	r3, r0
 8006b14:	e107      	b.n	8006d26 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_SPI_Receive+0x64>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e100      	b.n	8006d26 <HAL_SPI_Receive+0x266>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b2c:	f7fc fbc8 	bl	80032c0 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <HAL_SPI_Receive+0x7e>
 8006b38:	88fb      	ldrh	r3, [r7, #6]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b42:	e0eb      	b.n	8006d1c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2204      	movs	r2, #4
 8006b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	88fa      	ldrh	r2, [r7, #6]
 8006b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	88fa      	ldrh	r2, [r7, #6]
 8006b64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b8e:	d908      	bls.n	8006ba2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b9e:	605a      	str	r2, [r3, #4]
 8006ba0:	e007      	b.n	8006bb2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bb0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bba:	d10f      	bne.n	8006bdc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bda:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be6:	2b40      	cmp	r3, #64	; 0x40
 8006be8:	d007      	beq.n	8006bfa <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c02:	d86f      	bhi.n	8006ce4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c04:	e034      	b.n	8006c70 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d117      	bne.n	8006c44 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f103 020c 	add.w	r2, r3, #12
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	7812      	ldrb	r2, [r2, #0]
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006c42:	e015      	b.n	8006c70 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c44:	f7fc fb3c 	bl	80032c0 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d803      	bhi.n	8006c5c <HAL_SPI_Receive+0x19c>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d102      	bne.n	8006c62 <HAL_SPI_Receive+0x1a2>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006c6e:	e055      	b.n	8006d1c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1c4      	bne.n	8006c06 <HAL_SPI_Receive+0x146>
 8006c7c:	e038      	b.n	8006cf0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d115      	bne.n	8006cb8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	b292      	uxth	r2, r2
 8006c98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	1c9a      	adds	r2, r3, #2
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006cb6:	e015      	b.n	8006ce4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb8:	f7fc fb02 	bl	80032c0 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d803      	bhi.n	8006cd0 <HAL_SPI_Receive+0x210>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d102      	bne.n	8006cd6 <HAL_SPI_Receive+0x216>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006ce2:	e01b      	b.n	8006d1c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1c6      	bne.n	8006c7e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 ff39 	bl	8007b6c <SPI_EndRxTransaction>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	75fb      	strb	r3, [r7, #23]
 8006d12:	e003      	b.n	8006d1c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b08a      	sub	sp, #40	; 0x28
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_SPI_TransmitReceive+0x26>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e20a      	b.n	800716a <HAL_SPI_TransmitReceive+0x43c>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d5c:	f7fc fab0 	bl	80032c0 <HAL_GetTick>
 8006d60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d74:	887b      	ldrh	r3, [r7, #2]
 8006d76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d78:	7efb      	ldrb	r3, [r7, #27]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d00e      	beq.n	8006d9c <HAL_SPI_TransmitReceive+0x6e>
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d84:	d106      	bne.n	8006d94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <HAL_SPI_TransmitReceive+0x66>
 8006d8e:	7efb      	ldrb	r3, [r7, #27]
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d003      	beq.n	8006d9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d94:	2302      	movs	r3, #2
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d9a:	e1e0      	b.n	800715e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x80>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x80>
 8006da8:	887b      	ldrh	r3, [r7, #2]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006db4:	e1d3      	b.n	800715e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d003      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2205      	movs	r2, #5
 8006dc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	887a      	ldrh	r2, [r7, #2]
 8006dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	887a      	ldrh	r2, [r7, #2]
 8006de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	887a      	ldrh	r2, [r7, #2]
 8006df6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e0c:	d802      	bhi.n	8006e14 <HAL_SPI_TransmitReceive+0xe6>
 8006e0e:	8a3b      	ldrh	r3, [r7, #16]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d908      	bls.n	8006e26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e22:	605a      	str	r2, [r3, #4]
 8006e24:	e007      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e40:	2b40      	cmp	r3, #64	; 0x40
 8006e42:	d007      	beq.n	8006e54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e5c:	f240 8081 	bls.w	8006f62 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <HAL_SPI_TransmitReceive+0x140>
 8006e68:	8a7b      	ldrh	r3, [r7, #18]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d16d      	bne.n	8006f4a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	881a      	ldrh	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	1c9a      	adds	r2, r3, #2
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e92:	e05a      	b.n	8006f4a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d11b      	bne.n	8006eda <HAL_SPI_TransmitReceive+0x1ac>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d016      	beq.n	8006eda <HAL_SPI_TransmitReceive+0x1ac>
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d113      	bne.n	8006eda <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	881a      	ldrh	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	1c9a      	adds	r2, r3, #2
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d11c      	bne.n	8006f22 <HAL_SPI_TransmitReceive+0x1f4>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d016      	beq.n	8006f22 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	b292      	uxth	r2, r2
 8006f00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	1c9a      	adds	r2, r3, #2
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f22:	f7fc f9cd 	bl	80032c0 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d80b      	bhi.n	8006f4a <HAL_SPI_TransmitReceive+0x21c>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d007      	beq.n	8006f4a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006f48:	e109      	b.n	800715e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d19f      	bne.n	8006e94 <HAL_SPI_TransmitReceive+0x166>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d199      	bne.n	8006e94 <HAL_SPI_TransmitReceive+0x166>
 8006f60:	e0e3      	b.n	800712a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_SPI_TransmitReceive+0x244>
 8006f6a:	8a7b      	ldrh	r3, [r7, #18]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	f040 80cf 	bne.w	8007110 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d912      	bls.n	8006fa2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	881a      	ldrh	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	1c9a      	adds	r2, r3, #2
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b02      	subs	r3, #2
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fa0:	e0b6      	b.n	8007110 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	330c      	adds	r3, #12
 8006fac:	7812      	ldrb	r2, [r2, #0]
 8006fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fc8:	e0a2      	b.n	8007110 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d134      	bne.n	8007042 <HAL_SPI_TransmitReceive+0x314>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d02f      	beq.n	8007042 <HAL_SPI_TransmitReceive+0x314>
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d12c      	bne.n	8007042 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d912      	bls.n	8007018 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	881a      	ldrh	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	1c9a      	adds	r2, r3, #2
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b02      	subs	r3, #2
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007016:	e012      	b.n	800703e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b01      	cmp	r3, #1
 800704e:	d148      	bne.n	80070e2 <HAL_SPI_TransmitReceive+0x3b4>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d042      	beq.n	80070e2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d923      	bls.n	80070b0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	b292      	uxth	r2, r2
 8007074:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	1c9a      	adds	r2, r3, #2
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b02      	subs	r3, #2
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b01      	cmp	r3, #1
 800709c:	d81f      	bhi.n	80070de <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070ac:	605a      	str	r2, [r3, #4]
 80070ae:	e016      	b.n	80070de <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f103 020c 	add.w	r2, r3, #12
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070de:	2301      	movs	r3, #1
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070e2:	f7fc f8ed 	bl	80032c0 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d803      	bhi.n	80070fa <HAL_SPI_TransmitReceive+0x3cc>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f8:	d102      	bne.n	8007100 <HAL_SPI_TransmitReceive+0x3d2>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d107      	bne.n	8007110 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800710e:	e026      	b.n	800715e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	f47f af57 	bne.w	8006fca <HAL_SPI_TransmitReceive+0x29c>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	f47f af50 	bne.w	8006fca <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fd74 	bl	8007c1c <SPI_EndRxTxTransaction>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2220      	movs	r2, #32
 8007144:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007154:	e003      	b.n	800715e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800716a:	4618      	mov	r0, r3
 800716c:	3728      	adds	r7, #40	; 0x28
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	4613      	mov	r3, r2
 8007180:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b01      	cmp	r3, #1
 8007190:	d002      	beq.n	8007198 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8007192:	2302      	movs	r3, #2
 8007194:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007196:	e092      	b.n	80072be <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d110      	bne.n	80071c2 <HAL_SPI_Receive_IT+0x4e>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071a8:	d10b      	bne.n	80071c2 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2204      	movs	r2, #4
 80071ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f889 	bl	80072d0 <HAL_SPI_TransmitReceive_IT>
 80071be:	4603      	mov	r3, r0
 80071c0:	e07e      	b.n	80072c0 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <HAL_SPI_Receive_IT+0x5a>
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d102      	bne.n	80071d4 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071d2:	e074      	b.n	80072be <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_SPI_Receive_IT+0x6e>
 80071de:	2302      	movs	r3, #2
 80071e0:	e06e      	b.n	80072c0 <HAL_SPI_Receive_IT+0x14c>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2204      	movs	r2, #4
 80071ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	88fa      	ldrh	r2, [r7, #6]
 8007202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	88fa      	ldrh	r2, [r7, #6]
 800720a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800722e:	d90b      	bls.n	8007248 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800723e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4a21      	ldr	r2, [pc, #132]	; (80072c8 <HAL_SPI_Receive_IT+0x154>)
 8007244:	64da      	str	r2, [r3, #76]	; 0x4c
 8007246:	e00a      	b.n	800725e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007256:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4a1c      	ldr	r2, [pc, #112]	; (80072cc <HAL_SPI_Receive_IT+0x158>)
 800725c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007266:	d10f      	bne.n	8007288 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007276:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007286:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b40      	cmp	r3, #64	; 0x40
 8007294:	d007      	beq.n	80072a6 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80072bc:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	080078e5 	.word	0x080078e5
 80072cc:	08007895 	.word	0x08007895

080072d0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072e8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072f0:	7dbb      	ldrb	r3, [r7, #22]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d00d      	beq.n	8007312 <HAL_SPI_TransmitReceive_IT+0x42>
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fc:	d106      	bne.n	800730c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d102      	bne.n	800730c <HAL_SPI_TransmitReceive_IT+0x3c>
 8007306:	7dbb      	ldrb	r3, [r7, #22]
 8007308:	2b04      	cmp	r3, #4
 800730a:	d002      	beq.n	8007312 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800730c:	2302      	movs	r3, #2
 800730e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007310:	e07d      	b.n	800740e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_SPI_TransmitReceive_IT+0x54>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <HAL_SPI_TransmitReceive_IT+0x54>
 800731e:	887b      	ldrh	r3, [r7, #2]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007328:	e071      	b.n	800740e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_SPI_TransmitReceive_IT+0x68>
 8007334:	2302      	movs	r3, #2
 8007336:	e06b      	b.n	8007410 <HAL_SPI_TransmitReceive_IT+0x140>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b04      	cmp	r3, #4
 800734a:	d003      	beq.n	8007354 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2205      	movs	r2, #5
 8007350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	887a      	ldrh	r2, [r7, #2]
 8007364:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	887a      	ldrh	r2, [r7, #2]
 800736a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	887a      	ldrh	r2, [r7, #2]
 8007376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	887a      	ldrh	r2, [r7, #2]
 800737e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800738a:	d906      	bls.n	800739a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a23      	ldr	r2, [pc, #140]	; (800741c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8007390:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a22      	ldr	r2, [pc, #136]	; (8007420 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007396:	651a      	str	r2, [r3, #80]	; 0x50
 8007398:	e005      	b.n	80073a6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4a21      	ldr	r2, [pc, #132]	; (8007424 <HAL_SPI_TransmitReceive_IT+0x154>)
 800739e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a21      	ldr	r2, [pc, #132]	; (8007428 <HAL_SPI_TransmitReceive_IT+0x158>)
 80073a4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073ae:	d802      	bhi.n	80073b6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80073b0:	887b      	ldrh	r3, [r7, #2]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d908      	bls.n	80073c8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	e007      	b.n	80073d8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073d6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d007      	beq.n	80073f6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800740c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007410:	4618      	mov	r0, r3
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	080077cf 	.word	0x080077cf
 8007420:	08007835 	.word	0x08007835
 8007424:	0800767f 	.word	0x0800767f
 8007428:	0800773d 	.word	0x0800773d

0800742c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	099b      	lsrs	r3, r3, #6
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10f      	bne.n	8007470 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	099b      	lsrs	r3, r3, #6
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
    return;
 800746e:	e0d7      	b.n	8007620 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <HAL_SPI_IRQHandler+0x66>
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	09db      	lsrs	r3, r3, #7
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d004      	beq.n	8007492 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
    return;
 8007490:	e0c6      	b.n	8007620 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	095b      	lsrs	r3, r3, #5
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10c      	bne.n	80074b8 <HAL_SPI_IRQHandler+0x8c>
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	099b      	lsrs	r3, r3, #6
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d106      	bne.n	80074b8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	0a1b      	lsrs	r3, r3, #8
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80b4 	beq.w	8007620 <HAL_SPI_IRQHandler+0x1f4>
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	095b      	lsrs	r3, r3, #5
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 80ad 	beq.w	8007620 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	099b      	lsrs	r3, r3, #6
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d023      	beq.n	800751a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d011      	beq.n	8007502 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e2:	f043 0204 	orr.w	r2, r3, #4
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	e00b      	b.n	800751a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007502:	2300      	movs	r3, #0
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	693b      	ldr	r3, [r7, #16]
        return;
 8007518:	e082      	b.n	8007620 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d014      	beq.n	8007550 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752a:	f043 0201 	orr.w	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00c      	beq.n	8007576 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007560:	f043 0208 	orr.w	r2, r3, #8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007568:	2300      	movs	r3, #0
 800756a:	60bb      	str	r3, [r7, #8]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	60bb      	str	r3, [r7, #8]
 8007574:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757a:	2b00      	cmp	r3, #0
 800757c:	d04f      	beq.n	800761e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800758c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <HAL_SPI_IRQHandler+0x17e>
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d034      	beq.n	8007614 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0203 	bic.w	r2, r2, #3
 80075b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d011      	beq.n	80075e6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c6:	4a18      	ldr	r2, [pc, #96]	; (8007628 <HAL_SPI_IRQHandler+0x1fc>)
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fb ffb7 	bl	8003542 <HAL_DMA_Abort_IT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d016      	beq.n	800761c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	4a0d      	ldr	r2, [pc, #52]	; (8007628 <HAL_SPI_IRQHandler+0x1fc>)
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fb ffa1 	bl	8003542 <HAL_DMA_Abort_IT>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800760a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007612:	e003      	b.n	800761c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f813 	bl	8007640 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800761a:	e000      	b.n	800761e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800761c:	bf00      	nop
    return;
 800761e:	bf00      	nop
  }
}
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	08007655 	.word	0x08007655

0800762c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7ff ffe5 	bl	8007640 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007676:	bf00      	nop
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b01      	cmp	r3, #1
 8007690:	d923      	bls.n	80076da <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	b292      	uxth	r2, r2
 800769e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	1c9a      	adds	r2, r3, #2
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b02      	subs	r3, #2
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d11f      	bne.n	8007708 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076d6:	605a      	str	r2, [r3, #4]
 80076d8:	e016      	b.n	8007708 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f103 020c 	add.w	r2, r3, #12
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10f      	bne.n	8007734 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007722:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 faba 	bl	8007ca8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b01      	cmp	r3, #1
 800774c:	d912      	bls.n	8007774 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	881a      	ldrh	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	1c9a      	adds	r2, r3, #2
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b02      	subs	r3, #2
 800776c:	b29a      	uxth	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007772:	e012      	b.n	800779a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	330c      	adds	r3, #12
 800777e:	7812      	ldrb	r2, [r2, #0]
 8007780:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d110      	bne.n	80077c6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077b2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa71 	bl	8007ca8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e0:	b292      	uxth	r2, r2
 80077e2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e8:	1c9a      	adds	r2, r3, #2
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007806:	b29b      	uxth	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10f      	bne.n	800782c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800781a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d102      	bne.n	800782c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa3e 	bl	8007ca8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	881a      	ldrh	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	1c9a      	adds	r2, r3, #2
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d110      	bne.n	800788c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007878:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa0e 	bl	8007ca8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f103 020c 	add.w	r2, r3, #12
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fa28 	bl	8007d2c <SPI_CloseRx_ISR>
  }
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	b292      	uxth	r2, r2
 80078f8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	1c9a      	adds	r2, r3, #2
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d102      	bne.n	8007928 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fa02 	bl	8007d2c <SPI_CloseRx_ISR>
  }
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	4613      	mov	r3, r2
 800793e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007940:	f7fb fcbe 	bl	80032c0 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	1a9b      	subs	r3, r3, r2
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	4413      	add	r3, r2
 800794e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007950:	f7fb fcb6 	bl	80032c0 <HAL_GetTick>
 8007954:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007956:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	015b      	lsls	r3, r3, #5
 800795c:	0d1b      	lsrs	r3, r3, #20
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	fb02 f303 	mul.w	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007966:	e054      	b.n	8007a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d050      	beq.n	8007a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007970:	f7fb fca6 	bl	80032c0 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	429a      	cmp	r2, r3
 800797e:	d902      	bls.n	8007986 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d13d      	bne.n	8007a02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007994:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800799e:	d111      	bne.n	80079c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a8:	d004      	beq.n	80079b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b2:	d107      	bne.n	80079c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079cc:	d10f      	bne.n	80079ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e017      	b.n	8007a32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	bf0c      	ite	eq
 8007a22:	2301      	moveq	r3, #1
 8007a24:	2300      	movne	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d19b      	bne.n	8007968 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000024 	.word	0x20000024

08007a40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08a      	sub	sp, #40	; 0x28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a52:	f7fb fc35 	bl	80032c0 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	1a9b      	subs	r3, r3, r2
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	4413      	add	r3, r2
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a62:	f7fb fc2d 	bl	80032c0 <HAL_GetTick>
 8007a66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a70:	4b3d      	ldr	r3, [pc, #244]	; (8007b68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	00da      	lsls	r2, r3, #3
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	0d1b      	lsrs	r3, r3, #20
 8007a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a88:	e060      	b.n	8007b4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a90:	d107      	bne.n	8007aa2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d104      	bne.n	8007aa2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa8:	d050      	beq.n	8007b4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007aaa:	f7fb fc09 	bl	80032c0 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d902      	bls.n	8007ac0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d13d      	bne.n	8007b3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ace:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ad8:	d111      	bne.n	8007afe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae2:	d004      	beq.n	8007aee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aec:	d107      	bne.n	8007afe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007afc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b06:	d10f      	bne.n	8007b28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e010      	b.n	8007b5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	4013      	ands	r3, r2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d196      	bne.n	8007a8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000024 	.word	0x20000024

08007b6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b80:	d111      	bne.n	8007ba6 <SPI_EndRxTransaction+0x3a>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8a:	d004      	beq.n	8007b96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b94:	d107      	bne.n	8007ba6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	2180      	movs	r1, #128	; 0x80
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f7ff febd 	bl	8007930 <SPI_WaitFlagStateUntilTimeout>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc0:	f043 0220 	orr.w	r2, r3, #32
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e023      	b.n	8007c14 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bd4:	d11d      	bne.n	8007c12 <SPI_EndRxTransaction+0xa6>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bde:	d004      	beq.n	8007bea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be8:	d113      	bne.n	8007c12 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff ff22 	bl	8007a40 <SPI_WaitFifoStateUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e000      	b.n	8007c14 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff ff03 	bl	8007a40 <SPI_WaitFifoStateUntilTimeout>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d007      	beq.n	8007c50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c44:	f043 0220 	orr.w	r2, r3, #32
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e027      	b.n	8007ca0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	2180      	movs	r1, #128	; 0x80
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff fe68 	bl	8007930 <SPI_WaitFlagStateUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6a:	f043 0220 	orr.w	r2, r3, #32
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e014      	b.n	8007ca0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff fedc 	bl	8007a40 <SPI_WaitFifoStateUntilTimeout>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c92:	f043 0220 	orr.w	r2, r3, #32
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e000      	b.n	8007ca0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cb0:	f7fb fb06 	bl	80032c0 <HAL_GetTick>
 8007cb4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0220 	bic.w	r2, r2, #32
 8007cc4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	2164      	movs	r1, #100	; 0x64
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff ffa6 	bl	8007c1c <SPI_EndRxTxTransaction>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cda:	f043 0220 	orr.w	r2, r3, #32
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d115      	bne.n	8007d16 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d107      	bne.n	8007d06 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7f9 fcda 	bl	80016b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d04:	e00e      	b.n	8007d24 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff fc8c 	bl	800762c <HAL_SPI_TxRxCpltCallback>
}
 8007d14:	e006      	b.n	8007d24 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff fc8e 	bl	8007640 <HAL_SPI_ErrorCallback>
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d42:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007d44:	f7fb fabc 	bl	80032c0 <HAL_GetTick>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	2164      	movs	r1, #100	; 0x64
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff ff0c 	bl	8007b6c <SPI_EndRxTransaction>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d005      	beq.n	8007d66 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5e:	f043 0220 	orr.w	r2, r3, #32
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d103      	bne.n	8007d7e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7f9 fc9e 	bl	80016b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d7c:	e002      	b.n	8007d84 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff fc5e 	bl	8007640 <HAL_SPI_ErrorCallback>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e042      	b.n	8007e24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7fb f949 	bl	8003048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2224      	movs	r2, #36	; 0x24
 8007dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0201 	bic.w	r2, r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fbb4 	bl	8008544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f8b5 	bl	8007f4c <UART_SetConfig>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d101      	bne.n	8007dec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e01b      	b.n	8007e24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fc33 	bl	8008688 <UART_CheckIdleState>
 8007e22:	4603      	mov	r3, r0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e42:	2b20      	cmp	r3, #32
 8007e44:	d17c      	bne.n	8007f40 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_UART_Transmit+0x26>
 8007e4c:	88fb      	ldrh	r3, [r7, #6]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e075      	b.n	8007f42 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2221      	movs	r2, #33	; 0x21
 8007e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e66:	f7fb fa2b 	bl	80032c0 <HAL_GetTick>
 8007e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	88fa      	ldrh	r2, [r7, #6]
 8007e70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	88fa      	ldrh	r2, [r7, #6]
 8007e78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e84:	d108      	bne.n	8007e98 <HAL_UART_Transmit+0x6c>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	e003      	b.n	8007ea0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ea0:	e031      	b.n	8007f06 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2180      	movs	r1, #128	; 0x80
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 fc95 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e03e      	b.n	8007f42 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	881a      	ldrh	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed6:	b292      	uxth	r2, r2
 8007ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	3302      	adds	r3, #2
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	e008      	b.n	8007ef4 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	b292      	uxth	r2, r2
 8007eec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1c7      	bne.n	8007ea2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2140      	movs	r1, #64	; 0x40
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fc5d 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e006      	b.n	8007f42 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e000      	b.n	8007f42 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007f40:	2302      	movs	r3, #2
  }
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3720      	adds	r7, #32
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f50:	b08c      	sub	sp, #48	; 0x30
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	431a      	orrs	r2, r3
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4baa      	ldr	r3, [pc, #680]	; (8008224 <UART_SetConfig+0x2d8>)
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	6812      	ldr	r2, [r2, #0]
 8007f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f84:	430b      	orrs	r3, r1
 8007f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a9f      	ldr	r2, [pc, #636]	; (8008228 <UART_SetConfig+0x2dc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d004      	beq.n	8007fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007fc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	f023 010f 	bic.w	r1, r3, #15
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a90      	ldr	r2, [pc, #576]	; (800822c <UART_SetConfig+0x2e0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d125      	bne.n	800803c <UART_SetConfig+0xf0>
 8007ff0:	4b8f      	ldr	r3, [pc, #572]	; (8008230 <UART_SetConfig+0x2e4>)
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d81a      	bhi.n	8008034 <UART_SetConfig+0xe8>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0xb8>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008015 	.word	0x08008015
 8008008:	08008025 	.word	0x08008025
 800800c:	0800801d 	.word	0x0800801d
 8008010:	0800802d 	.word	0x0800802d
 8008014:	2301      	movs	r3, #1
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801a:	e116      	b.n	800824a <UART_SetConfig+0x2fe>
 800801c:	2302      	movs	r3, #2
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008022:	e112      	b.n	800824a <UART_SetConfig+0x2fe>
 8008024:	2304      	movs	r3, #4
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802a:	e10e      	b.n	800824a <UART_SetConfig+0x2fe>
 800802c:	2308      	movs	r3, #8
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008032:	e10a      	b.n	800824a <UART_SetConfig+0x2fe>
 8008034:	2310      	movs	r3, #16
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800803a:	e106      	b.n	800824a <UART_SetConfig+0x2fe>
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a7c      	ldr	r2, [pc, #496]	; (8008234 <UART_SetConfig+0x2e8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d138      	bne.n	80080b8 <UART_SetConfig+0x16c>
 8008046:	4b7a      	ldr	r3, [pc, #488]	; (8008230 <UART_SetConfig+0x2e4>)
 8008048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804c:	f003 030c 	and.w	r3, r3, #12
 8008050:	2b0c      	cmp	r3, #12
 8008052:	d82d      	bhi.n	80080b0 <UART_SetConfig+0x164>
 8008054:	a201      	add	r2, pc, #4	; (adr r2, 800805c <UART_SetConfig+0x110>)
 8008056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805a:	bf00      	nop
 800805c:	08008091 	.word	0x08008091
 8008060:	080080b1 	.word	0x080080b1
 8008064:	080080b1 	.word	0x080080b1
 8008068:	080080b1 	.word	0x080080b1
 800806c:	080080a1 	.word	0x080080a1
 8008070:	080080b1 	.word	0x080080b1
 8008074:	080080b1 	.word	0x080080b1
 8008078:	080080b1 	.word	0x080080b1
 800807c:	08008099 	.word	0x08008099
 8008080:	080080b1 	.word	0x080080b1
 8008084:	080080b1 	.word	0x080080b1
 8008088:	080080b1 	.word	0x080080b1
 800808c:	080080a9 	.word	0x080080a9
 8008090:	2300      	movs	r3, #0
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008096:	e0d8      	b.n	800824a <UART_SetConfig+0x2fe>
 8008098:	2302      	movs	r3, #2
 800809a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800809e:	e0d4      	b.n	800824a <UART_SetConfig+0x2fe>
 80080a0:	2304      	movs	r3, #4
 80080a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080a6:	e0d0      	b.n	800824a <UART_SetConfig+0x2fe>
 80080a8:	2308      	movs	r3, #8
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ae:	e0cc      	b.n	800824a <UART_SetConfig+0x2fe>
 80080b0:	2310      	movs	r3, #16
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b6:	e0c8      	b.n	800824a <UART_SetConfig+0x2fe>
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a5e      	ldr	r2, [pc, #376]	; (8008238 <UART_SetConfig+0x2ec>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d125      	bne.n	800810e <UART_SetConfig+0x1c2>
 80080c2:	4b5b      	ldr	r3, [pc, #364]	; (8008230 <UART_SetConfig+0x2e4>)
 80080c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080cc:	2b30      	cmp	r3, #48	; 0x30
 80080ce:	d016      	beq.n	80080fe <UART_SetConfig+0x1b2>
 80080d0:	2b30      	cmp	r3, #48	; 0x30
 80080d2:	d818      	bhi.n	8008106 <UART_SetConfig+0x1ba>
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d00a      	beq.n	80080ee <UART_SetConfig+0x1a2>
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d814      	bhi.n	8008106 <UART_SetConfig+0x1ba>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <UART_SetConfig+0x19a>
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d008      	beq.n	80080f6 <UART_SetConfig+0x1aa>
 80080e4:	e00f      	b.n	8008106 <UART_SetConfig+0x1ba>
 80080e6:	2300      	movs	r3, #0
 80080e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ec:	e0ad      	b.n	800824a <UART_SetConfig+0x2fe>
 80080ee:	2302      	movs	r3, #2
 80080f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080f4:	e0a9      	b.n	800824a <UART_SetConfig+0x2fe>
 80080f6:	2304      	movs	r3, #4
 80080f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080fc:	e0a5      	b.n	800824a <UART_SetConfig+0x2fe>
 80080fe:	2308      	movs	r3, #8
 8008100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008104:	e0a1      	b.n	800824a <UART_SetConfig+0x2fe>
 8008106:	2310      	movs	r3, #16
 8008108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810c:	e09d      	b.n	800824a <UART_SetConfig+0x2fe>
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a4a      	ldr	r2, [pc, #296]	; (800823c <UART_SetConfig+0x2f0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d125      	bne.n	8008164 <UART_SetConfig+0x218>
 8008118:	4b45      	ldr	r3, [pc, #276]	; (8008230 <UART_SetConfig+0x2e4>)
 800811a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008122:	2bc0      	cmp	r3, #192	; 0xc0
 8008124:	d016      	beq.n	8008154 <UART_SetConfig+0x208>
 8008126:	2bc0      	cmp	r3, #192	; 0xc0
 8008128:	d818      	bhi.n	800815c <UART_SetConfig+0x210>
 800812a:	2b80      	cmp	r3, #128	; 0x80
 800812c:	d00a      	beq.n	8008144 <UART_SetConfig+0x1f8>
 800812e:	2b80      	cmp	r3, #128	; 0x80
 8008130:	d814      	bhi.n	800815c <UART_SetConfig+0x210>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <UART_SetConfig+0x1f0>
 8008136:	2b40      	cmp	r3, #64	; 0x40
 8008138:	d008      	beq.n	800814c <UART_SetConfig+0x200>
 800813a:	e00f      	b.n	800815c <UART_SetConfig+0x210>
 800813c:	2300      	movs	r3, #0
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008142:	e082      	b.n	800824a <UART_SetConfig+0x2fe>
 8008144:	2302      	movs	r3, #2
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814a:	e07e      	b.n	800824a <UART_SetConfig+0x2fe>
 800814c:	2304      	movs	r3, #4
 800814e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008152:	e07a      	b.n	800824a <UART_SetConfig+0x2fe>
 8008154:	2308      	movs	r3, #8
 8008156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800815a:	e076      	b.n	800824a <UART_SetConfig+0x2fe>
 800815c:	2310      	movs	r3, #16
 800815e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008162:	e072      	b.n	800824a <UART_SetConfig+0x2fe>
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a35      	ldr	r2, [pc, #212]	; (8008240 <UART_SetConfig+0x2f4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d12a      	bne.n	80081c4 <UART_SetConfig+0x278>
 800816e:	4b30      	ldr	r3, [pc, #192]	; (8008230 <UART_SetConfig+0x2e4>)
 8008170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800817c:	d01a      	beq.n	80081b4 <UART_SetConfig+0x268>
 800817e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008182:	d81b      	bhi.n	80081bc <UART_SetConfig+0x270>
 8008184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008188:	d00c      	beq.n	80081a4 <UART_SetConfig+0x258>
 800818a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800818e:	d815      	bhi.n	80081bc <UART_SetConfig+0x270>
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <UART_SetConfig+0x250>
 8008194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008198:	d008      	beq.n	80081ac <UART_SetConfig+0x260>
 800819a:	e00f      	b.n	80081bc <UART_SetConfig+0x270>
 800819c:	2300      	movs	r3, #0
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a2:	e052      	b.n	800824a <UART_SetConfig+0x2fe>
 80081a4:	2302      	movs	r3, #2
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081aa:	e04e      	b.n	800824a <UART_SetConfig+0x2fe>
 80081ac:	2304      	movs	r3, #4
 80081ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b2:	e04a      	b.n	800824a <UART_SetConfig+0x2fe>
 80081b4:	2308      	movs	r3, #8
 80081b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ba:	e046      	b.n	800824a <UART_SetConfig+0x2fe>
 80081bc:	2310      	movs	r3, #16
 80081be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081c2:	e042      	b.n	800824a <UART_SetConfig+0x2fe>
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a17      	ldr	r2, [pc, #92]	; (8008228 <UART_SetConfig+0x2dc>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d13a      	bne.n	8008244 <UART_SetConfig+0x2f8>
 80081ce:	4b18      	ldr	r3, [pc, #96]	; (8008230 <UART_SetConfig+0x2e4>)
 80081d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081dc:	d01a      	beq.n	8008214 <UART_SetConfig+0x2c8>
 80081de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e2:	d81b      	bhi.n	800821c <UART_SetConfig+0x2d0>
 80081e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e8:	d00c      	beq.n	8008204 <UART_SetConfig+0x2b8>
 80081ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ee:	d815      	bhi.n	800821c <UART_SetConfig+0x2d0>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <UART_SetConfig+0x2b0>
 80081f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f8:	d008      	beq.n	800820c <UART_SetConfig+0x2c0>
 80081fa:	e00f      	b.n	800821c <UART_SetConfig+0x2d0>
 80081fc:	2300      	movs	r3, #0
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008202:	e022      	b.n	800824a <UART_SetConfig+0x2fe>
 8008204:	2302      	movs	r3, #2
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820a:	e01e      	b.n	800824a <UART_SetConfig+0x2fe>
 800820c:	2304      	movs	r3, #4
 800820e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008212:	e01a      	b.n	800824a <UART_SetConfig+0x2fe>
 8008214:	2308      	movs	r3, #8
 8008216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800821a:	e016      	b.n	800824a <UART_SetConfig+0x2fe>
 800821c:	2310      	movs	r3, #16
 800821e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008222:	e012      	b.n	800824a <UART_SetConfig+0x2fe>
 8008224:	cfff69f3 	.word	0xcfff69f3
 8008228:	40008000 	.word	0x40008000
 800822c:	40013800 	.word	0x40013800
 8008230:	40021000 	.word	0x40021000
 8008234:	40004400 	.word	0x40004400
 8008238:	40004800 	.word	0x40004800
 800823c:	40004c00 	.word	0x40004c00
 8008240:	40005000 	.word	0x40005000
 8008244:	2310      	movs	r3, #16
 8008246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4aae      	ldr	r2, [pc, #696]	; (8008508 <UART_SetConfig+0x5bc>)
 8008250:	4293      	cmp	r3, r2
 8008252:	f040 8097 	bne.w	8008384 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008256:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800825a:	2b08      	cmp	r3, #8
 800825c:	d823      	bhi.n	80082a6 <UART_SetConfig+0x35a>
 800825e:	a201      	add	r2, pc, #4	; (adr r2, 8008264 <UART_SetConfig+0x318>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	08008289 	.word	0x08008289
 8008268:	080082a7 	.word	0x080082a7
 800826c:	08008291 	.word	0x08008291
 8008270:	080082a7 	.word	0x080082a7
 8008274:	08008297 	.word	0x08008297
 8008278:	080082a7 	.word	0x080082a7
 800827c:	080082a7 	.word	0x080082a7
 8008280:	080082a7 	.word	0x080082a7
 8008284:	0800829f 	.word	0x0800829f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008288:	f7fd fb9e 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 800828c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800828e:	e010      	b.n	80082b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008290:	4b9e      	ldr	r3, [pc, #632]	; (800850c <UART_SetConfig+0x5c0>)
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008294:	e00d      	b.n	80082b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008296:	f7fd faff 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800829c:	e009      	b.n	80082b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082a4:	e005      	b.n	80082b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8130 	beq.w	800851a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	4a94      	ldr	r2, [pc, #592]	; (8008510 <UART_SetConfig+0x5c4>)
 80082c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c4:	461a      	mov	r2, r3
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	4613      	mov	r3, r2
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	4413      	add	r3, r2
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d305      	bcc.n	80082ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d903      	bls.n	80082f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082f0:	e113      	b.n	800851a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	2200      	movs	r2, #0
 80082f6:	60bb      	str	r3, [r7, #8]
 80082f8:	60fa      	str	r2, [r7, #12]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	4a84      	ldr	r2, [pc, #528]	; (8008510 <UART_SetConfig+0x5c4>)
 8008300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008304:	b29b      	uxth	r3, r3
 8008306:	2200      	movs	r2, #0
 8008308:	603b      	str	r3, [r7, #0]
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008310:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008314:	f7f7 ff72 	bl	80001fc <__aeabi_uldivmod>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4610      	mov	r0, r2
 800831e:	4619      	mov	r1, r3
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	020b      	lsls	r3, r1, #8
 800832a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800832e:	0202      	lsls	r2, r0, #8
 8008330:	6979      	ldr	r1, [r7, #20]
 8008332:	6849      	ldr	r1, [r1, #4]
 8008334:	0849      	lsrs	r1, r1, #1
 8008336:	2000      	movs	r0, #0
 8008338:	460c      	mov	r4, r1
 800833a:	4605      	mov	r5, r0
 800833c:	eb12 0804 	adds.w	r8, r2, r4
 8008340:	eb43 0905 	adc.w	r9, r3, r5
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	469a      	mov	sl, r3
 800834c:	4693      	mov	fp, r2
 800834e:	4652      	mov	r2, sl
 8008350:	465b      	mov	r3, fp
 8008352:	4640      	mov	r0, r8
 8008354:	4649      	mov	r1, r9
 8008356:	f7f7 ff51 	bl	80001fc <__aeabi_uldivmod>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4613      	mov	r3, r2
 8008360:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008368:	d308      	bcc.n	800837c <UART_SetConfig+0x430>
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008370:	d204      	bcs.n	800837c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6a3a      	ldr	r2, [r7, #32]
 8008378:	60da      	str	r2, [r3, #12]
 800837a:	e0ce      	b.n	800851a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008382:	e0ca      	b.n	800851a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800838c:	d166      	bne.n	800845c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800838e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008392:	2b08      	cmp	r3, #8
 8008394:	d827      	bhi.n	80083e6 <UART_SetConfig+0x49a>
 8008396:	a201      	add	r2, pc, #4	; (adr r2, 800839c <UART_SetConfig+0x450>)
 8008398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839c:	080083c1 	.word	0x080083c1
 80083a0:	080083c9 	.word	0x080083c9
 80083a4:	080083d1 	.word	0x080083d1
 80083a8:	080083e7 	.word	0x080083e7
 80083ac:	080083d7 	.word	0x080083d7
 80083b0:	080083e7 	.word	0x080083e7
 80083b4:	080083e7 	.word	0x080083e7
 80083b8:	080083e7 	.word	0x080083e7
 80083bc:	080083df 	.word	0x080083df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c0:	f7fd fb02 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 80083c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083c6:	e014      	b.n	80083f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083c8:	f7fd fb14 	bl	80059f4 <HAL_RCC_GetPCLK2Freq>
 80083cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ce:	e010      	b.n	80083f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083d0:	4b4e      	ldr	r3, [pc, #312]	; (800850c <UART_SetConfig+0x5c0>)
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083d4:	e00d      	b.n	80083f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083d6:	f7fd fa5f 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 80083da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083dc:	e009      	b.n	80083f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083e4:	e005      	b.n	80083f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80083e6:	2300      	movs	r3, #0
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 8090 	beq.w	800851a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	4a44      	ldr	r2, [pc, #272]	; (8008510 <UART_SetConfig+0x5c4>)
 8008400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008404:	461a      	mov	r2, r3
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	fbb3 f3f2 	udiv	r3, r3, r2
 800840c:	005a      	lsls	r2, r3, #1
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	085b      	lsrs	r3, r3, #1
 8008414:	441a      	add	r2, r3
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	fbb2 f3f3 	udiv	r3, r2, r3
 800841e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	2b0f      	cmp	r3, #15
 8008424:	d916      	bls.n	8008454 <UART_SetConfig+0x508>
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842c:	d212      	bcs.n	8008454 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	b29b      	uxth	r3, r3
 8008432:	f023 030f 	bic.w	r3, r3, #15
 8008436:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	085b      	lsrs	r3, r3, #1
 800843c:	b29b      	uxth	r3, r3
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	b29a      	uxth	r2, r3
 8008444:	8bfb      	ldrh	r3, [r7, #30]
 8008446:	4313      	orrs	r3, r2
 8008448:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	8bfa      	ldrh	r2, [r7, #30]
 8008450:	60da      	str	r2, [r3, #12]
 8008452:	e062      	b.n	800851a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800845a:	e05e      	b.n	800851a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800845c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008460:	2b08      	cmp	r3, #8
 8008462:	d828      	bhi.n	80084b6 <UART_SetConfig+0x56a>
 8008464:	a201      	add	r2, pc, #4	; (adr r2, 800846c <UART_SetConfig+0x520>)
 8008466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846a:	bf00      	nop
 800846c:	08008491 	.word	0x08008491
 8008470:	08008499 	.word	0x08008499
 8008474:	080084a1 	.word	0x080084a1
 8008478:	080084b7 	.word	0x080084b7
 800847c:	080084a7 	.word	0x080084a7
 8008480:	080084b7 	.word	0x080084b7
 8008484:	080084b7 	.word	0x080084b7
 8008488:	080084b7 	.word	0x080084b7
 800848c:	080084af 	.word	0x080084af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008490:	f7fd fa9a 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 8008494:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008496:	e014      	b.n	80084c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008498:	f7fd faac 	bl	80059f4 <HAL_RCC_GetPCLK2Freq>
 800849c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800849e:	e010      	b.n	80084c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084a0:	4b1a      	ldr	r3, [pc, #104]	; (800850c <UART_SetConfig+0x5c0>)
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084a4:	e00d      	b.n	80084c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084a6:	f7fd f9f7 	bl	8005898 <HAL_RCC_GetSysClockFreq>
 80084aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ac:	e009      	b.n	80084c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084b4:	e005      	b.n	80084c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084c0:	bf00      	nop
    }

    if (pclk != 0U)
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d028      	beq.n	800851a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	4a10      	ldr	r2, [pc, #64]	; (8008510 <UART_SetConfig+0x5c4>)
 80084ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d2:	461a      	mov	r2, r3
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	085b      	lsrs	r3, r3, #1
 80084e0:	441a      	add	r2, r3
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	2b0f      	cmp	r3, #15
 80084f0:	d910      	bls.n	8008514 <UART_SetConfig+0x5c8>
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f8:	d20c      	bcs.n	8008514 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60da      	str	r2, [r3, #12]
 8008504:	e009      	b.n	800851a <UART_SetConfig+0x5ce>
 8008506:	bf00      	nop
 8008508:	40008000 	.word	0x40008000
 800850c:	00f42400 	.word	0x00f42400
 8008510:	08008cb4 	.word	0x08008cb4
      }
      else
      {
        ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2201      	movs	r2, #1
 800851e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2201      	movs	r2, #1
 8008526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2200      	movs	r2, #0
 800852e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2200      	movs	r2, #0
 8008534:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008536:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800853a:	4618      	mov	r0, r3
 800853c:	3730      	adds	r7, #48	; 0x30
 800853e:	46bd      	mov	sp, r7
 8008540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008550:	f003 0308 	and.w	r3, r3, #8
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00a      	beq.n	800856e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d01a      	beq.n	800865a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008642:	d10a      	bne.n	800865a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	605a      	str	r2, [r3, #4]
  }
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b098      	sub	sp, #96	; 0x60
 800868c:	af02      	add	r7, sp, #8
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008698:	f7fa fe12 	bl	80032c0 <HAL_GetTick>
 800869c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0308 	and.w	r3, r3, #8
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d12f      	bne.n	800870c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086b4:	2200      	movs	r2, #0
 80086b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f88e 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d022      	beq.n	800870c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086da:	653b      	str	r3, [r7, #80]	; 0x50
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	461a      	mov	r2, r3
 80086e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e4:	647b      	str	r3, [r7, #68]	; 0x44
 80086e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e6      	bne.n	80086c6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e063      	b.n	80087d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b04      	cmp	r3, #4
 8008718:	d149      	bne.n	80087ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800871a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008722:	2200      	movs	r2, #0
 8008724:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f857 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d03c      	beq.n	80087ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	623b      	str	r3, [r7, #32]
   return(result);
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008752:	633b      	str	r3, [r7, #48]	; 0x30
 8008754:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e6      	bne.n	8008734 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	60fb      	str	r3, [r7, #12]
   return(result);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	64bb      	str	r3, [r7, #72]	; 0x48
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008786:	61fa      	str	r2, [r7, #28]
 8008788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	69b9      	ldr	r1, [r7, #24]
 800878c:	69fa      	ldr	r2, [r7, #28]
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	617b      	str	r3, [r7, #20]
   return(result);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e5      	bne.n	8008766 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e012      	b.n	80087d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3758      	adds	r7, #88	; 0x58
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	4613      	mov	r3, r2
 80087ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ec:	e049      	b.n	8008882 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f4:	d045      	beq.n	8008882 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f6:	f7fa fd63 	bl	80032c0 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	69ba      	ldr	r2, [r7, #24]
 8008802:	429a      	cmp	r2, r3
 8008804:	d302      	bcc.n	800880c <UART_WaitOnFlagUntilTimeout+0x30>
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e048      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b00      	cmp	r3, #0
 800881c:	d031      	beq.n	8008882 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b08      	cmp	r3, #8
 800882a:	d110      	bne.n	800884e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2208      	movs	r2, #8
 8008832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 f838 	bl	80088aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2208      	movs	r2, #8
 800883e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e029      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800885c:	d111      	bne.n	8008882 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f81e 	bl	80088aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e00f      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69da      	ldr	r2, [r3, #28]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4013      	ands	r3, r2
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	429a      	cmp	r2, r3
 8008890:	bf0c      	ite	eq
 8008892:	2301      	moveq	r3, #1
 8008894:	2300      	movne	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	429a      	cmp	r2, r3
 800889e:	d0a6      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b095      	sub	sp, #84	; 0x54
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d0:	643b      	str	r3, [r7, #64]	; 0x40
 80088d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e6      	bne.n	80088b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3308      	adds	r3, #8
 80088ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088fa:	f023 0301 	bic.w	r3, r3, #1
 80088fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3308      	adds	r3, #8
 8008906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800890a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800890e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e3      	bne.n	80088e4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008920:	2b01      	cmp	r3, #1
 8008922:	d118      	bne.n	8008956 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	60bb      	str	r3, [r7, #8]
   return(result);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f023 0310 	bic.w	r3, r3, #16
 8008938:	647b      	str	r3, [r7, #68]	; 0x44
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6979      	ldr	r1, [r7, #20]
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	613b      	str	r3, [r7, #16]
   return(result);
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e6      	bne.n	8008924 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	675a      	str	r2, [r3, #116]	; 0x74
}
 800896a:	bf00      	nop
 800896c:	3754      	adds	r7, #84	; 0x54
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_UARTEx_DisableFifoMode+0x16>
 8008988:	2302      	movs	r3, #2
 800898a:	e027      	b.n	80089dc <HAL_UARTEx_DisableFifoMode+0x66>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2224      	movs	r2, #36	; 0x24
 8008998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0201 	bic.w	r2, r2, #1
 80089b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d101      	bne.n	8008a00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089fc:	2302      	movs	r3, #2
 80089fe:	e02d      	b.n	8008a5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2224      	movs	r2, #36	; 0x24
 8008a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0201 	bic.w	r2, r2, #1
 8008a26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f84f 	bl	8008ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e02d      	b.n	8008ad8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2224      	movs	r2, #36	; 0x24
 8008a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f811 	bl	8008ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d108      	bne.n	8008b02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b00:	e031      	b.n	8008b66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b02:	2308      	movs	r3, #8
 8008b04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b06:	2308      	movs	r3, #8
 8008b08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	0e5b      	lsrs	r3, r3, #25
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	0f5b      	lsrs	r3, r3, #29
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f003 0307 	and.w	r3, r3, #7
 8008b28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	7b3a      	ldrb	r2, [r7, #12]
 8008b2e:	4911      	ldr	r1, [pc, #68]	; (8008b74 <UARTEx_SetNbDataToProcess+0x94>)
 8008b30:	5c8a      	ldrb	r2, [r1, r2]
 8008b32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b36:	7b3a      	ldrb	r2, [r7, #12]
 8008b38:	490f      	ldr	r1, [pc, #60]	; (8008b78 <UARTEx_SetNbDataToProcess+0x98>)
 8008b3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	7b7a      	ldrb	r2, [r7, #13]
 8008b4c:	4909      	ldr	r1, [pc, #36]	; (8008b74 <UARTEx_SetNbDataToProcess+0x94>)
 8008b4e:	5c8a      	ldrb	r2, [r1, r2]
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b54:	7b7a      	ldrb	r2, [r7, #13]
 8008b56:	4908      	ldr	r1, [pc, #32]	; (8008b78 <UARTEx_SetNbDataToProcess+0x98>)
 8008b58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	08008ccc 	.word	0x08008ccc
 8008b78:	08008cd4 	.word	0x08008cd4

08008b7c <__libc_init_array>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	4d0d      	ldr	r5, [pc, #52]	; (8008bb4 <__libc_init_array+0x38>)
 8008b80:	4c0d      	ldr	r4, [pc, #52]	; (8008bb8 <__libc_init_array+0x3c>)
 8008b82:	1b64      	subs	r4, r4, r5
 8008b84:	10a4      	asrs	r4, r4, #2
 8008b86:	2600      	movs	r6, #0
 8008b88:	42a6      	cmp	r6, r4
 8008b8a:	d109      	bne.n	8008ba0 <__libc_init_array+0x24>
 8008b8c:	4d0b      	ldr	r5, [pc, #44]	; (8008bbc <__libc_init_array+0x40>)
 8008b8e:	4c0c      	ldr	r4, [pc, #48]	; (8008bc0 <__libc_init_array+0x44>)
 8008b90:	f000 f820 	bl	8008bd4 <_init>
 8008b94:	1b64      	subs	r4, r4, r5
 8008b96:	10a4      	asrs	r4, r4, #2
 8008b98:	2600      	movs	r6, #0
 8008b9a:	42a6      	cmp	r6, r4
 8008b9c:	d105      	bne.n	8008baa <__libc_init_array+0x2e>
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba4:	4798      	blx	r3
 8008ba6:	3601      	adds	r6, #1
 8008ba8:	e7ee      	b.n	8008b88 <__libc_init_array+0xc>
 8008baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bae:	4798      	blx	r3
 8008bb0:	3601      	adds	r6, #1
 8008bb2:	e7f2      	b.n	8008b9a <__libc_init_array+0x1e>
 8008bb4:	08008ce4 	.word	0x08008ce4
 8008bb8:	08008ce4 	.word	0x08008ce4
 8008bbc:	08008ce4 	.word	0x08008ce4
 8008bc0:	08008ce8 	.word	0x08008ce8

08008bc4 <memset>:
 8008bc4:	4402      	add	r2, r0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d100      	bne.n	8008bce <memset+0xa>
 8008bcc:	4770      	bx	lr
 8008bce:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd2:	e7f9      	b.n	8008bc8 <memset+0x4>

08008bd4 <_init>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr

08008be0 <_fini>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	bf00      	nop
 8008be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be6:	bc08      	pop	{r3}
 8008be8:	469e      	mov	lr, r3
 8008bea:	4770      	bx	lr
