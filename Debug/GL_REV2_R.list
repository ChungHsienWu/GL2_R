
GL_REV2_R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008250  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084fc  080084fc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008504  08008504  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800850c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00070254  2000002c  08008538  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20070280  08008538  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151c7  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002576  00000000  00000000  00035223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  000377a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00038780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030111  00000000  00000000  000396a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001446d  00000000  00000000  000697b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00122319  00000000  00000000  0007dc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ff37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  0019ff88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000002c 	.word	0x2000002c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080083f4 	.word	0x080083f4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000030 	.word	0x20000030
 80001f8:	080083f4 	.word	0x080083f4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f002 fa82 	bl	8002a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f97d 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fbf7 	bl	8000d00 <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 8000512:	f000 f9c7 	bl	80008a4 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000516:	f000 fab1 	bl	8000a7c <MX_LTDC_Init>
  MX_SPI2_Init();
 800051a:	f000 fb2f 	bl	8000b7c <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fb6b 	bl	8000bf8 <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fba1 	bl	8000c68 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 8000526:	f000 fcc1 	bl	8000eac <mipi_config>
  HAL_UART_Transmit(&huart4, "start_s", 7, 1000);
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	2207      	movs	r2, #7
 8000530:	4998      	ldr	r1, [pc, #608]	; (8000794 <main+0x294>)
 8000532:	4899      	ldr	r0, [pc, #612]	; (8000798 <main+0x298>)
 8000534:	f007 f88a 	bl	800764c <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2102      	movs	r1, #2
 800053c:	4897      	ldr	r0, [pc, #604]	; (800079c <main+0x29c>)
 800053e:	f003 fcbd 	bl	8003ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000548:	4895      	ldr	r0, [pc, #596]	; (80007a0 <main+0x2a0>)
 800054a:	f003 fcb7 	bl	8003ebc <HAL_GPIO_WritePin>

  HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 800054e:	2202      	movs	r2, #2
 8000550:	4994      	ldr	r1, [pc, #592]	; (80007a4 <main+0x2a4>)
 8000552:	4895      	ldr	r0, [pc, #596]	; (80007a8 <main+0x2a8>)
 8000554:	f006 fa1e 	bl	8006994 <HAL_SPI_Receive_IT>
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e007      	b.n	800056e <main+0x6e>
  {
	  image_arr_rgb888[i] = 0xFF;
 800055e:	4a93      	ldr	r2, [pc, #588]	; (80007ac <main+0x2ac>)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	22ff      	movs	r2, #255	; 0xff
 8000566:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	4b90      	ldr	r3, [pc, #576]	; (80007b0 <main+0x2b0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a90      	ldr	r2, [pc, #576]	; (80007b4 <main+0x2b4>)
 8000574:	6812      	ldr	r2, [r2, #0]
 8000576:	fb03 f202 	mul.w	r2, r3, r2
 800057a:	4613      	mov	r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	441a      	add	r2, r3
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	429a      	cmp	r2, r3
 8000584:	d8eb      	bhi.n	800055e <main+0x5e>
    while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode_source == 0)
 8000586:	4b8c      	ldr	r3, [pc, #560]	; (80007b8 <main+0x2b8>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d155      	bne.n	800063a <main+0x13a>
	  {
		  if (play_mode == 0)
 800058e:	4b8b      	ldr	r3, [pc, #556]	; (80007bc <main+0x2bc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d109      	bne.n	80005aa <main+0xaa>
		  {
			  read_flash_page(&frame_buf_flash, display_image_number);
 8000596:	4b8a      	ldr	r3, [pc, #552]	; (80007c0 <main+0x2c0>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	4619      	mov	r1, r3
 800059c:	4889      	ldr	r0, [pc, #548]	; (80007c4 <main+0x2c4>)
 800059e:	f001 fc01 	bl	8001da4 <read_flash_page>
			  display_panel(&frame_buf_flash);
 80005a2:	4888      	ldr	r0, [pc, #544]	; (80007c4 <main+0x2c4>)
 80005a4:	f001 fa7a 	bl	8001a9c <display_panel>
 80005a8:	e095      	b.n	80006d6 <main+0x1d6>
		  }
		  else if (play_mode == 1)
 80005aa:	4b84      	ldr	r3, [pc, #528]	; (80007bc <main+0x2bc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	f040 8091 	bne.w	80006d6 <main+0x1d6>
		  {
			  uint8_t should_break = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	72fb      	strb	r3, [r7, #11]
			  while(1)
			  {
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 80005b8:	4b83      	ldr	r3, [pc, #524]	; (80007c8 <main+0x2c8>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	e02b      	b.n	8000618 <main+0x118>
				  {
					  HAL_Delay(5);
 80005c0:	2005      	movs	r0, #5
 80005c2:	f002 fa99 	bl	8002af8 <HAL_Delay>
					  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
 80005c6:	bf00      	nop
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f003 fc5c 	bl	8003e8c <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d0f6      	beq.n	80005c8 <main+0xc8>
					  if (play_mode_source != 0 || play_mode != 1 || setting_changed == 1)
 80005da:	4b77      	ldr	r3, [pc, #476]	; (80007b8 <main+0x2b8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d107      	bne.n	80005f2 <main+0xf2>
 80005e2:	4b76      	ldr	r3, [pc, #472]	; (80007bc <main+0x2bc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d103      	bne.n	80005f2 <main+0xf2>
 80005ea:	4b78      	ldr	r3, [pc, #480]	; (80007cc <main+0x2cc>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d102      	bne.n	80005f8 <main+0xf8>
					  {
						  should_break = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	72fb      	strb	r3, [r7, #11]
						  break;
 80005f6:	e015      	b.n	8000624 <main+0x124>
					  }
					  read_flash_page(&frame_buf_flash, i);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4619      	mov	r1, r3
 80005fe:	4871      	ldr	r0, [pc, #452]	; (80007c4 <main+0x2c4>)
 8000600:	f001 fbd0 	bl	8001da4 <read_flash_page>
					  display_panel(&frame_buf_flash);
 8000604:	486f      	ldr	r0, [pc, #444]	; (80007c4 <main+0x2c4>)
 8000606:	f001 fa49 	bl	8001a9c <display_panel>
					  display_image_number = i;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b6c      	ldr	r3, [pc, #432]	; (80007c0 <main+0x2c0>)
 8000610:	701a      	strb	r2, [r3, #0]
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3301      	adds	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b6d      	ldr	r3, [pc, #436]	; (80007d0 <main+0x2d0>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4293      	cmp	r3, r2
 8000622:	ddcd      	ble.n	80005c0 <main+0xc0>
				  }
				  if (should_break == 0)
 8000624:	7afb      	ldrb	r3, [r7, #11]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d103      	bne.n	8000632 <main+0x132>
				  {
					  display_image_number = 0;
 800062a:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <main+0x2c0>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e7c2      	b.n	80005b8 <main+0xb8>
				  }
				  else if (should_break == 1)
 8000632:	7afb      	ldrb	r3, [r7, #11]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d04d      	beq.n	80006d4 <main+0x1d4>
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 8000638:	e7be      	b.n	80005b8 <main+0xb8>
				  	  break;
				  }
			  }
		  }
	  }
	  else if (play_mode_source == 1)
 800063a:	4b5f      	ldr	r3, [pc, #380]	; (80007b8 <main+0x2b8>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d140      	bne.n	80006c4 <main+0x1c4>
	  {
		  if (play_mode == 2)
 8000642:	4b5e      	ldr	r3, [pc, #376]	; (80007bc <main+0x2bc>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d138      	bne.n	80006bc <main+0x1bc>
		  {
			  while(1)
			  {
				  HAL_Delay(5);
 800064a:	2005      	movs	r0, #5
 800064c:	f002 fa54 	bl	8002af8 <HAL_Delay>
				  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
 8000650:	bf00      	nop
 8000652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f003 fc17 	bl	8003e8c <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d0f6      	beq.n	8000652 <main+0x152>
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 8000664:	4b54      	ldr	r3, [pc, #336]	; (80007b8 <main+0x2b8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d134      	bne.n	80006d6 <main+0x1d6>
 800066c:	4b53      	ldr	r3, [pc, #332]	; (80007bc <main+0x2bc>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d130      	bne.n	80006d6 <main+0x1d6>
 8000674:	4b55      	ldr	r3, [pc, #340]	; (80007cc <main+0x2cc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d02c      	beq.n	80006d6 <main+0x1d6>
				  {
					  break;
				  }
				  display_panel(&frame_buf_0);
 800067c:	4855      	ldr	r0, [pc, #340]	; (80007d4 <main+0x2d4>)
 800067e:	f001 fa0d 	bl	8001a9c <display_panel>

				  HAL_Delay(5);
 8000682:	2005      	movs	r0, #5
 8000684:	f002 fa38 	bl	8002af8 <HAL_Delay>
				  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
 8000688:	bf00      	nop
 800068a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f003 fbfb 	bl	8003e8c <HAL_GPIO_ReadPin>
 8000696:	4603      	mov	r3, r0
 8000698:	2b01      	cmp	r3, #1
 800069a:	d0f6      	beq.n	800068a <main+0x18a>
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 800069c:	4b46      	ldr	r3, [pc, #280]	; (80007b8 <main+0x2b8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d118      	bne.n	80006d6 <main+0x1d6>
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <main+0x2bc>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d114      	bne.n	80006d6 <main+0x1d6>
 80006ac:	4b47      	ldr	r3, [pc, #284]	; (80007cc <main+0x2cc>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d010      	beq.n	80006d6 <main+0x1d6>
				  {
					  break;
				  }
				  display_panel(&frame_buf_1);
 80006b4:	4848      	ldr	r0, [pc, #288]	; (80007d8 <main+0x2d8>)
 80006b6:	f001 f9f1 	bl	8001a9c <display_panel>
				  HAL_Delay(5);
 80006ba:	e7c6      	b.n	800064a <main+0x14a>
			  }
		  }
		  else
		  {
			  display_panel(&frame_buf_0);
 80006bc:	4845      	ldr	r0, [pc, #276]	; (80007d4 <main+0x2d4>)
 80006be:	f001 f9ed 	bl	8001a9c <display_panel>
 80006c2:	e008      	b.n	80006d6 <main+0x1d6>
		  }
	  }
	  else if (play_mode_source == 2)
 80006c4:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <main+0x2b8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d104      	bne.n	80006d6 <main+0x1d6>
	  {
		  display_panel(&frame_buf_1);
 80006cc:	4842      	ldr	r0, [pc, #264]	; (80007d8 <main+0x2d8>)
 80006ce:	f001 f9e5 	bl	8001a9c <display_panel>
 80006d2:	e000      	b.n	80006d6 <main+0x1d6>
				  	  break;
 80006d4:	bf00      	nop
	  }

	  if(setting_changed == 1)
 80006d6:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <main+0x2cc>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d155      	bne.n	800078a <main+0x28a>
	  {
		  uint16_t Horizontal_blanking_total = Horizontal_blanking_H*256 + Horizontal_blanking_L;
 80006de:	4b3f      	ldr	r3, [pc, #252]	; (80007dc <main+0x2dc>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <main+0x2e0>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4413      	add	r3, r2
 80006f0:	807b      	strh	r3, [r7, #2]
		  HBP = Horizontal_blanking_total / 3;
 80006f2:	887b      	ldrh	r3, [r7, #2]
 80006f4:	4a3b      	ldr	r2, [pc, #236]	; (80007e4 <main+0x2e4>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	085b      	lsrs	r3, r3, #1
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <main+0x2e8>)
 8000700:	801a      	strh	r2, [r3, #0]
		  HFP = Horizontal_blanking_total / 3;
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	4a37      	ldr	r2, [pc, #220]	; (80007e4 <main+0x2e4>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	085b      	lsrs	r3, r3, #1
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b37      	ldr	r3, [pc, #220]	; (80007ec <main+0x2ec>)
 8000710:	801a      	strh	r2, [r3, #0]
		  HSA = Horizontal_blanking_total - (HBP + HFP);
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <main+0x2e8>)
 8000714:	881a      	ldrh	r2, [r3, #0]
 8000716:	4b35      	ldr	r3, [pc, #212]	; (80007ec <main+0x2ec>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	b29b      	uxth	r3, r3
 800071e:	887a      	ldrh	r2, [r7, #2]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <main+0x2f0>)
 8000726:	801a      	strh	r2, [r3, #0]

		  uint16_t Vertical_blanking_total = Vertical_blanking_H*256 + Vertical_blanking_L;
 8000728:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <main+0x2f4>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b29b      	uxth	r3, r3
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <main+0x2f8>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	4413      	add	r3, r2
 800073a:	803b      	strh	r3, [r7, #0]
		  VBP = Vertical_blanking_total / 3;
 800073c:	883b      	ldrh	r3, [r7, #0]
 800073e:	4a29      	ldr	r2, [pc, #164]	; (80007e4 <main+0x2e4>)
 8000740:	fba2 2303 	umull	r2, r3, r2, r3
 8000744:	085b      	lsrs	r3, r3, #1
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <main+0x2fc>)
 800074a:	801a      	strh	r2, [r3, #0]
		  VFP = Vertical_blanking_total / 3;
 800074c:	883b      	ldrh	r3, [r7, #0]
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <main+0x2e4>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	085b      	lsrs	r3, r3, #1
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <main+0x300>)
 800075a:	801a      	strh	r2, [r3, #0]
		  VSA = Vertical_blanking_total - (VBP + VFP);
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <main+0x2fc>)
 800075e:	881a      	ldrh	r2, [r3, #0]
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <main+0x300>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	4413      	add	r3, r2
 8000766:	b29b      	uxth	r3, r3
 8000768:	883a      	ldrh	r2, [r7, #0]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <main+0x304>)
 8000770:	801a      	strh	r2, [r3, #0]

		  my_MX_DSIHOST_DSI_Init();
 8000772:	f001 fcc3 	bl	80020fc <my_MX_DSIHOST_DSI_Init>
		  my_MX_LTDC_Init();
 8000776:	f001 fdcf 	bl	8002318 <my_MX_LTDC_Init>
		  mipi_config();
 800077a:	f000 fb97 	bl	8000eac <mipi_config>
		  HAL_Delay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f002 f9ba 	bl	8002af8 <HAL_Delay>

		  setting_changed = 0;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <main+0x2cc>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(10);
 800078a:	200a      	movs	r0, #10
 800078c:	f002 f9b4 	bl	8002af8 <HAL_Delay>
	  if (play_mode_source == 0)
 8000790:	e6f9      	b.n	8000586 <main+0x86>
 8000792:	bf00      	nop
 8000794:	0800840c 	.word	0x0800840c
 8000798:	200001d4 	.word	0x200001d4
 800079c:	48000800 	.word	0x48000800
 80007a0:	48001400 	.word	0x48001400
 80007a4:	20070274 	.word	0x20070274
 80007a8:	20000170 	.word	0x20000170
 80007ac:	20040270 	.word	0x20040270
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000004 	.word	0x20000004
 80007b8:	2004026d 	.word	0x2004026d
 80007bc:	2004026c 	.word	0x2004026c
 80007c0:	20070270 	.word	0x20070270
 80007c4:	2003026c 	.word	0x2003026c
 80007c8:	20000268 	.word	0x20000268
 80007cc:	20070276 	.word	0x20070276
 80007d0:	2000000a 	.word	0x2000000a
 80007d4:	2001026c 	.word	0x2001026c
 80007d8:	2002026c 	.word	0x2002026c
 80007dc:	2000000c 	.word	0x2000000c
 80007e0:	2000000d 	.word	0x2000000d
 80007e4:	aaaaaaab 	.word	0xaaaaaaab
 80007e8:	20000012 	.word	0x20000012
 80007ec:	20000014 	.word	0x20000014
 80007f0:	20000010 	.word	0x20000010
 80007f4:	2000000e 	.word	0x2000000e
 80007f8:	2000000f 	.word	0x2000000f
 80007fc:	20000018 	.word	0x20000018
 8000800:	2000001a 	.word	0x2000001a
 8000804:	20000016 	.word	0x20000016

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	; 0x58
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2244      	movs	r2, #68	; 0x44
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f007 fde4 	bl	80083e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800082a:	2000      	movs	r0, #0
 800082c:	f003 fe3c 	bl	80044a8 <HAL_PWREx_ControlVoltageScaling>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000836:	f001 fed5 	bl	80025e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083a:	2301      	movs	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000848:	2303      	movs	r3, #3
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000850:	231e      	movs	r3, #30
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fed3 	bl	8004610 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000870:	f001 feb8 	bl	80025e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2303      	movs	r3, #3
 800087a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	2105      	movs	r1, #5
 800088c:	4618      	mov	r0, r3
 800088e:	f004 fad9 	bl	8004e44 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000898:	f001 fea4 	bl	80025e4 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3758      	adds	r7, #88	; 0x58
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0ae      	sub	sp, #184	; 0xb8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008b6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 fd90 	bl	80083e4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80008c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	226c      	movs	r2, #108	; 0x6c
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f007 fd81 	bl	80083e4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80008e2:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 80008e4:	4a64      	ldr	r2, [pc, #400]	; (8000a78 <MX_DSIHOST_DSI_Init+0x1d4>)
 80008e6:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80008e8:	4b62      	ldr	r3, [pc, #392]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 80008ee:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80008f4:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 80008fa:	2332      	movs	r3, #50	; 0x32
 80008fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000900:	2301      	movs	r3, #1
 8000902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000906:	2301      	movs	r3, #1
 8000908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800090c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000910:	4619      	mov	r1, r3
 8000912:	4858      	ldr	r0, [pc, #352]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000914:	f002 facc 	bl	8002eb0 <HAL_DSI_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800091e:	f001 fe61 	bl	80025e4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000958:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800095c:	4619      	mov	r1, r3
 800095e:	4845      	ldr	r0, [pc, #276]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000960:	f002 ff19 	bl	8003796 <HAL_DSI_ConfigHostTimeouts>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 800096a:	f001 fe3b 	bl	80025e4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 800096e:	2313      	movs	r3, #19
 8000970:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000972:	230f      	movs	r3, #15
 8000974:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000976:	2309      	movs	r3, #9
 8000978:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 800097a:	230a      	movs	r3, #10
 800097c:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800098a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800098e:	4619      	mov	r1, r3
 8000990:	4838      	ldr	r0, [pc, #224]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000992:	f002 fe96 	bl	80036c2 <HAL_DSI_ConfigPhyTimer>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 800099c:	f001 fe22 	bl	80025e4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80009a0:	f242 7110 	movw	r1, #10000	; 0x2710
 80009a4:	4833      	ldr	r0, [pc, #204]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009a6:	f003 f8b2 	bl	8003b0e <HAL_DSI_SetLowPowerRXFilter>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 80009b0:	f001 fe18 	bl	80025e4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	482f      	ldr	r0, [pc, #188]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009b8:	f002 fb96 	bl	80030e8 <HAL_DSI_ConfigErrorMonitor>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 80009c2:	f001 fe0f 	bl	80025e4 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 80009ca:	2305      	movs	r3, #5
 80009cc:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 80009d2:	2301      	movs	r3, #1
 80009d4:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 80009d6:	2378      	movs	r3, #120	; 0x78
 80009d8:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 184;
 80009ee:	23b8      	movs	r3, #184	; 0xb8
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 180;
 80009f2:	23b4      	movs	r3, #180	; 0xb4
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 664;
 80009f6:	f44f 7326 	mov.w	r3, #664	; 0x298
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 9;
 80009fc:	2309      	movs	r3, #9
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000a00:	2308      	movs	r3, #8
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000a04:	2308      	movs	r3, #8
 8000a06:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 156;
 8000a08:	239c      	movs	r3, #156	; 0x9c
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a10:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000a12:	231c      	movs	r3, #28
 8000a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000a16:	2350      	movs	r3, #80	; 0x50
 8000a18:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a36:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3c:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4619      	mov	r1, r3
 8000a46:	480b      	ldr	r0, [pc, #44]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a48:	f002 fc33 	bl	80032b2 <HAL_DSI_ConfigVideoMode>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000a52:	f001 fdc7 	bl	80025e4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a5a:	f002 fc02 	bl	8003262 <HAL_DSI_SetGenericVCID>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000a64:	f001 fdbe 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
  LCD_PowerOn();
 8000a68:	f000 fc2c 	bl	80012c4 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	37b8      	adds	r7, #184	; 0xb8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000048 	.word	0x20000048
 8000a78:	40016c00 	.word	0x40016c00

08000a7c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2234      	movs	r2, #52	; 0x34
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f007 fcab 	bl	80083e4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a8e:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000a90:	4a38      	ldr	r2, [pc, #224]	; (8000b74 <MX_LTDC_Init+0xf8>)
 8000a92:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000a96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a9a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000a9c:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000aa4:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 183;
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000ab2:	22b7      	movs	r2, #183	; 0xb7
 8000ab4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000ab8:	2208      	movs	r2, #8
 8000aba:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 363;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000abe:	f240 126b 	movw	r2, #363	; 0x16b
 8000ac2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 16;
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000ac6:	2210      	movs	r2, #16
 8000ac8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 483;
 8000aca:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000acc:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 172;
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000ad4:	22ac      	movs	r2, #172	; 0xac
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 663;
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000ada:	f240 2297 	movw	r2, #663	; 0x297
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 180;
 8000ae0:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000ae2:	22b4      	movs	r2, #180	; 0xb4
 8000ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000ae8:	22ff      	movs	r2, #255	; 0xff
 8000aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000af0:	22ff      	movs	r2, #255	; 0xff
 8000af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000af8:	22ff      	movs	r2, #255	; 0xff
 8000afa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000b00:	f003 fa0c 	bl	8003f1c <HAL_LTDC_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000b0a:	f001 fd6b 	bl	80025e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 120;
 8000b12:	2378      	movs	r3, #120	; 0x78
 8000b14:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 156;
 8000b1a:	239c      	movs	r3, #156	; 0x9c
 8000b1c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b22:	23ff      	movs	r3, #255	; 0xff
 8000b24:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b30:	2305      	movs	r3, #5
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_LTDC_Init+0xfc>)
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 120;
 8000b38:	2378      	movs	r3, #120	; 0x78
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 156;
 8000b3c:	239c      	movs	r3, #156	; 0x9c
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000b40:	23ff      	movs	r3, #255	; 0xff
 8000b42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000b46:	23ff      	movs	r3, #255	; 0xff
 8000b48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000b4c:	23ff      	movs	r3, #255	; 0xff
 8000b4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_LTDC_Init+0xf4>)
 8000b5a:	f003 faaf 	bl	80040bc <HAL_LTDC_ConfigLayer>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000b64:	f001 fd3e 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3738      	adds	r7, #56	; 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000064 	.word	0x20000064
 8000b74:	40016800 	.word	0x40016800
 8000b78:	20040270 	.word	0x20040270

08000b7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b82:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <MX_SPI2_Init+0x78>)
 8000b84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bca:	2207      	movs	r2, #7
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_SPI2_Init+0x74>)
 8000bdc:	f005 f968 	bl	8005eb0 <HAL_SPI_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000be6:	f001 fcfd 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000010c 	.word	0x2000010c
 8000bf4:	40003800 	.word	0x40003800

08000bf8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000bfe:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <MX_SPI3_Init+0x6c>)
 8000c00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c14:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_SPI3_Init+0x68>)
 8000c4e:	f005 f92f 	bl	8005eb0 <HAL_SPI_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000c58:	f001 fcc4 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000170 	.word	0x20000170
 8000c64:	40003c00 	.word	0x40003c00

08000c68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <MX_UART4_Init+0x94>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000cb2:	f006 fc7b 	bl	80075ac <HAL_UART_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000cbc:	f001 fc92 	bl	80025e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000cc4:	f007 faa0 	bl	8008208 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000cce:	f001 fc89 	bl	80025e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000cd6:	f007 fad5 	bl	8008284 <HAL_UARTEx_SetRxFifoThreshold>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ce0:	f001 fc80 	bl	80025e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_UART4_Init+0x90>)
 8000ce6:	f007 fa56 	bl	8008196 <HAL_UARTEx_DisableFifoMode>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000cf0:	f001 fc78 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200001d4 	.word	0x200001d4
 8000cfc:	40004c00 	.word	0x40004c00

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d16:	4b60      	ldr	r3, [pc, #384]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a5f      	ldr	r2, [pc, #380]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b5d      	ldr	r3, [pc, #372]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000d2e:	f003 fc5f 	bl	80045f0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b59      	ldr	r3, [pc, #356]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a58      	ldr	r2, [pc, #352]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b56      	ldr	r3, [pc, #344]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a52      	ldr	r2, [pc, #328]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b50      	ldr	r3, [pc, #320]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a4c      	ldr	r2, [pc, #304]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b4a      	ldr	r3, [pc, #296]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a46      	ldr	r2, [pc, #280]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a40      	ldr	r2, [pc, #256]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b3e      	ldr	r3, [pc, #248]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000daa:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a3a      	ldr	r2, [pc, #232]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000db0:	f043 0320 	orr.w	r3, r3, #32
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <MX_GPIO_Init+0x198>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0320 	and.w	r3, r3, #32
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc8:	4834      	ldr	r0, [pc, #208]	; (8000e9c <MX_GPIO_Init+0x19c>)
 8000dca:	f003 f877 	bl	8003ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESXP_Pin|flash_cs_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8000dd4:	4831      	ldr	r0, [pc, #196]	; (8000e9c <MX_GPIO_Init+0x19c>)
 8000dd6:	f003 f871 	bl	8003ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4830      	ldr	r0, [pc, #192]	; (8000ea0 <MX_GPIO_Init+0x1a0>)
 8000de0:	f003 f86c 	bl	8003ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dea:	482e      	ldr	r0, [pc, #184]	; (8000ea4 <MX_GPIO_Init+0x1a4>)
 8000dec:	f003 f866 	bl	8003ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin RESXP_Pin flash_cs_Pin */
  GPIO_InitStruct.Pin = led_Pin|RESXP_Pin|flash_cs_Pin;
 8000df0:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4824      	ldr	r0, [pc, #144]	; (8000e9c <MX_GPIO_Init+0x19c>)
 8000e0a:	f002 fead 	bl	8003b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : sync_Pin */
  GPIO_InitStruct.Pin = sync_Pin;
 8000e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(sync_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f002 fe9f 	bl	8003b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : pic_sw_Pin */
  GPIO_InitStruct.Pin = pic_sw_Pin;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e36:	2302      	movs	r3, #2
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(pic_sw_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4819      	ldr	r0, [pc, #100]	; (8000ea8 <MX_GPIO_Init+0x1a8>)
 8000e42:	f002 fe91 	bl	8003b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : bat_en_Pin */
  GPIO_InitStruct.Pin = bat_en_Pin;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(bat_en_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <MX_GPIO_Init+0x1a0>)
 8000e5e:	f002 fe83 	bl	8003b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : en_Pin */
  GPIO_InitStruct.Pin = en_Pin;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(en_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <MX_GPIO_Init+0x1a4>)
 8000e7c:	f002 fe74 	bl	8003b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2103      	movs	r1, #3
 8000e84:	2028      	movs	r0, #40	; 0x28
 8000e86:	f001 ff36 	bl	8002cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e8a:	2028      	movs	r0, #40	; 0x28
 8000e8c:	f001 ff4f 	bl	8002d2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e90:	bf00      	nop
 8000e92:	3730      	adds	r7, #48	; 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48001400 	.word	0x48001400
 8000ea8:	48000c00 	.word	0x48000c00

08000eac <mipi_config>:

/* USER CODE BEGIN 4 */

void mipi_config()
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b0af      	sub	sp, #188	; 0xbc
 8000eb0:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8000eb2:	48c4      	ldr	r0, [pc, #784]	; (80011c4 <mipi_config+0x318>)
 8000eb4:	f002 fd35 	bl	8003922 <HAL_DSI_Start>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <mipi_config+0x16>
	{
		Error_Handler();
 8000ebe:	f001 fb91 	bl	80025e4 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8000ec2:	23c3      	movs	r3, #195	; 0xc3
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	23f0      	movs	r3, #240	; 0xf0
 8000ec8:	2215      	movs	r2, #21
 8000eca:	2100      	movs	r1, #0
 8000ecc:	48bd      	ldr	r0, [pc, #756]	; (80011c4 <mipi_config+0x318>)
 8000ece:	f002 fd64 	bl	800399a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8000ed2:	2396      	movs	r3, #150	; 0x96
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	23f0      	movs	r3, #240	; 0xf0
 8000ed8:	2215      	movs	r2, #21
 8000eda:	2100      	movs	r1, #0
 8000edc:	48b9      	ldr	r0, [pc, #740]	; (80011c4 <mipi_config+0x318>)
 8000ede:	f002 fd5c 	bl	800399a <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = {0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33};
 8000ee2:	4ab9      	ldr	r2, [pc, #740]	; (80011c8 <mipi_config+0x31c>)
 8000ee4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eec:	6018      	str	r0, [r3, #0]
 8000eee:	3304      	adds	r3, #4
 8000ef0:	8019      	strh	r1, [r3, #0]
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	0c0a      	lsrs	r2, r1, #16
 8000ef6:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8000ef8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	23e7      	movs	r3, #231	; 0xe7
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2308      	movs	r3, #8
 8000f04:	2239      	movs	r2, #57	; 0x39
 8000f06:	2100      	movs	r1, #0
 8000f08:	48ae      	ldr	r0, [pc, #696]	; (80011c4 <mipi_config+0x318>)
 8000f0a:	f002 fd68 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = {0xC0, 0x68, 0xE0};
 8000f0e:	4aaf      	ldr	r2, [pc, #700]	; (80011cc <mipi_config+0x320>)
 8000f10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	4611      	mov	r1, r2
 8000f18:	8019      	strh	r1, [r3, #0]
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	0c12      	lsrs	r2, r2, #16
 8000f1e:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8000f20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	23a4      	movs	r3, #164	; 0xa4
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	2239      	movs	r2, #57	; 0x39
 8000f2e:	2100      	movs	r1, #0
 8000f30:	48a4      	ldr	r0, [pc, #656]	; (80011c4 <mipi_config+0x318>)
 8000f32:	f002 fd54 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = {0x42, 0x05, 0x24, 0x03};
 8000f36:	4ba6      	ldr	r3, [pc, #664]	; (80011d0 <mipi_config+0x324>)
 8000f38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8000f3c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	23c3      	movs	r3, #195	; 0xc3
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2305      	movs	r3, #5
 8000f48:	2239      	movs	r2, #57	; 0x39
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	489d      	ldr	r0, [pc, #628]	; (80011c4 <mipi_config+0x318>)
 8000f4e:	f002 fd46 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = {0x42, 0x05, 0x24, 0x03};
 8000f52:	4b9f      	ldr	r3, [pc, #636]	; (80011d0 <mipi_config+0x324>)
 8000f54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 8000f58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	23c4      	movs	r3, #196	; 0xc4
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2305      	movs	r3, #5
 8000f64:	2239      	movs	r2, #57	; 0x39
 8000f66:	2100      	movs	r1, #0
 8000f68:	4896      	ldr	r0, [pc, #600]	; (80011c4 <mipi_config+0x318>)
 8000f6a:	f002 fd38 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 8000f6e:	4a99      	ldr	r2, [pc, #612]	; (80011d4 <mipi_config+0x328>)
 8000f70:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f74:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 8000f7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	23e5      	movs	r3, #229	; 0xe5
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	230d      	movs	r3, #13
 8000f86:	2239      	movs	r2, #57	; 0x39
 8000f88:	2100      	movs	r1, #0
 8000f8a:	488e      	ldr	r0, [pc, #568]	; (80011c4 <mipi_config+0x318>)
 8000f8c:	f002 fd27 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 8000f90:	4a90      	ldr	r2, [pc, #576]	; (80011d4 <mipi_config+0x328>)
 8000f92:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8000f9c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	23e6      	movs	r3, #230	; 0xe6
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	230d      	movs	r3, #13
 8000fa8:	2239      	movs	r2, #57	; 0x39
 8000faa:	2100      	movs	r1, #0
 8000fac:	4885      	ldr	r0, [pc, #532]	; (80011c4 <mipi_config+0x318>)
 8000fae:	f002 fd16 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = {0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22};
 8000fb2:	4a89      	ldr	r2, [pc, #548]	; (80011d8 <mipi_config+0x32c>)
 8000fb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbc:	6018      	str	r0, [r3, #0]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	8019      	strh	r1, [r3, #0]
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	0c0a      	lsrs	r2, r1, #16
 8000fc6:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 8000fc8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	23ec      	movs	r3, #236	; 0xec
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	2239      	movs	r2, #57	; 0x39
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	487a      	ldr	r0, [pc, #488]	; (80011c4 <mipi_config+0x318>)
 8000fda:	f002 fd00 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = {0x88, 0x05, 0x0F, 0x18};
 8000fde:	4b7f      	ldr	r3, [pc, #508]	; (80011dc <mipi_config+0x330>)
 8000fe0:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 8000fe2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	23c1      	movs	r3, #193	; 0xc1
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2305      	movs	r3, #5
 8000fee:	2239      	movs	r2, #57	; 0x39
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4874      	ldr	r0, [pc, #464]	; (80011c4 <mipi_config+0x318>)
 8000ff4:	f002 fcf3 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = {0x88, 0x05, 0x0F, 0x18};
 8000ff8:	4b78      	ldr	r3, [pc, #480]	; (80011dc <mipi_config+0x330>)
 8000ffa:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 8000ffc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	23c2      	movs	r3, #194	; 0xc2
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2305      	movs	r3, #5
 8001008:	2239      	movs	r2, #57	; 0x39
 800100a:	2100      	movs	r1, #0
 800100c:	486d      	ldr	r0, [pc, #436]	; (80011c4 <mipi_config+0x318>)
 800100e:	f002 fce6 	bl	80039de <HAL_DSI_LongWrite>
	//HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x08);
 8001012:	2308      	movs	r3, #8
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2336      	movs	r3, #54	; 0x36
 8001018:	2215      	movs	r2, #21
 800101a:	2100      	movs	r1, #0
 800101c:	4869      	ldr	r0, [pc, #420]	; (80011c4 <mipi_config+0x318>)
 800101e:	f002 fcbc 	bl	800399a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 8001022:	2307      	movs	r3, #7
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	233a      	movs	r3, #58	; 0x3a
 8001028:	2215      	movs	r2, #21
 800102a:	2100      	movs	r1, #0
 800102c:	4865      	ldr	r0, [pc, #404]	; (80011c4 <mipi_config+0x318>)
 800102e:	f002 fcb4 	bl	800399a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 8001032:	23be      	movs	r3, #190	; 0xbe
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	23c5      	movs	r3, #197	; 0xc5
 8001038:	2215      	movs	r2, #21
 800103a:	2100      	movs	r1, #0
 800103c:	4861      	ldr	r0, [pc, #388]	; (80011c4 <mipi_config+0x318>)
 800103e:	f002 fcac 	bl	800399a <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = {0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55, 0x3D, 0x19, 0x18, 0x24, 0x27};
 8001042:	4b67      	ldr	r3, [pc, #412]	; (80011e0 <mipi_config+0x334>)
 8001044:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800104a:	c407      	stmia	r4!, {r0, r1, r2}
 800104c:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 800104e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	23e0      	movs	r3, #224	; 0xe0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	230f      	movs	r3, #15
 800105a:	2239      	movs	r2, #57	; 0x39
 800105c:	2100      	movs	r1, #0
 800105e:	4859      	ldr	r0, [pc, #356]	; (80011c4 <mipi_config+0x318>)
 8001060:	f002 fcbd 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = {0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56, 0x3E, 0x1A, 0x18, 0x24, 0x28};
 8001064:	4b5f      	ldr	r3, [pc, #380]	; (80011e4 <mipi_config+0x338>)
 8001066:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800106a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106c:	c407      	stmia	r4!, {r0, r1, r2}
 800106e:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 8001070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	23e1      	movs	r3, #225	; 0xe1
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	230f      	movs	r3, #15
 800107c:	2239      	movs	r2, #57	; 0x39
 800107e:	2100      	movs	r1, #0
 8001080:	4850      	ldr	r0, [pc, #320]	; (80011c4 <mipi_config+0x318>)
 8001082:	f002 fcac 	bl	80039de <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 8001086:	2310      	movs	r3, #16
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	23b2      	movs	r3, #178	; 0xb2
 800108c:	2215      	movs	r2, #21
 800108e:	2100      	movs	r1, #0
 8001090:	484c      	ldr	r0, [pc, #304]	; (80011c4 <mipi_config+0x318>)
 8001092:	f002 fc82 	bl	800399a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 8001096:	2301      	movs	r3, #1
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	23b3      	movs	r3, #179	; 0xb3
 800109c:	2215      	movs	r2, #21
 800109e:	2100      	movs	r1, #0
 80010a0:	4848      	ldr	r0, [pc, #288]	; (80011c4 <mipi_config+0x318>)
 80010a2:	f002 fc7a 	bl	800399a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 80010a6:	2301      	movs	r3, #1
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	23b4      	movs	r3, #180	; 0xb4
 80010ac:	2215      	movs	r2, #21
 80010ae:	2100      	movs	r1, #0
 80010b0:	4844      	ldr	r0, [pc, #272]	; (80011c4 <mipi_config+0x318>)
 80010b2:	f002 fc72 	bl	800399a <HAL_DSI_ShortWrite>
	//uint8_t cmd20[2] = {0x27, 0x09};
	uint8_t cmd20[2] = {0x4D, 0x0E};
 80010b6:	f640 634d 	movw	r3, #3661	; 0xe4d
 80010ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 80010be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	23b6      	movs	r3, #182	; 0xb6
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2303      	movs	r3, #3
 80010ca:	2239      	movs	r2, #57	; 0x39
 80010cc:	2100      	movs	r1, #0
 80010ce:	483d      	ldr	r0, [pc, #244]	; (80011c4 <mipi_config+0x318>)
 80010d0:	f002 fc85 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = {0x00, 0x54, 0x00, 0x54};
 80010d4:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 80010d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 80010da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	23b5      	movs	r3, #181	; 0xb5
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2305      	movs	r3, #5
 80010e6:	2239      	movs	r2, #57	; 0x39
 80010e8:	2100      	movs	r1, #0
 80010ea:	4836      	ldr	r0, [pc, #216]	; (80011c4 <mipi_config+0x318>)
 80010ec:	f002 fc77 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 80010f0:	4a3d      	ldr	r2, [pc, #244]	; (80011e8 <mipi_config+0x33c>)
 80010f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f8:	c303      	stmia	r3!, {r0, r1}
 80010fa:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 80010fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	23a5      	movs	r3, #165	; 0xa5
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	230a      	movs	r3, #10
 8001108:	2239      	movs	r2, #57	; 0x39
 800110a:	2100      	movs	r1, #0
 800110c:	482d      	ldr	r0, [pc, #180]	; (80011c4 <mipi_config+0x318>)
 800110e:	f002 fc66 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001112:	4a35      	ldr	r2, [pc, #212]	; (80011e8 <mipi_config+0x33c>)
 8001114:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001118:	ca07      	ldmia	r2, {r0, r1, r2}
 800111a:	c303      	stmia	r3!, {r0, r1}
 800111c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 800111e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	23a6      	movs	r3, #166	; 0xa6
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	230a      	movs	r3, #10
 800112a:	2239      	movs	r2, #57	; 0x39
 800112c:	2100      	movs	r1, #0
 800112e:	4825      	ldr	r0, [pc, #148]	; (80011c4 <mipi_config+0x318>)
 8001130:	f002 fc55 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = {0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00};
 8001134:	4a2d      	ldr	r2, [pc, #180]	; (80011ec <mipi_config+0x340>)
 8001136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113e:	6018      	str	r0, [r3, #0]
 8001140:	3304      	adds	r3, #4
 8001142:	8019      	strh	r1, [r3, #0]
 8001144:	3302      	adds	r3, #2
 8001146:	0c0a      	lsrs	r2, r1, #16
 8001148:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 800114a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	23ba      	movs	r3, #186	; 0xba
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2308      	movs	r3, #8
 8001156:	2239      	movs	r2, #57	; 0x39
 8001158:	2100      	movs	r1, #0
 800115a:	481a      	ldr	r0, [pc, #104]	; (80011c4 <mipi_config+0x318>)
 800115c:	f002 fc3f 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 8001160:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <mipi_config+0x344>)
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	23bb      	movs	r3, #187	; 0xbb
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2309      	movs	r3, #9
 800117a:	2239      	movs	r2, #57	; 0x39
 800117c:	2100      	movs	r1, #0
 800117e:	4811      	ldr	r0, [pc, #68]	; (80011c4 <mipi_config+0x318>)
 8001180:	f002 fc2d 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 8001184:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <mipi_config+0x344>)
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	23bc      	movs	r3, #188	; 0xbc
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2309      	movs	r3, #9
 800119e:	2239      	movs	r2, #57	; 0x39
 80011a0:	2100      	movs	r1, #0
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <mipi_config+0x318>)
 80011a4:	f002 fc1b 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = {0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF, 0xFF, 0xF9};
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <mipi_config+0x348>)
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b0:	c303      	stmia	r3!, {r0, r1}
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	3302      	adds	r3, #2
 80011b6:	0c12      	lsrs	r2, r2, #16
 80011b8:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	e01a      	b.n	80011f8 <mipi_config+0x34c>
 80011c2:	bf00      	nop
 80011c4:	20000048 	.word	0x20000048
 80011c8:	08008414 	.word	0x08008414
 80011cc:	0800841c 	.word	0x0800841c
 80011d0:	03240542 	.word	0x03240542
 80011d4:	08008420 	.word	0x08008420
 80011d8:	0800842c 	.word	0x0800842c
 80011dc:	180f0588 	.word	0x180f0588
 80011e0:	08008434 	.word	0x08008434
 80011e4:	08008444 	.word	0x08008444
 80011e8:	08008454 	.word	0x08008454
 80011ec:	08008460 	.word	0x08008460
 80011f0:	08008468 	.word	0x08008468
 80011f4:	08008470 	.word	0x08008470
 80011f8:	23bd      	movs	r3, #189	; 0xbd
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	230c      	movs	r3, #12
 80011fe:	2239      	movs	r2, #57	; 0x39
 8001200:	2100      	movs	r1, #0
 8001202:	482d      	ldr	r0, [pc, #180]	; (80012b8 <mipi_config+0x40c>)
 8001204:	f002 fbeb 	bl	80039de <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 8001208:	23c3      	movs	r3, #195	; 0xc3
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	23ed      	movs	r3, #237	; 0xed
 800120e:	2215      	movs	r2, #21
 8001210:	2100      	movs	r1, #0
 8001212:	4829      	ldr	r0, [pc, #164]	; (80012b8 <mipi_config+0x40c>)
 8001214:	f002 fbc1 	bl	800399a <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = {0x40, 0x0F, 0x00};
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <mipi_config+0x410>)
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	4611      	mov	r1, r2
 8001222:	8019      	strh	r1, [r3, #0]
 8001224:	3302      	adds	r3, #2
 8001226:	0c12      	lsrs	r2, r2, #16
 8001228:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	23e4      	movs	r3, #228	; 0xe4
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2304      	movs	r3, #4
 8001236:	2239      	movs	r2, #57	; 0x39
 8001238:	2100      	movs	r1, #0
 800123a:	481f      	ldr	r0, [pc, #124]	; (80012b8 <mipi_config+0x40c>)
 800123c:	f002 fbcf 	bl	80039de <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = {0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25};
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <mipi_config+0x414>)
 8001242:	463b      	mov	r3, r7
 8001244:	ca07      	ldmia	r2, {r0, r1, r2}
 8001246:	c303      	stmia	r3!, {r0, r1}
 8001248:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 800124a:	463b      	mov	r3, r7
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	23cc      	movs	r3, #204	; 0xcc
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	230a      	movs	r3, #10
 8001254:	2239      	movs	r2, #57	; 0x39
 8001256:	2100      	movs	r1, #0
 8001258:	4817      	ldr	r0, [pc, #92]	; (80012b8 <mipi_config+0x40c>)
 800125a:	f002 fbc0 	bl	80039de <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2335      	movs	r3, #53	; 0x35
 8001264:	2215      	movs	r2, #21
 8001266:	2100      	movs	r1, #0
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <mipi_config+0x40c>)
 800126a:	f002 fb96 	bl	800399a <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 800126e:	2000      	movs	r0, #0
 8001270:	f001 fc42 	bl	8002af8 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001274:	2300      	movs	r3, #0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2311      	movs	r3, #17
 800127a:	2205      	movs	r2, #5
 800127c:	2100      	movs	r1, #0
 800127e:	480e      	ldr	r0, [pc, #56]	; (80012b8 <mipi_config+0x40c>)
 8001280:	f002 fb8b 	bl	800399a <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001284:	2078      	movs	r0, #120	; 0x78
 8001286:	f001 fc37 	bl	8002af8 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 800128a:	2300      	movs	r3, #0
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2329      	movs	r3, #41	; 0x29
 8001290:	2205      	movs	r2, #5
 8001292:	2100      	movs	r1, #0
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <mipi_config+0x40c>)
 8001296:	f002 fb80 	bl	800399a <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800129a:	2078      	movs	r0, #120	; 0x78
 800129c:	f001 fc2c 	bl	8002af8 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80012a0:	2300      	movs	r3, #0
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2335      	movs	r3, #53	; 0x35
 80012a6:	2215      	movs	r2, #21
 80012a8:	2100      	movs	r1, #0
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <mipi_config+0x40c>)
 80012ac:	f002 fb75 	bl	800399a <HAL_DSI_ShortWrite>
}
 80012b0:	bf00      	nop
 80012b2:	37b4      	adds	r7, #180	; 0xb4
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	20000048 	.word	0x20000048
 80012bc:	0800847c 	.word	0x0800847c
 80012c0:	08008480 	.word	0x08008480

080012c4 <LCD_PowerOn>:

static void LCD_PowerOn(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	4807      	ldr	r0, [pc, #28]	; (80012ec <LCD_PowerOn+0x28>)
 80012ce:	f002 fdf5 	bl	8003ebc <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 80012d2:	2014      	movs	r0, #20
 80012d4:	f001 fc10 	bl	8002af8 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <LCD_PowerOn+0x28>)
 80012de:	f002 fded 	bl	8003ebc <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 80012e2:	2078      	movs	r0, #120	; 0x78
 80012e4:	f001 fc08 	bl	8002af8 <HAL_Delay>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	48000400 	.word	0x48000400

080012f0 <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = {0};
 80012fa:	2300      	movs	r3, #0
 80012fc:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = {0};
 80012fe:	2300      	movs	r3, #0
 8001300:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 1000);
 8001302:	f107 010c 	add.w	r1, r7, #12
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	2201      	movs	r2, #1
 800130c:	486b      	ldr	r0, [pc, #428]	; (80014bc <Write_Registers_data+0x1cc>)
 800130e:	f004 ffe7 	bl	80062e0 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)data, 1, 1000);
 8001312:	f107 0108 	add.w	r1, r7, #8
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	2201      	movs	r2, #1
 800131c:	4867      	ldr	r0, [pc, #412]	; (80014bc <Write_Registers_data+0x1cc>)
 800131e:	f004 ffdf 	bl	80062e0 <HAL_SPI_Receive>
	if (do_flag == 1)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b01      	cmp	r3, #1
 8001326:	f040 80bf 	bne.w	80014a8 <Write_Registers_data+0x1b8>
	{
		switch (Register_Address[0])
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	2b19      	cmp	r3, #25
 800132e:	f200 80c0 	bhi.w	80014b2 <Write_Registers_data+0x1c2>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <Write_Registers_data+0x48>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	080013a1 	.word	0x080013a1
 800133c:	080013b1 	.word	0x080013b1
 8001340:	080013c1 	.word	0x080013c1
 8001344:	080013cf 	.word	0x080013cf
 8001348:	080013dd 	.word	0x080013dd
 800134c:	080013eb 	.word	0x080013eb
 8001350:	080013f9 	.word	0x080013f9
 8001354:	08001401 	.word	0x08001401
 8001358:	080014ad 	.word	0x080014ad
 800135c:	080014ad 	.word	0x080014ad
 8001360:	080014ad 	.word	0x080014ad
 8001364:	08001409 	.word	0x08001409
 8001368:	08001411 	.word	0x08001411
 800136c:	08001419 	.word	0x08001419
 8001370:	08001421 	.word	0x08001421
 8001374:	08001429 	.word	0x08001429
 8001378:	08001431 	.word	0x08001431
 800137c:	080014ad 	.word	0x080014ad
 8001380:	080014ad 	.word	0x080014ad
 8001384:	080014ad 	.word	0x080014ad
 8001388:	080014ad 	.word	0x080014ad
 800138c:	080014ad 	.word	0x080014ad
 8001390:	080014ad 	.word	0x080014ad
 8001394:	080014ad 	.word	0x080014ad
 8001398:	08001493 	.word	0x08001493
 800139c:	0800149b 	.word	0x0800149b
		{
		case 0: //Horizontal Resolution
			IMAGE_H = (uint32_t)data[0];
 80013a0:	7a3b      	ldrb	r3, [r7, #8]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <Write_Registers_data+0x1d0>)
 80013a6:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 80013a8:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <Write_Registers_data+0x1d4>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
			break;
 80013ae:	e080      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 1: //Vertical Resolution
			IMAGE_W = (uint32_t)data[0];
 80013b0:	7a3b      	ldrb	r3, [r7, #8]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <Write_Registers_data+0x1d8>)
 80013b6:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 80013b8:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <Write_Registers_data+0x1d4>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
			break;
 80013be:	e078      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 2: //Horizontal blanking (High byte)
			Horizontal_blanking_H = data[0];
 80013c0:	7a3a      	ldrb	r2, [r7, #8]
 80013c2:	4b42      	ldr	r3, [pc, #264]	; (80014cc <Write_Registers_data+0x1dc>)
 80013c4:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <Write_Registers_data+0x1d4>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
			break;
 80013cc:	e071      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 3: //Horizontal blanking (Low byte)
			Horizontal_blanking_L = data[0];
 80013ce:	7a3a      	ldrb	r2, [r7, #8]
 80013d0:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <Write_Registers_data+0x1e0>)
 80013d2:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 80013d4:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <Write_Registers_data+0x1d4>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
			break;
 80013da:	e06a      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 4: //Vertical blanking (High byte)
			Vertical_blanking_H = data[0];
 80013dc:	7a3a      	ldrb	r2, [r7, #8]
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <Write_Registers_data+0x1e4>)
 80013e0:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <Write_Registers_data+0x1d4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
			break;
 80013e8:	e063      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 5: //Vertical blanking (Low byte)
			Vertical_blanking_L = data[0];
 80013ea:	7a3a      	ldrb	r2, [r7, #8]
 80013ec:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <Write_Registers_data+0x1e8>)
 80013ee:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <Write_Registers_data+0x1d4>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
			break;
 80013f6:	e05c      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 6: //Frame rate x 2 (Hz)
			frame_rate_r = data[0];
 80013f8:	7a3a      	ldrb	r2, [r7, #8]
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <Write_Registers_data+0x1ec>)
 80013fc:	701a      	strb	r2, [r3, #0]
			break;
 80013fe:	e058      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 7: //Show SPI flash content length
			spi_flash_content_length = data[0];
 8001400:	7a3a      	ldrb	r2, [r7, #8]
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <Write_Registers_data+0x1f0>)
 8001404:	701a      	strb	r2, [r3, #0]
			break;
 8001406:	e054      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 9: //Clock rate of SPI
			break;
		case 10: //Clock rate of I2C
			break;
		case 11: //Pixel Mapping one_L
			Pixel_Mapping_one_L = data[0];
 8001408:	7a3a      	ldrb	r2, [r7, #8]
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <Write_Registers_data+0x1f4>)
 800140c:	701a      	strb	r2, [r3, #0]
			break;
 800140e:	e050      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 12: //Pixel Mapping one_H
			Pixel_Mapping_one_H = data[0];
 8001410:	7a3a      	ldrb	r2, [r7, #8]
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <Write_Registers_data+0x1f8>)
 8001414:	701a      	strb	r2, [r3, #0]
			break;
 8001416:	e04c      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 13: //Auto Run start content of SPI flash
			auto_run_start_content = data[0];
 8001418:	7a3a      	ldrb	r2, [r7, #8]
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <Write_Registers_data+0x1fc>)
 800141c:	701a      	strb	r2, [r3, #0]
			break;
 800141e:	e048      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 14: //Show first content number of SPI flash
			display_image_number = data[0];
 8001420:	7a3a      	ldrb	r2, [r7, #8]
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <Write_Registers_data+0x200>)
 8001424:	701a      	strb	r2, [r3, #0]
			break;
 8001426:	e044      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 15: //Auto Run end content of SPI flash
			auto_run_end_content = data[0];
 8001428:	7a3a      	ldrb	r2, [r7, #8]
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <Write_Registers_data+0x204>)
 800142c:	701a      	strb	r2, [r3, #0]
			break;
 800142e:	e040      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 16: //Control A
			switch (data[0] & 0b00000011) //Display Mode
 8001430:	7a3b      	ldrb	r3, [r7, #8]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b03      	cmp	r3, #3
 8001438:	d00e      	beq.n	8001458 <Write_Registers_data+0x168>
 800143a:	2b03      	cmp	r3, #3
 800143c:	dc10      	bgt.n	8001460 <Write_Registers_data+0x170>
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <Write_Registers_data+0x158>
 8001442:	2b01      	cmp	r3, #1
 8001444:	d004      	beq.n	8001450 <Write_Registers_data+0x160>
 8001446:	e00b      	b.n	8001460 <Write_Registers_data+0x170>
			{
			case 0b00000000: //Display content of frame buffer (0)
				play_mode_source = 1;
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <Write_Registers_data+0x208>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
				break;
 800144e:	e007      	b.n	8001460 <Write_Registers_data+0x170>
			case 0b00000001: //Display content of frame buffer (1)
				play_mode_source = 2;
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <Write_Registers_data+0x208>)
 8001452:	2202      	movs	r2, #2
 8001454:	701a      	strb	r2, [r3, #0]
				break;
 8001456:	e003      	b.n	8001460 <Write_Registers_data+0x170>
			case 0b00000011: //Display Flash content
				play_mode_source = 0;
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <Write_Registers_data+0x208>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
				break;
 800145e:	bf00      	nop
			}
			switch (data[0] & 0b00001100) //Static or Dynamic mode
 8001460:	7a3b      	ldrb	r3, [r7, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	d00e      	beq.n	8001488 <Write_Registers_data+0x198>
 800146a:	2b08      	cmp	r3, #8
 800146c:	dc20      	bgt.n	80014b0 <Write_Registers_data+0x1c0>
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <Write_Registers_data+0x188>
 8001472:	2b04      	cmp	r3, #4
 8001474:	d004      	beq.n	8001480 <Write_Registers_data+0x190>
				break;
			case 0b00001000: //Dynamic display flash content
				play_mode = 1;
				break;
			}
			break;
 8001476:	e01b      	b.n	80014b0 <Write_Registers_data+0x1c0>
				play_mode = 0;
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <Write_Registers_data+0x20c>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
				break;
 800147e:	e007      	b.n	8001490 <Write_Registers_data+0x1a0>
				play_mode = 2;
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <Write_Registers_data+0x20c>)
 8001482:	2202      	movs	r2, #2
 8001484:	701a      	strb	r2, [r3, #0]
				break;
 8001486:	e003      	b.n	8001490 <Write_Registers_data+0x1a0>
				play_mode = 1;
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <Write_Registers_data+0x20c>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
				break;
 800148e:	bf00      	nop
			break;
 8001490:	e00e      	b.n	80014b0 <Write_Registers_data+0x1c0>
		case 22: //Power Status
			break;
		case 23: //Serial number
			break;
		case 24: //content size
			content_size = data[0];
 8001492:	7a3a      	ldrb	r2, [r7, #8]
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <Write_Registers_data+0x210>)
 8001496:	701a      	strb	r2, [r3, #0]
			break;
 8001498:	e00b      	b.n	80014b2 <Write_Registers_data+0x1c2>
		case 25:
			play_mode = 0;//Static display
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <Write_Registers_data+0x20c>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
			play_mode_source = 1;			//Display content of frame buffer (0)
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <Write_Registers_data+0x208>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
			break;
 80014a6:	e004      	b.n	80014b2 <Write_Registers_data+0x1c2>
		}
	}
 80014a8:	bf00      	nop
 80014aa:	e002      	b.n	80014b2 <Write_Registers_data+0x1c2>
			break;
 80014ac:	bf00      	nop
 80014ae:	e000      	b.n	80014b2 <Write_Registers_data+0x1c2>
			break;
 80014b0:	bf00      	nop
	//HAL_UART_Transmit(&huart4, &Register_Address, 1, 1000);
	//HAL_UART_Transmit(&huart4, &data, 1, 1000);
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000170 	.word	0x20000170
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20070276 	.word	0x20070276
 80014c8:	20000004 	.word	0x20000004
 80014cc:	2000000c 	.word	0x2000000c
 80014d0:	2000000d 	.word	0x2000000d
 80014d4:	2000000e 	.word	0x2000000e
 80014d8:	2000000f 	.word	0x2000000f
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000009 	.word	0x20000009
 80014e4:	2000001c 	.word	0x2000001c
 80014e8:	2000001d 	.word	0x2000001d
 80014ec:	20000268 	.word	0x20000268
 80014f0:	20070270 	.word	0x20070270
 80014f4:	2000000a 	.word	0x2000000a
 80014f8:	2004026d 	.word	0x2004026d
 80014fc:	2004026c 	.word	0x2004026c
 8001500:	2000000b 	.word	0x2000000b

08001504 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, &spi_rev_2byte, 2, 1000);
	// USB command: Type and command
	switch (spi_rev_2byte[0] & 0b11000000)
 800150c:	4bae      	ldr	r3, [pc, #696]	; (80017c8 <HAL_SPI_RxCpltCallback+0x2c4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001514:	2bc0      	cmp	r3, #192	; 0xc0
 8001516:	f000 81e5 	beq.w	80018e4 <HAL_SPI_RxCpltCallback+0x3e0>
 800151a:	2bc0      	cmp	r3, #192	; 0xc0
 800151c:	f300 829c 	bgt.w	8001a58 <HAL_SPI_RxCpltCallback+0x554>
 8001520:	2b80      	cmp	r3, #128	; 0x80
 8001522:	f000 81d3 	beq.w	80018cc <HAL_SPI_RxCpltCallback+0x3c8>
 8001526:	2b80      	cmp	r3, #128	; 0x80
 8001528:	f300 8296 	bgt.w	8001a58 <HAL_SPI_RxCpltCallback+0x554>
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_SPI_RxCpltCallback+0x34>
 8001530:	2b40      	cmp	r3, #64	; 0x40
 8001532:	f000 816d 	beq.w	8001810 <HAL_SPI_RxCpltCallback+0x30c>
 8001536:	e28f      	b.n	8001a58 <HAL_SPI_RxCpltCallback+0x554>
	{
	case 0b00000000: //Chain SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001538:	4ba3      	ldr	r3, [pc, #652]	; (80017c8 <HAL_SPI_RxCpltCallback+0x2c4>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001540:	2b38      	cmp	r3, #56	; 0x38
 8001542:	f200 8282 	bhi.w	8001a4a <HAL_SPI_RxCpltCallback+0x546>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <HAL_SPI_RxCpltCallback+0x48>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	08001631 	.word	0x08001631
 8001550:	08001a4b 	.word	0x08001a4b
 8001554:	08001a4b 	.word	0x08001a4b
 8001558:	08001a4b 	.word	0x08001a4b
 800155c:	08001a4b 	.word	0x08001a4b
 8001560:	08001a4b 	.word	0x08001a4b
 8001564:	08001a4b 	.word	0x08001a4b
 8001568:	08001a4b 	.word	0x08001a4b
 800156c:	080016e3 	.word	0x080016e3
 8001570:	08001a4b 	.word	0x08001a4b
 8001574:	08001a4b 	.word	0x08001a4b
 8001578:	08001a4b 	.word	0x08001a4b
 800157c:	08001a4b 	.word	0x08001a4b
 8001580:	08001a4b 	.word	0x08001a4b
 8001584:	08001a4b 	.word	0x08001a4b
 8001588:	08001a4b 	.word	0x08001a4b
 800158c:	08001795 	.word	0x08001795
 8001590:	08001a4b 	.word	0x08001a4b
 8001594:	08001a4b 	.word	0x08001a4b
 8001598:	08001a4b 	.word	0x08001a4b
 800159c:	08001a4b 	.word	0x08001a4b
 80015a0:	08001a4b 	.word	0x08001a4b
 80015a4:	08001a4b 	.word	0x08001a4b
 80015a8:	08001a4b 	.word	0x08001a4b
 80015ac:	0800180d 	.word	0x0800180d
 80015b0:	08001a4b 	.word	0x08001a4b
 80015b4:	08001a4b 	.word	0x08001a4b
 80015b8:	08001a4b 	.word	0x08001a4b
 80015bc:	08001a4b 	.word	0x08001a4b
 80015c0:	08001a4b 	.word	0x08001a4b
 80015c4:	08001a4b 	.word	0x08001a4b
 80015c8:	08001a4b 	.word	0x08001a4b
 80015cc:	0800180d 	.word	0x0800180d
 80015d0:	08001a4b 	.word	0x08001a4b
 80015d4:	08001a4b 	.word	0x08001a4b
 80015d8:	08001a4b 	.word	0x08001a4b
 80015dc:	08001a4b 	.word	0x08001a4b
 80015e0:	08001a4b 	.word	0x08001a4b
 80015e4:	08001a4b 	.word	0x08001a4b
 80015e8:	08001a4b 	.word	0x08001a4b
 80015ec:	0800180d 	.word	0x0800180d
 80015f0:	08001a4b 	.word	0x08001a4b
 80015f4:	08001a4b 	.word	0x08001a4b
 80015f8:	08001a4b 	.word	0x08001a4b
 80015fc:	08001a4b 	.word	0x08001a4b
 8001600:	08001a4b 	.word	0x08001a4b
 8001604:	08001a4b 	.word	0x08001a4b
 8001608:	08001a4b 	.word	0x08001a4b
 800160c:	0800180d 	.word	0x0800180d
 8001610:	08001a4b 	.word	0x08001a4b
 8001614:	08001a4b 	.word	0x08001a4b
 8001618:	08001a4b 	.word	0x08001a4b
 800161c:	08001a4b 	.word	0x08001a4b
 8001620:	08001a4b 	.word	0x08001a4b
 8001624:	08001a4b 	.word	0x08001a4b
 8001628:	08001a4b 	.word	0x08001a4b
 800162c:	0800180d 	.word	0x0800180d
		{
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi_rev_2byte[0] & 0b00000111)
 8001630:	4b65      	ldr	r3, [pc, #404]	; (80017c8 <HAL_SPI_RxCpltCallback+0x2c4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	2b04      	cmp	r3, #4
 800163a:	d03e      	beq.n	80016ba <HAL_SPI_RxCpltCallback+0x1b6>
 800163c:	2b04      	cmp	r3, #4
 800163e:	dc4c      	bgt.n	80016da <HAL_SPI_RxCpltCallback+0x1d6>
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_SPI_RxCpltCallback+0x146>
 8001644:	2b01      	cmp	r3, #1
 8001646:	d014      	beq.n	8001672 <HAL_SPI_RxCpltCallback+0x16e>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 8001648:	e047      	b.n	80016da <HAL_SPI_RxCpltCallback+0x1d6>
				if (BOARD_NUMBER == 1)
 800164a:	4b60      	ldr	r3, [pc, #384]	; (80017cc <HAL_SPI_RxCpltCallback+0x2c8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d145      	bne.n	80016de <HAL_SPI_RxCpltCallback+0x1da>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001652:	4b5f      	ldr	r3, [pc, #380]	; (80017d0 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <HAL_SPI_RxCpltCallback+0x2d0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	fb12 f303 	smulbb	r3, r2, r3
 8001662:	b29a      	uxth	r2, r3
 8001664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001668:	495b      	ldr	r1, [pc, #364]	; (80017d8 <HAL_SPI_RxCpltCallback+0x2d4>)
 800166a:	485c      	ldr	r0, [pc, #368]	; (80017dc <HAL_SPI_RxCpltCallback+0x2d8>)
 800166c:	f004 fe38 	bl	80062e0 <HAL_SPI_Receive>
				break;
 8001670:	e035      	b.n	80016de <HAL_SPI_RxCpltCallback+0x1da>
				if (BOARD_NUMBER == 2)
 8001672:	4b56      	ldr	r3, [pc, #344]	; (80017cc <HAL_SPI_RxCpltCallback+0x2c8>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d10f      	bne.n	800169a <HAL_SPI_RxCpltCallback+0x196>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 800167a:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <HAL_SPI_RxCpltCallback+0x2cc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b54      	ldr	r3, [pc, #336]	; (80017d4 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	fb12 f303 	smulbb	r3, r2, r3
 800168a:	b29a      	uxth	r2, r3
 800168c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001690:	4951      	ldr	r1, [pc, #324]	; (80017d8 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001692:	4852      	ldr	r0, [pc, #328]	; (80017dc <HAL_SPI_RxCpltCallback+0x2d8>)
 8001694:	f004 fe24 	bl	80062e0 <HAL_SPI_Receive>
				break;
 8001698:	e022      	b.n	80016e0 <HAL_SPI_RxCpltCallback+0x1dc>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 800169a:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <HAL_SPI_RxCpltCallback+0x2cc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_SPI_RxCpltCallback+0x2d0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	fb12 f303 	smulbb	r3, r2, r3
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b0:	494b      	ldr	r1, [pc, #300]	; (80017e0 <HAL_SPI_RxCpltCallback+0x2dc>)
 80016b2:	484a      	ldr	r0, [pc, #296]	; (80017dc <HAL_SPI_RxCpltCallback+0x2d8>)
 80016b4:	f004 fe14 	bl	80062e0 <HAL_SPI_Receive>
				break;
 80016b8:	e012      	b.n	80016e0 <HAL_SPI_RxCpltCallback+0x1dc>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <HAL_SPI_RxCpltCallback+0x2cc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HAL_SPI_RxCpltCallback+0x2d0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	fb12 f303 	smulbb	r3, r2, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d0:	4941      	ldr	r1, [pc, #260]	; (80017d8 <HAL_SPI_RxCpltCallback+0x2d4>)
 80016d2:	4842      	ldr	r0, [pc, #264]	; (80017dc <HAL_SPI_RxCpltCallback+0x2d8>)
 80016d4:	f004 fe04 	bl	80062e0 <HAL_SPI_Receive>
				break;
 80016d8:	e002      	b.n	80016e0 <HAL_SPI_RxCpltCallback+0x1dc>
				break;
 80016da:	bf00      	nop
 80016dc:	e097      	b.n	800180e <HAL_SPI_RxCpltCallback+0x30a>
				break;
 80016de:	bf00      	nop
			}
			break;
 80016e0:	e095      	b.n	800180e <HAL_SPI_RxCpltCallback+0x30a>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi_rev_2byte[0] & 0b00000111)
 80016e2:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <HAL_SPI_RxCpltCallback+0x2c4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d03e      	beq.n	800176c <HAL_SPI_RxCpltCallback+0x268>
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	dc4c      	bgt.n	800178c <HAL_SPI_RxCpltCallback+0x288>
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_SPI_RxCpltCallback+0x1f8>
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d014      	beq.n	8001724 <HAL_SPI_RxCpltCallback+0x220>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 80016fa:	e047      	b.n	800178c <HAL_SPI_RxCpltCallback+0x288>
				if (BOARD_NUMBER == 1)
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_SPI_RxCpltCallback+0x2c8>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d145      	bne.n	8001790 <HAL_SPI_RxCpltCallback+0x28c>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <HAL_SPI_RxCpltCallback+0x2d0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	fb12 f303 	smulbb	r3, r2, r3
 8001714:	b29a      	uxth	r2, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	4932      	ldr	r1, [pc, #200]	; (80017e4 <HAL_SPI_RxCpltCallback+0x2e0>)
 800171c:	482f      	ldr	r0, [pc, #188]	; (80017dc <HAL_SPI_RxCpltCallback+0x2d8>)
 800171e:	f004 fddf 	bl	80062e0 <HAL_SPI_Receive>
				break;
 8001722:	e035      	b.n	8001790 <HAL_SPI_RxCpltCallback+0x28c>
				if (BOARD_NUMBER == 2)
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_SPI_RxCpltCallback+0x2c8>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d10f      	bne.n	800174c <HAL_SPI_RxCpltCallback+0x248>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_SPI_RxCpltCallback+0x2cc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	fb12 f303 	smulbb	r3, r2, r3
 800173c:	b29a      	uxth	r2, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	4928      	ldr	r1, [pc, #160]	; (80017e4 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001744:	4825      	ldr	r0, [pc, #148]	; (80017dc <HAL_SPI_RxCpltCallback+0x2d8>)
 8001746:	f004 fdcb 	bl	80062e0 <HAL_SPI_Receive>
				break;
 800174a:	e022      	b.n	8001792 <HAL_SPI_RxCpltCallback+0x28e>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_SPI_RxCpltCallback+0x2cc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b29a      	uxth	r2, r3
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	fb12 f303 	smulbb	r3, r2, r3
 800175c:	b29a      	uxth	r2, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	491f      	ldr	r1, [pc, #124]	; (80017e0 <HAL_SPI_RxCpltCallback+0x2dc>)
 8001764:	481d      	ldr	r0, [pc, #116]	; (80017dc <HAL_SPI_RxCpltCallback+0x2d8>)
 8001766:	f004 fdbb 	bl	80062e0 <HAL_SPI_Receive>
				break;
 800176a:	e012      	b.n	8001792 <HAL_SPI_RxCpltCallback+0x28e>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_SPI_RxCpltCallback+0x2cc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	fb12 f303 	smulbb	r3, r2, r3
 800177c:	b29a      	uxth	r2, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	4918      	ldr	r1, [pc, #96]	; (80017e4 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001784:	4815      	ldr	r0, [pc, #84]	; (80017dc <HAL_SPI_RxCpltCallback+0x2d8>)
 8001786:	f004 fdab 	bl	80062e0 <HAL_SPI_Receive>
				break;
 800178a:	e002      	b.n	8001792 <HAL_SPI_RxCpltCallback+0x28e>
				break;
 800178c:	bf00      	nop
 800178e:	e03e      	b.n	800180e <HAL_SPI_RxCpltCallback+0x30a>
				break;
 8001790:	bf00      	nop
			}
			break;
 8001792:	e03c      	b.n	800180e <HAL_SPI_RxCpltCallback+0x30a>
		case 0b00010000: //Write Registers data
			switch (spi_rev_2byte[0] & 0b00000111)
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_SPI_RxCpltCallback+0x2c4>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	2b04      	cmp	r3, #4
 800179e:	d02f      	beq.n	8001800 <HAL_SPI_RxCpltCallback+0x2fc>
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	dc31      	bgt.n	8001808 <HAL_SPI_RxCpltCallback+0x304>
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HAL_SPI_RxCpltCallback+0x2aa>
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d01d      	beq.n	80017e8 <HAL_SPI_RxCpltCallback+0x2e4>
				break;
			case 0b00000100: //Broadcast to every board
				Write_Registers_data(1);
				break;
			default:
				break;
 80017ac:	e02c      	b.n	8001808 <HAL_SPI_RxCpltCallback+0x304>
				if (BOARD_NUMBER == 1)
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_SPI_RxCpltCallback+0x2c8>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d103      	bne.n	80017be <HAL_SPI_RxCpltCallback+0x2ba>
					Write_Registers_data(1);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7ff fd9a 	bl	80012f0 <Write_Registers_data>
				break;
 80017bc:	e025      	b.n	800180a <HAL_SPI_RxCpltCallback+0x306>
					Write_Registers_data(0);
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff fd96 	bl	80012f0 <Write_Registers_data>
				break;
 80017c4:	e021      	b.n	800180a <HAL_SPI_RxCpltCallback+0x306>
 80017c6:	bf00      	nop
 80017c8:	20070274 	.word	0x20070274
 80017cc:	2000001e 	.word	0x2000001e
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004
 80017d8:	2001026c 	.word	0x2001026c
 80017dc:	20000170 	.word	0x20000170
 80017e0:	2000026c 	.word	0x2000026c
 80017e4:	2002026c 	.word	0x2002026c
				if (BOARD_NUMBER == 2)
 80017e8:	4ba6      	ldr	r3, [pc, #664]	; (8001a84 <HAL_SPI_RxCpltCallback+0x580>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d103      	bne.n	80017f8 <HAL_SPI_RxCpltCallback+0x2f4>
					Write_Registers_data(1);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fd7d 	bl	80012f0 <Write_Registers_data>
				break;
 80017f6:	e008      	b.n	800180a <HAL_SPI_RxCpltCallback+0x306>
					Write_Registers_data(0);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fd79 	bl	80012f0 <Write_Registers_data>
				break;
 80017fe:	e004      	b.n	800180a <HAL_SPI_RxCpltCallback+0x306>
				Write_Registers_data(1);
 8001800:	2001      	movs	r0, #1
 8001802:	f7ff fd75 	bl	80012f0 <Write_Registers_data>
				break;
 8001806:	e000      	b.n	800180a <HAL_SPI_RxCpltCallback+0x306>
				break;
 8001808:	bf00      	nop
			}
			break;
 800180a:	e000      	b.n	800180e <HAL_SPI_RxCpltCallback+0x30a>
		case 0b00011000: //Write partial content of frame buffer
			break;
 800180c:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 800180e:	e11c      	b.n	8001a4a <HAL_SPI_RxCpltCallback+0x546>
	case 0b01000000: //Master SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001810:	4b9d      	ldr	r3, [pc, #628]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001818:	2b28      	cmp	r3, #40	; 0x28
 800181a:	f200 8118 	bhi.w	8001a4e <HAL_SPI_RxCpltCallback+0x54a>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_SPI_RxCpltCallback+0x320>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	080018c9 	.word	0x080018c9
 8001828:	08001a4f 	.word	0x08001a4f
 800182c:	08001a4f 	.word	0x08001a4f
 8001830:	08001a4f 	.word	0x08001a4f
 8001834:	08001a4f 	.word	0x08001a4f
 8001838:	08001a4f 	.word	0x08001a4f
 800183c:	08001a4f 	.word	0x08001a4f
 8001840:	08001a4f 	.word	0x08001a4f
 8001844:	080018c9 	.word	0x080018c9
 8001848:	08001a4f 	.word	0x08001a4f
 800184c:	08001a4f 	.word	0x08001a4f
 8001850:	08001a4f 	.word	0x08001a4f
 8001854:	08001a4f 	.word	0x08001a4f
 8001858:	08001a4f 	.word	0x08001a4f
 800185c:	08001a4f 	.word	0x08001a4f
 8001860:	08001a4f 	.word	0x08001a4f
 8001864:	080018c9 	.word	0x080018c9
 8001868:	08001a4f 	.word	0x08001a4f
 800186c:	08001a4f 	.word	0x08001a4f
 8001870:	08001a4f 	.word	0x08001a4f
 8001874:	08001a4f 	.word	0x08001a4f
 8001878:	08001a4f 	.word	0x08001a4f
 800187c:	08001a4f 	.word	0x08001a4f
 8001880:	08001a4f 	.word	0x08001a4f
 8001884:	080018c9 	.word	0x080018c9
 8001888:	08001a4f 	.word	0x08001a4f
 800188c:	08001a4f 	.word	0x08001a4f
 8001890:	08001a4f 	.word	0x08001a4f
 8001894:	08001a4f 	.word	0x08001a4f
 8001898:	08001a4f 	.word	0x08001a4f
 800189c:	08001a4f 	.word	0x08001a4f
 80018a0:	08001a4f 	.word	0x08001a4f
 80018a4:	080018c9 	.word	0x080018c9
 80018a8:	08001a4f 	.word	0x08001a4f
 80018ac:	08001a4f 	.word	0x08001a4f
 80018b0:	08001a4f 	.word	0x08001a4f
 80018b4:	08001a4f 	.word	0x08001a4f
 80018b8:	08001a4f 	.word	0x08001a4f
 80018bc:	08001a4f 	.word	0x08001a4f
 80018c0:	08001a4f 	.word	0x08001a4f
 80018c4:	080018c9 	.word	0x080018c9
		{
		case 0b00000000: //Start SPI write data
			break;
 80018c8:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 80018ca:	e0c0      	b.n	8001a4e <HAL_SPI_RxCpltCallback+0x54a>
	case 0b10000000: //I2C command
		switch (spi_rev_2byte[0] & 0b00111000)
 80018cc:	4b6e      	ldr	r3, [pc, #440]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_SPI_RxCpltCallback+0x3dc>
 80018d8:	2b20      	cmp	r3, #32
 80018da:	f040 80ba 	bne.w	8001a52 <HAL_SPI_RxCpltCallback+0x54e>
		{
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 80018de:	e000      	b.n	80018e2 <HAL_SPI_RxCpltCallback+0x3de>
			break;
 80018e0:	bf00      	nop
		}
		break;
 80018e2:	e0b6      	b.n	8001a52 <HAL_SPI_RxCpltCallback+0x54e>
	case 0b11000000: //SPI flash function & Slave SPI
		switch (spi_rev_2byte[0] & 0b00111000)
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	f000 80aa 	beq.w	8001a46 <HAL_SPI_RxCpltCallback+0x542>
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	f300 80af 	bgt.w	8001a56 <HAL_SPI_RxCpltCallback+0x552>
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_SPI_RxCpltCallback+0x3fe>
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d078      	beq.n	80019f2 <HAL_SPI_RxCpltCallback+0x4ee>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001900:	e0a9      	b.n	8001a56 <HAL_SPI_RxCpltCallback+0x552>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001902:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	d04c      	beq.n	80019a8 <HAL_SPI_RxCpltCallback+0x4a4>
 800190e:	2b04      	cmp	r3, #4
 8001910:	dc69      	bgt.n	80019e6 <HAL_SPI_RxCpltCallback+0x4e2>
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_SPI_RxCpltCallback+0x418>
 8001916:	2b01      	cmp	r3, #1
 8001918:	d023      	beq.n	8001962 <HAL_SPI_RxCpltCallback+0x45e>
				break;
 800191a:	e064      	b.n	80019e6 <HAL_SPI_RxCpltCallback+0x4e2>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 800191c:	4b5b      	ldr	r3, [pc, #364]	; (8001a8c <HAL_SPI_RxCpltCallback+0x588>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <HAL_SPI_RxCpltCallback+0x58c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	fb12 f303 	smulbb	r3, r2, r3
 800192c:	b29a      	uxth	r2, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	4958      	ldr	r1, [pc, #352]	; (8001a94 <HAL_SPI_RxCpltCallback+0x590>)
 8001934:	4858      	ldr	r0, [pc, #352]	; (8001a98 <HAL_SPI_RxCpltCallback+0x594>)
 8001936:	f004 fcd3 	bl	80062e0 <HAL_SPI_Receive>
				if (BOARD_NUMBER == 1)
 800193a:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <HAL_SPI_RxCpltCallback+0x580>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d153      	bne.n	80019ea <HAL_SPI_RxCpltCallback+0x4e6>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001942:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 8001944:	785b      	ldrb	r3, [r3, #1]
 8001946:	3b01      	subs	r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fac0 	bl	8001ed0 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001950:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 8001952:	785b      	ldrb	r3, [r3, #1]
 8001954:	3b01      	subs	r3, #1
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4619      	mov	r1, r3
 800195a:	484e      	ldr	r0, [pc, #312]	; (8001a94 <HAL_SPI_RxCpltCallback+0x590>)
 800195c:	f000 f952 	bl	8001c04 <write_flash_page>
				break;
 8001960:	e043      	b.n	80019ea <HAL_SPI_RxCpltCallback+0x4e6>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001962:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_SPI_RxCpltCallback+0x588>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_SPI_RxCpltCallback+0x58c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	fb12 f303 	smulbb	r3, r2, r3
 8001972:	b29a      	uxth	r2, r3
 8001974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001978:	4946      	ldr	r1, [pc, #280]	; (8001a94 <HAL_SPI_RxCpltCallback+0x590>)
 800197a:	4847      	ldr	r0, [pc, #284]	; (8001a98 <HAL_SPI_RxCpltCallback+0x594>)
 800197c:	f004 fcb0 	bl	80062e0 <HAL_SPI_Receive>
				if (BOARD_NUMBER == 2)
 8001980:	4b40      	ldr	r3, [pc, #256]	; (8001a84 <HAL_SPI_RxCpltCallback+0x580>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d132      	bne.n	80019ee <HAL_SPI_RxCpltCallback+0x4ea>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001988:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	3b01      	subs	r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fa9d 	bl	8001ed0 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001996:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	3b01      	subs	r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	4619      	mov	r1, r3
 80019a0:	483c      	ldr	r0, [pc, #240]	; (8001a94 <HAL_SPI_RxCpltCallback+0x590>)
 80019a2:	f000 f92f 	bl	8001c04 <write_flash_page>
				break;
 80019a6:	e022      	b.n	80019ee <HAL_SPI_RxCpltCallback+0x4ea>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 80019a8:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_SPI_RxCpltCallback+0x588>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_SPI_RxCpltCallback+0x58c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	fb12 f303 	smulbb	r3, r2, r3
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	4935      	ldr	r1, [pc, #212]	; (8001a94 <HAL_SPI_RxCpltCallback+0x590>)
 80019c0:	4835      	ldr	r0, [pc, #212]	; (8001a98 <HAL_SPI_RxCpltCallback+0x594>)
 80019c2:	f004 fc8d 	bl	80062e0 <HAL_SPI_Receive>
				erase_flash_sector(spi_rev_2byte[1] - 1);
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 80019c8:	785b      	ldrb	r3, [r3, #1]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fa7e 	bl	8001ed0 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	3b01      	subs	r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	482d      	ldr	r0, [pc, #180]	; (8001a94 <HAL_SPI_RxCpltCallback+0x590>)
 80019e0:	f000 f910 	bl	8001c04 <write_flash_page>
				break;
 80019e4:	e004      	b.n	80019f0 <HAL_SPI_RxCpltCallback+0x4ec>
				break;
 80019e6:	bf00      	nop
 80019e8:	e02e      	b.n	8001a48 <HAL_SPI_RxCpltCallback+0x544>
				break;
 80019ea:	bf00      	nop
 80019ec:	e02c      	b.n	8001a48 <HAL_SPI_RxCpltCallback+0x544>
				break;
 80019ee:	bf00      	nop
			break;
 80019f0:	e02a      	b.n	8001a48 <HAL_SPI_RxCpltCallback+0x544>
			switch (spi_rev_2byte[0] & 0b00000111)
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d014      	beq.n	8001a28 <HAL_SPI_RxCpltCallback+0x524>
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	dc1d      	bgt.n	8001a3e <HAL_SPI_RxCpltCallback+0x53a>
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_SPI_RxCpltCallback+0x506>
 8001a06:	2b01      	cmp	r3, #1
				break;
 8001a08:	e01c      	b.n	8001a44 <HAL_SPI_RxCpltCallback+0x540>
				if (BOARD_NUMBER == 1)
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <HAL_SPI_RxCpltCallback+0x580>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d117      	bne.n	8001a42 <HAL_SPI_RxCpltCallback+0x53e>
					reset_flash_software();
 8001a12:	f000 fb33 	bl	800207c <reset_flash_software>
					read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	481c      	ldr	r0, [pc, #112]	; (8001a94 <HAL_SPI_RxCpltCallback+0x590>)
 8001a22:	f000 f9bf 	bl	8001da4 <read_flash_page>
				break;
 8001a26:	e00c      	b.n	8001a42 <HAL_SPI_RxCpltCallback+0x53e>
				reset_flash_software();
 8001a28:	f000 fb28 	bl	800207c <reset_flash_software>
				read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 8001a2e:	785b      	ldrb	r3, [r3, #1]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	4619      	mov	r1, r3
 8001a36:	4817      	ldr	r0, [pc, #92]	; (8001a94 <HAL_SPI_RxCpltCallback+0x590>)
 8001a38:	f000 f9b4 	bl	8001da4 <read_flash_page>
				break;
 8001a3c:	e002      	b.n	8001a44 <HAL_SPI_RxCpltCallback+0x540>
				break;
 8001a3e:	bf00      	nop
 8001a40:	e002      	b.n	8001a48 <HAL_SPI_RxCpltCallback+0x544>
				break;
 8001a42:	bf00      	nop
			break;
 8001a44:	e000      	b.n	8001a48 <HAL_SPI_RxCpltCallback+0x544>
			break;
 8001a46:	bf00      	nop
		break;
 8001a48:	e005      	b.n	8001a56 <HAL_SPI_RxCpltCallback+0x552>
		break;
 8001a4a:	bf00      	nop
 8001a4c:	e004      	b.n	8001a58 <HAL_SPI_RxCpltCallback+0x554>
		break;
 8001a4e:	bf00      	nop
 8001a50:	e002      	b.n	8001a58 <HAL_SPI_RxCpltCallback+0x554>
		break;
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <HAL_SPI_RxCpltCallback+0x554>
		break;
 8001a56:	bf00      	nop
	}
	// USB command: ID
	switch (spi_rev_2byte[0] & 0b00000111)
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_SPI_RxCpltCallback+0x566>
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d002      	beq.n	8001a6e <HAL_SPI_RxCpltCallback+0x56a>
	case 0b00000000: //Command for DIP switch ID = 00
		break;
	case 0b00000001: //Command for DIP switch ID = 01
		break;
	default: //Broadcast to every board
		break;
 8001a68:	e002      	b.n	8001a70 <HAL_SPI_RxCpltCallback+0x56c>
		break;
 8001a6a:	bf00      	nop
 8001a6c:	e000      	b.n	8001a70 <HAL_SPI_RxCpltCallback+0x56c>
		break;
 8001a6e:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8001a70:	2202      	movs	r2, #2
 8001a72:	4905      	ldr	r1, [pc, #20]	; (8001a88 <HAL_SPI_RxCpltCallback+0x584>)
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <HAL_SPI_RxCpltCallback+0x594>)
 8001a76:	f004 ff8d 	bl	8006994 <HAL_SPI_Receive_IT>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000001e 	.word	0x2000001e
 8001a88:	20070274 	.word	0x20070274
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000004 	.word	0x20000004
 8001a94:	2000026c 	.word	0x2000026c
 8001a98:	20000170 	.word	0x20000170

08001a9c <display_panel>:

void display_panel(uint8_t *frame_buf)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b08b      	sub	sp, #44	; 0x2c
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	int num_ones = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 8001aa8:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <display_panel+0xe4>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <display_panel+0xe8>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 12; i++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	e00d      	b.n	8001ade <display_panel+0x42>
	{
		if (Pixel_Mapping_one & (1 << i))
 8001ac2:	897a      	ldrh	r2, [r7, #10]
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	fa42 f303 	asr.w	r3, r2, r3
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <display_panel+0x3c>
		{
			num_ones++;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	3301      	adds	r3, #1
 8001adc:	623b      	str	r3, [r7, #32]
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	2b0b      	cmp	r3, #11
 8001ae2:	ddee      	ble.n	8001ac2 <display_panel+0x26>
		}
	}

	int frame_buf_count = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
	int Pixel_Mapping_one_count = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
	int c = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	e034      	b.n	8001b60 <display_panel+0xc4>
	{
		Pixel_Mapping_one_count = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
		c = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 12; j++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e022      	b.n	8001b4a <display_panel+0xae>
		{
			if (Pixel_Mapping_one & (1 << j))
 8001b04:	897a      	ldrh	r2, [r7, #10]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	fa42 f303 	asr.w	r3, r2, r3
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d014      	beq.n	8001b3e <display_panel+0xa2>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4413      	add	r3, r2
 8001b1a:	61fb      	str	r3, [r7, #28]
				image_arr_rgb888[frame_buf_count] = frame_buf[i + c];
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	4413      	add	r3, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	7819      	ldrb	r1, [r3, #0]
 8001b2a:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <display_panel+0xec>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	4413      	add	r3, r2
 8001b30:	460a      	mov	r2, r1
 8001b32:	701a      	strb	r2, [r3, #0]
				c++;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
				Pixel_Mapping_one_count = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
			}
			Pixel_Mapping_one_count++;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61bb      	str	r3, [r7, #24]
		for (int j = 0; j < 12; j++)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b0b      	cmp	r3, #11
 8001b4e:	ddd9      	ble.n	8001b04 <display_panel+0x68>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4413      	add	r3, r2
 8001b56:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	4413      	add	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <display_panel+0xf0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <display_panel+0xf4>)
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fb03 f202 	mul.w	r2, r3, r2
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d8c1      	bhi.n	8001af6 <display_panel+0x5a>
	}
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	372c      	adds	r7, #44	; 0x2c
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	2000001c 	.word	0x2000001c
 8001b84:	2000001d 	.word	0x2000001d
 8001b88:	20040270 	.word	0x20040270
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004

08001b94 <read_flash_SR>:

/*====================================flash function begin====================================*/
uint8_t read_flash_SR()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	uint8_t dat[1] = {0x00};
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba4:	480e      	ldr	r0, [pc, #56]	; (8001be0 <read_flash_SR+0x4c>)
 8001ba6:	f002 f989 	bl	8003ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x05}, 1, 1000);
 8001baa:	2305      	movs	r3, #5
 8001bac:	703b      	strb	r3, [r7, #0]
 8001bae:	4639      	mov	r1, r7
 8001bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <read_flash_SR+0x50>)
 8001bb8:	f004 fa1d 	bl	8005ff6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)dat, 1, 1000);
 8001bbc:	1d39      	adds	r1, r7, #4
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <read_flash_SR+0x50>)
 8001bc6:	f004 fb8b 	bl	80062e0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <read_flash_SR+0x4c>)
 8001bd2:	f002 f973 	bl	8003ebc <HAL_GPIO_WritePin>

	return dat[0];
 8001bd6:	793b      	ldrb	r3, [r7, #4]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	48000400 	.word	0x48000400
 8001be4:	2000010c 	.word	0x2000010c

08001be8 <flash_wait_nobusy>:

void flash_wait_nobusy(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    while(((read_flash_SR()) & 0x01)==0x01);
 8001bec:	bf00      	nop
 8001bee:	f7ff ffd1 	bl	8001b94 <read_flash_SR>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d0f8      	beq.n	8001bee <flash_wait_nobusy+0x6>
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <write_flash_page>:
		flash_wait_nobusy();
	}
}*/

void write_flash_page(uint8_t *data, uint8_t image_id)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
	if(content_size==0) divide_value=256/64;
 8001c14:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <write_flash_page+0x194>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <write_flash_page+0x1e>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c20:	e00c      	b.n	8001c3c <write_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 8001c22:	4b5d      	ldr	r3, [pc, #372]	; (8001d98 <write_flash_page+0x194>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <write_flash_page+0x2c>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c2e:	e005      	b.n	8001c3c <write_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <write_flash_page+0x194>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d101      	bne.n	8001c3c <write_flash_page+0x38>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34

	int image_id_H = image_id / divide_value;
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
	int image_id_L = image_id % divide_value;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c4a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001c4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c50:	fb01 f202 	mul.w	r2, r1, r2
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
	int count = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8001c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c62:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6e:	e07e      	b.n	8001d6e <write_flash_page+0x16a>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c76:	4849      	ldr	r0, [pc, #292]	; (8001d9c <write_flash_page+0x198>)
 8001c78:	f002 f920 	bl	8003ebc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	f887 3020 	strb.w	r3, [r7, #32]
 8001c82:	f107 0120 	add.w	r1, r7, #32
 8001c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4844      	ldr	r0, [pc, #272]	; (8001da0 <write_flash_page+0x19c>)
 8001c8e:	f004 f9b2 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c98:	4840      	ldr	r0, [pc, #256]	; (8001d9c <write_flash_page+0x198>)
 8001c9a:	f002 f90f 	bl	8003ebc <HAL_GPIO_WritePin>
		delay_us(10);
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f000 fc0e 	bl	80024c0 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001caa:	483c      	ldr	r0, [pc, #240]	; (8001d9c <write_flash_page+0x198>)
 8001cac:	f002 f906 	bl	8003ebc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	773b      	strb	r3, [r7, #28]
 8001cb4:	f107 011c 	add.w	r1, r7, #28
 8001cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4838      	ldr	r0, [pc, #224]	; (8001da0 <write_flash_page+0x19c>)
 8001cc0:	f004 f999 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8001cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	763b      	strb	r3, [r7, #24]
 8001cca:	f107 0118 	add.w	r1, r7, #24
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4832      	ldr	r0, [pc, #200]	; (8001da0 <write_flash_page+0x19c>)
 8001cd6:	f004 f98e 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	753b      	strb	r3, [r7, #20]
 8001ce0:	f107 0114 	add.w	r1, r7, #20
 8001ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce8:	2201      	movs	r2, #1
 8001cea:	482d      	ldr	r0, [pc, #180]	; (8001da0 <write_flash_page+0x19c>)
 8001cec:	f004 f983 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	743b      	strb	r3, [r7, #16]
 8001cf4:	f107 0110 	add.w	r1, r7, #16
 8001cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4828      	ldr	r0, [pc, #160]	; (8001da0 <write_flash_page+0x19c>)
 8001d00:	f004 f979 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &data[count*256], 256, 1000);
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	461a      	mov	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1899      	adds	r1, r3, r2
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d16:	4822      	ldr	r0, [pc, #136]	; (8001da0 <write_flash_page+0x19c>)
 8001d18:	f004 f96d 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d22:	481e      	ldr	r0, [pc, #120]	; (8001d9c <write_flash_page+0x198>)
 8001d24:	f002 f8ca 	bl	8003ebc <HAL_GPIO_WritePin>
		delay_us(10);
 8001d28:	200a      	movs	r0, #10
 8001d2a:	f000 fbc9 	bl	80024c0 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d34:	4819      	ldr	r0, [pc, #100]	; (8001d9c <write_flash_page+0x198>)
 8001d36:	f002 f8c1 	bl	8003ebc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	733b      	strb	r3, [r7, #12]
 8001d3e:	f107 010c 	add.w	r1, r7, #12
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	2201      	movs	r2, #1
 8001d48:	4815      	ldr	r0, [pc, #84]	; (8001da0 <write_flash_page+0x19c>)
 8001d4a:	f004 f954 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d54:	4811      	ldr	r0, [pc, #68]	; (8001d9c <write_flash_page+0x198>)
 8001d56:	f002 f8b1 	bl	8003ebc <HAL_GPIO_WritePin>
		delay_us(1000);
 8001d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d5e:	f000 fbaf 	bl	80024c0 <delay_us>
		count++;
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	3301      	adds	r3, #1
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	3301      	adds	r3, #1
 8001d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d78:	fb91 f2f2 	sdiv	r2, r1, r2
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	4293      	cmp	r3, r2
 8001d86:	f4ff af73 	bcc.w	8001c70 <write_flash_page+0x6c>
	}

	flash_wait_nobusy();
 8001d8a:	f7ff ff2d 	bl	8001be8 <flash_wait_nobusy>
}
 8001d8e:	bf00      	nop
 8001d90:	3738      	adds	r7, #56	; 0x38
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000000b 	.word	0x2000000b
 8001d9c:	48000400 	.word	0x48000400
 8001da0:	2000010c 	.word	0x2000010c

08001da4 <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <read_flash_page+0x120>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <read_flash_page+0x1e>
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc0:	e00c      	b.n	8001ddc <read_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 8001dc2:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <read_flash_page+0x120>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d102      	bne.n	8001dd0 <read_flash_page+0x2c>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dce:	e005      	b.n	8001ddc <read_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8001dd0:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <read_flash_page+0x120>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d101      	bne.n	8001ddc <read_flash_page+0x38>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c

	int image_id_H = image_id / divide_value;
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001de4:	623b      	str	r3, [r7, #32]
	int image_id_L = image_id % divide_value;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dea:	fb93 f2f2 	sdiv	r2, r3, r2
 8001dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001df0:	fb01 f202 	mul.w	r2, r1, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	61fb      	str	r3, [r7, #28]
	int count = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8001dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	e047      	b.n	8001ea0 <read_flash_page+0xfc>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e16:	482c      	ldr	r0, [pc, #176]	; (8001ec8 <read_flash_page+0x124>)
 8001e18:	f002 f850 	bl	8003ebc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	763b      	strb	r3, [r7, #24]
 8001e20:	f107 0118 	add.w	r1, r7, #24
 8001e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4828      	ldr	r0, [pc, #160]	; (8001ecc <read_flash_page+0x128>)
 8001e2c:	f004 f8e3 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	753b      	strb	r3, [r7, #20]
 8001e36:	f107 0114 	add.w	r1, r7, #20
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4822      	ldr	r0, [pc, #136]	; (8001ecc <read_flash_page+0x128>)
 8001e42:	f004 f8d8 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	743b      	strb	r3, [r7, #16]
 8001e4c:	f107 0110 	add.w	r1, r7, #16
 8001e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e54:	2201      	movs	r2, #1
 8001e56:	481d      	ldr	r0, [pc, #116]	; (8001ecc <read_flash_page+0x128>)
 8001e58:	f004 f8cd 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	733b      	strb	r3, [r7, #12]
 8001e60:	f107 010c 	add.w	r1, r7, #12
 8001e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4818      	ldr	r0, [pc, #96]	; (8001ecc <read_flash_page+0x128>)
 8001e6c:	f004 f8c3 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &data[count*256], 256, 1000);
 8001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	1899      	adds	r1, r3, r2
 8001e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e82:	4812      	ldr	r0, [pc, #72]	; (8001ecc <read_flash_page+0x128>)
 8001e84:	f004 fa2c 	bl	80062e0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8e:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <read_flash_page+0x124>)
 8001e90:	f002 f814 	bl	8003ebc <HAL_GPIO_WritePin>
		count++;
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	3301      	adds	r3, #1
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eaa:	fb91 f2f2 	sdiv	r2, r1, r2
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d3aa      	bcc.n	8001e10 <read_flash_page+0x6c>
	}
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	3730      	adds	r7, #48	; 0x30
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000000b 	.word	0x2000000b
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	2000010c 	.word	0x2000010c

08001ed0 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
	int divide_value = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8001ede:	4b64      	ldr	r3, [pc, #400]	; (8002070 <erase_flash_sector+0x1a0>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <erase_flash_sector+0x1c>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eea:	e00c      	b.n	8001f06 <erase_flash_sector+0x36>
	else if(content_size==1) divide_value=256/128;
 8001eec:	4b60      	ldr	r3, [pc, #384]	; (8002070 <erase_flash_sector+0x1a0>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d102      	bne.n	8001efa <erase_flash_sector+0x2a>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	e005      	b.n	8001f06 <erase_flash_sector+0x36>
	else if(content_size==2) divide_value=256/256;
 8001efa:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <erase_flash_sector+0x1a0>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d101      	bne.n	8001f06 <erase_flash_sector+0x36>
 8001f02:	2301      	movs	r3, #1
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t page_count = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(content_size==0) page_count=16/4;
 8001f0c:	4b58      	ldr	r3, [pc, #352]	; (8002070 <erase_flash_sector+0x1a0>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d103      	bne.n	8001f1c <erase_flash_sector+0x4c>
 8001f14:	2304      	movs	r3, #4
 8001f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f1a:	e00e      	b.n	8001f3a <erase_flash_sector+0x6a>
	else if(content_size==1) page_count=32/4;
 8001f1c:	4b54      	ldr	r3, [pc, #336]	; (8002070 <erase_flash_sector+0x1a0>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d103      	bne.n	8001f2c <erase_flash_sector+0x5c>
 8001f24:	2308      	movs	r3, #8
 8001f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001f2a:	e006      	b.n	8001f3a <erase_flash_sector+0x6a>
	else if(content_size==2) page_count=64/4;
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <erase_flash_sector+0x1a0>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d102      	bne.n	8001f3a <erase_flash_sector+0x6a>
 8001f34:	2310      	movs	r3, #16
 8001f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	int image_id_H = image_id / divide_value;
 8001f3a:	79fa      	ldrb	r2, [r7, #7]
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
	int image_id_L = image_id % divide_value;
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f48:	fb93 f2f2 	sdiv	r2, r3, r2
 8001f4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f4e:	fb01 f202 	mul.w	r2, r1, r2
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	623b      	str	r3, [r7, #32]

	reset_flash_software();
 8001f56:	f000 f891 	bl	800207c <reset_flash_software>

	for(uint8_t i = 0; i < page_count; i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001f60:	e07a      	b.n	8002058 <erase_flash_sector+0x188>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	4842      	ldr	r0, [pc, #264]	; (8002074 <erase_flash_sector+0x1a4>)
 8001f6a:	f001 ffa7 	bl	8003ebc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8001f6e:	2306      	movs	r3, #6
 8001f70:	773b      	strb	r3, [r7, #28]
 8001f72:	f107 011c 	add.w	r1, r7, #28
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	483e      	ldr	r0, [pc, #248]	; (8002078 <erase_flash_sector+0x1a8>)
 8001f7e:	f004 f83a 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	483a      	ldr	r0, [pc, #232]	; (8002074 <erase_flash_sector+0x1a4>)
 8001f8a:	f001 ff97 	bl	8003ebc <HAL_GPIO_WritePin>
		delay_us(10);
 8001f8e:	200a      	movs	r0, #10
 8001f90:	f000 fa96 	bl	80024c0 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9a:	4836      	ldr	r0, [pc, #216]	; (8002074 <erase_flash_sector+0x1a4>)
 8001f9c:	f001 ff8e 	bl	8003ebc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x20}, 1, 1000);
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	763b      	strb	r3, [r7, #24]
 8001fa4:	f107 0118 	add.w	r1, r7, #24
 8001fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fac:	2201      	movs	r2, #1
 8001fae:	4832      	ldr	r0, [pc, #200]	; (8002078 <erase_flash_sector+0x1a8>)
 8001fb0:	f004 f821 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	753b      	strb	r3, [r7, #20]
 8001fba:	f107 0114 	add.w	r1, r7, #20
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	482c      	ldr	r0, [pc, #176]	; (8002078 <erase_flash_sector+0x1a8>)
 8001fc6:	f004 f816 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){(image_id_L*(0x10*page_count)) + (0x10*i)}, 1, 1000);
 8001fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fce:	6a3a      	ldr	r2, [r7, #32]
 8001fd0:	fb03 f202 	mul.w	r2, r3, r2
 8001fd4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001fd8:	4413      	add	r3, r2
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	743b      	strb	r3, [r7, #16]
 8001fe2:	f107 0110 	add.w	r1, r7, #16
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	2201      	movs	r2, #1
 8001fec:	4822      	ldr	r0, [pc, #136]	; (8002078 <erase_flash_sector+0x1a8>)
 8001fee:	f004 f802 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	733b      	strb	r3, [r7, #12]
 8001ff6:	f107 010c 	add.w	r1, r7, #12
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	2201      	movs	r2, #1
 8002000:	481d      	ldr	r0, [pc, #116]	; (8002078 <erase_flash_sector+0x1a8>)
 8002002:	f003 fff8 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	4819      	ldr	r0, [pc, #100]	; (8002074 <erase_flash_sector+0x1a4>)
 800200e:	f001 ff55 	bl	8003ebc <HAL_GPIO_WritePin>
		delay_us(10);
 8002012:	200a      	movs	r0, #10
 8002014:	f000 fa54 	bl	80024c0 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201e:	4815      	ldr	r0, [pc, #84]	; (8002074 <erase_flash_sector+0x1a4>)
 8002020:	f001 ff4c 	bl	8003ebc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002024:	2304      	movs	r3, #4
 8002026:	723b      	strb	r3, [r7, #8]
 8002028:	f107 0108 	add.w	r1, r7, #8
 800202c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002030:	2201      	movs	r2, #1
 8002032:	4811      	ldr	r0, [pc, #68]	; (8002078 <erase_flash_sector+0x1a8>)
 8002034:	f003 ffdf 	bl	8005ff6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800203e:	480d      	ldr	r0, [pc, #52]	; (8002074 <erase_flash_sector+0x1a4>)
 8002040:	f001 ff3c 	bl	8003ebc <HAL_GPIO_WritePin>
		delay_us(10);
 8002044:	200a      	movs	r0, #10
 8002046:	f000 fa3b 	bl	80024c0 <delay_us>

		flash_wait_nobusy();
 800204a:	f7ff fdcd 	bl	8001be8 <flash_wait_nobusy>
	for(uint8_t i = 0; i < page_count; i++)
 800204e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002052:	3301      	adds	r3, #1
 8002054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002058:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800205c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002060:	429a      	cmp	r2, r3
 8002062:	f4ff af7e 	bcc.w	8001f62 <erase_flash_sector+0x92>
	}
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000000b 	.word	0x2000000b
 8002074:	48000400 	.word	0x48000400
 8002078:	2000010c 	.word	0x2000010c

0800207c <reset_flash_software>:

void reset_flash_software()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002088:	481a      	ldr	r0, [pc, #104]	; (80020f4 <reset_flash_software+0x78>)
 800208a:	f001 ff17 	bl	8003ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x66}, 1, 1000);
 800208e:	2366      	movs	r3, #102	; 0x66
 8002090:	713b      	strb	r3, [r7, #4]
 8002092:	1d39      	adds	r1, r7, #4
 8002094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002098:	2201      	movs	r2, #1
 800209a:	4817      	ldr	r0, [pc, #92]	; (80020f8 <reset_flash_software+0x7c>)
 800209c:	f003 ffab 	bl	8005ff6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a6:	4813      	ldr	r0, [pc, #76]	; (80020f4 <reset_flash_software+0x78>)
 80020a8:	f001 ff08 	bl	8003ebc <HAL_GPIO_WritePin>
	delay_100ns(1);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f000 fa22 	bl	80024f6 <delay_100ns>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020b8:	480e      	ldr	r0, [pc, #56]	; (80020f4 <reset_flash_software+0x78>)
 80020ba:	f001 feff 	bl	8003ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x99}, 1, 1000);
 80020be:	2399      	movs	r3, #153	; 0x99
 80020c0:	703b      	strb	r3, [r7, #0]
 80020c2:	4639      	mov	r1, r7
 80020c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c8:	2201      	movs	r2, #1
 80020ca:	480b      	ldr	r0, [pc, #44]	; (80020f8 <reset_flash_software+0x7c>)
 80020cc:	f003 ff93 	bl	8005ff6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d6:	4807      	ldr	r0, [pc, #28]	; (80020f4 <reset_flash_software+0x78>)
 80020d8:	f001 fef0 	bl	8003ebc <HAL_GPIO_WritePin>
	delay_100ns(1);
 80020dc:	2001      	movs	r0, #1
 80020de:	f000 fa0a 	bl	80024f6 <delay_100ns>
	delay_us(1000);
 80020e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e6:	f000 f9eb 	bl	80024c0 <delay_us>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	48000400 	.word	0x48000400
 80020f8:	2000010c 	.word	0x2000010c

080020fc <my_MX_DSIHOST_DSI_Init>:
/*====================================flash function end====================================*/

/*====================================customized function start====================================*/
static void my_MX_DSIHOST_DSI_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b0ae      	sub	sp, #184	; 0xb8
 8002100:	af00      	add	r7, sp, #0
  DSI_PLLInitTypeDef PLLInit = {0};
 8002102:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800210e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002112:	2224      	movs	r2, #36	; 0x24
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f006 f964 	bl	80083e4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800211c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	226c      	movs	r2, #108	; 0x6c
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f006 f955 	bl	80083e4 <memset>
  hdsi.Instance = DSI;
 800213a:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 800213c:	4a6d      	ldr	r2, [pc, #436]	; (80022f4 <my_MX_DSIHOST_DSI_Init+0x1f8>)
 800213e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002140:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002142:	2200      	movs	r2, #0
 8002144:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8002146:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002148:	2202      	movs	r2, #2
 800214a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800214c:	4b68      	ldr	r3, [pc, #416]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8002152:	2332      	movs	r3, #50	; 0x32
 8002154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8002158:	2301      	movs	r3, #1
 800215a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 800215e:	2301      	movs	r3, #1
 8002160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002164:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002168:	4619      	mov	r1, r3
 800216a:	4861      	ldr	r0, [pc, #388]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 800216c:	f000 fea0 	bl	8002eb0 <HAL_DSI_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <my_MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8002176:	f000 fa35 	bl	80025e4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800217a:	2301      	movs	r3, #1
 800217c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80021b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021b4:	4619      	mov	r1, r3
 80021b6:	484e      	ldr	r0, [pc, #312]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80021b8:	f001 faed 	bl	8003796 <HAL_DSI_ConfigHostTimeouts>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <my_MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80021c2:	f000 fa0f 	bl	80025e4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 80021c6:	2313      	movs	r3, #19
 80021c8:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 80021ca:	230f      	movs	r3, #15
 80021cc:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 80021ce:	2309      	movs	r3, #9
 80021d0:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 80021d2:	230a      	movs	r3, #10
 80021d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80021e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021e6:	4619      	mov	r1, r3
 80021e8:	4841      	ldr	r0, [pc, #260]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80021ea:	f001 fa6a 	bl	80036c2 <HAL_DSI_ConfigPhyTimer>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <my_MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 80021f4:	f000 f9f6 	bl	80025e4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80021f8:	f242 7110 	movw	r1, #10000	; 0x2710
 80021fc:	483c      	ldr	r0, [pc, #240]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80021fe:	f001 fc86 	bl	8003b0e <HAL_DSI_SetLowPowerRXFilter>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <my_MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8002208:	f000 f9ec 	bl	80025e4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800220c:	2100      	movs	r1, #0
 800220e:	4838      	ldr	r0, [pc, #224]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002210:	f000 ff6a 	bl	80030e8 <HAL_DSI_ConfigErrorMonitor>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <my_MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 800221a:	f000 f9e3 	bl	80025e4 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8002222:	2305      	movs	r3, #5
 8002224:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 800222a:	2301      	movs	r3, #1
 800222c:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 800222e:	2378      	movs	r3, #120	; 0x78
 8002230:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8002242:	2300      	movs	r3, #0
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = HSA;
 8002246:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = HBP;
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <my_MX_DSIHOST_DSI_Init+0x200>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = HSA+HBP+IMAGE_H+HFP;
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	4b28      	ldr	r3, [pc, #160]	; (80022fc <my_MX_DSIHOST_DSI_Init+0x200>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	4413      	add	r3, r2
 800225e:	461a      	mov	r2, r3
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <my_MX_DSIHOST_DSI_Init+0x204>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4413      	add	r3, r2
 8002266:	4a27      	ldr	r2, [pc, #156]	; (8002304 <my_MX_DSIHOST_DSI_Init+0x208>)
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	4413      	add	r3, r2
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = VSA;
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <my_MX_DSIHOST_DSI_Init+0x20c>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = VBP;
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <my_MX_DSIHOST_DSI_Init+0x210>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = VFP;
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <my_MX_DSIHOST_DSI_Init+0x214>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = IMAGE_W;
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <my_MX_DSIHOST_DSI_Init+0x218>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8002286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228a:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 800228c:	231c      	movs	r3, #28
 800228e:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8002290:	2350      	movs	r3, #80	; 0x50
 8002292:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8002294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002298:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 800229a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229e:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 80022a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 80022a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022aa:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 80022ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b0:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 80022b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b6:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	4619      	mov	r1, r3
 80022c0:	480b      	ldr	r0, [pc, #44]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80022c2:	f000 fff6 	bl	80032b2 <HAL_DSI_ConfigVideoMode>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <my_MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 80022cc:	f000 f98a 	bl	80025e4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80022d0:	2100      	movs	r1, #0
 80022d2:	4807      	ldr	r0, [pc, #28]	; (80022f0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80022d4:	f000 ffc5 	bl	8003262 <HAL_DSI_SetGenericVCID>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <my_MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 80022de:	f000 f981 	bl	80025e4 <Error_Handler>
  }
  LCD_PowerOn();
 80022e2:	f7fe ffef 	bl	80012c4 <LCD_PowerOn>
}
 80022e6:	bf00      	nop
 80022e8:	37b8      	adds	r7, #184	; 0xb8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000048 	.word	0x20000048
 80022f4:	40016c00 	.word	0x40016c00
 80022f8:	20000010 	.word	0x20000010
 80022fc:	20000012 	.word	0x20000012
 8002300:	20000000 	.word	0x20000000
 8002304:	20000014 	.word	0x20000014
 8002308:	20000016 	.word	0x20000016
 800230c:	20000018 	.word	0x20000018
 8002310:	2000001a 	.word	0x2000001a
 8002314:	20000004 	.word	0x20000004

08002318 <my_MX_LTDC_Init>:
static void my_MX_LTDC_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	; 0x38
 800231c:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2234      	movs	r2, #52	; 0x34
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f006 f85d 	bl	80083e4 <memset>
  hltdc.Instance = LTDC;
 800232a:	4b5a      	ldr	r3, [pc, #360]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 800232c:	4a5a      	ldr	r2, [pc, #360]	; (8002498 <my_MX_LTDC_Init+0x180>)
 800232e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8002330:	4b58      	ldr	r3, [pc, #352]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 8002332:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002336:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8002338:	4b56      	ldr	r3, [pc, #344]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 800233a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800233e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002340:	4b54      	ldr	r3, [pc, #336]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002346:	4b53      	ldr	r3, [pc, #332]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = HSA-1;
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <my_MX_LTDC_Init+0x184>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	3b01      	subs	r3, #1
 8002352:	461a      	mov	r2, r3
 8002354:	4b4f      	ldr	r3, [pc, #316]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 8002356:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = VSA-1;
 8002358:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <my_MX_LTDC_Init+0x188>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	3b01      	subs	r3, #1
 800235e:	461a      	mov	r2, r3
 8002360:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 8002362:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = HSA+HBP-1;
 8002364:	4b4d      	ldr	r3, [pc, #308]	; (800249c <my_MX_LTDC_Init+0x184>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b4e      	ldr	r3, [pc, #312]	; (80024a4 <my_MX_LTDC_Init+0x18c>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	4413      	add	r3, r2
 8002370:	3b01      	subs	r3, #1
 8002372:	461a      	mov	r2, r3
 8002374:	4b47      	ldr	r3, [pc, #284]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 8002376:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = VSA+VBP-1;
 8002378:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <my_MX_LTDC_Init+0x188>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <my_MX_LTDC_Init+0x190>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	3b01      	subs	r3, #1
 8002386:	461a      	mov	r2, r3
 8002388:	4b42      	ldr	r3, [pc, #264]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 800238a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = HSA+HBP+IMAGE_H-1;
 800238c:	4b43      	ldr	r3, [pc, #268]	; (800249c <my_MX_LTDC_Init+0x184>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b44      	ldr	r3, [pc, #272]	; (80024a4 <my_MX_LTDC_Init+0x18c>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4b44      	ldr	r3, [pc, #272]	; (80024ac <my_MX_LTDC_Init+0x194>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	3b01      	subs	r3, #1
 80023a2:	4a3c      	ldr	r2, [pc, #240]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 80023a4:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = VSA+VBP+IMAGE_W-1;
 80023a6:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <my_MX_LTDC_Init+0x188>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <my_MX_LTDC_Init+0x190>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <my_MX_LTDC_Init+0x198>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	3b01      	subs	r3, #1
 80023bc:	4a35      	ldr	r2, [pc, #212]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 80023be:	6293      	str	r3, [r2, #40]	; 0x28
  hltdc.Init.TotalWidth = HSA+HBP+IMAGE_H+HFP-1;
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <my_MX_LTDC_Init+0x184>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <my_MX_LTDC_Init+0x18c>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <my_MX_LTDC_Init+0x194>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a37      	ldr	r2, [pc, #220]	; (80024b4 <my_MX_LTDC_Init+0x19c>)
 80023d6:	8812      	ldrh	r2, [r2, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	3b01      	subs	r3, #1
 80023dc:	4a2d      	ldr	r2, [pc, #180]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 80023de:	62d3      	str	r3, [r2, #44]	; 0x2c
  hltdc.Init.TotalHeigh = VSA+VBP+IMAGE_W+VFP-1;
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <my_MX_LTDC_Init+0x188>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <my_MX_LTDC_Init+0x190>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <my_MX_LTDC_Init+0x198>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <my_MX_LTDC_Init+0x1a0>)
 80023f6:	8812      	ldrh	r2, [r2, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	3b01      	subs	r3, #1
 80023fc:	4a25      	ldr	r2, [pc, #148]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 80023fe:	6313      	str	r3, [r2, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 8002402:	22ff      	movs	r2, #255	; 0xff
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8002410:	4b20      	ldr	r3, [pc, #128]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 8002412:	22ff      	movs	r2, #255	; 0xff
 8002414:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002418:	481e      	ldr	r0, [pc, #120]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 800241a:	f001 fd7f 	bl	8003f1c <HAL_LTDC_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <my_MX_LTDC_Init+0x110>
  {
    Error_Handler();
 8002424:	f000 f8de 	bl	80025e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = IMAGE_H;
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <my_MX_LTDC_Init+0x194>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = IMAGE_W;
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <my_MX_LTDC_Init+0x198>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800243c:	2301      	movs	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002440:	23ff      	movs	r3, #255	; 0xff
 8002442:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800244e:	2305      	movs	r3, #5
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <my_MX_LTDC_Init+0x1a4>)
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = IMAGE_H;
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <my_MX_LTDC_Init+0x194>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = IMAGE_W;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <my_MX_LTDC_Init+0x198>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8002462:	23ff      	movs	r3, #255	; 0xff
 8002464:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8002468:	23ff      	movs	r3, #255	; 0xff
 800246a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 800246e:	23ff      	movs	r3, #255	; 0xff
 8002470:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2200      	movs	r2, #0
 8002478:	4619      	mov	r1, r3
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <my_MX_LTDC_Init+0x17c>)
 800247c:	f001 fe1e 	bl	80040bc <HAL_LTDC_ConfigLayer>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <my_MX_LTDC_Init+0x172>
  {
    Error_Handler();
 8002486:	f000 f8ad 	bl	80025e4 <Error_Handler>
  }
}
 800248a:	bf00      	nop
 800248c:	3738      	adds	r7, #56	; 0x38
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000064 	.word	0x20000064
 8002498:	40016800 	.word	0x40016800
 800249c:	20000010 	.word	0x20000010
 80024a0:	20000016 	.word	0x20000016
 80024a4:	20000012 	.word	0x20000012
 80024a8:	20000018 	.word	0x20000018
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000004 	.word	0x20000004
 80024b4:	20000014 	.word	0x20000014
 80024b8:	2000001a 	.word	0x2000001a
 80024bc:	20040270 	.word	0x20040270

080024c0 <delay_us>:
/*====================================customized function end====================================*/

void delay_us(int time)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
	while (time--)
 80024cc:	e007      	b.n	80024de <delay_us+0x1e>
	{
		i = 13;
 80024ce:	230d      	movs	r3, #13
 80024d0:	60fb      	str	r3, [r7, #12]
		while (i--);
 80024d2:	bf00      	nop
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1e5a      	subs	r2, r3, #1
 80024d8:	60fa      	str	r2, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1fa      	bne.n	80024d4 <delay_us+0x14>
	while (time--)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f2      	bne.n	80024ce <delay_us+0xe>
	}
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <delay_100ns>:

void delay_100ns(int time)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
	int i = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
	while (time--)
 8002502:	e007      	b.n	8002514 <delay_100ns+0x1e>
	{
		i = 1;
 8002504:	2301      	movs	r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
		while (i--);
 8002508:	bf00      	nop
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1e5a      	subs	r2, r3, #1
 800250e:	60fa      	str	r2, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1fa      	bne.n	800250a <delay_100ns+0x14>
	while (time--)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	1e5a      	subs	r2, r3, #1
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f2      	bne.n	8002504 <delay_100ns+0xe>
	}
}
 800251e:	bf00      	nop
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_EXTI_Callback>:

int button_count = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//PD12
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253c:	d144      	bne.n	80025c8 <HAL_GPIO_EXTI_Callback+0x9c>
	{
		button_count++;
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002546:	6013      	str	r3, [r2, #0]
		delay_us(50000);
 8002548:	f24c 3050 	movw	r0, #50000	; 0xc350
 800254c:	f7ff ffb8 	bl	80024c0 <delay_us>
		for (int i = 0; i < 200; i++)
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e032      	b.n	80025bc <HAL_GPIO_EXTI_Callback+0x90>
		{
			if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET)
 8002556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800255a:	481e      	ldr	r0, [pc, #120]	; (80025d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800255c:	f001 fc96 	bl	8003e8c <HAL_GPIO_ReadPin>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11e      	bne.n	80025a4 <HAL_GPIO_EXTI_Callback+0x78>
			{
				if (button_count < 80 && button_count > 5 && play_mode == 0)
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b4f      	cmp	r3, #79	; 0x4f
 800256c:	dc16      	bgt.n	800259c <HAL_GPIO_EXTI_Callback+0x70>
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b05      	cmp	r3, #5
 8002574:	dd12      	ble.n	800259c <HAL_GPIO_EXTI_Callback+0x70>
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_GPIO_EXTI_Callback+0xac>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10e      	bne.n	800259c <HAL_GPIO_EXTI_Callback+0x70>
				{
					display_image_number++;
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002588:	701a      	strb	r2, [r3, #0]
					if (display_image_number >= spi_flash_content_length)
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_GPIO_EXTI_Callback+0xb0>)
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d302      	bcc.n	800259c <HAL_GPIO_EXTI_Callback+0x70>
						display_image_number = 0;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_GPIO_EXTI_Callback+0xb0>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
				}
				button_count = 0;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
				return;
 80025a2:	e011      	b.n	80025c8 <HAL_GPIO_EXTI_Callback+0x9c>
			}
			button_count++;
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 80025ac:	6013      	str	r3, [r2, #0]
			delay_us(10000);
 80025ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80025b2:	f7ff ff85 	bl	80024c0 <delay_us>
		for (int i = 0; i < 200; i++)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3301      	adds	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2bc7      	cmp	r3, #199	; 0xc7
 80025c0:	ddc9      	ble.n	8002556 <HAL_GPIO_EXTI_Callback+0x2a>
		}
		else if (play_mode == 0)
		{
			play_mode = 1;
		}*/
		button_count = 0;
 80025c2:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
	}
}
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20070278 	.word	0x20070278
 80025d4:	48000c00 	.word	0x48000c00
 80025d8:	2004026c 	.word	0x2004026c
 80025dc:	20070270 	.word	0x20070270
 80025e0:	20000009 	.word	0x20000009

080025e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e8:	b672      	cpsid	i
}
 80025ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ec:	e7fe      	b.n	80025ec <Error_Handler+0x8>
	...

080025f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_MspInit+0x44>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fa:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <HAL_MspInit+0x44>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6613      	str	r3, [r2, #96]	; 0x60
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_MspInit+0x44>)
 8002604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_MspInit+0x44>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_MspInit+0x44>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_MspInit+0x44>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b0aa      	sub	sp, #168	; 0xa8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	229c      	movs	r2, #156	; 0x9c
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f005 fecb 	bl	80083e4 <memset>
  if(hdsi->Instance==DSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a11      	ldr	r2, [pc, #68]	; (8002698 <HAL_DSI_MspInit+0x60>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d11b      	bne.n	8002690 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002658:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800265c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	4618      	mov	r0, r3
 800266a:	f002 fea9 	bl	80053c0 <HAL_RCCEx_PeriphCLKConfig>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8002674:	f7ff ffb6 	bl	80025e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_DSI_MspInit+0x64>)
 800267a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_DSI_MspInit+0x64>)
 800267e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002682:	6613      	str	r3, [r2, #96]	; 0x60
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_DSI_MspInit+0x64>)
 8002686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	37a8      	adds	r7, #168	; 0xa8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40016c00 	.word	0x40016c00
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0aa      	sub	sp, #168	; 0xa8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	229c      	movs	r2, #156	; 0x9c
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f005 fe97 	bl	80083e4 <memset>
  if(hltdc->Instance==LTDC)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a19      	ldr	r2, [pc, #100]	; (8002720 <HAL_LTDC_MspInit+0x80>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d12b      	bne.n	8002718 <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80026c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 80026c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 80026ce:	2303      	movs	r3, #3
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 80026d6:	2308      	movs	r3, #8
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 80026da:	2302      	movs	r3, #2
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 80026de:	2302      	movs	r3, #2
 80026e0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 80026e2:	2302      	movs	r3, #2
 80026e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 80026e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ea:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fe65 	bl	80053c0 <HAL_RCCEx_PeriphCLKConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 80026fc:	f7ff ff72 	bl	80025e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_LTDC_MspInit+0x84>)
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <HAL_LTDC_MspInit+0x84>)
 8002706:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800270a:	6613      	str	r3, [r2, #96]	; 0x60
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_LTDC_MspInit+0x84>)
 800270e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002718:	bf00      	nop
 800271a:	37a8      	adds	r7, #168	; 0xa8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40016800 	.word	0x40016800
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_SPI_MspInit+0x128>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d128      	bne.n	800279c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800274a:	4b42      	ldr	r3, [pc, #264]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	4a41      	ldr	r2, [pc, #260]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	6593      	str	r3, [r2, #88]	; 0x58
 8002756:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002762:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3;
 800277a:	231a      	movs	r3, #26
 800277c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800278a:	2305      	movs	r3, #5
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	4619      	mov	r1, r3
 8002794:	4830      	ldr	r0, [pc, #192]	; (8002858 <HAL_SPI_MspInit+0x130>)
 8002796:	f001 f9e7 	bl	8003b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800279a:	e054      	b.n	8002846 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2e      	ldr	r2, [pc, #184]	; (800285c <HAL_SPI_MspInit+0x134>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d14f      	bne.n	8002846 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	4a2a      	ldr	r2, [pc, #168]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 80027ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
 80027b2:	4b28      	ldr	r3, [pc, #160]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	4a24      	ldr	r2, [pc, #144]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 80027c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80027d6:	f001 ff0b 	bl	80045f0 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e6:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_SPI_MspInit+0x12c>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80027f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002800:	2303      	movs	r3, #3
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002804:	2306      	movs	r3, #6
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	4619      	mov	r1, r3
 800280e:	4814      	ldr	r0, [pc, #80]	; (8002860 <HAL_SPI_MspInit+0x138>)
 8002810:	f001 f9aa 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002814:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002826:	2306      	movs	r3, #6
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	480c      	ldr	r0, [pc, #48]	; (8002864 <HAL_SPI_MspInit+0x13c>)
 8002832:	f001 f999 	bl	8003b68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2033      	movs	r0, #51	; 0x33
 800283c:	f000 fa5b 	bl	8002cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002840:	2033      	movs	r0, #51	; 0x33
 8002842:	f000 fa74 	bl	8002d2e <HAL_NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3730      	adds	r7, #48	; 0x30
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40003800 	.word	0x40003800
 8002854:	40021000 	.word	0x40021000
 8002858:	48000c00 	.word	0x48000c00
 800285c:	40003c00 	.word	0x40003c00
 8002860:	48001800 	.word	0x48001800
 8002864:	48000800 	.word	0x48000800

08002868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b0b0      	sub	sp, #192	; 0xc0
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	229c      	movs	r2, #156	; 0x9c
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f005 fdab 	bl	80083e4 <memset>
  if(huart->Instance==UART4)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a21      	ldr	r2, [pc, #132]	; (8002918 <HAL_UART_MspInit+0xb0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d13b      	bne.n	8002910 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002898:	2308      	movs	r3, #8
 800289a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800289c:	2300      	movs	r3, #0
 800289e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 fd8b 	bl	80053c0 <HAL_RCCEx_PeriphCLKConfig>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028b0:	f7ff fe98 	bl	80025e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_UART_MspInit+0xb4>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_UART_MspInit+0xb4>)
 80028ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028be:	6593      	str	r3, [r2, #88]	; 0x58
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_UART_MspInit+0xb4>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_UART_MspInit+0xb4>)
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	4a12      	ldr	r2, [pc, #72]	; (800291c <HAL_UART_MspInit+0xb4>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_UART_MspInit+0xb4>)
 80028da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028e4:	2303      	movs	r3, #3
 80028e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028fc:	2308      	movs	r3, #8
 80028fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002906:	4619      	mov	r1, r3
 8002908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290c:	f001 f92c 	bl	8003b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002910:	bf00      	nop
 8002912:	37c0      	adds	r7, #192	; 0xc0
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40004c00 	.word	0x40004c00
 800291c:	40021000 	.word	0x40021000

08002920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <NMI_Handler+0x4>

08002926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800292a:	e7fe      	b.n	800292a <HardFault_Handler+0x4>

0800292c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <MemManage_Handler+0x4>

08002932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002936:	e7fe      	b.n	8002936 <BusFault_Handler+0x4>

08002938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800293c:	e7fe      	b.n	800293c <UsageFault_Handler+0x4>

0800293e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800296c:	f000 f8a4 	bl	8002ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pic_sw_Pin);
 8002978:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800297c:	f001 fab6 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <SPI3_IRQHandler+0x10>)
 800298a:	f004 f95f 	bl	8006c4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000170 	.word	0x20000170

08002998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <SystemInit+0x20>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <SystemInit+0x20>)
 80029a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029c0:	f7ff ffea 	bl	8002998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029c4:	480c      	ldr	r0, [pc, #48]	; (80029f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029c6:	490d      	ldr	r1, [pc, #52]	; (80029fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <LoopForever+0xe>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029cc:	e002      	b.n	80029d4 <LoopCopyDataInit>

080029ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d2:	3304      	adds	r3, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d8:	d3f9      	bcc.n	80029ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029dc:	4c0a      	ldr	r4, [pc, #40]	; (8002a08 <LoopForever+0x16>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e0:	e001      	b.n	80029e6 <LoopFillZerobss>

080029e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e4:	3204      	adds	r2, #4

080029e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e8:	d3fb      	bcc.n	80029e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ea:	f005 fcd7 	bl	800839c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ee:	f7fd fd87 	bl	8000500 <main>

080029f2 <LoopForever>:

LoopForever:
    b LoopForever
 80029f2:	e7fe      	b.n	80029f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029f4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002a00:	0800850c 	.word	0x0800850c
  ldr r2, =_sbss
 8002a04:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002a08:	20070280 	.word	0x20070280

08002a0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC1_IRQHandler>

08002a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f000 f961 	bl	8002ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f000 f80e 	bl	8002a40 <HAL_InitTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	71fb      	strb	r3, [r7, #7]
 8002a2e:	e001      	b.n	8002a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a30:	f7ff fdde 	bl	80025f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a34:	79fb      	ldrb	r3, [r7, #7]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_InitTick+0x6c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d023      	beq.n	8002a9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_InitTick+0x70>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_InitTick+0x6c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f96d 	bl	8002d4a <HAL_SYSTICK_Config>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b0f      	cmp	r3, #15
 8002a7a:	d809      	bhi.n	8002a90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f000 f937 	bl	8002cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a88:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_InitTick+0x74>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e007      	b.n	8002aa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e004      	b.n	8002aa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	e001      	b.n	8002aa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000028 	.word	0x20000028
 8002ab0:	20000020 	.word	0x20000020
 8002ab4:	20000024 	.word	0x20000024

08002ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_IncTick+0x20>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x24>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_IncTick+0x24>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000028 	.word	0x20000028
 8002adc:	2007027c 	.word	0x2007027c

08002ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_GetTick+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	2007027c 	.word	0x2007027c

08002af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff ffee 	bl	8002ae0 <HAL_GetTick>
 8002b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d005      	beq.n	8002b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_Delay+0x44>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b1e:	bf00      	nop
 8002b20:	f7ff ffde 	bl	8002ae0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d8f7      	bhi.n	8002b20 <HAL_Delay+0x28>
  {
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000028 	.word	0x20000028

08002b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b72:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60d3      	str	r3, [r2, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 0307 	and.w	r3, r3, #7
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db0b      	blt.n	8002bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4907      	ldr	r1, [pc, #28]	; (8002bdc <__NVIC_EnableIRQ+0x38>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000e100 	.word	0xe000e100

08002be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	db0a      	blt.n	8002c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	490c      	ldr	r1, [pc, #48]	; (8002c2c <__NVIC_SetPriority+0x4c>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	0112      	lsls	r2, r2, #4
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	440b      	add	r3, r1
 8002c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c08:	e00a      	b.n	8002c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4908      	ldr	r1, [pc, #32]	; (8002c30 <__NVIC_SetPriority+0x50>)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	3b04      	subs	r3, #4
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	761a      	strb	r2, [r3, #24]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f1c3 0307 	rsb	r3, r3, #7
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	bf28      	it	cs
 8002c52:	2304      	movcs	r3, #4
 8002c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d902      	bls.n	8002c64 <NVIC_EncodePriority+0x30>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3b03      	subs	r3, #3
 8002c62:	e000      	b.n	8002c66 <NVIC_EncodePriority+0x32>
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	401a      	ands	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	43d9      	mvns	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	4313      	orrs	r3, r2
         );
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cac:	d301      	bcc.n	8002cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e00f      	b.n	8002cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <SysTick_Config+0x40>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cba:	210f      	movs	r1, #15
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	f7ff ff8e 	bl	8002be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <SysTick_Config+0x40>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cca:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <SysTick_Config+0x40>)
 8002ccc:	2207      	movs	r2, #7
 8002cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	e000e010 	.word	0xe000e010

08002ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff29 	bl	8002b40 <__NVIC_SetPriorityGrouping>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d08:	f7ff ff3e 	bl	8002b88 <__NVIC_GetPriorityGrouping>
 8002d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7ff ff8e 	bl	8002c34 <NVIC_EncodePriority>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff5d 	bl	8002be0 <__NVIC_SetPriority>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff31 	bl	8002ba4 <__NVIC_EnableIRQ>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ffa2 	bl	8002c9c <SysTick_Config>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d005      	beq.n	8002d86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e047      	b.n	8002e16 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 020e 	bic.w	r2, r2, #14
 8002d94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f003 021c 	and.w	r2, r3, #28
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dd2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002df4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
    }
  }
  return status;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	019a      	lsls	r2, r3, #6
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	431a      	orrs	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e60:	f7ff fe3e 	bl	8002ae0 <HAL_GetTick>
 8002e64:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002e66:	e009      	b.n	8002e7c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e68:	f7ff fe3a 	bl	8002ae0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e76:	d901      	bls.n	8002e7c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e015      	b.n	8002ea8 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ee      	beq.n	8002e68 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	019a      	lsls	r2, r3, #6
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	ea42 0103 	orr.w	r1, r2, r3
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e10b      	b.n	80030dc <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7c5b      	ldrb	r3, [r3, #17]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fbb2 	bl	8002638 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002eee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f02:	f7ff fded 	bl	8002ae0 <HAL_GetTick>
 8002f06:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002f08:	e009      	b.n	8002f1e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f0a:	f7ff fde9 	bl	8002ae0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f18:	d901      	bls.n	8002f1e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0de      	b.n	80030dc <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ed      	beq.n	8002f0a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002f3e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002f42:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002f5a:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002f62:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002f96:	2001      	movs	r0, #1
 8002f98:	f7ff fdae 	bl	8002af8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f9c:	f7ff fda0 	bl	8002ae0 <HAL_GetTick>
 8002fa0:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002fa2:	e009      	b.n	8002fb8 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002fa4:	f7ff fd9c 	bl	8002ae0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fb2:	d901      	bls.n	8002fb8 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e091      	b.n	80030dc <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ed      	beq.n	8002fa4 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0206 	orr.w	r2, r2, #6
 8002fd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0203 	bic.w	r2, r2, #3
 8002fec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0203 	bic.w	r2, r2, #3
 800301a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003042:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6899      	ldr	r1, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_DSI_Init+0x1b4>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	e000      	b.n	8003066 <HAL_DSI_Init+0x1b6>
 8003064:	2301      	movs	r3, #1
 8003066:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_DSI_Init+0x234>)
 800306c:	fb03 f202 	mul.w	r2, r3, r2
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	409a      	lsls	r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800309c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	003d0900 	.word	0x003d0900

080030e8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	7c1b      	ldrb	r3, [r3, #16]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_DSI_ConfigErrorMonitor+0x16>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0ab      	b.n	8003256 <HAL_DSI_ConfigErrorMonitor+0x16e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003138:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800313c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800315a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0202 	orr.w	r2, r2, #2
 8003196:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 020c 	orr.w	r2, r2, #12
 80031b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0210 	orr.w	r2, r2, #16
 80031d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0220 	orr.w	r2, r2, #32
 80031f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800320e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800322c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800324a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7c1b      	ldrb	r3, [r3, #16]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_DSI_SetGenericVCID+0x16>
 8003274:	2302      	movs	r3, #2
 8003276:	e016      	b.n	80032a6 <HAL_DSI_SetGenericVCID+0x44>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0203 	bic.w	r2, r2, #3
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	7c1b      	ldrb	r3, [r3, #16]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_DSI_ConfigVideoMode+0x16>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e1f6      	b.n	80036b6 <HAL_DSI_ConfigVideoMode+0x404>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0203 	bic.w	r2, r2, #3
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003322:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003326:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003348:	f023 031f 	bic.w	r3, r3, #31
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800336e:	f023 031f 	bic.w	r3, r3, #31
 8003372:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0203 	bic.w	r2, r2, #3
 8003394:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68d9      	ldr	r1, [r3, #12]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0207 	bic.w	r2, r2, #7
 80033b6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6959      	ldr	r1, [r3, #20]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 020f 	bic.w	r2, r2, #15
 80033e4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6919      	ldr	r1, [r3, #16]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 020e 	bic.w	r2, r2, #14
 8003408:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	005a      	lsls	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d110      	bne.n	800344e <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800343a:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6919      	ldr	r1, [r3, #16]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800345c:	f023 030f 	bic.w	r3, r3, #15
 8003460:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003482:	f023 030f 	bic.w	r3, r3, #15
 8003486:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80034a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034ac:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034f4:	f023 0303 	bic.w	r3, r3, #3
 80034f8:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003544:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003566:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003588:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6999      	ldr	r1, [r3, #24]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	041a      	lsls	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ac:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6999      	ldr	r1, [r3, #24]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7c1b      	ldrb	r3, [r3, #16]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_DSI_ConfigPhyTimer+0x16>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e058      	b.n	800378a <HAL_DSI_ConfigPhyTimer+0xc8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4293      	cmp	r3, r2
 80036e8:	bf38      	it	cc
 80036ea:	4613      	movcc	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80036fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	041a      	lsls	r2, r3, #16
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800372c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003766:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7c1b      	ldrb	r3, [r3, #16]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_DSI_ConfigHostTimeouts+0x16>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0b4      	b.n	8003916 <HAL_DSI_ConfigHostTimeouts+0x180>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80037c0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021a      	lsls	r2, r3, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	b292      	uxth	r2, r2
 80037e2:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	041a      	lsls	r2, r3, #16
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	0c1b      	lsrs	r3, r3, #16
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80038a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7c1b      	ldrb	r3, [r3, #16]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_DSI_Start+0x14>
 8003932:	2302      	movs	r3, #2
 8003934:	e02b      	b.n	800398e <HAL_DSI_Start+0x6c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0208 	orr.w	r2, r2, #8
 8003972:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b088      	sub	sp, #32
 800399e:	af02      	add	r7, sp, #8
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	7c1b      	ldrb	r3, [r3, #16]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_DSI_ShortWrite+0x1a>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e010      	b.n	80039d6 <HAL_DSI_ShortWrite+0x3c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff fa44 	bl	8002e52 <DSI_ShortWrite>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	741a      	strb	r2, [r3, #16]

  return status;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08c      	sub	sp, #48	; 0x30
 80039e2:	af02      	add	r7, sp, #8
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80039ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ee:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	7c1b      	ldrb	r3, [r3, #16]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_DSI_LongWrite+0x1e>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e084      	b.n	8003b06 <HAL_DSI_LongWrite+0x128>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a02:	f7ff f86d 	bl	8002ae0 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003a08:	e00c      	b.n	8003a24 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003a0a:	f7ff f869 	bl	8002ae0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a18:	d904      	bls.n	8003a24 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e070      	b.n	8003b06 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0eb      	beq.n	8003a0a <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	bf28      	it	cs
 8003a3c:	2303      	movcs	r3, #3
 8003a3e:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	e00f      	b.n	8003a66 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	3301      	adds	r3, #1
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	3301      	adds	r3, #1
 8003a64:	623b      	str	r3, [r7, #32]
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3eb      	bcc.n	8003a46 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003a86:	e028      	b.n	8003ada <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	bf28      	it	cs
 8003a8e:	2304      	movcs	r3, #4
 8003a90:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	623b      	str	r3, [r7, #32]
 8003a9a:	e00e      	b.n	8003aba <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	623b      	str	r3, [r7, #32]
 8003aba:	6a3a      	ldr	r2, [r7, #32]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d3ec      	bcc.n	8003a9c <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1d3      	bne.n	8003a88 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003ae8:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	f7ff f991 	bl	8002e20 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3728      	adds	r7, #40	; 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	7c1b      	ldrb	r3, [r3, #16]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e01b      	b.n	8003b5c <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003b3a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	065a      	lsls	r2, r3, #25
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b76:	e166      	b.n	8003e46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8158 	beq.w	8003e40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d005      	beq.n	8003ba8 <HAL_GPIO_Init+0x40>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d130      	bne.n	8003c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bde:	2201      	movs	r2, #1
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 0201 	and.w	r2, r3, #1
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d017      	beq.n	8003c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	2203      	movs	r2, #3
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d123      	bne.n	8003c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	08da      	lsrs	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3208      	adds	r2, #8
 8003c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	220f      	movs	r2, #15
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	08da      	lsrs	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3208      	adds	r2, #8
 8003c94:	6939      	ldr	r1, [r7, #16]
 8003c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0203 	and.w	r2, r3, #3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80b2 	beq.w	8003e40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cdc:	4b61      	ldr	r3, [pc, #388]	; (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	4a60      	ldr	r2, [pc, #384]	; (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8003ce8:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <HAL_GPIO_Init+0x2fc>)
 8003cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cf4:	4a5c      	ldr	r2, [pc, #368]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	220f      	movs	r2, #15
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d1e:	d02b      	beq.n	8003d78 <HAL_GPIO_Init+0x210>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_GPIO_Init+0x304>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d025      	beq.n	8003d74 <HAL_GPIO_Init+0x20c>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a51      	ldr	r2, [pc, #324]	; (8003e70 <HAL_GPIO_Init+0x308>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d01f      	beq.n	8003d70 <HAL_GPIO_Init+0x208>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a50      	ldr	r2, [pc, #320]	; (8003e74 <HAL_GPIO_Init+0x30c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d019      	beq.n	8003d6c <HAL_GPIO_Init+0x204>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a4f      	ldr	r2, [pc, #316]	; (8003e78 <HAL_GPIO_Init+0x310>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_GPIO_Init+0x200>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a4e      	ldr	r2, [pc, #312]	; (8003e7c <HAL_GPIO_Init+0x314>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00d      	beq.n	8003d64 <HAL_GPIO_Init+0x1fc>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4d      	ldr	r2, [pc, #308]	; (8003e80 <HAL_GPIO_Init+0x318>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <HAL_GPIO_Init+0x1f8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a4c      	ldr	r2, [pc, #304]	; (8003e84 <HAL_GPIO_Init+0x31c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_GPIO_Init+0x1f4>
 8003d58:	2307      	movs	r3, #7
 8003d5a:	e00e      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	e00c      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d60:	2306      	movs	r3, #6
 8003d62:	e00a      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d64:	2305      	movs	r3, #5
 8003d66:	e008      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	e006      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e004      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e002      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_GPIO_Init+0x212>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	f002 0203 	and.w	r2, r2, #3
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	4093      	lsls	r3, r2
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d8a:	4937      	ldr	r1, [pc, #220]	; (8003e68 <HAL_GPIO_Init+0x300>)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	3302      	adds	r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dbc:	4a32      	ldr	r2, [pc, #200]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003de6:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e16:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e3a:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <HAL_GPIO_Init+0x320>)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3301      	adds	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f47f ae91 	bne.w	8003b78 <HAL_GPIO_Init+0x10>
  }
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	48000400 	.word	0x48000400
 8003e70:	48000800 	.word	0x48000800
 8003e74:	48000c00 	.word	0x48000c00
 8003e78:	48001000 	.word	0x48001000
 8003e7c:	48001400 	.word	0x48001400
 8003e80:	48001800 	.word	0x48001800
 8003e84:	48001c00 	.word	0x48001c00
 8003e88:	40010400 	.word	0x40010400

08003e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	887b      	ldrh	r3, [r7, #2]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e001      	b.n	8003eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ecc:	787b      	ldrb	r3, [r7, #1]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ed8:	e002      	b.n	8003ee0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fb0e 	bl	800252c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0bf      	b.n	80040ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fe fbac 	bl	80026a0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003f5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6999      	ldr	r1, [r3, #24]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f74:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6899      	ldr	r1, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b4a      	ldr	r3, [pc, #296]	; (80040b8 <HAL_LTDC_Init+0x19c>)
 8003f90:	400b      	ands	r3, r1
 8003f92:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6899      	ldr	r1, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68d9      	ldr	r1, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b3e      	ldr	r3, [pc, #248]	; (80040b8 <HAL_LTDC_Init+0x19c>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68d9      	ldr	r1, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6919      	ldr	r1, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <HAL_LTDC_Init+0x19c>)
 8003fec:	400b      	ands	r3, r1
 8003fee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6919      	ldr	r1, [r3, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6959      	ldr	r1, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <HAL_LTDC_Init+0x19c>)
 800401a:	400b      	ands	r3, r1
 800401c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6959      	ldr	r1, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0206 	orr.w	r2, r2, #6
 800408a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	f000f800 	.word	0xf000f800

080040bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040bc:	b5b0      	push	{r4, r5, r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_LTDC_ConfigLayer+0x1a>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e02c      	b.n	8004130 <HAL_LTDC_ConfigLayer+0x74>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2134      	movs	r1, #52	; 0x34
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4614      	mov	r4, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f811 	bl	8004138 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bdb0      	pop	{r4, r5, r7, pc}

08004138 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004138:	b480      	push	{r7}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	4413      	add	r3, r2
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	01db      	lsls	r3, r3, #7
 8004164:	4413      	add	r3, r2
 8004166:	3384      	adds	r3, #132	; 0x84
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	4611      	mov	r1, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	01d2      	lsls	r2, r2, #7
 8004174:	440a      	add	r2, r1
 8004176:	3284      	adds	r2, #132	; 0x84
 8004178:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800417c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800418e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004190:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4619      	mov	r1, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	01db      	lsls	r3, r3, #7
 800419c:	440b      	add	r3, r1
 800419e:	3384      	adds	r3, #132	; 0x84
 80041a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041b6:	4413      	add	r3, r2
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	01db      	lsls	r3, r3, #7
 80041c6:	4413      	add	r3, r2
 80041c8:	3384      	adds	r3, #132	; 0x84
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	4611      	mov	r1, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	01d2      	lsls	r2, r2, #7
 80041d6:	440a      	add	r2, r1
 80041d8:	3284      	adds	r2, #132	; 0x84
 80041da:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80041de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ee:	4413      	add	r3, r2
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4619      	mov	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	01db      	lsls	r3, r3, #7
 80041fc:	440b      	add	r3, r1
 80041fe:	3384      	adds	r3, #132	; 0x84
 8004200:	4619      	mov	r1, r3
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	01db      	lsls	r3, r3, #7
 8004212:	4413      	add	r3, r2
 8004214:	3384      	adds	r3, #132	; 0x84
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	4611      	mov	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	01d2      	lsls	r2, r2, #7
 8004222:	440a      	add	r2, r1
 8004224:	3284      	adds	r2, #132	; 0x84
 8004226:	f023 0307 	bic.w	r3, r3, #7
 800422a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	01db      	lsls	r3, r3, #7
 8004236:	4413      	add	r3, r2
 8004238:	3384      	adds	r3, #132	; 0x84
 800423a:	461a      	mov	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	061b      	lsls	r3, r3, #24
 800425c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	01db      	lsls	r3, r3, #7
 8004268:	4413      	add	r3, r2
 800426a:	3384      	adds	r3, #132	; 0x84
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	01db      	lsls	r3, r3, #7
 8004278:	4413      	add	r3, r2
 800427a:	3384      	adds	r3, #132	; 0x84
 800427c:	461a      	mov	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004288:	461a      	mov	r2, r3
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	431a      	orrs	r2, r3
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4619      	mov	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	01db      	lsls	r3, r3, #7
 800429c:	440b      	add	r3, r1
 800429e:	3384      	adds	r3, #132	; 0x84
 80042a0:	4619      	mov	r1, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	01db      	lsls	r3, r3, #7
 80042b2:	4413      	add	r3, r2
 80042b4:	3384      	adds	r3, #132	; 0x84
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	4611      	mov	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	01d2      	lsls	r2, r2, #7
 80042c2:	440a      	add	r2, r1
 80042c4:	3284      	adds	r2, #132	; 0x84
 80042c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	01db      	lsls	r3, r3, #7
 80042d6:	4413      	add	r3, r2
 80042d8:	3384      	adds	r3, #132	; 0x84
 80042da:	461a      	mov	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	01db      	lsls	r3, r3, #7
 80042ec:	4413      	add	r3, r2
 80042ee:	3384      	adds	r3, #132	; 0x84
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	4611      	mov	r1, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	01d2      	lsls	r2, r2, #7
 80042fc:	440a      	add	r2, r1
 80042fe:	3284      	adds	r2, #132	; 0x84
 8004300:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004304:	f023 0307 	bic.w	r3, r3, #7
 8004308:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	68f9      	ldr	r1, [r7, #12]
 8004314:	6809      	ldr	r1, [r1, #0]
 8004316:	4608      	mov	r0, r1
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	01c9      	lsls	r1, r1, #7
 800431c:	4401      	add	r1, r0
 800431e:	3184      	adds	r1, #132	; 0x84
 8004320:	4313      	orrs	r3, r2
 8004322:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	01db      	lsls	r3, r3, #7
 800432e:	4413      	add	r3, r2
 8004330:	3384      	adds	r3, #132	; 0x84
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	01db      	lsls	r3, r3, #7
 800433e:	4413      	add	r3, r2
 8004340:	3384      	adds	r3, #132	; 0x84
 8004342:	461a      	mov	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	01db      	lsls	r3, r3, #7
 8004352:	4413      	add	r3, r2
 8004354:	3384      	adds	r3, #132	; 0x84
 8004356:	461a      	mov	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004366:	2304      	movs	r3, #4
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	e01b      	b.n	80043a4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d102      	bne.n	800437a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004374:	2303      	movs	r3, #3
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	e014      	b.n	80043a4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b04      	cmp	r3, #4
 8004380:	d00b      	beq.n	800439a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004386:	2b02      	cmp	r3, #2
 8004388:	d007      	beq.n	800439a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800438e:	2b03      	cmp	r3, #3
 8004390:	d003      	beq.n	800439a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004396:	2b07      	cmp	r3, #7
 8004398:	d102      	bne.n	80043a0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800439a:	2302      	movs	r3, #2
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e001      	b.n	80043a4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	01db      	lsls	r3, r3, #7
 80043ae:	4413      	add	r3, r2
 80043b0:	3384      	adds	r3, #132	; 0x84
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	4611      	mov	r1, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	01d2      	lsls	r2, r2, #7
 80043be:	440a      	add	r2, r1
 80043c0:	3284      	adds	r2, #132	; 0x84
 80043c2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80043c6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	1acb      	subs	r3, r1, r3
 80043de:	69f9      	ldr	r1, [r7, #28]
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	6809      	ldr	r1, [r1, #0]
 80043ea:	4608      	mov	r0, r1
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	01c9      	lsls	r1, r1, #7
 80043f0:	4401      	add	r1, r0
 80043f2:	3184      	adds	r1, #132	; 0x84
 80043f4:	4313      	orrs	r3, r2
 80043f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	01db      	lsls	r3, r3, #7
 8004402:	4413      	add	r3, r2
 8004404:	3384      	adds	r3, #132	; 0x84
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	4611      	mov	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	01d2      	lsls	r2, r2, #7
 8004412:	440a      	add	r2, r1
 8004414:	3284      	adds	r2, #132	; 0x84
 8004416:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	01db      	lsls	r3, r3, #7
 800442a:	4413      	add	r3, r2
 800442c:	3384      	adds	r3, #132	; 0x84
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	01db      	lsls	r3, r3, #7
 8004440:	4413      	add	r3, r2
 8004442:	3384      	adds	r3, #132	; 0x84
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	4611      	mov	r1, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	01d2      	lsls	r2, r2, #7
 8004450:	440a      	add	r2, r1
 8004452:	3284      	adds	r2, #132	; 0x84
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	6013      	str	r3, [r2, #0]
}
 800445a:	bf00      	nop
 800445c:	3724      	adds	r7, #36	; 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800446c:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004478:	d102      	bne.n	8004480 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800447a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447e:	e00b      	b.n	8004498 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448e:	d102      	bne.n	8004496 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004494:	e000      	b.n	8004498 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004496:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40007000 	.word	0x40007000

080044a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d141      	bne.n	800453a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044b6:	4b4b      	ldr	r3, [pc, #300]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c2:	d131      	bne.n	8004528 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044c4:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ca:	4a46      	ldr	r2, [pc, #280]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044d4:	4b43      	ldr	r3, [pc, #268]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044dc:	4a41      	ldr	r2, [pc, #260]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80044e4:	4b40      	ldr	r3, [pc, #256]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2232      	movs	r2, #50	; 0x32
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	4a3f      	ldr	r2, [pc, #252]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	0c9b      	lsrs	r3, r3, #18
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044fa:	e002      	b.n	8004502 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3b01      	subs	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004502:	4b38      	ldr	r3, [pc, #224]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450e:	d102      	bne.n	8004516 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f2      	bne.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004522:	d158      	bne.n	80045d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e057      	b.n	80045d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004528:	4b2e      	ldr	r3, [pc, #184]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800452e:	4a2d      	ldr	r2, [pc, #180]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004538:	e04d      	b.n	80045d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004540:	d141      	bne.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004542:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454e:	d131      	bne.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004550:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004556:	4a23      	ldr	r2, [pc, #140]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004560:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004568:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800456e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004570:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2232      	movs	r2, #50	; 0x32
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	0c9b      	lsrs	r3, r3, #18
 8004582:	3301      	adds	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004586:	e002      	b.n	800458e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3b01      	subs	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459a:	d102      	bne.n	80045a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f2      	bne.n	8004588 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ae:	d112      	bne.n	80045d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e011      	b.n	80045d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80045c4:	e007      	b.n	80045d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045c6:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045ce:	4a05      	ldr	r2, [pc, #20]	; (80045e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40007000 	.word	0x40007000
 80045e8:	20000020 	.word	0x20000020
 80045ec:	431bde83 	.word	0x431bde83

080045f0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_PWREx_EnableVddIO2+0x1c>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a04      	ldr	r2, [pc, #16]	; (800460c <HAL_PWREx_EnableVddIO2+0x1c>)
 80045fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045fe:	6053      	str	r3, [r2, #4]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40007000 	.word	0x40007000

08004610 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f000 bc08 	b.w	8004e34 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004624:	4b96      	ldr	r3, [pc, #600]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800462e:	4b94      	ldr	r3, [pc, #592]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80e4 	beq.w	800480e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_RCC_OscConfig+0x4c>
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	f040 808b 	bne.w	800476a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b01      	cmp	r3, #1
 8004658:	f040 8087 	bne.w	800476a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800465c:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_OscConfig+0x64>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e3df      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1a      	ldr	r2, [r3, #32]
 8004678:	4b81      	ldr	r3, [pc, #516]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_RCC_OscConfig+0x7e>
 8004684:	4b7e      	ldr	r3, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468c:	e005      	b.n	800469a <HAL_RCC_OscConfig+0x8a>
 800468e:	4b7c      	ldr	r3, [pc, #496]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800469a:	4293      	cmp	r3, r2
 800469c:	d223      	bcs.n	80046e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fdcc 	bl	8005240 <RCC_SetFlashLatencyFromMSIRange>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e3c0      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a72      	ldr	r2, [pc, #456]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80046b8:	f043 0308 	orr.w	r3, r3, #8
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b70      	ldr	r3, [pc, #448]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	496d      	ldr	r1, [pc, #436]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d0:	4b6b      	ldr	r3, [pc, #428]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	4968      	ldr	r1, [pc, #416]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
 80046e4:	e025      	b.n	8004732 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046e6:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a65      	ldr	r2, [pc, #404]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80046ec:	f043 0308 	orr.w	r3, r3, #8
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	4960      	ldr	r1, [pc, #384]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004700:	4313      	orrs	r3, r2
 8004702:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004704:	4b5e      	ldr	r3, [pc, #376]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	495b      	ldr	r1, [pc, #364]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fd8c 	bl	8005240 <RCC_SetFlashLatencyFromMSIRange>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e380      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004732:	f000 fcc1 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8004736:	4602      	mov	r2, r0
 8004738:	4b51      	ldr	r3, [pc, #324]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	4950      	ldr	r1, [pc, #320]	; (8004884 <HAL_RCC_OscConfig+0x274>)
 8004744:	5ccb      	ldrb	r3, [r1, r3]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	4a4e      	ldr	r2, [pc, #312]	; (8004888 <HAL_RCC_OscConfig+0x278>)
 8004750:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004752:	4b4e      	ldr	r3, [pc, #312]	; (800488c <HAL_RCC_OscConfig+0x27c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe f972 	bl	8002a40 <HAL_InitTick>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d052      	beq.n	800480c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	e364      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d032      	beq.n	80047d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004772:	4b43      	ldr	r3, [pc, #268]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a42      	ldr	r2, [pc, #264]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800477e:	f7fe f9af 	bl	8002ae0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004786:	f7fe f9ab 	bl	8002ae0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e34d      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004798:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a35      	ldr	r2, [pc, #212]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047aa:	f043 0308 	orr.w	r3, r3, #8
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4b33      	ldr	r3, [pc, #204]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4930      	ldr	r1, [pc, #192]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	492b      	ldr	r1, [pc, #172]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	604b      	str	r3, [r1, #4]
 80047d6:	e01a      	b.n	800480e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047d8:	4b29      	ldr	r3, [pc, #164]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a28      	ldr	r2, [pc, #160]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047e4:	f7fe f97c 	bl	8002ae0 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047ec:	f7fe f978 	bl	8002ae0 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e31a      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x1dc>
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800480c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d073      	beq.n	8004902 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d005      	beq.n	800482c <HAL_RCC_OscConfig+0x21c>
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b0c      	cmp	r3, #12
 8004824:	d10e      	bne.n	8004844 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d10b      	bne.n	8004844 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d063      	beq.n	8004900 <HAL_RCC_OscConfig+0x2f0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d15f      	bne.n	8004900 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e2f7      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d106      	bne.n	800485c <HAL_RCC_OscConfig+0x24c>
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e025      	b.n	80048a8 <HAL_RCC_OscConfig+0x298>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004864:	d114      	bne.n	8004890 <HAL_RCC_OscConfig+0x280>
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a05      	ldr	r2, [pc, #20]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 800486c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b03      	ldr	r3, [pc, #12]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a02      	ldr	r2, [pc, #8]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e013      	b.n	80048a8 <HAL_RCC_OscConfig+0x298>
 8004880:	40021000 	.word	0x40021000
 8004884:	0800848c 	.word	0x0800848c
 8004888:	20000020 	.word	0x20000020
 800488c:	20000024 	.word	0x20000024
 8004890:	4ba0      	ldr	r3, [pc, #640]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a9f      	ldr	r2, [pc, #636]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	4b9d      	ldr	r3, [pc, #628]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a9c      	ldr	r2, [pc, #624]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 80048a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d013      	beq.n	80048d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fe f916 	bl	8002ae0 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b8:	f7fe f912 	bl	8002ae0 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e2b4      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ca:	4b92      	ldr	r3, [pc, #584]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x2a8>
 80048d6:	e014      	b.n	8004902 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7fe f902 	bl	8002ae0 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e0:	f7fe f8fe 	bl	8002ae0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	; 0x64
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e2a0      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048f2:	4b88      	ldr	r3, [pc, #544]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x2d0>
 80048fe:	e000      	b.n	8004902 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d060      	beq.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d005      	beq.n	8004920 <HAL_RCC_OscConfig+0x310>
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d119      	bne.n	800494e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d116      	bne.n	800494e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004920:	4b7c      	ldr	r3, [pc, #496]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_OscConfig+0x328>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e27d      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004938:	4b76      	ldr	r3, [pc, #472]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	4973      	ldr	r1, [pc, #460]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800494c:	e040      	b.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d023      	beq.n	800499e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004956:	4b6f      	ldr	r3, [pc, #444]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6e      	ldr	r2, [pc, #440]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 800495c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004962:	f7fe f8bd 	bl	8002ae0 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800496a:	f7fe f8b9 	bl	8002ae0 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e25b      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800497c:	4b65      	ldr	r3, [pc, #404]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004988:	4b62      	ldr	r3, [pc, #392]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	495f      	ldr	r1, [pc, #380]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]
 800499c:	e018      	b.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800499e:	4b5d      	ldr	r3, [pc, #372]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a5c      	ldr	r2, [pc, #368]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 80049a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fe f899 	bl	8002ae0 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b2:	f7fe f895 	bl	8002ae0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e237      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049c4:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d03c      	beq.n	8004a56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01c      	beq.n	8004a1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e4:	4b4b      	ldr	r3, [pc, #300]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 80049e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ea:	4a4a      	ldr	r2, [pc, #296]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fe f874 	bl	8002ae0 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049fc:	f7fe f870 	bl	8002ae0 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e212      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ef      	beq.n	80049fc <HAL_RCC_OscConfig+0x3ec>
 8004a1c:	e01b      	b.n	8004a56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a1e:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a24:	4a3b      	ldr	r2, [pc, #236]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2e:	f7fe f857 	bl	8002ae0 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a36:	f7fe f853 	bl	8002ae0 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e1f5      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a48:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1ef      	bne.n	8004a36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80a6 	beq.w	8004bb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a64:	2300      	movs	r3, #0
 8004a66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a68:	4b2a      	ldr	r3, [pc, #168]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10d      	bne.n	8004a90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a80:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a90:	4b21      	ldr	r3, [pc, #132]	; (8004b18 <HAL_RCC_OscConfig+0x508>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d118      	bne.n	8004ace <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <HAL_RCC_OscConfig+0x508>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <HAL_RCC_OscConfig+0x508>)
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa8:	f7fe f81a 	bl	8002ae0 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fe f816 	bl	8002ae0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1b8      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <HAL_RCC_OscConfig+0x508>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d108      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4d8>
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	4a0d      	ldr	r2, [pc, #52]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae6:	e029      	b.n	8004b3c <HAL_RCC_OscConfig+0x52c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	d115      	bne.n	8004b1c <HAL_RCC_OscConfig+0x50c>
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	4a03      	ldr	r2, [pc, #12]	; (8004b14 <HAL_RCC_OscConfig+0x504>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b10:	e014      	b.n	8004b3c <HAL_RCC_OscConfig+0x52c>
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40007000 	.word	0x40007000
 8004b1c:	4b9d      	ldr	r3, [pc, #628]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	4a9c      	ldr	r2, [pc, #624]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b2c:	4b99      	ldr	r3, [pc, #612]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	4a98      	ldr	r2, [pc, #608]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004b34:	f023 0304 	bic.w	r3, r3, #4
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d016      	beq.n	8004b72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b44:	f7fd ffcc 	bl	8002ae0 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4c:	f7fd ffc8 	bl	8002ae0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e168      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	4b8c      	ldr	r3, [pc, #560]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ed      	beq.n	8004b4c <HAL_RCC_OscConfig+0x53c>
 8004b70:	e015      	b.n	8004b9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b72:	f7fd ffb5 	bl	8002ae0 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b78:	e00a      	b.n	8004b90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7a:	f7fd ffb1 	bl	8002ae0 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e151      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b90:	4b80      	ldr	r3, [pc, #512]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ed      	bne.n	8004b7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba4:	4b7b      	ldr	r3, [pc, #492]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba8:	4a7a      	ldr	r2, [pc, #488]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d03c      	beq.n	8004c36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01c      	beq.n	8004bfe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bc4:	4b73      	ldr	r3, [pc, #460]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bca:	4a72      	ldr	r2, [pc, #456]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fd ff84 	bl	8002ae0 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bdc:	f7fd ff80 	bl	8002ae0 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e122      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bee:	4b69      	ldr	r3, [pc, #420]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0ef      	beq.n	8004bdc <HAL_RCC_OscConfig+0x5cc>
 8004bfc:	e01b      	b.n	8004c36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bfe:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c04:	4a63      	ldr	r2, [pc, #396]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0e:	f7fd ff67 	bl	8002ae0 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c16:	f7fd ff63 	bl	8002ae0 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e105      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c28:	4b5a      	ldr	r3, [pc, #360]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ef      	bne.n	8004c16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80f9 	beq.w	8004e32 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	f040 80cf 	bne.w	8004de8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c4a:	4b52      	ldr	r3, [pc, #328]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 0203 	and.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d12c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d123      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d113      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d071      	beq.n	8004d9c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2b0c      	cmp	r3, #12
 8004cbc:	d068      	beq.n	8004d90 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004cbe:	4b35      	ldr	r3, [pc, #212]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d105      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004cca:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0ac      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cda:	4b2e      	ldr	r3, [pc, #184]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ce6:	f7fd fefb 	bl	8002ae0 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fd fef7 	bl	8002ae0 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e099      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d00:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d0c:	4b21      	ldr	r3, [pc, #132]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <HAL_RCC_OscConfig+0x788>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d1c:	3a01      	subs	r2, #1
 8004d1e:	0112      	lsls	r2, r2, #4
 8004d20:	4311      	orrs	r1, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d26:	0212      	lsls	r2, r2, #8
 8004d28:	4311      	orrs	r1, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d2e:	0852      	lsrs	r2, r2, #1
 8004d30:	3a01      	subs	r2, #1
 8004d32:	0552      	lsls	r2, r2, #21
 8004d34:	4311      	orrs	r1, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d3a:	0852      	lsrs	r2, r2, #1
 8004d3c:	3a01      	subs	r2, #1
 8004d3e:	0652      	lsls	r2, r2, #25
 8004d40:	4311      	orrs	r1, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d46:	06d2      	lsls	r2, r2, #27
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	4912      	ldr	r1, [pc, #72]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a0f      	ldr	r2, [pc, #60]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4a0c      	ldr	r2, [pc, #48]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d68:	f7fd feba 	bl	8002ae0 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fd feb6 	bl	8002ae0 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e058      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d82:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <HAL_RCC_OscConfig+0x784>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d8e:	e050      	b.n	8004e32 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e04f      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
 8004d94:	40021000 	.word	0x40021000
 8004d98:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9c:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d144      	bne.n	8004e32 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004da8:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a23      	ldr	r2, [pc, #140]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dc0:	f7fd fe8e 	bl	8002ae0 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fd fe8a 	bl	8002ae0 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e02c      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dda:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x7b8>
 8004de6:	e024      	b.n	8004e32 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b0c      	cmp	r3, #12
 8004dec:	d01f      	beq.n	8004e2e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfa:	f7fd fe71 	bl	8002ae0 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e02:	f7fd fe6d 	bl	8002ae0 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e00f      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e14:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f0      	bne.n	8004e02 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	4905      	ldr	r1, [pc, #20]	; (8004e3c <HAL_RCC_OscConfig+0x82c>)
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_RCC_OscConfig+0x830>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60cb      	str	r3, [r1, #12]
 8004e2c:	e001      	b.n	8004e32 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	feeefffc 	.word	0xfeeefffc

08004e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e11d      	b.n	8005098 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e5c:	4b90      	ldr	r3, [pc, #576]	; (80050a0 <HAL_RCC_ClockConfig+0x25c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d910      	bls.n	8004e8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	4b8d      	ldr	r3, [pc, #564]	; (80050a0 <HAL_RCC_ClockConfig+0x25c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 020f 	bic.w	r2, r3, #15
 8004e72:	498b      	ldr	r1, [pc, #556]	; (80050a0 <HAL_RCC_ClockConfig+0x25c>)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7a:	4b89      	ldr	r3, [pc, #548]	; (80050a0 <HAL_RCC_ClockConfig+0x25c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e105      	b.n	8005098 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d010      	beq.n	8004eba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	4b81      	ldr	r3, [pc, #516]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d908      	bls.n	8004eba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea8:	4b7e      	ldr	r3, [pc, #504]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	497b      	ldr	r1, [pc, #492]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d079      	beq.n	8004fba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d11e      	bne.n	8004f0c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ece:	4b75      	ldr	r3, [pc, #468]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0dc      	b.n	8005098 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004ede:	f000 fa09 	bl	80052f4 <RCC_GetSysClockFreqFromPLLSource>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4a70      	ldr	r2, [pc, #448]	; (80050a8 <HAL_RCC_ClockConfig+0x264>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d946      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004eea:	4b6e      	ldr	r3, [pc, #440]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d140      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ef6:	4b6b      	ldr	r3, [pc, #428]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004efe:	4a69      	ldr	r2, [pc, #420]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e035      	b.n	8004f78 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d107      	bne.n	8004f24 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f14:	4b63      	ldr	r3, [pc, #396]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d115      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0b9      	b.n	8005098 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d107      	bne.n	8004f3c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f2c:	4b5d      	ldr	r3, [pc, #372]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d109      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0ad      	b.n	8005098 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f3c:	4b59      	ldr	r3, [pc, #356]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0a5      	b.n	8005098 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004f4c:	f000 f8b4 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4a55      	ldr	r2, [pc, #340]	; (80050a8 <HAL_RCC_ClockConfig+0x264>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d90f      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f58:	4b52      	ldr	r3, [pc, #328]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f64:	4b4f      	ldr	r3, [pc, #316]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f6c:	4a4d      	ldr	r2, [pc, #308]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f72:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f78:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f023 0203 	bic.w	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4947      	ldr	r1, [pc, #284]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fd fda9 	bl	8002ae0 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f90:	e00a      	b.n	8004fa8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f92:	f7fd fda5 	bl	8002ae0 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e077      	b.n	8005098 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa8:	4b3e      	ldr	r3, [pc, #248]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 020c 	and.w	r2, r3, #12
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d1eb      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d105      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fc0:	4b38      	ldr	r3, [pc, #224]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4a37      	ldr	r2, [pc, #220]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d010      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d208      	bcs.n	8004ffa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe8:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	492b      	ldr	r1, [pc, #172]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffa:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <HAL_RCC_ClockConfig+0x25c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d210      	bcs.n	800502a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005008:	4b25      	ldr	r3, [pc, #148]	; (80050a0 <HAL_RCC_ClockConfig+0x25c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 020f 	bic.w	r2, r3, #15
 8005010:	4923      	ldr	r1, [pc, #140]	; (80050a0 <HAL_RCC_ClockConfig+0x25c>)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	4313      	orrs	r3, r2
 8005016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <HAL_RCC_ClockConfig+0x25c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d001      	beq.n	800502a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e036      	b.n	8005098 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005036:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	4918      	ldr	r1, [pc, #96]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8005044:	4313      	orrs	r3, r2
 8005046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005054:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4910      	ldr	r1, [pc, #64]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8005064:	4313      	orrs	r3, r2
 8005066:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005068:	f000 f826 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 800506c:	4602      	mov	r2, r0
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <HAL_RCC_ClockConfig+0x260>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	490c      	ldr	r1, [pc, #48]	; (80050ac <HAL_RCC_ClockConfig+0x268>)
 800507a:	5ccb      	ldrb	r3, [r1, r3]
 800507c:	f003 031f 	and.w	r3, r3, #31
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
 8005084:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <HAL_RCC_ClockConfig+0x26c>)
 8005086:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005088:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <HAL_RCC_ClockConfig+0x270>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7fd fcd7 	bl	8002a40 <HAL_InitTick>
 8005092:	4603      	mov	r3, r0
 8005094:	73fb      	strb	r3, [r7, #15]

  return status;
 8005096:	7bfb      	ldrb	r3, [r7, #15]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40022000 	.word	0x40022000
 80050a4:	40021000 	.word	0x40021000
 80050a8:	04c4b400 	.word	0x04c4b400
 80050ac:	0800848c 	.word	0x0800848c
 80050b0:	20000020 	.word	0x20000020
 80050b4:	20000024 	.word	0x20000024

080050b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b089      	sub	sp, #36	; 0x24
 80050bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050c6:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d0:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0x34>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b0c      	cmp	r3, #12
 80050e4:	d121      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d11e      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050ec:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050f8:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e005      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005108:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005114:	4a2b      	ldr	r2, [pc, #172]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10d      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d102      	bne.n	8005136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e004      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d101      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800513c:	4b23      	ldr	r3, [pc, #140]	; (80051cc <HAL_RCC_GetSysClockFreq+0x114>)
 800513e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d134      	bne.n	80051b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005146:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d003      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0xa6>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b03      	cmp	r3, #3
 800515a:	d003      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0xac>
 800515c:	e005      	b.n	800516a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800515e:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005160:	617b      	str	r3, [r7, #20]
      break;
 8005162:	e005      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005164:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_RCC_GetSysClockFreq+0x114>)
 8005166:	617b      	str	r3, [r7, #20]
      break;
 8005168:	e002      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	617b      	str	r3, [r7, #20]
      break;
 800516e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005170:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	3301      	adds	r3, #1
 800517c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800517e:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	fb03 f202 	mul.w	r2, r3, r2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	0e5b      	lsrs	r3, r3, #25
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	3301      	adds	r3, #1
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051b0:	69bb      	ldr	r3, [r7, #24]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3724      	adds	r7, #36	; 0x24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
 80051c4:	080084a4 	.word	0x080084a4
 80051c8:	00f42400 	.word	0x00f42400
 80051cc:	007a1200 	.word	0x007a1200

080051d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d4:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051d6:	681b      	ldr	r3, [r3, #0]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000020 	.word	0x20000020

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051ec:	f7ff fff0 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4904      	ldr	r1, [pc, #16]	; (8005210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005208:	4618      	mov	r0, r3
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40021000 	.word	0x40021000
 8005210:	0800849c 	.word	0x0800849c

08005214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005218:	f7ff ffda 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	0adb      	lsrs	r3, r3, #11
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4904      	ldr	r1, [pc, #16]	; (800523c <HAL_RCC_GetPCLK2Freq+0x28>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40021000 	.word	0x40021000
 800523c:	0800849c 	.word	0x0800849c

08005240 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005258:	f7ff f906 	bl	8004468 <HAL_PWREx_GetVoltageRange>
 800525c:	6178      	str	r0, [r7, #20]
 800525e:	e014      	b.n	800528a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005260:	4b22      	ldr	r3, [pc, #136]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	4a21      	ldr	r2, [pc, #132]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526a:	6593      	str	r3, [r2, #88]	; 0x58
 800526c:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005278:	f7ff f8f6 	bl	8004468 <HAL_PWREx_GetVoltageRange>
 800527c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005288:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005290:	d10b      	bne.n	80052aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d913      	bls.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2ba0      	cmp	r3, #160	; 0xa0
 800529c:	d902      	bls.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800529e:	2302      	movs	r3, #2
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e00d      	b.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052a4:	2301      	movs	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	e00a      	b.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b7f      	cmp	r3, #127	; 0x7f
 80052ae:	d902      	bls.n	80052b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80052b0:	2302      	movs	r3, #2
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	e004      	b.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b70      	cmp	r3, #112	; 0x70
 80052ba:	d101      	bne.n	80052c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052bc:	2301      	movs	r3, #1
 80052be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f023 020f 	bic.w	r2, r3, #15
 80052c8:	4909      	ldr	r1, [pc, #36]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d001      	beq.n	80052e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40022000 	.word	0x40022000

080052f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052fa:	4b2d      	ldr	r3, [pc, #180]	; (80053b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b03      	cmp	r3, #3
 8005308:	d00b      	beq.n	8005322 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d825      	bhi.n	800535c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d008      	beq.n	8005328 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d11f      	bne.n	800535c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800531e:	613b      	str	r3, [r7, #16]
    break;
 8005320:	e01f      	b.n	8005362 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005322:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005324:	613b      	str	r3, [r7, #16]
    break;
 8005326:	e01c      	b.n	8005362 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005328:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d107      	bne.n	8005344 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005334:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e005      	b.n	8005350 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005344:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005350:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005358:	613b      	str	r3, [r7, #16]
    break;
 800535a:	e002      	b.n	8005362 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	613b      	str	r3, [r7, #16]
    break;
 8005360:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	3301      	adds	r3, #1
 800536e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	0a1b      	lsrs	r3, r3, #8
 8005376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	fb03 f202 	mul.w	r2, r3, r2
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005388:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	0e5b      	lsrs	r3, r3, #25
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	3301      	adds	r3, #1
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80053a2:	683b      	ldr	r3, [r7, #0]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40021000 	.word	0x40021000
 80053b4:	00f42400 	.word	0x00f42400
 80053b8:	007a1200 	.word	0x007a1200
 80053bc:	080084a4 	.word	0x080084a4

080053c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053c8:	2300      	movs	r3, #0
 80053ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053cc:	2300      	movs	r3, #0
 80053ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d040      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	d02a      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053e4:	2b80      	cmp	r3, #128	; 0x80
 80053e6:	d825      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80053e8:	2b60      	cmp	r3, #96	; 0x60
 80053ea:	d026      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053ec:	2b60      	cmp	r3, #96	; 0x60
 80053ee:	d821      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	d006      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80053f4:	2b40      	cmp	r3, #64	; 0x40
 80053f6:	d81d      	bhi.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d010      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005400:	e018      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005402:	4b89      	ldr	r3, [pc, #548]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	4a88      	ldr	r2, [pc, #544]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800540e:	e015      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fb62 	bl	8005ae0 <RCCEx_PLLSAI1_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005420:	e00c      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3320      	adds	r3, #32
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fc4d 	bl	8005cc8 <RCCEx_PLLSAI2_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005432:	e003      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	74fb      	strb	r3, [r7, #19]
      break;
 8005438:	e000      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800543a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10b      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005442:	4b79      	ldr	r3, [pc, #484]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005444:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005448:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005450:	4975      	ldr	r1, [pc, #468]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005458:	e001      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545a:	7cfb      	ldrb	r3, [r7, #19]
 800545c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d047      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005472:	d030      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005478:	d82a      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800547a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800547e:	d02a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005484:	d824      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d81e      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549a:	d010      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800549c:	e018      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800549e:	4b62      	ldr	r3, [pc, #392]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	4a61      	ldr	r2, [pc, #388]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054aa:	e015      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fb14 	bl	8005ae0 <RCCEx_PLLSAI1_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054bc:	e00c      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3320      	adds	r3, #32
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fbff 	bl	8005cc8 <RCCEx_PLLSAI2_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054ce:	e003      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	74fb      	strb	r3, [r7, #19]
      break;
 80054d4:	e000      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80054d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054de:	4b52      	ldr	r3, [pc, #328]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	494e      	ldr	r1, [pc, #312]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80054f4:	e001      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f6:	7cfb      	ldrb	r3, [r7, #19]
 80054f8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 809f 	beq.w	8005646 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005508:	2300      	movs	r3, #0
 800550a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800550c:	4b46      	ldr	r3, [pc, #280]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005522:	4b41      	ldr	r3, [pc, #260]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	4a40      	ldr	r2, [pc, #256]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552c:	6593      	str	r3, [r2, #88]	; 0x58
 800552e:	4b3e      	ldr	r3, [pc, #248]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800553a:	2301      	movs	r3, #1
 800553c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800553e:	4b3b      	ldr	r3, [pc, #236]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a3a      	ldr	r2, [pc, #232]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005548:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800554a:	f7fd fac9 	bl	8002ae0 <HAL_GetTick>
 800554e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005550:	e009      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005552:	f7fd fac5 	bl	8002ae0 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d902      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	74fb      	strb	r3, [r7, #19]
        break;
 8005564:	e005      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005566:	4b31      	ldr	r3, [pc, #196]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0ef      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005572:	7cfb      	ldrb	r3, [r7, #19]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d15b      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005582:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01f      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	429a      	cmp	r2, r3
 8005594:	d019      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005596:	4b24      	ldr	r3, [pc, #144]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055a2:	4b21      	ldr	r3, [pc, #132]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a8:	4a1f      	ldr	r2, [pc, #124]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055b2:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b8:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055c2:	4a19      	ldr	r2, [pc, #100]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d016      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fd fa84 	bl	8002ae0 <HAL_GetTick>
 80055d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055da:	e00b      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055dc:	f7fd fa80 	bl	8002ae0 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d902      	bls.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	74fb      	strb	r3, [r7, #19]
            break;
 80055f2:	e006      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0ec      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005602:	7cfb      	ldrb	r3, [r7, #19]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10c      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005618:	4903      	ldr	r1, [pc, #12]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005620:	e008      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005622:	7cfb      	ldrb	r3, [r7, #19]
 8005624:	74bb      	strb	r3, [r7, #18]
 8005626:	e005      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005628:	40021000 	.word	0x40021000
 800562c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	7cfb      	ldrb	r3, [r7, #19]
 8005632:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005634:	7c7b      	ldrb	r3, [r7, #17]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d105      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800563a:	4ba0      	ldr	r3, [pc, #640]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	4a9f      	ldr	r2, [pc, #636]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005644:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005652:	4b9a      	ldr	r3, [pc, #616]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f023 0203 	bic.w	r2, r3, #3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	4996      	ldr	r1, [pc, #600]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005674:	4b91      	ldr	r3, [pc, #580]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f023 020c 	bic.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	498e      	ldr	r1, [pc, #568]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005696:	4b89      	ldr	r3, [pc, #548]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a4:	4985      	ldr	r1, [pc, #532]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056b8:	4b80      	ldr	r3, [pc, #512]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c6:	497d      	ldr	r1, [pc, #500]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056da:	4b78      	ldr	r3, [pc, #480]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	4974      	ldr	r1, [pc, #464]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056fc:	4b6f      	ldr	r3, [pc, #444]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570a:	496c      	ldr	r1, [pc, #432]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800571e:	4b67      	ldr	r3, [pc, #412]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572c:	4963      	ldr	r1, [pc, #396]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005740:	4b5e      	ldr	r3, [pc, #376]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800574e:	495b      	ldr	r1, [pc, #364]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005762:	4b56      	ldr	r3, [pc, #344]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	4952      	ldr	r1, [pc, #328]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005784:	4b4d      	ldr	r3, [pc, #308]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005792:	494a      	ldr	r1, [pc, #296]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057a6:	4b45      	ldr	r3, [pc, #276]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b4:	4941      	ldr	r1, [pc, #260]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057c8:	4b3c      	ldr	r3, [pc, #240]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ce:	f023 0203 	bic.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d6:	4939      	ldr	r1, [pc, #228]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d028      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057ea:	4b34      	ldr	r3, [pc, #208]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f8:	4930      	ldr	r1, [pc, #192]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005808:	d106      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800580a:	4b2c      	ldr	r3, [pc, #176]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005814:	60d3      	str	r3, [r2, #12]
 8005816:	e011      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005820:	d10c      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3304      	adds	r3, #4
 8005826:	2101      	movs	r1, #1
 8005828:	4618      	mov	r0, r3
 800582a:	f000 f959 	bl	8005ae0 <RCCEx_PLLSAI1_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005832:	7cfb      	ldrb	r3, [r7, #19]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d04d      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800584c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005850:	d108      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005852:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005854:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005858:	4a18      	ldr	r2, [pc, #96]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800585a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800585e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005862:	e012      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005864:	4b15      	ldr	r3, [pc, #84]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800586a:	4a14      	ldr	r2, [pc, #80]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005870:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005874:	4b11      	ldr	r3, [pc, #68]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005882:	490e      	ldr	r1, [pc, #56]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800588e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005892:	d106      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4a08      	ldr	r2, [pc, #32]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800589e:	60d3      	str	r3, [r2, #12]
 80058a0:	e020      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058aa:	d109      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a02      	ldr	r2, [pc, #8]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b6:	60d3      	str	r3, [r2, #12]
 80058b8:	e014      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80058ba:	bf00      	nop
 80058bc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058c8:	d10c      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3304      	adds	r3, #4
 80058ce:	2101      	movs	r1, #1
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 f905 	bl	8005ae0 <RCCEx_PLLSAI1_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058da:	7cfb      	ldrb	r3, [r7, #19]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80058e0:	7cfb      	ldrb	r3, [r7, #19]
 80058e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d028      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058f0:	4b7a      	ldr	r3, [pc, #488]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fe:	4977      	ldr	r1, [pc, #476]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800590a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800590e:	d106      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005910:	4b72      	ldr	r3, [pc, #456]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a71      	ldr	r2, [pc, #452]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800591a:	60d3      	str	r3, [r2, #12]
 800591c:	e011      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005922:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005926:	d10c      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	2101      	movs	r1, #1
 800592e:	4618      	mov	r0, r3
 8005930:	f000 f8d6 	bl	8005ae0 <RCCEx_PLLSAI1_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005938:	7cfb      	ldrb	r3, [r7, #19]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800593e:	7cfb      	ldrb	r3, [r7, #19]
 8005940:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01e      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800594e:	4b63      	ldr	r3, [pc, #396]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595e:	495f      	ldr	r1, [pc, #380]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800596c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005970:	d10c      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	2102      	movs	r1, #2
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f8b1 	bl	8005ae0 <RCCEx_PLLSAI1_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005998:	4b50      	ldr	r3, [pc, #320]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800599a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800599e:	f023 0204 	bic.w	r2, r3, #4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a8:	494c      	ldr	r1, [pc, #304]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00b      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059bc:	4b47      	ldr	r3, [pc, #284]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059c2:	f023 0218 	bic.w	r2, r3, #24
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	4943      	ldr	r1, [pc, #268]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d035      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059e0:	4b3e      	ldr	r3, [pc, #248]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3d      	ldr	r2, [pc, #244]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ec:	f7fd f878 	bl	8002ae0 <HAL_GetTick>
 80059f0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059f2:	e009      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059f4:	f7fd f874 	bl	8002ae0 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d902      	bls.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	74fb      	strb	r3, [r7, #19]
        break;
 8005a06:	e005      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a08:	4b34      	ldr	r3, [pc, #208]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1ef      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005a14:	7cfb      	ldrb	r3, [r7, #19]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d113      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005a1a:	4b30      	ldr	r3, [pc, #192]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2a:	492c      	ldr	r1, [pc, #176]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3320      	adds	r3, #32
 8005a36:	2102      	movs	r1, #2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 f945 	bl	8005cc8 <RCCEx_PLLSAI2_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005a42:	7cfb      	ldrb	r3, [r7, #19]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005a48:	7cfb      	ldrb	r3, [r7, #19]
 8005a4a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01e      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005a58:	4b20      	ldr	r3, [pc, #128]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a68:	491c      	ldr	r1, [pc, #112]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d10c      	bne.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3320      	adds	r3, #32
 8005a80:	2101      	movs	r1, #1
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f920 	bl	8005cc8 <RCCEx_PLLSAI2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a8c:	7cfb      	ldrb	r3, [r7, #19]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005a92:	7cfb      	ldrb	r3, [r7, #19]
 8005a94:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d017      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab2:	490a      	ldr	r1, [pc, #40]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ac4:	d105      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac6:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	4a04      	ldr	r2, [pc, #16]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ad2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40021000 	.word	0x40021000

08005ae0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005aee:	4b72      	ldr	r3, [pc, #456]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00e      	beq.n	8005b18 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005afa:	4b6f      	ldr	r3, [pc, #444]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0203 	and.w	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d103      	bne.n	8005b12 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d142      	bne.n	8005b98 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	73fb      	strb	r3, [r7, #15]
 8005b16:	e03f      	b.n	8005b98 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d018      	beq.n	8005b52 <RCCEx_PLLSAI1_Config+0x72>
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d825      	bhi.n	8005b70 <RCCEx_PLLSAI1_Config+0x90>
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d002      	beq.n	8005b2e <RCCEx_PLLSAI1_Config+0x4e>
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d009      	beq.n	8005b40 <RCCEx_PLLSAI1_Config+0x60>
 8005b2c:	e020      	b.n	8005b70 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b2e:	4b62      	ldr	r3, [pc, #392]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d11d      	bne.n	8005b76 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b3e:	e01a      	b.n	8005b76 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b40:	4b5d      	ldr	r3, [pc, #372]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d116      	bne.n	8005b7a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b50:	e013      	b.n	8005b7a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b52:	4b59      	ldr	r3, [pc, #356]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10f      	bne.n	8005b7e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b5e:	4b56      	ldr	r3, [pc, #344]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b6e:	e006      	b.n	8005b7e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
      break;
 8005b74:	e004      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005b76:	bf00      	nop
 8005b78:	e002      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005b7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d108      	bne.n	8005b98 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005b86:	4b4c      	ldr	r3, [pc, #304]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f023 0203 	bic.w	r2, r3, #3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4949      	ldr	r1, [pc, #292]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f040 8086 	bne.w	8005cac <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ba0:	4b45      	ldr	r3, [pc, #276]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a44      	ldr	r2, [pc, #272]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ba6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bac:	f7fc ff98 	bl	8002ae0 <HAL_GetTick>
 8005bb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bb2:	e009      	b.n	8005bc8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bb4:	f7fc ff94 	bl	8002ae0 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d902      	bls.n	8005bc8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8005bc6:	e005      	b.n	8005bd4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bc8:	4b3b      	ldr	r3, [pc, #236]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1ef      	bne.n	8005bb4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d168      	bne.n	8005cac <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d113      	bne.n	8005c08 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005be0:	4b35      	ldr	r3, [pc, #212]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	4b35      	ldr	r3, [pc, #212]	; (8005cbc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6892      	ldr	r2, [r2, #8]
 8005bec:	0211      	lsls	r1, r2, #8
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68d2      	ldr	r2, [r2, #12]
 8005bf2:	06d2      	lsls	r2, r2, #27
 8005bf4:	4311      	orrs	r1, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6852      	ldr	r2, [r2, #4]
 8005bfa:	3a01      	subs	r2, #1
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	492d      	ldr	r1, [pc, #180]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	610b      	str	r3, [r1, #16]
 8005c06:	e02d      	b.n	8005c64 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d115      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c0e:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	4b2b      	ldr	r3, [pc, #172]	; (8005cc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6892      	ldr	r2, [r2, #8]
 8005c1a:	0211      	lsls	r1, r2, #8
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6912      	ldr	r2, [r2, #16]
 8005c20:	0852      	lsrs	r2, r2, #1
 8005c22:	3a01      	subs	r2, #1
 8005c24:	0552      	lsls	r2, r2, #21
 8005c26:	4311      	orrs	r1, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6852      	ldr	r2, [r2, #4]
 8005c2c:	3a01      	subs	r2, #1
 8005c2e:	0112      	lsls	r2, r2, #4
 8005c30:	430a      	orrs	r2, r1
 8005c32:	4921      	ldr	r1, [pc, #132]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	610b      	str	r3, [r1, #16]
 8005c38:	e014      	b.n	8005c64 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c3a:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6892      	ldr	r2, [r2, #8]
 8005c46:	0211      	lsls	r1, r2, #8
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6952      	ldr	r2, [r2, #20]
 8005c4c:	0852      	lsrs	r2, r2, #1
 8005c4e:	3a01      	subs	r2, #1
 8005c50:	0652      	lsls	r2, r2, #25
 8005c52:	4311      	orrs	r1, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6852      	ldr	r2, [r2, #4]
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	0112      	lsls	r2, r2, #4
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	4916      	ldr	r1, [pc, #88]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c64:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c70:	f7fc ff36 	bl	8002ae0 <HAL_GetTick>
 8005c74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c76:	e009      	b.n	8005c8c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c78:	f7fc ff32 	bl	8002ae0 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d902      	bls.n	8005c8c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	73fb      	strb	r3, [r7, #15]
          break;
 8005c8a:	e005      	b.n	8005c98 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0ef      	beq.n	8005c78 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c9e:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	4904      	ldr	r1, [pc, #16]	; (8005cb8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	07ff800f 	.word	0x07ff800f
 8005cc0:	ff9f800f 	.word	0xff9f800f
 8005cc4:	f9ff800f 	.word	0xf9ff800f

08005cc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cd6:	4b72      	ldr	r3, [pc, #456]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00e      	beq.n	8005d00 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ce2:	4b6f      	ldr	r3, [pc, #444]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0203 	and.w	r2, r3, #3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d103      	bne.n	8005cfa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
       ||
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d142      	bne.n	8005d80 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	73fb      	strb	r3, [r7, #15]
 8005cfe:	e03f      	b.n	8005d80 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d018      	beq.n	8005d3a <RCCEx_PLLSAI2_Config+0x72>
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d825      	bhi.n	8005d58 <RCCEx_PLLSAI2_Config+0x90>
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d002      	beq.n	8005d16 <RCCEx_PLLSAI2_Config+0x4e>
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d009      	beq.n	8005d28 <RCCEx_PLLSAI2_Config+0x60>
 8005d14:	e020      	b.n	8005d58 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d16:	4b62      	ldr	r3, [pc, #392]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d11d      	bne.n	8005d5e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d26:	e01a      	b.n	8005d5e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d28:	4b5d      	ldr	r3, [pc, #372]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d116      	bne.n	8005d62 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d38:	e013      	b.n	8005d62 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d3a:	4b59      	ldr	r3, [pc, #356]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10f      	bne.n	8005d66 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d46:	4b56      	ldr	r3, [pc, #344]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d56:	e006      	b.n	8005d66 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d5c:	e004      	b.n	8005d68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d5e:	bf00      	nop
 8005d60:	e002      	b.n	8005d68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d62:	bf00      	nop
 8005d64:	e000      	b.n	8005d68 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d66:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d108      	bne.n	8005d80 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005d6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4949      	ldr	r1, [pc, #292]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 8086 	bne.w	8005e94 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d88:	4b45      	ldr	r3, [pc, #276]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a44      	ldr	r2, [pc, #272]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d94:	f7fc fea4 	bl	8002ae0 <HAL_GetTick>
 8005d98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d9a:	e009      	b.n	8005db0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d9c:	f7fc fea0 	bl	8002ae0 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d902      	bls.n	8005db0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	73fb      	strb	r3, [r7, #15]
        break;
 8005dae:	e005      	b.n	8005dbc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005db0:	4b3b      	ldr	r3, [pc, #236]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1ef      	bne.n	8005d9c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d168      	bne.n	8005e94 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d113      	bne.n	8005df0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dc8:	4b35      	ldr	r3, [pc, #212]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dca:	695a      	ldr	r2, [r3, #20]
 8005dcc:	4b35      	ldr	r3, [pc, #212]	; (8005ea4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005dce:	4013      	ands	r3, r2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6892      	ldr	r2, [r2, #8]
 8005dd4:	0211      	lsls	r1, r2, #8
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	68d2      	ldr	r2, [r2, #12]
 8005dda:	06d2      	lsls	r2, r2, #27
 8005ddc:	4311      	orrs	r1, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6852      	ldr	r2, [r2, #4]
 8005de2:	3a01      	subs	r2, #1
 8005de4:	0112      	lsls	r2, r2, #4
 8005de6:	430a      	orrs	r2, r1
 8005de8:	492d      	ldr	r1, [pc, #180]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	614b      	str	r3, [r1, #20]
 8005dee:	e02d      	b.n	8005e4c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d115      	bne.n	8005e22 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005df6:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005df8:	695a      	ldr	r2, [r3, #20]
 8005dfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6892      	ldr	r2, [r2, #8]
 8005e02:	0211      	lsls	r1, r2, #8
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6912      	ldr	r2, [r2, #16]
 8005e08:	0852      	lsrs	r2, r2, #1
 8005e0a:	3a01      	subs	r2, #1
 8005e0c:	0552      	lsls	r2, r2, #21
 8005e0e:	4311      	orrs	r1, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6852      	ldr	r2, [r2, #4]
 8005e14:	3a01      	subs	r2, #1
 8005e16:	0112      	lsls	r2, r2, #4
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	4921      	ldr	r1, [pc, #132]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	614b      	str	r3, [r1, #20]
 8005e20:	e014      	b.n	8005e4c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e22:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e24:	695a      	ldr	r2, [r3, #20]
 8005e26:	4b21      	ldr	r3, [pc, #132]	; (8005eac <RCCEx_PLLSAI2_Config+0x1e4>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6892      	ldr	r2, [r2, #8]
 8005e2e:	0211      	lsls	r1, r2, #8
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6952      	ldr	r2, [r2, #20]
 8005e34:	0852      	lsrs	r2, r2, #1
 8005e36:	3a01      	subs	r2, #1
 8005e38:	0652      	lsls	r2, r2, #25
 8005e3a:	4311      	orrs	r1, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6852      	ldr	r2, [r2, #4]
 8005e40:	3a01      	subs	r2, #1
 8005e42:	0112      	lsls	r2, r2, #4
 8005e44:	430a      	orrs	r2, r1
 8005e46:	4916      	ldr	r1, [pc, #88]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e4c:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fc fe42 	bl	8002ae0 <HAL_GetTick>
 8005e5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e5e:	e009      	b.n	8005e74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e60:	f7fc fe3e 	bl	8002ae0 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d902      	bls.n	8005e74 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	73fb      	strb	r3, [r7, #15]
          break;
 8005e72:	e005      	b.n	8005e80 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e74:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0ef      	beq.n	8005e60 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	4904      	ldr	r1, [pc, #16]	; (8005ea0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	07ff800f 	.word	0x07ff800f
 8005ea8:	ff9f800f 	.word	0xff9f800f
 8005eac:	f9ff800f 	.word	0xf9ff800f

08005eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e095      	b.n	8005fee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d108      	bne.n	8005edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed2:	d009      	beq.n	8005ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61da      	str	r2, [r3, #28]
 8005eda:	e005      	b.n	8005ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fc fc10 	bl	8002728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f28:	d902      	bls.n	8005f30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e002      	b.n	8005f36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f3e:	d007      	beq.n	8005f50 <HAL_SPI_Init+0xa0>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	ea42 0103 	orr.w	r1, r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	f003 0204 	and.w	r2, r3, #4
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005fcc:	ea42 0103 	orr.w	r1, r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b088      	sub	sp, #32
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_SPI_Transmit+0x22>
 8006014:	2302      	movs	r3, #2
 8006016:	e15f      	b.n	80062d8 <HAL_SPI_Transmit+0x2e2>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006020:	f7fc fd5e 	bl	8002ae0 <HAL_GetTick>
 8006024:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b01      	cmp	r3, #1
 8006034:	d002      	beq.n	800603c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006036:	2302      	movs	r3, #2
 8006038:	77fb      	strb	r3, [r7, #31]
    goto error;
 800603a:	e148      	b.n	80062ce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_SPI_Transmit+0x52>
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800604c:	e13f      	b.n	80062ce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2203      	movs	r2, #3
 8006052:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006098:	d10f      	bne.n	80060ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d007      	beq.n	80060d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060e0:	d94f      	bls.n	8006182 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_SPI_Transmit+0xfa>
 80060ea:	8afb      	ldrh	r3, [r7, #22]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d142      	bne.n	8006176 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006114:	e02f      	b.n	8006176 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b02      	cmp	r3, #2
 8006122:	d112      	bne.n	800614a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	881a      	ldrh	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	1c9a      	adds	r2, r3, #2
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006148:	e015      	b.n	8006176 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800614a:	f7fc fcc9 	bl	8002ae0 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d803      	bhi.n	8006162 <HAL_SPI_Transmit+0x16c>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d102      	bne.n	8006168 <HAL_SPI_Transmit+0x172>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d106      	bne.n	8006176 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006174:	e0ab      	b.n	80062ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1ca      	bne.n	8006116 <HAL_SPI_Transmit+0x120>
 8006180:	e080      	b.n	8006284 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_SPI_Transmit+0x19a>
 800618a:	8afb      	ldrh	r3, [r7, #22]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d174      	bne.n	800627a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	d912      	bls.n	80061c0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	881a      	ldrh	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	1c9a      	adds	r2, r3, #2
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b02      	subs	r3, #2
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061be:	e05c      	b.n	800627a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	330c      	adds	r3, #12
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80061e6:	e048      	b.n	800627a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d12b      	bne.n	800624e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d912      	bls.n	8006226 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	881a      	ldrh	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	1c9a      	adds	r2, r3, #2
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b02      	subs	r3, #2
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006224:	e029      	b.n	800627a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800624c:	e015      	b.n	800627a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800624e:	f7fc fc47 	bl	8002ae0 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d803      	bhi.n	8006266 <HAL_SPI_Transmit+0x270>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d102      	bne.n	800626c <HAL_SPI_Transmit+0x276>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006278:	e029      	b.n	80062ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1b1      	bne.n	80061e8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f001 f8d7 	bl	800743c <SPI_EndRxTxTransaction>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062a2:	2300      	movs	r3, #0
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e003      	b.n	80062ce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d002      	beq.n	8006306 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006300:	2302      	movs	r3, #2
 8006302:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006304:	e11a      	b.n	800653c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630e:	d112      	bne.n	8006336 <HAL_SPI_Receive+0x56>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10e      	bne.n	8006336 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2204      	movs	r2, #4
 800631c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006320:	88fa      	ldrh	r2, [r7, #6]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	4613      	mov	r3, r2
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f90e 	bl	800654e <HAL_SPI_TransmitReceive>
 8006332:	4603      	mov	r3, r0
 8006334:	e107      	b.n	8006546 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_SPI_Receive+0x64>
 8006340:	2302      	movs	r3, #2
 8006342:	e100      	b.n	8006546 <HAL_SPI_Receive+0x266>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800634c:	f7fc fbc8 	bl	8002ae0 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_SPI_Receive+0x7e>
 8006358:	88fb      	ldrh	r3, [r7, #6]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006362:	e0eb      	b.n	800653c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2204      	movs	r2, #4
 8006368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063ae:	d908      	bls.n	80063c2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	e007      	b.n	80063d2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063d0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063da:	d10f      	bne.n	80063fc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b40      	cmp	r3, #64	; 0x40
 8006408:	d007      	beq.n	800641a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006418:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006422:	d86f      	bhi.n	8006504 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006424:	e034      	b.n	8006490 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b01      	cmp	r3, #1
 8006432:	d117      	bne.n	8006464 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f103 020c 	add.w	r2, r3, #12
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006462:	e015      	b.n	8006490 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006464:	f7fc fb3c 	bl	8002ae0 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d803      	bhi.n	800647c <HAL_SPI_Receive+0x19c>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d102      	bne.n	8006482 <HAL_SPI_Receive+0x1a2>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800648e:	e055      	b.n	800653c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1c4      	bne.n	8006426 <HAL_SPI_Receive+0x146>
 800649c:	e038      	b.n	8006510 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d115      	bne.n	80064d8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	b292      	uxth	r2, r2
 80064b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	1c9a      	adds	r2, r3, #2
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80064d6:	e015      	b.n	8006504 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064d8:	f7fc fb02 	bl	8002ae0 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d803      	bhi.n	80064f0 <HAL_SPI_Receive+0x210>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	d102      	bne.n	80064f6 <HAL_SPI_Receive+0x216>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006502:	e01b      	b.n	800653c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1c6      	bne.n	800649e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 ff39 	bl	800738c <SPI_EndRxTransaction>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
 8006532:	e003      	b.n	800653c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b08a      	sub	sp, #40	; 0x28
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800655c:	2301      	movs	r3, #1
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x26>
 8006570:	2302      	movs	r3, #2
 8006572:	e20a      	b.n	800698a <HAL_SPI_TransmitReceive+0x43c>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800657c:	f7fc fab0 	bl	8002ae0 <HAL_GetTick>
 8006580:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006588:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006590:	887b      	ldrh	r3, [r7, #2]
 8006592:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006594:	887b      	ldrh	r3, [r7, #2]
 8006596:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006598:	7efb      	ldrb	r3, [r7, #27]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d00e      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x6e>
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a4:	d106      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x66>
 80065ae:	7efb      	ldrb	r3, [r7, #27]
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d003      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80065b4:	2302      	movs	r3, #2
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80065ba:	e1e0      	b.n	800697e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_SPI_TransmitReceive+0x80>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <HAL_SPI_TransmitReceive+0x80>
 80065c8:	887b      	ldrh	r3, [r7, #2]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80065d4:	e1d3      	b.n	800697e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d003      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2205      	movs	r2, #5
 80065e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	887a      	ldrh	r2, [r7, #2]
 80065fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	887a      	ldrh	r2, [r7, #2]
 8006602:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	887a      	ldrh	r2, [r7, #2]
 8006610:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	887a      	ldrh	r2, [r7, #2]
 8006616:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800662c:	d802      	bhi.n	8006634 <HAL_SPI_TransmitReceive+0xe6>
 800662e:	8a3b      	ldrh	r3, [r7, #16]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d908      	bls.n	8006646 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006642:	605a      	str	r2, [r3, #4]
 8006644:	e007      	b.n	8006656 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d007      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800667c:	f240 8081 	bls.w	8006782 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <HAL_SPI_TransmitReceive+0x140>
 8006688:	8a7b      	ldrh	r3, [r7, #18]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d16d      	bne.n	800676a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	881a      	ldrh	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	1c9a      	adds	r2, r3, #2
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b2:	e05a      	b.n	800676a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d11b      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x1ac>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d016      	beq.n	80066fa <HAL_SPI_TransmitReceive+0x1ac>
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d113      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	881a      	ldrh	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	1c9a      	adds	r2, r3, #2
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d11c      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x1f4>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d016      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	b292      	uxth	r2, r2
 8006720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	1c9a      	adds	r2, r3, #2
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800673e:	2301      	movs	r3, #1
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006742:	f7fc f9cd 	bl	8002ae0 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674e:	429a      	cmp	r2, r3
 8006750:	d80b      	bhi.n	800676a <HAL_SPI_TransmitReceive+0x21c>
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d007      	beq.n	800676a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006768:	e109      	b.n	800697e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d19f      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x166>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d199      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x166>
 8006780:	e0e3      	b.n	800694a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_SPI_TransmitReceive+0x244>
 800678a:	8a7b      	ldrh	r3, [r7, #18]
 800678c:	2b01      	cmp	r3, #1
 800678e:	f040 80cf 	bne.w	8006930 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d912      	bls.n	80067c2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	881a      	ldrh	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	1c9a      	adds	r2, r3, #2
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b02      	subs	r3, #2
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067c0:	e0b6      	b.n	8006930 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067e8:	e0a2      	b.n	8006930 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d134      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x314>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d02f      	beq.n	8006862 <HAL_SPI_TransmitReceive+0x314>
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	2b01      	cmp	r3, #1
 8006806:	d12c      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b01      	cmp	r3, #1
 8006810:	d912      	bls.n	8006838 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	1c9a      	adds	r2, r3, #2
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b02      	subs	r3, #2
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006836:	e012      	b.n	800685e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	330c      	adds	r3, #12
 8006842:	7812      	ldrb	r2, [r2, #0]
 8006844:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d148      	bne.n	8006902 <HAL_SPI_TransmitReceive+0x3b4>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d042      	beq.n	8006902 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b01      	cmp	r3, #1
 8006886:	d923      	bls.n	80068d0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	b292      	uxth	r2, r2
 8006894:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	1c9a      	adds	r2, r3, #2
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b02      	subs	r3, #2
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d81f      	bhi.n	80068fe <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	e016      	b.n	80068fe <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f103 020c 	add.w	r2, r3, #12
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	7812      	ldrb	r2, [r2, #0]
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068fe:	2301      	movs	r3, #1
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006902:	f7fc f8ed 	bl	8002ae0 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690e:	429a      	cmp	r2, r3
 8006910:	d803      	bhi.n	800691a <HAL_SPI_TransmitReceive+0x3cc>
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d102      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x3d2>
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800692e:	e026      	b.n	800697e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	f47f af57 	bne.w	80067ea <HAL_SPI_TransmitReceive+0x29c>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	f47f af50 	bne.w	80067ea <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fd74 	bl	800743c <SPI_EndRxTxTransaction>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2220      	movs	r2, #32
 8006964:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006974:	e003      	b.n	800697e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800698a:	4618      	mov	r0, r3
 800698c:	3728      	adds	r7, #40	; 0x28
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d002      	beq.n	80069b8 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80069b2:	2302      	movs	r3, #2
 80069b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069b6:	e092      	b.n	8006ade <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d110      	bne.n	80069e2 <HAL_SPI_Receive_IT+0x4e>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c8:	d10b      	bne.n	80069e2 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2204      	movs	r2, #4
 80069ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f889 	bl	8006af0 <HAL_SPI_TransmitReceive_IT>
 80069de:	4603      	mov	r3, r0
 80069e0:	e07e      	b.n	8006ae0 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_SPI_Receive_IT+0x5a>
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069f2:	e074      	b.n	8006ade <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_SPI_Receive_IT+0x6e>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e06e      	b.n	8006ae0 <HAL_SPI_Receive_IT+0x14c>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	88fa      	ldrh	r2, [r7, #6]
 8006a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	88fa      	ldrh	r2, [r7, #6]
 8006a2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a4e:	d90b      	bls.n	8006a68 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a5e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <HAL_SPI_Receive_IT+0x154>)
 8006a64:	64da      	str	r2, [r3, #76]	; 0x4c
 8006a66:	e00a      	b.n	8006a7e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a76:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <HAL_SPI_Receive_IT+0x158>)
 8006a7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a86:	d10f      	bne.n	8006aa8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006aa6:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab2:	2b40      	cmp	r3, #64	; 0x40
 8006ab4:	d007      	beq.n	8006ac6 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ac4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006adc:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	08007105 	.word	0x08007105
 8006aec:	080070b5 	.word	0x080070b5

08006af0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b08:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b10:	7dbb      	ldrb	r3, [r7, #22]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d00d      	beq.n	8006b32 <HAL_SPI_TransmitReceive_IT+0x42>
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b1c:	d106      	bne.n	8006b2c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <HAL_SPI_TransmitReceive_IT+0x3c>
 8006b26:	7dbb      	ldrb	r3, [r7, #22]
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d002      	beq.n	8006b32 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b30:	e07d      	b.n	8006c2e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <HAL_SPI_TransmitReceive_IT+0x54>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_SPI_TransmitReceive_IT+0x54>
 8006b3e:	887b      	ldrh	r3, [r7, #2]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d102      	bne.n	8006b4a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b48:	e071      	b.n	8006c2e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_SPI_TransmitReceive_IT+0x68>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e06b      	b.n	8006c30 <HAL_SPI_TransmitReceive_IT+0x140>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d003      	beq.n	8006b74 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2205      	movs	r2, #5
 8006b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	887a      	ldrh	r2, [r7, #2]
 8006b84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	887a      	ldrh	r2, [r7, #2]
 8006b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	887a      	ldrh	r2, [r7, #2]
 8006b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	887a      	ldrh	r2, [r7, #2]
 8006b9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006baa:	d906      	bls.n	8006bba <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4a23      	ldr	r2, [pc, #140]	; (8006c3c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8006bb0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a22      	ldr	r2, [pc, #136]	; (8006c40 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006bb6:	651a      	str	r2, [r3, #80]	; 0x50
 8006bb8:	e005      	b.n	8006bc6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006bbe:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006bc4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bce:	d802      	bhi.n	8006bd6 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006bd0:	887b      	ldrh	r3, [r7, #2]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d908      	bls.n	8006be8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006be4:	605a      	str	r2, [r3, #4]
 8006be6:	e007      	b.n	8006bf8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bf6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c02:	2b40      	cmp	r3, #64	; 0x40
 8006c04:	d007      	beq.n	8006c16 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c14:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006c2c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	08006fef 	.word	0x08006fef
 8006c40:	08007055 	.word	0x08007055
 8006c44:	08006e9f 	.word	0x08006e9f
 8006c48:	08006f5d 	.word	0x08006f5d

08006c4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	099b      	lsrs	r3, r3, #6
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10f      	bne.n	8006c90 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	099b      	lsrs	r3, r3, #6
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
    return;
 8006c8e:	e0d7      	b.n	8006e40 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <HAL_SPI_IRQHandler+0x66>
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	09db      	lsrs	r3, r3, #7
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
    return;
 8006cb0:	e0c6      	b.n	8006e40 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_SPI_IRQHandler+0x8c>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	099b      	lsrs	r3, r3, #6
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	0a1b      	lsrs	r3, r3, #8
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80b4 	beq.w	8006e40 <HAL_SPI_IRQHandler+0x1f4>
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	095b      	lsrs	r3, r3, #5
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 80ad 	beq.w	8006e40 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	099b      	lsrs	r3, r3, #6
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d023      	beq.n	8006d3a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d011      	beq.n	8006d22 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d02:	f043 0204 	orr.w	r2, r3, #4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	e00b      	b.n	8006d3a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d22:	2300      	movs	r3, #0
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	613b      	str	r3, [r7, #16]
 8006d36:	693b      	ldr	r3, [r7, #16]
        return;
 8006d38:	e082      	b.n	8006e40 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d014      	beq.n	8006d70 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4a:	f043 0201 	orr.w	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00c      	beq.n	8006d96 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d80:	f043 0208 	orr.w	r2, r3, #8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60bb      	str	r3, [r7, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60bb      	str	r3, [r7, #8]
 8006d94:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d04f      	beq.n	8006e3e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dac:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d104      	bne.n	8006dca <HAL_SPI_IRQHandler+0x17e>
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d034      	beq.n	8006e34 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0203 	bic.w	r2, r2, #3
 8006dd8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d011      	beq.n	8006e06 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de6:	4a18      	ldr	r2, [pc, #96]	; (8006e48 <HAL_SPI_IRQHandler+0x1fc>)
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fb ffb7 	bl	8002d62 <HAL_DMA_Abort_IT>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e12:	4a0d      	ldr	r2, [pc, #52]	; (8006e48 <HAL_SPI_IRQHandler+0x1fc>)
 8006e14:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fb ffa1 	bl	8002d62 <HAL_DMA_Abort_IT>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006e32:	e003      	b.n	8006e3c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f813 	bl	8006e60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e3a:	e000      	b.n	8006e3e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006e3c:	bf00      	nop
    return;
 8006e3e:	bf00      	nop
  }
}
 8006e40:	3720      	adds	r7, #32
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	08006e75 	.word	0x08006e75

08006e4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7ff ffe5 	bl	8006e60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d923      	bls.n	8006efa <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	b292      	uxth	r2, r2
 8006ebe:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	1c9a      	adds	r2, r3, #2
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b02      	subs	r3, #2
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d11f      	bne.n	8006f28 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ef6:	605a      	str	r2, [r3, #4]
 8006ef8:	e016      	b.n	8006f28 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f103 020c 	add.w	r2, r3, #12
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	7812      	ldrb	r2, [r2, #0]
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10f      	bne.n	8006f54 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f42:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d102      	bne.n	8006f54 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 faba 	bl	80074c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d912      	bls.n	8006f94 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	881a      	ldrh	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	1c9a      	adds	r2, r3, #2
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b02      	subs	r3, #2
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f92:	e012      	b.n	8006fba <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	7812      	ldrb	r2, [r2, #0]
 8006fa0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d110      	bne.n	8006fe6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d102      	bne.n	8006fe6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa71 	bl	80074c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	b292      	uxth	r2, r2
 8007002:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	1c9a      	adds	r2, r3, #2
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10f      	bne.n	800704c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa3e 	bl	80074c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	881a      	ldrh	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	1c9a      	adds	r2, r3, #2
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d110      	bne.n	80070ac <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007098:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d102      	bne.n	80070ac <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa0e 	bl	80074c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f103 020c 	add.w	r2, r3, #12
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	7812      	ldrb	r2, [r2, #0]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa28 	bl	800754c <SPI_CloseRx_ISR>
  }
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	b292      	uxth	r2, r2
 8007118:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	1c9a      	adds	r2, r3, #2
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d102      	bne.n	8007148 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa02 	bl	800754c <SPI_CloseRx_ISR>
  }
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007160:	f7fb fcbe 	bl	8002ae0 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	1a9b      	subs	r3, r3, r2
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	4413      	add	r3, r2
 800716e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007170:	f7fb fcb6 	bl	8002ae0 <HAL_GetTick>
 8007174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007176:	4b39      	ldr	r3, [pc, #228]	; (800725c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	015b      	lsls	r3, r3, #5
 800717c:	0d1b      	lsrs	r3, r3, #20
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	fb02 f303 	mul.w	r3, r2, r3
 8007184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007186:	e054      	b.n	8007232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718e:	d050      	beq.n	8007232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007190:	f7fb fca6 	bl	8002ae0 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	429a      	cmp	r2, r3
 800719e:	d902      	bls.n	80071a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d13d      	bne.n	8007222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071be:	d111      	bne.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c8:	d004      	beq.n	80071d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d2:	d107      	bne.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ec:	d10f      	bne.n	800720e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800720c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e017      	b.n	8007252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	3b01      	subs	r3, #1
 8007230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4013      	ands	r3, r2
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	429a      	cmp	r2, r3
 8007240:	bf0c      	ite	eq
 8007242:	2301      	moveq	r3, #1
 8007244:	2300      	movne	r3, #0
 8007246:	b2db      	uxtb	r3, r3
 8007248:	461a      	mov	r2, r3
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	429a      	cmp	r2, r3
 800724e:	d19b      	bne.n	8007188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000020 	.word	0x20000020

08007260 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	; 0x28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
 800726c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007272:	f7fb fc35 	bl	8002ae0 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	1a9b      	subs	r3, r3, r2
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	4413      	add	r3, r2
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007282:	f7fb fc2d 	bl	8002ae0 <HAL_GetTick>
 8007286:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007290:	4b3d      	ldr	r3, [pc, #244]	; (8007388 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	00da      	lsls	r2, r3, #3
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	0d1b      	lsrs	r3, r3, #20
 80072a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a2:	fb02 f303 	mul.w	r3, r2, r3
 80072a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072a8:	e060      	b.n	800736c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80072b0:	d107      	bne.n	80072c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d050      	beq.n	800736c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072ca:	f7fb fc09 	bl	8002ae0 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d902      	bls.n	80072e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d13d      	bne.n	800735c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072f8:	d111      	bne.n	800731e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007302:	d004      	beq.n	800730e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800730c:	d107      	bne.n	800731e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800731c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007326:	d10f      	bne.n	8007348 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007346:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e010      	b.n	800737e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	3b01      	subs	r3, #1
 800736a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	4013      	ands	r3, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	429a      	cmp	r2, r3
 800737a:	d196      	bne.n	80072aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3728      	adds	r7, #40	; 0x28
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000020 	.word	0x20000020

0800738c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af02      	add	r7, sp, #8
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073a0:	d111      	bne.n	80073c6 <SPI_EndRxTransaction+0x3a>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073aa:	d004      	beq.n	80073b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b4:	d107      	bne.n	80073c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	2180      	movs	r1, #128	; 0x80
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff febd 	bl	8007150 <SPI_WaitFlagStateUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e0:	f043 0220 	orr.w	r2, r3, #32
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e023      	b.n	8007434 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f4:	d11d      	bne.n	8007432 <SPI_EndRxTransaction+0xa6>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073fe:	d004      	beq.n	800740a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007408:	d113      	bne.n	8007432 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2200      	movs	r2, #0
 8007412:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7ff ff22 	bl	8007260 <SPI_WaitFifoStateUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007426:	f043 0220 	orr.w	r2, r3, #32
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e000      	b.n	8007434 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af02      	add	r7, sp, #8
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7ff ff03 	bl	8007260 <SPI_WaitFifoStateUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007464:	f043 0220 	orr.w	r2, r3, #32
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e027      	b.n	80074c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2200      	movs	r2, #0
 8007478:	2180      	movs	r1, #128	; 0x80
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f7ff fe68 	bl	8007150 <SPI_WaitFlagStateUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748a:	f043 0220 	orr.w	r2, r3, #32
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e014      	b.n	80074c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2200      	movs	r2, #0
 800749e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff fedc 	bl	8007260 <SPI_WaitFifoStateUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b2:	f043 0220 	orr.w	r2, r3, #32
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e000      	b.n	80074c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074d0:	f7fb fb06 	bl	8002ae0 <HAL_GetTick>
 80074d4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0220 	bic.w	r2, r2, #32
 80074e4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	2164      	movs	r1, #100	; 0x64
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff ffa6 	bl	800743c <SPI_EndRxTxTransaction>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fa:	f043 0220 	orr.w	r2, r3, #32
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007506:	2b00      	cmp	r3, #0
 8007508:	d115      	bne.n	8007536 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b04      	cmp	r3, #4
 8007514:	d107      	bne.n	8007526 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7f9 fff0 	bl	8001504 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007524:	e00e      	b.n	8007544 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff fc8c 	bl	8006e4c <HAL_SPI_TxRxCpltCallback>
}
 8007534:	e006      	b.n	8007544 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff fc8e 	bl	8006e60 <HAL_SPI_ErrorCallback>
}
 8007544:	bf00      	nop
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007562:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007564:	f7fb fabc 	bl	8002ae0 <HAL_GetTick>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	2164      	movs	r1, #100	; 0x64
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff ff0c 	bl	800738c <SPI_EndRxTransaction>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757e:	f043 0220 	orr.w	r2, r3, #32
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7f9 ffb4 	bl	8001504 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800759c:	e002      	b.n	80075a4 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fc5e 	bl	8006e60 <HAL_SPI_ErrorCallback>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e042      	b.n	8007644 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d106      	bne.n	80075d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7fb f949 	bl	8002868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2224      	movs	r2, #36	; 0x24
 80075da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fbb4 	bl	8007d64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8b5 	bl	800776c <UART_SetConfig>
 8007602:	4603      	mov	r3, r0
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e01b      	b.n	8007644 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800761a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800762a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fc33 	bl	8007ea8 <UART_CheckIdleState>
 8007642:	4603      	mov	r3, r0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007662:	2b20      	cmp	r3, #32
 8007664:	d17c      	bne.n	8007760 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <HAL_UART_Transmit+0x26>
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e075      	b.n	8007762 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2221      	movs	r2, #33	; 0x21
 8007682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007686:	f7fb fa2b 	bl	8002ae0 <HAL_GetTick>
 800768a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	88fa      	ldrh	r2, [r7, #6]
 8007698:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a4:	d108      	bne.n	80076b8 <HAL_UART_Transmit+0x6c>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d104      	bne.n	80076b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	61bb      	str	r3, [r7, #24]
 80076b6:	e003      	b.n	80076c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076c0:	e031      	b.n	8007726 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2200      	movs	r2, #0
 80076ca:	2180      	movs	r1, #128	; 0x80
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fc95 	bl	8007ffc <UART_WaitOnFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2220      	movs	r2, #32
 80076dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e03e      	b.n	8007762 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10b      	bne.n	8007702 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	881a      	ldrh	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076f6:	b292      	uxth	r2, r2
 80076f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	3302      	adds	r3, #2
 80076fe:	61bb      	str	r3, [r7, #24]
 8007700:	e008      	b.n	8007714 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	b292      	uxth	r2, r2
 800770c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	3301      	adds	r3, #1
 8007712:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1c7      	bne.n	80076c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2200      	movs	r2, #0
 800773a:	2140      	movs	r1, #64	; 0x40
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fc5d 	bl	8007ffc <UART_WaitOnFlagUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e006      	b.n	8007762 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	e000      	b.n	8007762 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007760:	2302      	movs	r3, #2
  }
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800776c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007770:	b08c      	sub	sp, #48	; 0x30
 8007772:	af00      	add	r7, sp, #0
 8007774:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	431a      	orrs	r2, r3
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	431a      	orrs	r2, r3
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	4313      	orrs	r3, r2
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	4baa      	ldr	r3, [pc, #680]	; (8007a44 <UART_SetConfig+0x2d8>)
 800779c:	4013      	ands	r3, r2
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	6812      	ldr	r2, [r2, #0]
 80077a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077a4:	430b      	orrs	r3, r1
 80077a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a9f      	ldr	r2, [pc, #636]	; (8007a48 <UART_SetConfig+0x2dc>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d004      	beq.n	80077d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d4:	4313      	orrs	r3, r2
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80077e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077ec:	430b      	orrs	r3, r1
 80077ee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f6:	f023 010f 	bic.w	r1, r3, #15
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a90      	ldr	r2, [pc, #576]	; (8007a4c <UART_SetConfig+0x2e0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d125      	bne.n	800785c <UART_SetConfig+0xf0>
 8007810:	4b8f      	ldr	r3, [pc, #572]	; (8007a50 <UART_SetConfig+0x2e4>)
 8007812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b03      	cmp	r3, #3
 800781c:	d81a      	bhi.n	8007854 <UART_SetConfig+0xe8>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <UART_SetConfig+0xb8>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	08007835 	.word	0x08007835
 8007828:	08007845 	.word	0x08007845
 800782c:	0800783d 	.word	0x0800783d
 8007830:	0800784d 	.word	0x0800784d
 8007834:	2301      	movs	r3, #1
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783a:	e116      	b.n	8007a6a <UART_SetConfig+0x2fe>
 800783c:	2302      	movs	r3, #2
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007842:	e112      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007844:	2304      	movs	r3, #4
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800784a:	e10e      	b.n	8007a6a <UART_SetConfig+0x2fe>
 800784c:	2308      	movs	r3, #8
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007852:	e10a      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007854:	2310      	movs	r3, #16
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800785a:	e106      	b.n	8007a6a <UART_SetConfig+0x2fe>
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a7c      	ldr	r2, [pc, #496]	; (8007a54 <UART_SetConfig+0x2e8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d138      	bne.n	80078d8 <UART_SetConfig+0x16c>
 8007866:	4b7a      	ldr	r3, [pc, #488]	; (8007a50 <UART_SetConfig+0x2e4>)
 8007868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786c:	f003 030c 	and.w	r3, r3, #12
 8007870:	2b0c      	cmp	r3, #12
 8007872:	d82d      	bhi.n	80078d0 <UART_SetConfig+0x164>
 8007874:	a201      	add	r2, pc, #4	; (adr r2, 800787c <UART_SetConfig+0x110>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	080078b1 	.word	0x080078b1
 8007880:	080078d1 	.word	0x080078d1
 8007884:	080078d1 	.word	0x080078d1
 8007888:	080078d1 	.word	0x080078d1
 800788c:	080078c1 	.word	0x080078c1
 8007890:	080078d1 	.word	0x080078d1
 8007894:	080078d1 	.word	0x080078d1
 8007898:	080078d1 	.word	0x080078d1
 800789c:	080078b9 	.word	0x080078b9
 80078a0:	080078d1 	.word	0x080078d1
 80078a4:	080078d1 	.word	0x080078d1
 80078a8:	080078d1 	.word	0x080078d1
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	2300      	movs	r3, #0
 80078b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078b6:	e0d8      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80078b8:	2302      	movs	r3, #2
 80078ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078be:	e0d4      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80078c0:	2304      	movs	r3, #4
 80078c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078c6:	e0d0      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80078c8:	2308      	movs	r3, #8
 80078ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078ce:	e0cc      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80078d0:	2310      	movs	r3, #16
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078d6:	e0c8      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a5e      	ldr	r2, [pc, #376]	; (8007a58 <UART_SetConfig+0x2ec>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d125      	bne.n	800792e <UART_SetConfig+0x1c2>
 80078e2:	4b5b      	ldr	r3, [pc, #364]	; (8007a50 <UART_SetConfig+0x2e4>)
 80078e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078ec:	2b30      	cmp	r3, #48	; 0x30
 80078ee:	d016      	beq.n	800791e <UART_SetConfig+0x1b2>
 80078f0:	2b30      	cmp	r3, #48	; 0x30
 80078f2:	d818      	bhi.n	8007926 <UART_SetConfig+0x1ba>
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d00a      	beq.n	800790e <UART_SetConfig+0x1a2>
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d814      	bhi.n	8007926 <UART_SetConfig+0x1ba>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <UART_SetConfig+0x19a>
 8007900:	2b10      	cmp	r3, #16
 8007902:	d008      	beq.n	8007916 <UART_SetConfig+0x1aa>
 8007904:	e00f      	b.n	8007926 <UART_SetConfig+0x1ba>
 8007906:	2300      	movs	r3, #0
 8007908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800790c:	e0ad      	b.n	8007a6a <UART_SetConfig+0x2fe>
 800790e:	2302      	movs	r3, #2
 8007910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007914:	e0a9      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007916:	2304      	movs	r3, #4
 8007918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800791c:	e0a5      	b.n	8007a6a <UART_SetConfig+0x2fe>
 800791e:	2308      	movs	r3, #8
 8007920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007924:	e0a1      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007926:	2310      	movs	r3, #16
 8007928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800792c:	e09d      	b.n	8007a6a <UART_SetConfig+0x2fe>
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a4a      	ldr	r2, [pc, #296]	; (8007a5c <UART_SetConfig+0x2f0>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d125      	bne.n	8007984 <UART_SetConfig+0x218>
 8007938:	4b45      	ldr	r3, [pc, #276]	; (8007a50 <UART_SetConfig+0x2e4>)
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007942:	2bc0      	cmp	r3, #192	; 0xc0
 8007944:	d016      	beq.n	8007974 <UART_SetConfig+0x208>
 8007946:	2bc0      	cmp	r3, #192	; 0xc0
 8007948:	d818      	bhi.n	800797c <UART_SetConfig+0x210>
 800794a:	2b80      	cmp	r3, #128	; 0x80
 800794c:	d00a      	beq.n	8007964 <UART_SetConfig+0x1f8>
 800794e:	2b80      	cmp	r3, #128	; 0x80
 8007950:	d814      	bhi.n	800797c <UART_SetConfig+0x210>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <UART_SetConfig+0x1f0>
 8007956:	2b40      	cmp	r3, #64	; 0x40
 8007958:	d008      	beq.n	800796c <UART_SetConfig+0x200>
 800795a:	e00f      	b.n	800797c <UART_SetConfig+0x210>
 800795c:	2300      	movs	r3, #0
 800795e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007962:	e082      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007964:	2302      	movs	r3, #2
 8007966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800796a:	e07e      	b.n	8007a6a <UART_SetConfig+0x2fe>
 800796c:	2304      	movs	r3, #4
 800796e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007972:	e07a      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007974:	2308      	movs	r3, #8
 8007976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800797a:	e076      	b.n	8007a6a <UART_SetConfig+0x2fe>
 800797c:	2310      	movs	r3, #16
 800797e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007982:	e072      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a35      	ldr	r2, [pc, #212]	; (8007a60 <UART_SetConfig+0x2f4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d12a      	bne.n	80079e4 <UART_SetConfig+0x278>
 800798e:	4b30      	ldr	r3, [pc, #192]	; (8007a50 <UART_SetConfig+0x2e4>)
 8007990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800799c:	d01a      	beq.n	80079d4 <UART_SetConfig+0x268>
 800799e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a2:	d81b      	bhi.n	80079dc <UART_SetConfig+0x270>
 80079a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a8:	d00c      	beq.n	80079c4 <UART_SetConfig+0x258>
 80079aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ae:	d815      	bhi.n	80079dc <UART_SetConfig+0x270>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <UART_SetConfig+0x250>
 80079b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b8:	d008      	beq.n	80079cc <UART_SetConfig+0x260>
 80079ba:	e00f      	b.n	80079dc <UART_SetConfig+0x270>
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079c2:	e052      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80079c4:	2302      	movs	r3, #2
 80079c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ca:	e04e      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80079cc:	2304      	movs	r3, #4
 80079ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079d2:	e04a      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80079d4:	2308      	movs	r3, #8
 80079d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079da:	e046      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80079dc:	2310      	movs	r3, #16
 80079de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079e2:	e042      	b.n	8007a6a <UART_SetConfig+0x2fe>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <UART_SetConfig+0x2dc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d13a      	bne.n	8007a64 <UART_SetConfig+0x2f8>
 80079ee:	4b18      	ldr	r3, [pc, #96]	; (8007a50 <UART_SetConfig+0x2e4>)
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079fc:	d01a      	beq.n	8007a34 <UART_SetConfig+0x2c8>
 80079fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a02:	d81b      	bhi.n	8007a3c <UART_SetConfig+0x2d0>
 8007a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a08:	d00c      	beq.n	8007a24 <UART_SetConfig+0x2b8>
 8007a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0e:	d815      	bhi.n	8007a3c <UART_SetConfig+0x2d0>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <UART_SetConfig+0x2b0>
 8007a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a18:	d008      	beq.n	8007a2c <UART_SetConfig+0x2c0>
 8007a1a:	e00f      	b.n	8007a3c <UART_SetConfig+0x2d0>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a22:	e022      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007a24:	2302      	movs	r3, #2
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a2a:	e01e      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a32:	e01a      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007a34:	2308      	movs	r3, #8
 8007a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a3a:	e016      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a42:	e012      	b.n	8007a6a <UART_SetConfig+0x2fe>
 8007a44:	cfff69f3 	.word	0xcfff69f3
 8007a48:	40008000 	.word	0x40008000
 8007a4c:	40013800 	.word	0x40013800
 8007a50:	40021000 	.word	0x40021000
 8007a54:	40004400 	.word	0x40004400
 8007a58:	40004800 	.word	0x40004800
 8007a5c:	40004c00 	.word	0x40004c00
 8007a60:	40005000 	.word	0x40005000
 8007a64:	2310      	movs	r3, #16
 8007a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4aae      	ldr	r2, [pc, #696]	; (8007d28 <UART_SetConfig+0x5bc>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	f040 8097 	bne.w	8007ba4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d823      	bhi.n	8007ac6 <UART_SetConfig+0x35a>
 8007a7e:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <UART_SetConfig+0x318>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007aa9 	.word	0x08007aa9
 8007a88:	08007ac7 	.word	0x08007ac7
 8007a8c:	08007ab1 	.word	0x08007ab1
 8007a90:	08007ac7 	.word	0x08007ac7
 8007a94:	08007ab7 	.word	0x08007ab7
 8007a98:	08007ac7 	.word	0x08007ac7
 8007a9c:	08007ac7 	.word	0x08007ac7
 8007aa0:	08007ac7 	.word	0x08007ac7
 8007aa4:	08007abf 	.word	0x08007abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aa8:	f7fd fb9e 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8007aac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007aae:	e010      	b.n	8007ad2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ab0:	4b9e      	ldr	r3, [pc, #632]	; (8007d2c <UART_SetConfig+0x5c0>)
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ab4:	e00d      	b.n	8007ad2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ab6:	f7fd faff 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8007aba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007abc:	e009      	b.n	8007ad2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ac4:	e005      	b.n	8007ad2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ad0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 8130 	beq.w	8007d3a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	4a94      	ldr	r2, [pc, #592]	; (8007d30 <UART_SetConfig+0x5c4>)
 8007ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	4413      	add	r3, r2
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d305      	bcc.n	8007b0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d903      	bls.n	8007b12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b10:	e113      	b.n	8007d3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	2200      	movs	r2, #0
 8007b16:	60bb      	str	r3, [r7, #8]
 8007b18:	60fa      	str	r2, [r7, #12]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	4a84      	ldr	r2, [pc, #528]	; (8007d30 <UART_SetConfig+0x5c4>)
 8007b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2200      	movs	r2, #0
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b34:	f7f8 fb62 	bl	80001fc <__aeabi_uldivmod>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4619      	mov	r1, r3
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	020b      	lsls	r3, r1, #8
 8007b4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b4e:	0202      	lsls	r2, r0, #8
 8007b50:	6979      	ldr	r1, [r7, #20]
 8007b52:	6849      	ldr	r1, [r1, #4]
 8007b54:	0849      	lsrs	r1, r1, #1
 8007b56:	2000      	movs	r0, #0
 8007b58:	460c      	mov	r4, r1
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	eb12 0804 	adds.w	r8, r2, r4
 8007b60:	eb43 0905 	adc.w	r9, r3, r5
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	469a      	mov	sl, r3
 8007b6c:	4693      	mov	fp, r2
 8007b6e:	4652      	mov	r2, sl
 8007b70:	465b      	mov	r3, fp
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	f7f8 fb41 	bl	80001fc <__aeabi_uldivmod>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4613      	mov	r3, r2
 8007b80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b88:	d308      	bcc.n	8007b9c <UART_SetConfig+0x430>
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b90:	d204      	bcs.n	8007b9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6a3a      	ldr	r2, [r7, #32]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	e0ce      	b.n	8007d3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ba2:	e0ca      	b.n	8007d3a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bac:	d166      	bne.n	8007c7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d827      	bhi.n	8007c06 <UART_SetConfig+0x49a>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0x450>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007be1 	.word	0x08007be1
 8007bc0:	08007be9 	.word	0x08007be9
 8007bc4:	08007bf1 	.word	0x08007bf1
 8007bc8:	08007c07 	.word	0x08007c07
 8007bcc:	08007bf7 	.word	0x08007bf7
 8007bd0:	08007c07 	.word	0x08007c07
 8007bd4:	08007c07 	.word	0x08007c07
 8007bd8:	08007c07 	.word	0x08007c07
 8007bdc:	08007bff 	.word	0x08007bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007be0:	f7fd fb02 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8007be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007be6:	e014      	b.n	8007c12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be8:	f7fd fb14 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 8007bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bee:	e010      	b.n	8007c12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bf0:	4b4e      	ldr	r3, [pc, #312]	; (8007d2c <UART_SetConfig+0x5c0>)
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bf4:	e00d      	b.n	8007c12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bf6:	f7fd fa5f 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8007bfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bfc:	e009      	b.n	8007c12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c04:	e005      	b.n	8007c12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8090 	beq.w	8007d3a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	4a44      	ldr	r2, [pc, #272]	; (8007d30 <UART_SetConfig+0x5c4>)
 8007c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c24:	461a      	mov	r2, r3
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c2c:	005a      	lsls	r2, r3, #1
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	441a      	add	r2, r3
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	2b0f      	cmp	r3, #15
 8007c44:	d916      	bls.n	8007c74 <UART_SetConfig+0x508>
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4c:	d212      	bcs.n	8007c74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	f023 030f 	bic.w	r3, r3, #15
 8007c56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	8bfb      	ldrh	r3, [r7, #30]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	8bfa      	ldrh	r2, [r7, #30]
 8007c70:	60da      	str	r2, [r3, #12]
 8007c72:	e062      	b.n	8007d3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c7a:	e05e      	b.n	8007d3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d828      	bhi.n	8007cd6 <UART_SetConfig+0x56a>
 8007c84:	a201      	add	r2, pc, #4	; (adr r2, 8007c8c <UART_SetConfig+0x520>)
 8007c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8a:	bf00      	nop
 8007c8c:	08007cb1 	.word	0x08007cb1
 8007c90:	08007cb9 	.word	0x08007cb9
 8007c94:	08007cc1 	.word	0x08007cc1
 8007c98:	08007cd7 	.word	0x08007cd7
 8007c9c:	08007cc7 	.word	0x08007cc7
 8007ca0:	08007cd7 	.word	0x08007cd7
 8007ca4:	08007cd7 	.word	0x08007cd7
 8007ca8:	08007cd7 	.word	0x08007cd7
 8007cac:	08007ccf 	.word	0x08007ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cb0:	f7fd fa9a 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8007cb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cb6:	e014      	b.n	8007ce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cb8:	f7fd faac 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 8007cbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cbe:	e010      	b.n	8007ce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cc0:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <UART_SetConfig+0x5c0>)
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cc4:	e00d      	b.n	8007ce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cc6:	f7fd f9f7 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8007cca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ccc:	e009      	b.n	8007ce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cd4:	e005      	b.n	8007ce2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d028      	beq.n	8007d3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	4a10      	ldr	r2, [pc, #64]	; (8007d30 <UART_SetConfig+0x5c4>)
 8007cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	085b      	lsrs	r3, r3, #1
 8007d00:	441a      	add	r2, r3
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	2b0f      	cmp	r3, #15
 8007d10:	d910      	bls.n	8007d34 <UART_SetConfig+0x5c8>
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d18:	d20c      	bcs.n	8007d34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60da      	str	r2, [r3, #12]
 8007d24:	e009      	b.n	8007d3a <UART_SetConfig+0x5ce>
 8007d26:	bf00      	nop
 8007d28:	40008000 	.word	0x40008000
 8007d2c:	00f42400 	.word	0x00f42400
 8007d30:	080084d4 	.word	0x080084d4
      }
      else
      {
        ret = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2200      	movs	r2, #0
 8007d54:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007d56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3730      	adds	r7, #48	; 0x30
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01a      	beq.n	8007e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e62:	d10a      	bne.n	8007e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b098      	sub	sp, #96	; 0x60
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eb8:	f7fa fe12 	bl	8002ae0 <HAL_GetTick>
 8007ebc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d12f      	bne.n	8007f2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f88e 	bl	8007ffc <UART_WaitOnFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d022      	beq.n	8007f2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007efa:	653b      	str	r3, [r7, #80]	; 0x50
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f04:	647b      	str	r3, [r7, #68]	; 0x44
 8007f06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e6      	bne.n	8007ee6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e063      	b.n	8007ff4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d149      	bne.n	8007fce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f42:	2200      	movs	r2, #0
 8007f44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f857 	bl	8007ffc <UART_WaitOnFlagUntilTimeout>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d03c      	beq.n	8007fce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	623b      	str	r3, [r7, #32]
   return(result);
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f72:	633b      	str	r3, [r7, #48]	; 0x30
 8007f74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e6      	bne.n	8007f54 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f023 0301 	bic.w	r3, r3, #1
 8007f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa6:	61fa      	str	r2, [r7, #28]
 8007fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	69b9      	ldr	r1, [r7, #24]
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e5      	bne.n	8007f86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e012      	b.n	8007ff4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3758      	adds	r7, #88	; 0x58
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	4613      	mov	r3, r2
 800800a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800800c:	e049      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008014:	d045      	beq.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008016:	f7fa fd63 	bl	8002ae0 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	429a      	cmp	r2, r3
 8008024:	d302      	bcc.n	800802c <UART_WaitOnFlagUntilTimeout+0x30>
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e048      	b.n	80080c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d031      	beq.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b08      	cmp	r3, #8
 800804a:	d110      	bne.n	800806e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2208      	movs	r2, #8
 8008052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f838 	bl	80080ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2208      	movs	r2, #8
 800805e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e029      	b.n	80080c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800807c:	d111      	bne.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 f81e 	bl	80080ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e00f      	b.n	80080c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4013      	ands	r3, r2
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	bf0c      	ite	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	2300      	movne	r3, #0
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d0a6      	beq.n	800800e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b095      	sub	sp, #84	; 0x54
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f0:	643b      	str	r3, [r7, #64]	; 0x40
 80080f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080f8:	e841 2300 	strex	r3, r2, [r1]
 80080fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e6      	bne.n	80080d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	61fb      	str	r3, [r7, #28]
   return(result);
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800811a:	f023 0301 	bic.w	r3, r3, #1
 800811e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800812e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e3      	bne.n	8008104 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008140:	2b01      	cmp	r3, #1
 8008142:	d118      	bne.n	8008176 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	60bb      	str	r3, [r7, #8]
   return(result);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f023 0310 	bic.w	r3, r3, #16
 8008158:	647b      	str	r3, [r7, #68]	; 0x44
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008162:	61bb      	str	r3, [r7, #24]
 8008164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6979      	ldr	r1, [r7, #20]
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	613b      	str	r3, [r7, #16]
   return(result);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e6      	bne.n	8008144 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	675a      	str	r2, [r3, #116]	; 0x74
}
 800818a:	bf00      	nop
 800818c:	3754      	adds	r7, #84	; 0x54
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008196:	b480      	push	{r7}
 8008198:	b085      	sub	sp, #20
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_UARTEx_DisableFifoMode+0x16>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e027      	b.n	80081fc <HAL_UARTEx_DisableFifoMode+0x66>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2224      	movs	r2, #36	; 0x24
 80081b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800821c:	2302      	movs	r3, #2
 800821e:	e02d      	b.n	800827c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2224      	movs	r2, #36	; 0x24
 800822c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0201 	bic.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f84f 	bl	8008300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008298:	2302      	movs	r3, #2
 800829a:	e02d      	b.n	80082f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2224      	movs	r2, #36	; 0x24
 80082a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0201 	bic.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f811 	bl	8008300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800830c:	2b00      	cmp	r3, #0
 800830e:	d108      	bne.n	8008322 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008320:	e031      	b.n	8008386 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008322:	2308      	movs	r3, #8
 8008324:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008326:	2308      	movs	r3, #8
 8008328:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	0e5b      	lsrs	r3, r3, #25
 8008332:	b2db      	uxtb	r3, r3
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	0f5b      	lsrs	r3, r3, #29
 8008342:	b2db      	uxtb	r3, r3
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	7b3a      	ldrb	r2, [r7, #12]
 800834e:	4911      	ldr	r1, [pc, #68]	; (8008394 <UARTEx_SetNbDataToProcess+0x94>)
 8008350:	5c8a      	ldrb	r2, [r1, r2]
 8008352:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008356:	7b3a      	ldrb	r2, [r7, #12]
 8008358:	490f      	ldr	r1, [pc, #60]	; (8008398 <UARTEx_SetNbDataToProcess+0x98>)
 800835a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800835c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008360:	b29a      	uxth	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	7b7a      	ldrb	r2, [r7, #13]
 800836c:	4909      	ldr	r1, [pc, #36]	; (8008394 <UARTEx_SetNbDataToProcess+0x94>)
 800836e:	5c8a      	ldrb	r2, [r1, r2]
 8008370:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008374:	7b7a      	ldrb	r2, [r7, #13]
 8008376:	4908      	ldr	r1, [pc, #32]	; (8008398 <UARTEx_SetNbDataToProcess+0x98>)
 8008378:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800837a:	fb93 f3f2 	sdiv	r3, r3, r2
 800837e:	b29a      	uxth	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008386:	bf00      	nop
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	080084ec 	.word	0x080084ec
 8008398:	080084f4 	.word	0x080084f4

0800839c <__libc_init_array>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	4d0d      	ldr	r5, [pc, #52]	; (80083d4 <__libc_init_array+0x38>)
 80083a0:	4c0d      	ldr	r4, [pc, #52]	; (80083d8 <__libc_init_array+0x3c>)
 80083a2:	1b64      	subs	r4, r4, r5
 80083a4:	10a4      	asrs	r4, r4, #2
 80083a6:	2600      	movs	r6, #0
 80083a8:	42a6      	cmp	r6, r4
 80083aa:	d109      	bne.n	80083c0 <__libc_init_array+0x24>
 80083ac:	4d0b      	ldr	r5, [pc, #44]	; (80083dc <__libc_init_array+0x40>)
 80083ae:	4c0c      	ldr	r4, [pc, #48]	; (80083e0 <__libc_init_array+0x44>)
 80083b0:	f000 f820 	bl	80083f4 <_init>
 80083b4:	1b64      	subs	r4, r4, r5
 80083b6:	10a4      	asrs	r4, r4, #2
 80083b8:	2600      	movs	r6, #0
 80083ba:	42a6      	cmp	r6, r4
 80083bc:	d105      	bne.n	80083ca <__libc_init_array+0x2e>
 80083be:	bd70      	pop	{r4, r5, r6, pc}
 80083c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c4:	4798      	blx	r3
 80083c6:	3601      	adds	r6, #1
 80083c8:	e7ee      	b.n	80083a8 <__libc_init_array+0xc>
 80083ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ce:	4798      	blx	r3
 80083d0:	3601      	adds	r6, #1
 80083d2:	e7f2      	b.n	80083ba <__libc_init_array+0x1e>
 80083d4:	08008504 	.word	0x08008504
 80083d8:	08008504 	.word	0x08008504
 80083dc:	08008504 	.word	0x08008504
 80083e0:	08008508 	.word	0x08008508

080083e4 <memset>:
 80083e4:	4402      	add	r2, r0
 80083e6:	4603      	mov	r3, r0
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d100      	bne.n	80083ee <memset+0xa>
 80083ec:	4770      	bx	lr
 80083ee:	f803 1b01 	strb.w	r1, [r3], #1
 80083f2:	e7f9      	b.n	80083e8 <memset+0x4>

080083f4 <_init>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr

08008400 <_fini>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr
