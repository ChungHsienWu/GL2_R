
GL_REV2_R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095fc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098a8  080098a8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080098a8  080098a8  000198a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098b0  080098b0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098b0  080098b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098b4  080098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080098b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0008bd8c  2000002c  080098e4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2008bdb8  080098e4  0002bdb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ffb  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e5  00000000  00000000  00037057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00039840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0003a978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030b0f  00000000  00000000  0003b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016170  00000000  00000000  0006c4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125a8c  00000000  00000000  0008265f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a80eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000490c  00000000  00000000  001a813c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000002c 	.word	0x2000002c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080097a0 	.word	0x080097a0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000030 	.word	0x20000030
 80001f8:	080097a0 	.word	0x080097a0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f003 f96a 	bl	80037de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 fa6f 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fd27 	bl	8000f60 <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 8000512:	f000 faf7 	bl	8000b04 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000516:	f000 fbe1 	bl	8000cdc <MX_LTDC_Init>
  MX_SPI2_Init();
 800051a:	f000 fc5f 	bl	8000ddc <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fc9b 	bl	8000e58 <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fcd1 	bl	8000ec8 <MX_UART4_Init>
  MX_DMA2D_Init();
 8000526:	f000 faaf 	bl	8000a88 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 800052a:	f000 fdf9 	bl	8001120 <mipi_config>
  HAL_UART_Transmit(&huart4, "start_s", 7, 1000);
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	2207      	movs	r2, #7
 8000534:	49a0      	ldr	r1, [pc, #640]	; (80007b8 <main+0x2b8>)
 8000536:	48a1      	ldr	r0, [pc, #644]	; (80007bc <main+0x2bc>)
 8000538:	f008 faba 	bl	8008ab0 <HAL_UART_Transmit>

  play_mode = 3;
 800053c:	4ba0      	ldr	r3, [pc, #640]	; (80007c0 <main+0x2c0>)
 800053e:	2203      	movs	r2, #3
 8000540:	701a      	strb	r2, [r3, #0]
  play_mode_source = 0;
 8000542:	4ba0      	ldr	r3, [pc, #640]	; (80007c4 <main+0x2c4>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
  mode_init();
 8000548:	f001 fcc4 	bl	8001ed4 <mode_init>
  write_flash_config();
 800054c:	f001 fe58 	bl	8002200 <write_flash_config>
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 8000550:	2300      	movs	r3, #0
 8000552:	637b      	str	r3, [r7, #52]	; 0x34
 8000554:	e00d      	b.n	8000572 <main+0x72>
	  Mode_config[i*2]=0;    //picture_id
 8000556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4a9b      	ldr	r2, [pc, #620]	; (80007c8 <main+0x2c8>)
 800055c:	2100      	movs	r1, #0
 800055e:	54d1      	strb	r1, [r2, r3]
	  Mode_config[i*2+1]=0;  //picture_delay_time
 8000560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	3301      	adds	r3, #1
 8000566:	4a98      	ldr	r2, [pc, #608]	; (80007c8 <main+0x2c8>)
 8000568:	2100      	movs	r1, #0
 800056a:	54d1      	strb	r1, [r2, r3]
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 800056c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800056e:	3301      	adds	r3, #1
 8000570:	637b      	str	r3, [r7, #52]	; 0x34
 8000572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000574:	2b37      	cmp	r3, #55	; 0x37
 8000576:	ddee      	ble.n	8000556 <main+0x56>
  }
  Mode_config[Max_pic_per_mode*2*Max_mode_num-1] = 0; //playing_mode
 8000578:	4b93      	ldr	r3, [pc, #588]	; (80007c8 <main+0x2c8>)
 800057a:	2200      	movs	r2, #0
 800057c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  read_flash_config();
 8000580:	f001 ff0c 	bl	800239c <read_flash_config>
  Playing_mode = Mode_config[100];//playing_mode_store = [Max_pic_per_mode*2*(Max_mode_num-1)]
 8000584:	4b90      	ldr	r3, [pc, #576]	; (80007c8 <main+0x2c8>)
 8000586:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800058a:	4b90      	ldr	r3, [pc, #576]	; (80007cc <main+0x2cc>)
 800058c:	701a      	strb	r2, [r3, #0]
  //fill Current_mode_config from Mode_config by using Playing_mode
  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 800058e:	4b8f      	ldr	r3, [pc, #572]	; (80007cc <main+0x2cc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	4613      	mov	r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4413      	add	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	633b      	str	r3, [r7, #48]	; 0x30
 800059e:	2300      	movs	r3, #0
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005a2:	e00e      	b.n	80005c2 <main+0xc2>
	 Current_mode_config[j]=Mode_config[i];
 80005a4:	4a88      	ldr	r2, [pc, #544]	; (80007c8 <main+0x2c8>)
 80005a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005a8:	4413      	add	r3, r2
 80005aa:	7819      	ldrb	r1, [r3, #0]
 80005ac:	4a88      	ldr	r2, [pc, #544]	; (80007d0 <main+0x2d0>)
 80005ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b0:	4413      	add	r3, r2
 80005b2:	460a      	mov	r2, r1
 80005b4:	701a      	strb	r2, [r3, #0]
	 j++;
 80005b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b8:	3301      	adds	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 80005bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005be:	3301      	adds	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
 80005c2:	4b82      	ldr	r3, [pc, #520]	; (80007cc <main+0x2cc>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	4613      	mov	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4413      	add	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	461a      	mov	r2, r3
 80005d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d4:	4293      	cmp	r3, r2
 80005d6:	dbe5      	blt.n	80005a4 <main+0xa4>
  }
  //frist_change_mode = 1;
  //check how many pics to display
  //warning don't set Current_mode_config = [255 255 1 2 10 2 255 255 255 255]
  g_Mode_picture_count = 0;
 80005d8:	4b7e      	ldr	r3, [pc, #504]	; (80007d4 <main+0x2d4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < 5 ; i++){
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e2:	e00e      	b.n	8000602 <main+0x102>
	 if(Current_mode_config[i*2] != 255)
 80005e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4a79      	ldr	r2, [pc, #484]	; (80007d0 <main+0x2d0>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	2bff      	cmp	r3, #255	; 0xff
 80005ee:	d005      	beq.n	80005fc <main+0xfc>
		 g_Mode_picture_count++;
 80005f0:	4b78      	ldr	r3, [pc, #480]	; (80007d4 <main+0x2d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b76      	ldr	r3, [pc, #472]	; (80007d4 <main+0x2d4>)
 80005fa:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < 5 ; i++){
 80005fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fe:	3301      	adds	r3, #1
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
 8000602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000604:	2b04      	cmp	r3, #4
 8000606:	dded      	ble.n	80005e4 <main+0xe4>
  }
  for(int i = 0; i < g_Mode_picture_count; i++){
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
 800060c:	e011      	b.n	8000632 <main+0x132>
	  read_flash_page_DMA2d(&frame_buf_mode[MAX_IMAGE_SIZE*i], Current_mode_config[i*2]);
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	f64d 62a8 	movw	r2, #57000	; 0xdea8
 8000614:	fb02 f303 	mul.w	r3, r2, r3
 8000618:	4a6f      	ldr	r2, [pc, #444]	; (80007d8 <main+0x2d8>)
 800061a:	441a      	add	r2, r3
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	496b      	ldr	r1, [pc, #428]	; (80007d0 <main+0x2d0>)
 8000622:	5ccb      	ldrb	r3, [r1, r3]
 8000624:	4619      	mov	r1, r3
 8000626:	4610      	mov	r0, r2
 8000628:	f002 f8ac 	bl	8002784 <read_flash_page_DMA2d>
  for(int i = 0; i < g_Mode_picture_count; i++){
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	3301      	adds	r3, #1
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
 8000632:	4b68      	ldr	r3, [pc, #416]	; (80007d4 <main+0x2d4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063a:	4293      	cmp	r3, r2
 800063c:	dbe7      	blt.n	800060e <main+0x10e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2102      	movs	r1, #2
 8000642:	4866      	ldr	r0, [pc, #408]	; (80007dc <main+0x2dc>)
 8000644:	f004 fdc4 	bl	80051d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064e:	4864      	ldr	r0, [pc, #400]	; (80007e0 <main+0x2e0>)
 8000650:	f004 fdbe 	bl	80051d0 <HAL_GPIO_WritePin>

  HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8000654:	2202      	movs	r2, #2
 8000656:	4963      	ldr	r1, [pc, #396]	; (80007e4 <main+0x2e4>)
 8000658:	4863      	ldr	r0, [pc, #396]	; (80007e8 <main+0x2e8>)
 800065a:	f007 fbc9 	bl	8007df0 <HAL_SPI_Receive_IT>
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
 8000662:	e007      	b.n	8000674 <main+0x174>
  {
	  image_arr_rgb888[i] = 0xFF;
 8000664:	4a61      	ldr	r2, [pc, #388]	; (80007ec <main+0x2ec>)
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	4413      	add	r3, r2
 800066a:	22ff      	movs	r2, #255	; 0xff
 800066c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	3301      	adds	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
 8000674:	4b5e      	ldr	r3, [pc, #376]	; (80007f0 <main+0x2f0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a5e      	ldr	r2, [pc, #376]	; (80007f4 <main+0x2f4>)
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	fb03 f202 	mul.w	r2, r3, r2
 8000680:	4613      	mov	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	441a      	add	r2, r3
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8eb      	bhi.n	8000664 <main+0x164>
    while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode_source == 0)
 800068c:	4b4d      	ldr	r3, [pc, #308]	; (80007c4 <main+0x2c4>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f040 80ed 	bne.w	8000870 <main+0x370>
	  {
		  if (play_mode == 0)
 8000696:	4b4a      	ldr	r3, [pc, #296]	; (80007c0 <main+0x2c0>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d109      	bne.n	80006b2 <main+0x1b2>
		  {
			  read_flash_page(&frame_buf_flash, display_image_number);
 800069e:	4b56      	ldr	r3, [pc, #344]	; (80007f8 <main+0x2f8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4619      	mov	r1, r3
 80006a4:	4855      	ldr	r0, [pc, #340]	; (80007fc <main+0x2fc>)
 80006a6:	f001 ffd7 	bl	8002658 <read_flash_page>
			  display_panel(&frame_buf_flash);
 80006aa:	4854      	ldr	r0, [pc, #336]	; (80007fc <main+0x2fc>)
 80006ac:	f001 fb5e 	bl	8001d6c <display_panel>
 80006b0:	e118      	b.n	80008e4 <main+0x3e4>
		  }
		  else if (play_mode == 1)
 80006b2:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <main+0x2c0>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d139      	bne.n	800072e <main+0x22e>
		  {
			  uint8_t should_break = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	77fb      	strb	r3, [r7, #31]
			  while(1)
			  {
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 80006be:	4b50      	ldr	r3, [pc, #320]	; (8000800 <main+0x300>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	e021      	b.n	800070a <main+0x20a>
				  {
					  HAL_Delay(5);
 80006c6:	2005      	movs	r0, #5
 80006c8:	f003 f8fe 	bl	80038c8 <HAL_Delay>
					  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
					  if (play_mode_source != 0 || play_mode != 1 || setting_changed == 1)
 80006cc:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <main+0x2c4>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d107      	bne.n	80006e4 <main+0x1e4>
 80006d4:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <main+0x2c0>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d103      	bne.n	80006e4 <main+0x1e4>
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <main+0x304>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d102      	bne.n	80006ea <main+0x1ea>
					  {
						  should_break = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	77fb      	strb	r3, [r7, #31]
						  break;
 80006e8:	e015      	b.n	8000716 <main+0x216>
					  }
					  read_flash_page(&frame_buf_flash, i);
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	4842      	ldr	r0, [pc, #264]	; (80007fc <main+0x2fc>)
 80006f2:	f001 ffb1 	bl	8002658 <read_flash_page>
					  display_panel(&frame_buf_flash);
 80006f6:	4841      	ldr	r0, [pc, #260]	; (80007fc <main+0x2fc>)
 80006f8:	f001 fb38 	bl	8001d6c <display_panel>
					  display_image_number = i;
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <main+0x2f8>)
 8000702:	701a      	strb	r2, [r3, #0]
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	3301      	adds	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <main+0x308>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	4293      	cmp	r3, r2
 8000714:	ddd7      	ble.n	80006c6 <main+0x1c6>
				  }
				  if (should_break == 0)
 8000716:	7ffb      	ldrb	r3, [r7, #31]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <main+0x224>
				  {
					  display_image_number = 0;
 800071c:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <main+0x2f8>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e7cc      	b.n	80006be <main+0x1be>
				  }
				  else if (should_break == 1)
 8000724:	7ffb      	ldrb	r3, [r7, #31]
 8000726:	2b01      	cmp	r3, #1
 8000728:	f000 80db 	beq.w	80008e2 <main+0x3e2>
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 800072c:	e7c7      	b.n	80006be <main+0x1be>
				  {
				  	  break;
				  }
			  }
		  }
		  else if (play_mode == 3)
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <main+0x2c0>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b03      	cmp	r3, #3
 8000734:	f040 80d6 	bne.w	80008e4 <main+0x3e4>
		  {
			  uint8_t should_break = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	71fb      	strb	r3, [r7, #7]
			  while(1){
			  //initial or change mode
				  if( Mode_changed )
 800073c:	4b33      	ldr	r3, [pc, #204]	; (800080c <main+0x30c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0fb      	beq.n	800073c <main+0x23c>
				  {
					  write_flash_config();
 8000744:	f001 fd5c 	bl	8002200 <write_flash_config>
					  read_flash_config();
 8000748:	f001 fe28 	bl	800239c <read_flash_config>
					  Playing_mode = Mode_config[100];//playing_mode_store = [Max_pic_per_mode*2*(Max_mode_num-1)]
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <main+0x2c8>)
 800074e:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <main+0x2cc>)
 8000754:	701a      	strb	r2, [r3, #0]
					  //fill Current_mode_config from Mode_config by using Playing_mode
					  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <main+0x2cc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	e00e      	b.n	800078a <main+0x28a>
						 Current_mode_config[j]=Mode_config[i];
 800076c:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <main+0x2c8>)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	4413      	add	r3, r2
 8000772:	7819      	ldrb	r1, [r3, #0]
 8000774:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <main+0x2d0>)
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	4413      	add	r3, r2
 800077a:	460a      	mov	r2, r1
 800077c:	701a      	strb	r2, [r3, #0]
						 j++;
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	3301      	adds	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
					  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	3301      	adds	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <main+0x2cc>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	4613      	mov	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	461a      	mov	r2, r3
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	4293      	cmp	r3, r2
 800079e:	dbe5      	blt.n	800076c <main+0x26c>
					  }
					  g_current_pic = 0;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <main+0x310>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
					  Mode_changed = 0;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <main+0x30c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
					  //check how many pics to display
					  //warning don't set Current_mode_config = [255 255 1 2 10 2 255 255 255 255]
					  g_Mode_picture_count = 0;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <main+0x2d4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
					  for(int i = 0 ; i < 5 ; i++){
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e03c      	b.n	8000832 <main+0x332>
 80007b8:	080097b8 	.word	0x080097b8
 80007bc:	20000234 	.word	0x20000234
 80007c0:	2007de80 	.word	0x2007de80
 80007c4:	2007de81 	.word	0x2007de81
 80007c8:	2008bd38 	.word	0x2008bd38
 80007cc:	2008bd33 	.word	0x2008bd33
 80007d0:	2008bda8 	.word	0x2008bda8
 80007d4:	2008bdb3 	.word	0x2008bdb3
 80007d8:	20037d68 	.word	0x20037d68
 80007dc:	48000800 	.word	0x48000800
 80007e0:	48001400 	.word	0x48001400
 80007e4:	2008bd30 	.word	0x2008bd30
 80007e8:	200001d0 	.word	0x200001d0
 80007ec:	2007de84 	.word	0x2007de84
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000004 	.word	0x20000004
 80007f8:	2008bd2c 	.word	0x2008bd2c
 80007fc:	20029ec0 	.word	0x20029ec0
 8000800:	200002c4 	.word	0x200002c4
 8000804:	2008bd32 	.word	0x2008bd32
 8000808:	2000000a 	.word	0x2000000a
 800080c:	2008bd34 	.word	0x2008bd34
 8000810:	2008bdb2 	.word	0x2008bdb2
						 if(Current_mode_config[i*2] != 255)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4a61      	ldr	r2, [pc, #388]	; (80009a0 <main+0x4a0>)
 800081a:	5cd3      	ldrb	r3, [r2, r3]
 800081c:	2bff      	cmp	r3, #255	; 0xff
 800081e:	d005      	beq.n	800082c <main+0x32c>
							 g_Mode_picture_count++;
 8000820:	4b60      	ldr	r3, [pc, #384]	; (80009a4 <main+0x4a4>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b5e      	ldr	r3, [pc, #376]	; (80009a4 <main+0x4a4>)
 800082a:	701a      	strb	r2, [r3, #0]
					  for(int i = 0 ; i < 5 ; i++){
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	2b04      	cmp	r3, #4
 8000836:	dded      	ble.n	8000814 <main+0x314>
					  }
					  for(int i = 0; i < g_Mode_picture_count; i++){
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	e011      	b.n	8000862 <main+0x362>
						  read_flash_page_DMA2d(&frame_buf_mode[MAX_IMAGE_SIZE*i], Current_mode_config[i*2]);
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	f64d 62a8 	movw	r2, #57000	; 0xdea8
 8000844:	fb02 f303 	mul.w	r3, r2, r3
 8000848:	4a57      	ldr	r2, [pc, #348]	; (80009a8 <main+0x4a8>)
 800084a:	441a      	add	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4953      	ldr	r1, [pc, #332]	; (80009a0 <main+0x4a0>)
 8000852:	5ccb      	ldrb	r3, [r1, r3]
 8000854:	4619      	mov	r1, r3
 8000856:	4610      	mov	r0, r2
 8000858:	f001 ff94 	bl	8002784 <read_flash_page_DMA2d>
					  for(int i = 0; i < g_Mode_picture_count; i++){
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3301      	adds	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b50      	ldr	r3, [pc, #320]	; (80009a4 <main+0x4a4>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4293      	cmp	r3, r2
 800086c:	dbe7      	blt.n	800083e <main+0x33e>
				  if( Mode_changed )
 800086e:	e765      	b.n	800073c <main+0x23c>
//					  break;
//				  }
//			  }
		  }
	  }
	  else if (play_mode_source == 1)
 8000870:	4b4e      	ldr	r3, [pc, #312]	; (80009ac <main+0x4ac>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d12c      	bne.n	80008d2 <main+0x3d2>
	  {
		  if (play_mode == 2)
 8000878:	4b4d      	ldr	r3, [pc, #308]	; (80009b0 <main+0x4b0>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d124      	bne.n	80008ca <main+0x3ca>
		  {
			  while(1)
			  {
				  HAL_Delay(5);
 8000880:	2005      	movs	r0, #5
 8000882:	f003 f821 	bl	80038c8 <HAL_Delay>
				  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 8000886:	4b49      	ldr	r3, [pc, #292]	; (80009ac <main+0x4ac>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d12a      	bne.n	80008e4 <main+0x3e4>
 800088e:	4b48      	ldr	r3, [pc, #288]	; (80009b0 <main+0x4b0>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d126      	bne.n	80008e4 <main+0x3e4>
 8000896:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <main+0x4b4>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d022      	beq.n	80008e4 <main+0x3e4>
				  {
					  break;
				  }
				  display_panel(&frame_buf_0);
 800089e:	4846      	ldr	r0, [pc, #280]	; (80009b8 <main+0x4b8>)
 80008a0:	f001 fa64 	bl	8001d6c <display_panel>

				  HAL_Delay(5);
 80008a4:	2005      	movs	r0, #5
 80008a6:	f003 f80f 	bl	80038c8 <HAL_Delay>
				  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <main+0x4ac>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d118      	bne.n	80008e4 <main+0x3e4>
 80008b2:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <main+0x4b0>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d114      	bne.n	80008e4 <main+0x3e4>
 80008ba:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <main+0x4b4>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d010      	beq.n	80008e4 <main+0x3e4>
				  {
					  break;
				  }
				  display_panel(&frame_buf_1);
 80008c2:	483e      	ldr	r0, [pc, #248]	; (80009bc <main+0x4bc>)
 80008c4:	f001 fa52 	bl	8001d6c <display_panel>
				  HAL_Delay(5);
 80008c8:	e7da      	b.n	8000880 <main+0x380>
			  }
		  }
		  else
		  {
			  display_panel(&frame_buf_0);
 80008ca:	483b      	ldr	r0, [pc, #236]	; (80009b8 <main+0x4b8>)
 80008cc:	f001 fa4e 	bl	8001d6c <display_panel>
 80008d0:	e008      	b.n	80008e4 <main+0x3e4>
		  }
	  }
	  else if (play_mode_source == 2)
 80008d2:	4b36      	ldr	r3, [pc, #216]	; (80009ac <main+0x4ac>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d104      	bne.n	80008e4 <main+0x3e4>
	  {
		  display_panel(&frame_buf_1);
 80008da:	4838      	ldr	r0, [pc, #224]	; (80009bc <main+0x4bc>)
 80008dc:	f001 fa46 	bl	8001d6c <display_panel>
 80008e0:	e000      	b.n	80008e4 <main+0x3e4>
				  	  break;
 80008e2:	bf00      	nop
	  }

	  if(setting_changed == 1)
 80008e4:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <main+0x4b4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d155      	bne.n	8000998 <main+0x498>
	  {
		  uint16_t Horizontal_blanking_total = Horizontal_blanking_H*256 + Horizontal_blanking_L;
 80008ec:	4b34      	ldr	r3, [pc, #208]	; (80009c0 <main+0x4c0>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <main+0x4c4>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	4413      	add	r3, r2
 80008fe:	80bb      	strh	r3, [r7, #4]
		  HBP = Horizontal_blanking_total / 3;
 8000900:	88bb      	ldrh	r3, [r7, #4]
 8000902:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <main+0x4c8>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <main+0x4cc>)
 800090e:	801a      	strh	r2, [r3, #0]
		  HFP = Horizontal_blanking_total / 3;
 8000910:	88bb      	ldrh	r3, [r7, #4]
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <main+0x4c8>)
 8000914:	fba2 2303 	umull	r2, r3, r2, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <main+0x4d0>)
 800091e:	801a      	strh	r2, [r3, #0]
		  HSA = Horizontal_blanking_total - (HBP + HFP);
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <main+0x4cc>)
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <main+0x4d0>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	4413      	add	r3, r2
 800092a:	b29b      	uxth	r3, r3
 800092c:	88ba      	ldrh	r2, [r7, #4]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	b29a      	uxth	r2, r3
 8000932:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <main+0x4d4>)
 8000934:	801a      	strh	r2, [r3, #0]

		  uint16_t Vertical_blanking_total = Vertical_blanking_H*256 + Vertical_blanking_L;
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <main+0x4d8>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b26      	ldr	r3, [pc, #152]	; (80009dc <main+0x4dc>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	4413      	add	r3, r2
 8000948:	807b      	strh	r3, [r7, #2]
		  VBP = Vertical_blanking_total / 3;
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <main+0x4c8>)
 800094e:	fba2 2303 	umull	r2, r3, r2, r3
 8000952:	085b      	lsrs	r3, r3, #1
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <main+0x4e0>)
 8000958:	801a      	strh	r2, [r3, #0]
		  VFP = Vertical_blanking_total / 3;
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <main+0x4c8>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	085b      	lsrs	r3, r3, #1
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <main+0x4e4>)
 8000968:	801a      	strh	r2, [r3, #0]
		  VSA = Vertical_blanking_total - (VBP + VFP);
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <main+0x4e0>)
 800096c:	881a      	ldrh	r2, [r3, #0]
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <main+0x4e4>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	b29b      	uxth	r3, r3
 8000976:	887a      	ldrh	r2, [r7, #2]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0x4e8>)
 800097e:	801a      	strh	r2, [r3, #0]

		  my_MX_DSIHOST_DSI_Init();
 8000980:	f002 fa5e 	bl	8002e40 <my_MX_DSIHOST_DSI_Init>
		  my_MX_LTDC_Init();
 8000984:	f002 fb6a 	bl	800305c <my_MX_LTDC_Init>
		  mipi_config();
 8000988:	f000 fbca 	bl	8001120 <mipi_config>
		  HAL_Delay(10);
 800098c:	200a      	movs	r0, #10
 800098e:	f002 ff9b 	bl	80038c8 <HAL_Delay>

		  setting_changed = 0;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <main+0x4b4>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f002 ff95 	bl	80038c8 <HAL_Delay>
	  if (play_mode_source == 0)
 800099e:	e675      	b.n	800068c <main+0x18c>
 80009a0:	2008bda8 	.word	0x2008bda8
 80009a4:	2008bdb3 	.word	0x2008bdb3
 80009a8:	20037d68 	.word	0x20037d68
 80009ac:	2007de81 	.word	0x2007de81
 80009b0:	2007de80 	.word	0x2007de80
 80009b4:	2008bd32 	.word	0x2008bd32
 80009b8:	2000e170 	.word	0x2000e170
 80009bc:	2001c018 	.word	0x2001c018
 80009c0:	2000000c 	.word	0x2000000c
 80009c4:	2000000d 	.word	0x2000000d
 80009c8:	aaaaaaab 	.word	0xaaaaaaab
 80009cc:	20000012 	.word	0x20000012
 80009d0:	20000014 	.word	0x20000014
 80009d4:	20000010 	.word	0x20000010
 80009d8:	2000000e 	.word	0x2000000e
 80009dc:	2000000f 	.word	0x2000000f
 80009e0:	20000018 	.word	0x20000018
 80009e4:	2000001a 	.word	0x2000001a
 80009e8:	20000016 	.word	0x20000016

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b096      	sub	sp, #88	; 0x58
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2244      	movs	r2, #68	; 0x44
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f008 fec8 	bl	8009790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f004 ff96 	bl	8005940 <HAL_PWREx_ControlVoltageScaling>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a1a:	f002 fc91 	bl	8003340 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a26:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a34:	231e      	movs	r3, #30
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f005 f82d 	bl	8005aa8 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000a54:	f002 fc74 	bl	8003340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2105      	movs	r1, #5
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fc33 	bl	80062dc <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a7c:	f002 fc60 	bl	8003340 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3758      	adds	r7, #88	; 0x58
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <MX_DMA2D_Init+0x78>)
 8000a90:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000ad6:	f003 f88b 	bl	8003bf0 <HAL_DMA2D_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000ae0:	f002 fc2e 	bl	8003340 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_DMA2D_Init+0x74>)
 8000ae8:	f003 f9f8 	bl	8003edc <HAL_DMA2D_ConfigLayer>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f002 fc25 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000048 	.word	0x20000048
 8000b00:	4002b000 	.word	0x4002b000

08000b04 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0ae      	sub	sp, #184	; 0xb8
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b16:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b1a:	2224      	movs	r2, #36	; 0x24
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f008 fe36 	bl	8009790 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	226c      	movs	r2, #108	; 0x6c
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f008 fe27 	bl	8009790 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000b42:	4b64      	ldr	r3, [pc, #400]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b44:	4a64      	ldr	r2, [pc, #400]	; (8000cd8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8000b46:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b48:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8000b4e:	4b61      	ldr	r3, [pc, #388]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b50:	2202      	movs	r2, #2
 8000b52:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000b54:	4b5f      	ldr	r3, [pc, #380]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8000b5a:	2332      	movs	r3, #50	; 0x32
 8000b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b70:	4619      	mov	r1, r3
 8000b72:	4858      	ldr	r0, [pc, #352]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b74:	f003 fb3e 	bl	80041f4 <HAL_DSI_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000b7e:	f002 fbdf 	bl	8003340 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000bb8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4845      	ldr	r0, [pc, #276]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bc0:	f003 ff8b 	bl	8004ada <HAL_DSI_ConfigHostTimeouts>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000bca:	f002 fbb9 	bl	8003340 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000bce:	2313      	movs	r3, #19
 8000bd0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000bd6:	2309      	movs	r3, #9
 8000bd8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000bea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4838      	ldr	r0, [pc, #224]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bf2:	f003 ff08 	bl	8004a06 <HAL_DSI_ConfigPhyTimer>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000bfc:	f002 fba0 	bl	8003340 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c00:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c04:	4833      	ldr	r0, [pc, #204]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000c06:	f004 f924 	bl	8004e52 <HAL_DSI_SetLowPowerRXFilter>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000c10:	f002 fb96 	bl	8003340 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	482f      	ldr	r0, [pc, #188]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000c18:	f003 fc08 	bl	800442c <HAL_DSI_ConfigErrorMonitor>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000c22:	f002 fb8d 	bl	8003340 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000c32:	2301      	movs	r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8000c36:	2378      	movs	r3, #120	; 0x78
 8000c38:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 184;
 8000c4e:	23b8      	movs	r3, #184	; 0xb8
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 180;
 8000c52:	23b4      	movs	r3, #180	; 0xb4
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 664;
 8000c56:	f44f 7326 	mov.w	r3, #664	; 0x298
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 9;
 8000c5c:	2309      	movs	r3, #9
 8000c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000c60:	2308      	movs	r3, #8
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000c64:	2308      	movs	r3, #8
 8000c66:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 156;
 8000c68:	239c      	movs	r3, #156	; 0x9c
 8000c6a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000c72:	231c      	movs	r3, #28
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000c76:	2350      	movs	r3, #80	; 0x50
 8000c78:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7e:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c96:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000ca8:	f003 fca5 	bl	80045f6 <HAL_DSI_ConfigVideoMode>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000cb2:	f002 fb45 	bl	8003340 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000cba:	f003 fc74 	bl	80045a6 <HAL_DSI_SetGenericVCID>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000cc4:	f002 fb3c 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
  LCD_PowerOn();
 8000cc8:	f000 fc36 	bl	8001538 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	37b8      	adds	r7, #184	; 0xb8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000a8 	.word	0x200000a8
 8000cd8:	40016c00 	.word	0x40016c00

08000cdc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2234      	movs	r2, #52	; 0x34
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f008 fd51 	bl	8009790 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cee:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000cf0:	4a38      	ldr	r2, [pc, #224]	; (8000dd4 <MX_LTDC_Init+0xf8>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000cf4:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000cf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cfa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000cfc:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000cfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d02:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d04:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 183;
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d12:	22b7      	movs	r2, #183	; 0xb7
 8000d14:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d18:	2208      	movs	r2, #8
 8000d1a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 363;
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d1e:	f240 126b 	movw	r2, #363	; 0x16b
 8000d22:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 16;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d26:	2210      	movs	r2, #16
 8000d28:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 483;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d2c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 172;
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d34:	22ac      	movs	r2, #172	; 0xac
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 663;
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d3a:	f240 2297 	movw	r2, #663	; 0x297
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 180;
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d42:	22b4      	movs	r2, #180	; 0xb4
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d48:	22ff      	movs	r2, #255	; 0xff
 8000d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d58:	22ff      	movs	r2, #255	; 0xff
 8000d5a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000d60:	f004 fa66 	bl	8005230 <HAL_LTDC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000d6a:	f002 fae9 	bl	8003340 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 120;
 8000d72:	2378      	movs	r3, #120	; 0x78
 8000d74:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 156;
 8000d7a:	239c      	movs	r3, #156	; 0x9c
 8000d7c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d90:	2305      	movs	r3, #5
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_LTDC_Init+0xfc>)
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 120;
 8000d98:	2378      	movs	r3, #120	; 0x78
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 156;
 8000d9c:	239c      	movs	r3, #156	; 0x9c
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000da0:	23ff      	movs	r3, #255	; 0xff
 8000da2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000da6:	23ff      	movs	r3, #255	; 0xff
 8000da8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000dac:	23ff      	movs	r3, #255	; 0xff
 8000dae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_LTDC_Init+0xf4>)
 8000dba:	f004 fbcb 	bl	8005554 <HAL_LTDC_ConfigLayer>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000dc4:	f002 fabc 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3738      	adds	r7, #56	; 0x38
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000c4 	.word	0x200000c4
 8000dd4:	40016800 	.word	0x40016800
 8000dd8:	2007de84 	.word	0x2007de84

08000ddc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_SPI2_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000de8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000df6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dfa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e12:	2208      	movs	r2, #8
 8000e14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e2a:	2207      	movs	r2, #7
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e36:	2208      	movs	r2, #8
 8000e38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_SPI2_Init+0x74>)
 8000e3c:	f006 fa84 	bl	8007348 <HAL_SPI_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f002 fa7b 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000016c 	.word	0x2000016c
 8000e54:	40003800 	.word	0x40003800

08000e58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e5e:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <MX_SPI3_Init+0x6c>)
 8000e60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e70:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e74:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_SPI3_Init+0x68>)
 8000eae:	f006 fa4b 	bl	8007348 <HAL_SPI_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000eb8:	f002 fa42 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001d0 	.word	0x200001d0
 8000ec4:	40003c00 	.word	0x40003c00

08000ec8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <MX_UART4_Init+0x90>)
 8000ece:	4a23      	ldr	r2, [pc, #140]	; (8000f5c <MX_UART4_Init+0x94>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <MX_UART4_Init+0x90>)
 8000ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_UART4_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_UART4_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_UART4_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_UART4_Init+0x90>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_UART4_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_UART4_Init+0x90>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_UART4_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_UART4_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_UART4_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <MX_UART4_Init+0x90>)
 8000f12:	f007 fd7d 	bl	8008a10 <HAL_UART_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f1c:	f002 fa10 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f20:	2100      	movs	r1, #0
 8000f22:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_UART4_Init+0x90>)
 8000f24:	f008 fb46 	bl	80095b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f2e:	f002 fa07 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <MX_UART4_Init+0x90>)
 8000f36:	f008 fb7b 	bl	8009630 <HAL_UARTEx_SetRxFifoThreshold>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f40:	f002 f9fe 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_UART4_Init+0x90>)
 8000f46:	f008 fafc 	bl	8009542 <HAL_UARTEx_DisableFifoMode>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f50:	f002 f9f6 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000234 	.word	0x20000234
 8000f5c:	40004c00 	.word	0x40004c00

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f76:	4b65      	ldr	r3, [pc, #404]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a64      	ldr	r2, [pc, #400]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b62      	ldr	r3, [pc, #392]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000f8e:	f004 fd7b 	bl	8005a88 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b5e      	ldr	r3, [pc, #376]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a5d      	ldr	r2, [pc, #372]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b5b      	ldr	r3, [pc, #364]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b58      	ldr	r3, [pc, #352]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a57      	ldr	r2, [pc, #348]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b55      	ldr	r3, [pc, #340]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc2:	4b52      	ldr	r3, [pc, #328]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a51      	ldr	r2, [pc, #324]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b4f      	ldr	r3, [pc, #316]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b4c      	ldr	r3, [pc, #304]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a4b      	ldr	r2, [pc, #300]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b49      	ldr	r3, [pc, #292]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff2:	4b46      	ldr	r3, [pc, #280]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a45      	ldr	r2, [pc, #276]	; (800110c <MX_GPIO_Init+0x1ac>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <MX_GPIO_Init+0x1ac>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100a:	4b40      	ldr	r3, [pc, #256]	; (800110c <MX_GPIO_Init+0x1ac>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a3f      	ldr	r2, [pc, #252]	; (800110c <MX_GPIO_Init+0x1ac>)
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <MX_GPIO_Init+0x1ac>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001028:	4839      	ldr	r0, [pc, #228]	; (8001110 <MX_GPIO_Init+0x1b0>)
 800102a:	f004 f8d1 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESXP_Pin|flash_cs_Pin, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001034:	4836      	ldr	r0, [pc, #216]	; (8001110 <MX_GPIO_Init+0x1b0>)
 8001036:	f004 f8cb 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	4835      	ldr	r0, [pc, #212]	; (8001114 <MX_GPIO_Init+0x1b4>)
 8001040:	f004 f8c6 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104a:	4833      	ldr	r0, [pc, #204]	; (8001118 <MX_GPIO_Init+0x1b8>)
 800104c:	f004 f8c0 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin RESXP_Pin flash_cs_Pin */
  GPIO_InitStruct.Pin = led_Pin|RESXP_Pin|flash_cs_Pin;
 8001050:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	4829      	ldr	r0, [pc, #164]	; (8001110 <MX_GPIO_Init+0x1b0>)
 800106a:	f003 ff1f 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pin : sync_Pin */
  GPIO_InitStruct.Pin = sync_Pin;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001074:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800107a:	2302      	movs	r3, #2
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(sync_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f003 ff10 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pin : pic_sw_Pin */
  GPIO_InitStruct.Pin = pic_sw_Pin;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001092:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001098:	2302      	movs	r3, #2
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(pic_sw_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	481e      	ldr	r0, [pc, #120]	; (800111c <MX_GPIO_Init+0x1bc>)
 80010a4:	f003 ff02 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pin : bat_en_Pin */
  GPIO_InitStruct.Pin = bat_en_Pin;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(bat_en_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <MX_GPIO_Init+0x1b4>)
 80010c0:	f003 fef4 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pin : en_Pin */
  GPIO_InitStruct.Pin = en_Pin;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(en_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	480e      	ldr	r0, [pc, #56]	; (8001118 <MX_GPIO_Init+0x1b8>)
 80010de:	f003 fee5 	bl	8004eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2017      	movs	r0, #23
 80010e8:	f002 fced 	bl	8003ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ec:	2017      	movs	r0, #23
 80010ee:	f002 fd06 	bl	8003afe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2103      	movs	r1, #3
 80010f6:	2028      	movs	r0, #40	; 0x28
 80010f8:	f002 fce5 	bl	8003ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fc:	2028      	movs	r0, #40	; 0x28
 80010fe:	f002 fcfe 	bl	8003afe <HAL_NVIC_EnableIRQ>

}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	48000400 	.word	0x48000400
 8001114:	48000800 	.word	0x48000800
 8001118:	48001400 	.word	0x48001400
 800111c:	48000c00 	.word	0x48000c00

08001120 <mipi_config>:

/* USER CODE BEGIN 4 */

void mipi_config()
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b0af      	sub	sp, #188	; 0xbc
 8001124:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8001126:	48c4      	ldr	r0, [pc, #784]	; (8001438 <mipi_config+0x318>)
 8001128:	f003 fd9d 	bl	8004c66 <HAL_DSI_Start>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <mipi_config+0x16>
	{
		Error_Handler();
 8001132:	f002 f905 	bl	8003340 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8001136:	23c3      	movs	r3, #195	; 0xc3
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	23f0      	movs	r3, #240	; 0xf0
 800113c:	2215      	movs	r2, #21
 800113e:	2100      	movs	r1, #0
 8001140:	48bd      	ldr	r0, [pc, #756]	; (8001438 <mipi_config+0x318>)
 8001142:	f003 fdcc 	bl	8004cde <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8001146:	2396      	movs	r3, #150	; 0x96
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	23f0      	movs	r3, #240	; 0xf0
 800114c:	2215      	movs	r2, #21
 800114e:	2100      	movs	r1, #0
 8001150:	48b9      	ldr	r0, [pc, #740]	; (8001438 <mipi_config+0x318>)
 8001152:	f003 fdc4 	bl	8004cde <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = {0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33};
 8001156:	4ab9      	ldr	r2, [pc, #740]	; (800143c <mipi_config+0x31c>)
 8001158:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800115c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001160:	6018      	str	r0, [r3, #0]
 8001162:	3304      	adds	r3, #4
 8001164:	8019      	strh	r1, [r3, #0]
 8001166:	3302      	adds	r3, #2
 8001168:	0c0a      	lsrs	r2, r1, #16
 800116a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 800116c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	23e7      	movs	r3, #231	; 0xe7
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2308      	movs	r3, #8
 8001178:	2239      	movs	r2, #57	; 0x39
 800117a:	2100      	movs	r1, #0
 800117c:	48ae      	ldr	r0, [pc, #696]	; (8001438 <mipi_config+0x318>)
 800117e:	f003 fdd0 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = {0xC0, 0x68, 0xE0};
 8001182:	4aaf      	ldr	r2, [pc, #700]	; (8001440 <mipi_config+0x320>)
 8001184:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	4611      	mov	r1, r2
 800118c:	8019      	strh	r1, [r3, #0]
 800118e:	3302      	adds	r3, #2
 8001190:	0c12      	lsrs	r2, r2, #16
 8001192:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8001194:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	23a4      	movs	r3, #164	; 0xa4
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2304      	movs	r3, #4
 80011a0:	2239      	movs	r2, #57	; 0x39
 80011a2:	2100      	movs	r1, #0
 80011a4:	48a4      	ldr	r0, [pc, #656]	; (8001438 <mipi_config+0x318>)
 80011a6:	f003 fdbc 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = {0x42, 0x05, 0x24, 0x03};
 80011aa:	4ba6      	ldr	r3, [pc, #664]	; (8001444 <mipi_config+0x324>)
 80011ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 80011b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	23c3      	movs	r3, #195	; 0xc3
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2305      	movs	r3, #5
 80011bc:	2239      	movs	r2, #57	; 0x39
 80011be:	2100      	movs	r1, #0
 80011c0:	489d      	ldr	r0, [pc, #628]	; (8001438 <mipi_config+0x318>)
 80011c2:	f003 fdae 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = {0x42, 0x05, 0x24, 0x03};
 80011c6:	4b9f      	ldr	r3, [pc, #636]	; (8001444 <mipi_config+0x324>)
 80011c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 80011cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	23c4      	movs	r3, #196	; 0xc4
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2305      	movs	r3, #5
 80011d8:	2239      	movs	r2, #57	; 0x39
 80011da:	2100      	movs	r1, #0
 80011dc:	4896      	ldr	r0, [pc, #600]	; (8001438 <mipi_config+0x318>)
 80011de:	f003 fda0 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 80011e2:	4a99      	ldr	r2, [pc, #612]	; (8001448 <mipi_config+0x328>)
 80011e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 80011ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	23e5      	movs	r3, #229	; 0xe5
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	230d      	movs	r3, #13
 80011fa:	2239      	movs	r2, #57	; 0x39
 80011fc:	2100      	movs	r1, #0
 80011fe:	488e      	ldr	r0, [pc, #568]	; (8001438 <mipi_config+0x318>)
 8001200:	f003 fd8f 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 8001204:	4a90      	ldr	r2, [pc, #576]	; (8001448 <mipi_config+0x328>)
 8001206:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001210:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	23e6      	movs	r3, #230	; 0xe6
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	230d      	movs	r3, #13
 800121c:	2239      	movs	r2, #57	; 0x39
 800121e:	2100      	movs	r1, #0
 8001220:	4885      	ldr	r0, [pc, #532]	; (8001438 <mipi_config+0x318>)
 8001222:	f003 fd7e 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = {0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22};
 8001226:	4a89      	ldr	r2, [pc, #548]	; (800144c <mipi_config+0x32c>)
 8001228:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800122c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001230:	6018      	str	r0, [r3, #0]
 8001232:	3304      	adds	r3, #4
 8001234:	8019      	strh	r1, [r3, #0]
 8001236:	3302      	adds	r3, #2
 8001238:	0c0a      	lsrs	r2, r1, #16
 800123a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 800123c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	23ec      	movs	r3, #236	; 0xec
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2308      	movs	r3, #8
 8001248:	2239      	movs	r2, #57	; 0x39
 800124a:	2100      	movs	r1, #0
 800124c:	487a      	ldr	r0, [pc, #488]	; (8001438 <mipi_config+0x318>)
 800124e:	f003 fd68 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = {0x88, 0x05, 0x0F, 0x18};
 8001252:	4b7f      	ldr	r3, [pc, #508]	; (8001450 <mipi_config+0x330>)
 8001254:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 8001256:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	23c1      	movs	r3, #193	; 0xc1
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2305      	movs	r3, #5
 8001262:	2239      	movs	r2, #57	; 0x39
 8001264:	2100      	movs	r1, #0
 8001266:	4874      	ldr	r0, [pc, #464]	; (8001438 <mipi_config+0x318>)
 8001268:	f003 fd5b 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = {0x88, 0x05, 0x0F, 0x18};
 800126c:	4b78      	ldr	r3, [pc, #480]	; (8001450 <mipi_config+0x330>)
 800126e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 8001270:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	23c2      	movs	r3, #194	; 0xc2
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2305      	movs	r3, #5
 800127c:	2239      	movs	r2, #57	; 0x39
 800127e:	2100      	movs	r1, #0
 8001280:	486d      	ldr	r0, [pc, #436]	; (8001438 <mipi_config+0x318>)
 8001282:	f003 fd4e 	bl	8004d22 <HAL_DSI_LongWrite>
	//HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x08);
 8001286:	2308      	movs	r3, #8
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2336      	movs	r3, #54	; 0x36
 800128c:	2215      	movs	r2, #21
 800128e:	2100      	movs	r1, #0
 8001290:	4869      	ldr	r0, [pc, #420]	; (8001438 <mipi_config+0x318>)
 8001292:	f003 fd24 	bl	8004cde <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 8001296:	2307      	movs	r3, #7
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	233a      	movs	r3, #58	; 0x3a
 800129c:	2215      	movs	r2, #21
 800129e:	2100      	movs	r1, #0
 80012a0:	4865      	ldr	r0, [pc, #404]	; (8001438 <mipi_config+0x318>)
 80012a2:	f003 fd1c 	bl	8004cde <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 80012a6:	23be      	movs	r3, #190	; 0xbe
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	23c5      	movs	r3, #197	; 0xc5
 80012ac:	2215      	movs	r2, #21
 80012ae:	2100      	movs	r1, #0
 80012b0:	4861      	ldr	r0, [pc, #388]	; (8001438 <mipi_config+0x318>)
 80012b2:	f003 fd14 	bl	8004cde <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = {0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55, 0x3D, 0x19, 0x18, 0x24, 0x27};
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <mipi_config+0x334>)
 80012b8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80012bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012be:	c407      	stmia	r4!, {r0, r1, r2}
 80012c0:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 80012c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	23e0      	movs	r3, #224	; 0xe0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	230f      	movs	r3, #15
 80012ce:	2239      	movs	r2, #57	; 0x39
 80012d0:	2100      	movs	r1, #0
 80012d2:	4859      	ldr	r0, [pc, #356]	; (8001438 <mipi_config+0x318>)
 80012d4:	f003 fd25 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = {0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56, 0x3E, 0x1A, 0x18, 0x24, 0x28};
 80012d8:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <mipi_config+0x338>)
 80012da:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80012de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e0:	c407      	stmia	r4!, {r0, r1, r2}
 80012e2:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 80012e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	23e1      	movs	r3, #225	; 0xe1
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	230f      	movs	r3, #15
 80012f0:	2239      	movs	r2, #57	; 0x39
 80012f2:	2100      	movs	r1, #0
 80012f4:	4850      	ldr	r0, [pc, #320]	; (8001438 <mipi_config+0x318>)
 80012f6:	f003 fd14 	bl	8004d22 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 80012fa:	2310      	movs	r3, #16
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	23b2      	movs	r3, #178	; 0xb2
 8001300:	2215      	movs	r2, #21
 8001302:	2100      	movs	r1, #0
 8001304:	484c      	ldr	r0, [pc, #304]	; (8001438 <mipi_config+0x318>)
 8001306:	f003 fcea 	bl	8004cde <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 800130a:	2301      	movs	r3, #1
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	23b3      	movs	r3, #179	; 0xb3
 8001310:	2215      	movs	r2, #21
 8001312:	2100      	movs	r1, #0
 8001314:	4848      	ldr	r0, [pc, #288]	; (8001438 <mipi_config+0x318>)
 8001316:	f003 fce2 	bl	8004cde <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 800131a:	2301      	movs	r3, #1
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	23b4      	movs	r3, #180	; 0xb4
 8001320:	2215      	movs	r2, #21
 8001322:	2100      	movs	r1, #0
 8001324:	4844      	ldr	r0, [pc, #272]	; (8001438 <mipi_config+0x318>)
 8001326:	f003 fcda 	bl	8004cde <HAL_DSI_ShortWrite>
	//uint8_t cmd20[2] = {0x27, 0x09};
	uint8_t cmd20[2] = {0x4D, 0x0E};
 800132a:	f640 634d 	movw	r3, #3661	; 0xe4d
 800132e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 8001332:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	23b6      	movs	r3, #182	; 0xb6
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2303      	movs	r3, #3
 800133e:	2239      	movs	r2, #57	; 0x39
 8001340:	2100      	movs	r1, #0
 8001342:	483d      	ldr	r0, [pc, #244]	; (8001438 <mipi_config+0x318>)
 8001344:	f003 fced 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = {0x00, 0x54, 0x00, 0x54};
 8001348:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 800134c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 800134e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	23b5      	movs	r3, #181	; 0xb5
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2305      	movs	r3, #5
 800135a:	2239      	movs	r2, #57	; 0x39
 800135c:	2100      	movs	r1, #0
 800135e:	4836      	ldr	r0, [pc, #216]	; (8001438 <mipi_config+0x318>)
 8001360:	f003 fcdf 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001364:	4a3d      	ldr	r2, [pc, #244]	; (800145c <mipi_config+0x33c>)
 8001366:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800136a:	ca07      	ldmia	r2, {r0, r1, r2}
 800136c:	c303      	stmia	r3!, {r0, r1}
 800136e:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 8001370:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	23a5      	movs	r3, #165	; 0xa5
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	230a      	movs	r3, #10
 800137c:	2239      	movs	r2, #57	; 0x39
 800137e:	2100      	movs	r1, #0
 8001380:	482d      	ldr	r0, [pc, #180]	; (8001438 <mipi_config+0x318>)
 8001382:	f003 fcce 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001386:	4a35      	ldr	r2, [pc, #212]	; (800145c <mipi_config+0x33c>)
 8001388:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800138c:	ca07      	ldmia	r2, {r0, r1, r2}
 800138e:	c303      	stmia	r3!, {r0, r1}
 8001390:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 8001392:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	23a6      	movs	r3, #166	; 0xa6
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	230a      	movs	r3, #10
 800139e:	2239      	movs	r2, #57	; 0x39
 80013a0:	2100      	movs	r1, #0
 80013a2:	4825      	ldr	r0, [pc, #148]	; (8001438 <mipi_config+0x318>)
 80013a4:	f003 fcbd 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = {0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00};
 80013a8:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <mipi_config+0x340>)
 80013aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b2:	6018      	str	r0, [r3, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	8019      	strh	r1, [r3, #0]
 80013b8:	3302      	adds	r3, #2
 80013ba:	0c0a      	lsrs	r2, r1, #16
 80013bc:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 80013be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	23ba      	movs	r3, #186	; 0xba
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2308      	movs	r3, #8
 80013ca:	2239      	movs	r2, #57	; 0x39
 80013cc:	2100      	movs	r1, #0
 80013ce:	481a      	ldr	r0, [pc, #104]	; (8001438 <mipi_config+0x318>)
 80013d0:	f003 fca7 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 80013d4:	4a23      	ldr	r2, [pc, #140]	; (8001464 <mipi_config+0x344>)
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013de:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	23bb      	movs	r3, #187	; 0xbb
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2309      	movs	r3, #9
 80013ee:	2239      	movs	r2, #57	; 0x39
 80013f0:	2100      	movs	r1, #0
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <mipi_config+0x318>)
 80013f4:	f003 fc95 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <mipi_config+0x344>)
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001402:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	23bc      	movs	r3, #188	; 0xbc
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2309      	movs	r3, #9
 8001412:	2239      	movs	r2, #57	; 0x39
 8001414:	2100      	movs	r1, #0
 8001416:	4808      	ldr	r0, [pc, #32]	; (8001438 <mipi_config+0x318>)
 8001418:	f003 fc83 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = {0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF, 0xFF, 0xF9};
 800141c:	4a12      	ldr	r2, [pc, #72]	; (8001468 <mipi_config+0x348>)
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	ca07      	ldmia	r2, {r0, r1, r2}
 8001424:	c303      	stmia	r3!, {r0, r1}
 8001426:	801a      	strh	r2, [r3, #0]
 8001428:	3302      	adds	r3, #2
 800142a:	0c12      	lsrs	r2, r2, #16
 800142c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	e01a      	b.n	800146c <mipi_config+0x34c>
 8001436:	bf00      	nop
 8001438:	200000a8 	.word	0x200000a8
 800143c:	080097c0 	.word	0x080097c0
 8001440:	080097c8 	.word	0x080097c8
 8001444:	03240542 	.word	0x03240542
 8001448:	080097cc 	.word	0x080097cc
 800144c:	080097d8 	.word	0x080097d8
 8001450:	180f0588 	.word	0x180f0588
 8001454:	080097e0 	.word	0x080097e0
 8001458:	080097f0 	.word	0x080097f0
 800145c:	08009800 	.word	0x08009800
 8001460:	0800980c 	.word	0x0800980c
 8001464:	08009814 	.word	0x08009814
 8001468:	0800981c 	.word	0x0800981c
 800146c:	23bd      	movs	r3, #189	; 0xbd
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	230c      	movs	r3, #12
 8001472:	2239      	movs	r2, #57	; 0x39
 8001474:	2100      	movs	r1, #0
 8001476:	482d      	ldr	r0, [pc, #180]	; (800152c <mipi_config+0x40c>)
 8001478:	f003 fc53 	bl	8004d22 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 800147c:	23c3      	movs	r3, #195	; 0xc3
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	23ed      	movs	r3, #237	; 0xed
 8001482:	2215      	movs	r2, #21
 8001484:	2100      	movs	r1, #0
 8001486:	4829      	ldr	r0, [pc, #164]	; (800152c <mipi_config+0x40c>)
 8001488:	f003 fc29 	bl	8004cde <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = {0x40, 0x0F, 0x00};
 800148c:	4a28      	ldr	r2, [pc, #160]	; (8001530 <mipi_config+0x410>)
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	4611      	mov	r1, r2
 8001496:	8019      	strh	r1, [r3, #0]
 8001498:	3302      	adds	r3, #2
 800149a:	0c12      	lsrs	r2, r2, #16
 800149c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	23e4      	movs	r3, #228	; 0xe4
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2304      	movs	r3, #4
 80014aa:	2239      	movs	r2, #57	; 0x39
 80014ac:	2100      	movs	r1, #0
 80014ae:	481f      	ldr	r0, [pc, #124]	; (800152c <mipi_config+0x40c>)
 80014b0:	f003 fc37 	bl	8004d22 <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = {0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25};
 80014b4:	4a1f      	ldr	r2, [pc, #124]	; (8001534 <mipi_config+0x414>)
 80014b6:	463b      	mov	r3, r7
 80014b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ba:	c303      	stmia	r3!, {r0, r1}
 80014bc:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 80014be:	463b      	mov	r3, r7
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	23cc      	movs	r3, #204	; 0xcc
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	230a      	movs	r3, #10
 80014c8:	2239      	movs	r2, #57	; 0x39
 80014ca:	2100      	movs	r1, #0
 80014cc:	4817      	ldr	r0, [pc, #92]	; (800152c <mipi_config+0x40c>)
 80014ce:	f003 fc28 	bl	8004d22 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80014d2:	2300      	movs	r3, #0
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2335      	movs	r3, #53	; 0x35
 80014d8:	2215      	movs	r2, #21
 80014da:	2100      	movs	r1, #0
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <mipi_config+0x40c>)
 80014de:	f003 fbfe 	bl	8004cde <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f002 f9f0 	bl	80038c8 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80014e8:	2300      	movs	r3, #0
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2311      	movs	r3, #17
 80014ee:	2205      	movs	r2, #5
 80014f0:	2100      	movs	r1, #0
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <mipi_config+0x40c>)
 80014f4:	f003 fbf3 	bl	8004cde <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80014f8:	2078      	movs	r0, #120	; 0x78
 80014fa:	f002 f9e5 	bl	80038c8 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 80014fe:	2300      	movs	r3, #0
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2329      	movs	r3, #41	; 0x29
 8001504:	2205      	movs	r2, #5
 8001506:	2100      	movs	r1, #0
 8001508:	4808      	ldr	r0, [pc, #32]	; (800152c <mipi_config+0x40c>)
 800150a:	f003 fbe8 	bl	8004cde <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800150e:	2078      	movs	r0, #120	; 0x78
 8001510:	f002 f9da 	bl	80038c8 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001514:	2300      	movs	r3, #0
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2335      	movs	r3, #53	; 0x35
 800151a:	2215      	movs	r2, #21
 800151c:	2100      	movs	r1, #0
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <mipi_config+0x40c>)
 8001520:	f003 fbdd 	bl	8004cde <HAL_DSI_ShortWrite>
}
 8001524:	bf00      	nop
 8001526:	37b4      	adds	r7, #180	; 0xb4
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	200000a8 	.word	0x200000a8
 8001530:	08009828 	.word	0x08009828
 8001534:	0800982c 	.word	0x0800982c

08001538 <LCD_PowerOn>:

static void LCD_PowerOn(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <LCD_PowerOn+0x28>)
 8001542:	f003 fe45 	bl	80051d0 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 8001546:	2014      	movs	r0, #20
 8001548:	f002 f9be 	bl	80038c8 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <LCD_PowerOn+0x28>)
 8001552:	f003 fe3d 	bl	80051d0 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 8001556:	2078      	movs	r0, #120	; 0x78
 8001558:	f002 f9b6 	bl	80038c8 <HAL_Delay>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	48000400 	.word	0x48000400

08001564 <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = {0};
 800156e:	2300      	movs	r3, #0
 8001570:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = {0};
 8001572:	2300      	movs	r3, #0
 8001574:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 1000);
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157e:	2201      	movs	r2, #1
 8001580:	4878      	ldr	r0, [pc, #480]	; (8001764 <Write_Registers_data+0x200>)
 8001582:	f006 f8f2 	bl	800776a <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)data, 1, 1000);
 8001586:	f107 0108 	add.w	r1, r7, #8
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	2201      	movs	r2, #1
 8001590:	4874      	ldr	r0, [pc, #464]	; (8001764 <Write_Registers_data+0x200>)
 8001592:	f006 f8ea 	bl	800776a <HAL_SPI_Receive>
	if (do_flag == 1)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b01      	cmp	r3, #1
 800159a:	f040 80da 	bne.w	8001752 <Write_Registers_data+0x1ee>
	{
		switch (Register_Address[0])
 800159e:	7b3b      	ldrb	r3, [r7, #12]
 80015a0:	2b21      	cmp	r3, #33	; 0x21
 80015a2:	f200 80db 	bhi.w	800175c <Write_Registers_data+0x1f8>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <Write_Registers_data+0x48>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	08001635 	.word	0x08001635
 80015b0:	08001645 	.word	0x08001645
 80015b4:	08001655 	.word	0x08001655
 80015b8:	08001663 	.word	0x08001663
 80015bc:	08001671 	.word	0x08001671
 80015c0:	0800167f 	.word	0x0800167f
 80015c4:	0800168d 	.word	0x0800168d
 80015c8:	08001695 	.word	0x08001695
 80015cc:	08001757 	.word	0x08001757
 80015d0:	08001757 	.word	0x08001757
 80015d4:	08001757 	.word	0x08001757
 80015d8:	0800169d 	.word	0x0800169d
 80015dc:	080016a5 	.word	0x080016a5
 80015e0:	080016ad 	.word	0x080016ad
 80015e4:	080016b5 	.word	0x080016b5
 80015e8:	080016bd 	.word	0x080016bd
 80015ec:	080016c5 	.word	0x080016c5
 80015f0:	08001757 	.word	0x08001757
 80015f4:	08001757 	.word	0x08001757
 80015f8:	08001757 	.word	0x08001757
 80015fc:	08001757 	.word	0x08001757
 8001600:	08001757 	.word	0x08001757
 8001604:	08001757 	.word	0x08001757
 8001608:	08001757 	.word	0x08001757
 800160c:	08001727 	.word	0x08001727
 8001610:	0800172f 	.word	0x0800172f
 8001614:	0800175d 	.word	0x0800175d
 8001618:	0800175d 	.word	0x0800175d
 800161c:	0800175d 	.word	0x0800175d
 8001620:	0800175d 	.word	0x0800175d
 8001624:	0800175d 	.word	0x0800175d
 8001628:	0800175d 	.word	0x0800175d
 800162c:	0800175d 	.word	0x0800175d
 8001630:	0800173d 	.word	0x0800173d
		{
		case 0: //Horizontal Resolution
			IMAGE_H = (uint32_t)data[0];
 8001634:	7a3b      	ldrb	r3, [r7, #8]
 8001636:	461a      	mov	r2, r3
 8001638:	4b4b      	ldr	r3, [pc, #300]	; (8001768 <Write_Registers_data+0x204>)
 800163a:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 800163c:	4b4b      	ldr	r3, [pc, #300]	; (800176c <Write_Registers_data+0x208>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
			break;
 8001642:	e08b      	b.n	800175c <Write_Registers_data+0x1f8>
		case 1: //Vertical Resolution
			IMAGE_W = (uint32_t)data[0];
 8001644:	7a3b      	ldrb	r3, [r7, #8]
 8001646:	461a      	mov	r2, r3
 8001648:	4b49      	ldr	r3, [pc, #292]	; (8001770 <Write_Registers_data+0x20c>)
 800164a:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 800164c:	4b47      	ldr	r3, [pc, #284]	; (800176c <Write_Registers_data+0x208>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
			break;
 8001652:	e083      	b.n	800175c <Write_Registers_data+0x1f8>
		case 2: //Horizontal blanking (High byte)
			Horizontal_blanking_H = data[0];
 8001654:	7a3a      	ldrb	r2, [r7, #8]
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <Write_Registers_data+0x210>)
 8001658:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 800165a:	4b44      	ldr	r3, [pc, #272]	; (800176c <Write_Registers_data+0x208>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
			break;
 8001660:	e07c      	b.n	800175c <Write_Registers_data+0x1f8>
		case 3: //Horizontal blanking (Low byte)
			Horizontal_blanking_L = data[0];
 8001662:	7a3a      	ldrb	r2, [r7, #8]
 8001664:	4b44      	ldr	r3, [pc, #272]	; (8001778 <Write_Registers_data+0x214>)
 8001666:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <Write_Registers_data+0x208>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
			break;
 800166e:	e075      	b.n	800175c <Write_Registers_data+0x1f8>
		case 4: //Vertical blanking (High byte)
			Vertical_blanking_H = data[0];
 8001670:	7a3a      	ldrb	r2, [r7, #8]
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <Write_Registers_data+0x218>)
 8001674:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <Write_Registers_data+0x208>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
			break;
 800167c:	e06e      	b.n	800175c <Write_Registers_data+0x1f8>
		case 5: //Vertical blanking (Low byte)
			Vertical_blanking_L = data[0];
 800167e:	7a3a      	ldrb	r2, [r7, #8]
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <Write_Registers_data+0x21c>)
 8001682:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <Write_Registers_data+0x208>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
			break;
 800168a:	e067      	b.n	800175c <Write_Registers_data+0x1f8>
		case 6: //Frame rate x 2 (Hz)
			frame_rate_r = data[0];
 800168c:	7a3a      	ldrb	r2, [r7, #8]
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <Write_Registers_data+0x220>)
 8001690:	701a      	strb	r2, [r3, #0]
			break;
 8001692:	e063      	b.n	800175c <Write_Registers_data+0x1f8>
		case 7: //Show SPI flash content length
			spi_flash_content_length = data[0];
 8001694:	7a3a      	ldrb	r2, [r7, #8]
 8001696:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <Write_Registers_data+0x224>)
 8001698:	701a      	strb	r2, [r3, #0]
			break;
 800169a:	e05f      	b.n	800175c <Write_Registers_data+0x1f8>
		case 9: //Clock rate of SPI
			break;
		case 10: //Clock rate of I2C
			break;
		case 11: //Pixel Mapping one_L
			Pixel_Mapping_one_L = data[0];
 800169c:	7a3a      	ldrb	r2, [r7, #8]
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <Write_Registers_data+0x228>)
 80016a0:	701a      	strb	r2, [r3, #0]
			break;
 80016a2:	e05b      	b.n	800175c <Write_Registers_data+0x1f8>
		case 12: //Pixel Mapping one_H
			Pixel_Mapping_one_H = data[0];
 80016a4:	7a3a      	ldrb	r2, [r7, #8]
 80016a6:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <Write_Registers_data+0x22c>)
 80016a8:	701a      	strb	r2, [r3, #0]
			break;
 80016aa:	e057      	b.n	800175c <Write_Registers_data+0x1f8>
		case 13: //Auto Run start content of SPI flash
			auto_run_start_content = data[0];
 80016ac:	7a3a      	ldrb	r2, [r7, #8]
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <Write_Registers_data+0x230>)
 80016b0:	701a      	strb	r2, [r3, #0]
			break;
 80016b2:	e053      	b.n	800175c <Write_Registers_data+0x1f8>
		case 14: //Show first content number of SPI flash
			display_image_number = data[0];
 80016b4:	7a3a      	ldrb	r2, [r7, #8]
 80016b6:	4b38      	ldr	r3, [pc, #224]	; (8001798 <Write_Registers_data+0x234>)
 80016b8:	701a      	strb	r2, [r3, #0]
			break;
 80016ba:	e04f      	b.n	800175c <Write_Registers_data+0x1f8>
		case 15: //Auto Run end content of SPI flash
			auto_run_end_content = data[0];
 80016bc:	7a3a      	ldrb	r2, [r7, #8]
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <Write_Registers_data+0x238>)
 80016c0:	701a      	strb	r2, [r3, #0]
			break;
 80016c2:	e04b      	b.n	800175c <Write_Registers_data+0x1f8>
		case 16: //Control A
			switch (data[0] & 0b00000011) //Display Mode
 80016c4:	7a3b      	ldrb	r3, [r7, #8]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d00e      	beq.n	80016ec <Write_Registers_data+0x188>
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	dc10      	bgt.n	80016f4 <Write_Registers_data+0x190>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <Write_Registers_data+0x178>
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d004      	beq.n	80016e4 <Write_Registers_data+0x180>
 80016da:	e00b      	b.n	80016f4 <Write_Registers_data+0x190>
			{
			case 0b00000000: //Display content of frame buffer (0)
				play_mode_source = 1;
 80016dc:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <Write_Registers_data+0x23c>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
				break;
 80016e2:	e007      	b.n	80016f4 <Write_Registers_data+0x190>
			case 0b00000001: //Display content of frame buffer (1)
				play_mode_source = 2;
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <Write_Registers_data+0x23c>)
 80016e6:	2202      	movs	r2, #2
 80016e8:	701a      	strb	r2, [r3, #0]
				break;
 80016ea:	e003      	b.n	80016f4 <Write_Registers_data+0x190>
			case 0b00000011: //Display Flash content
				play_mode_source = 0;
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <Write_Registers_data+0x23c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
				break;
 80016f2:	bf00      	nop
			}
			switch (data[0] & 0b00001100) //Static or Dynamic mode
 80016f4:	7a3b      	ldrb	r3, [r7, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d00e      	beq.n	800171c <Write_Registers_data+0x1b8>
 80016fe:	2b08      	cmp	r3, #8
 8001700:	dc2b      	bgt.n	800175a <Write_Registers_data+0x1f6>
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <Write_Registers_data+0x1a8>
 8001706:	2b04      	cmp	r3, #4
 8001708:	d004      	beq.n	8001714 <Write_Registers_data+0x1b0>
				break;
			case 0b00001000: //Dynamic display flash content
				play_mode = 1;
				break;
			}
			break;
 800170a:	e026      	b.n	800175a <Write_Registers_data+0x1f6>
				play_mode = 0;
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <Write_Registers_data+0x240>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
				break;
 8001712:	e007      	b.n	8001724 <Write_Registers_data+0x1c0>
				play_mode = 2;
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <Write_Registers_data+0x240>)
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
				break;
 800171a:	e003      	b.n	8001724 <Write_Registers_data+0x1c0>
				play_mode = 1;
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <Write_Registers_data+0x240>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
				break;
 8001722:	bf00      	nop
			break;
 8001724:	e019      	b.n	800175a <Write_Registers_data+0x1f6>
		case 22: //Power Status
			break;
		case 23: //Serial number
			break;
		case 24: //content size
			content_size = data[0];
 8001726:	7a3a      	ldrb	r2, [r7, #8]
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <Write_Registers_data+0x244>)
 800172a:	701a      	strb	r2, [r3, #0]
			break;
 800172c:	e016      	b.n	800175c <Write_Registers_data+0x1f8>
		case 25:// force play buffer to write flash.
			play_mode_source = 1;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <Write_Registers_data+0x23c>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
			play_mode = 2;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <Write_Registers_data+0x240>)
 8001736:	2202      	movs	r2, #2
 8001738:	701a      	strb	r2, [r3, #0]
			break;
 800173a:	e00f      	b.n	800175c <Write_Registers_data+0x1f8>
		case 33:// force play buffer to write flash.
			Mode_config[100] = data[0];
 800173c:	7a3a      	ldrb	r2, [r7, #8]
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <Write_Registers_data+0x248>)
 8001740:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			//Playing_mode = data[0];
			play_mode =3;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <Write_Registers_data+0x240>)
 8001746:	2203      	movs	r2, #3
 8001748:	701a      	strb	r2, [r3, #0]
 			Mode_changed = 1;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <Write_Registers_data+0x24c>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]

			break;
 8001750:	e004      	b.n	800175c <Write_Registers_data+0x1f8>
		}
	}
 8001752:	bf00      	nop
 8001754:	e002      	b.n	800175c <Write_Registers_data+0x1f8>
			break;
 8001756:	bf00      	nop
 8001758:	e000      	b.n	800175c <Write_Registers_data+0x1f8>
			break;
 800175a:	bf00      	nop
	//HAL_UART_Transmit(&huart4, &Register_Address, 1, 1000);
	//HAL_UART_Transmit(&huart4, &data, 1, 1000);
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200001d0 	.word	0x200001d0
 8001768:	20000000 	.word	0x20000000
 800176c:	2008bd32 	.word	0x2008bd32
 8001770:	20000004 	.word	0x20000004
 8001774:	2000000c 	.word	0x2000000c
 8001778:	2000000d 	.word	0x2000000d
 800177c:	2000000e 	.word	0x2000000e
 8001780:	2000000f 	.word	0x2000000f
 8001784:	20000008 	.word	0x20000008
 8001788:	20000009 	.word	0x20000009
 800178c:	2000001c 	.word	0x2000001c
 8001790:	2000001d 	.word	0x2000001d
 8001794:	200002c4 	.word	0x200002c4
 8001798:	2008bd2c 	.word	0x2008bd2c
 800179c:	2000000a 	.word	0x2000000a
 80017a0:	2007de81 	.word	0x2007de81
 80017a4:	2007de80 	.word	0x2007de80
 80017a8:	2000000b 	.word	0x2000000b
 80017ac:	2008bd38 	.word	0x2008bd38
 80017b0:	2008bd34 	.word	0x2008bd34

080017b4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, &spi_rev_2byte, 2, 1000);
	// USB command: Type and command
	if(hspi == SPI2){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4aae      	ldr	r2, [pc, #696]	; (8001a78 <HAL_SPI_RxCpltCallback+0x2c4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d101      	bne.n	80017c8 <HAL_SPI_RxCpltCallback+0x14>
		int a=2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
	}
	if(hspi == SPI3){
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4aac      	ldr	r2, [pc, #688]	; (8001a7c <HAL_SPI_RxCpltCallback+0x2c8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_SPI_RxCpltCallback+0x20>
		int a=3;
 80017d0:	2303      	movs	r3, #3
 80017d2:	60bb      	str	r3, [r7, #8]
	}
	switch (spi_rev_2byte[0] & 0b11000000)
 80017d4:	4baa      	ldr	r3, [pc, #680]	; (8001a80 <HAL_SPI_RxCpltCallback+0x2cc>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017dc:	2bc0      	cmp	r3, #192	; 0xc0
 80017de:	f000 81e9 	beq.w	8001bb4 <HAL_SPI_RxCpltCallback+0x400>
 80017e2:	2bc0      	cmp	r3, #192	; 0xc0
 80017e4:	f300 82a0 	bgt.w	8001d28 <HAL_SPI_RxCpltCallback+0x574>
 80017e8:	2b80      	cmp	r3, #128	; 0x80
 80017ea:	f000 81d7 	beq.w	8001b9c <HAL_SPI_RxCpltCallback+0x3e8>
 80017ee:	2b80      	cmp	r3, #128	; 0x80
 80017f0:	f300 829a 	bgt.w	8001d28 <HAL_SPI_RxCpltCallback+0x574>
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_SPI_RxCpltCallback+0x4c>
 80017f8:	2b40      	cmp	r3, #64	; 0x40
 80017fa:	f000 8171 	beq.w	8001ae0 <HAL_SPI_RxCpltCallback+0x32c>
 80017fe:	e293      	b.n	8001d28 <HAL_SPI_RxCpltCallback+0x574>
	{
	case 0b00000000: //Chain SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001800:	4b9f      	ldr	r3, [pc, #636]	; (8001a80 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001808:	2b38      	cmp	r3, #56	; 0x38
 800180a:	f200 8286 	bhi.w	8001d1a <HAL_SPI_RxCpltCallback+0x566>
 800180e:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <HAL_SPI_RxCpltCallback+0x60>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	080018f9 	.word	0x080018f9
 8001818:	08001d1b 	.word	0x08001d1b
 800181c:	08001d1b 	.word	0x08001d1b
 8001820:	08001d1b 	.word	0x08001d1b
 8001824:	08001d1b 	.word	0x08001d1b
 8001828:	08001d1b 	.word	0x08001d1b
 800182c:	08001d1b 	.word	0x08001d1b
 8001830:	08001d1b 	.word	0x08001d1b
 8001834:	080019ab 	.word	0x080019ab
 8001838:	08001d1b 	.word	0x08001d1b
 800183c:	08001d1b 	.word	0x08001d1b
 8001840:	08001d1b 	.word	0x08001d1b
 8001844:	08001d1b 	.word	0x08001d1b
 8001848:	08001d1b 	.word	0x08001d1b
 800184c:	08001d1b 	.word	0x08001d1b
 8001850:	08001d1b 	.word	0x08001d1b
 8001854:	08001a5d 	.word	0x08001a5d
 8001858:	08001d1b 	.word	0x08001d1b
 800185c:	08001d1b 	.word	0x08001d1b
 8001860:	08001d1b 	.word	0x08001d1b
 8001864:	08001d1b 	.word	0x08001d1b
 8001868:	08001d1b 	.word	0x08001d1b
 800186c:	08001d1b 	.word	0x08001d1b
 8001870:	08001d1b 	.word	0x08001d1b
 8001874:	08001add 	.word	0x08001add
 8001878:	08001d1b 	.word	0x08001d1b
 800187c:	08001d1b 	.word	0x08001d1b
 8001880:	08001d1b 	.word	0x08001d1b
 8001884:	08001d1b 	.word	0x08001d1b
 8001888:	08001d1b 	.word	0x08001d1b
 800188c:	08001d1b 	.word	0x08001d1b
 8001890:	08001d1b 	.word	0x08001d1b
 8001894:	08001add 	.word	0x08001add
 8001898:	08001d1b 	.word	0x08001d1b
 800189c:	08001d1b 	.word	0x08001d1b
 80018a0:	08001d1b 	.word	0x08001d1b
 80018a4:	08001d1b 	.word	0x08001d1b
 80018a8:	08001d1b 	.word	0x08001d1b
 80018ac:	08001d1b 	.word	0x08001d1b
 80018b0:	08001d1b 	.word	0x08001d1b
 80018b4:	08001add 	.word	0x08001add
 80018b8:	08001d1b 	.word	0x08001d1b
 80018bc:	08001d1b 	.word	0x08001d1b
 80018c0:	08001d1b 	.word	0x08001d1b
 80018c4:	08001d1b 	.word	0x08001d1b
 80018c8:	08001d1b 	.word	0x08001d1b
 80018cc:	08001d1b 	.word	0x08001d1b
 80018d0:	08001d1b 	.word	0x08001d1b
 80018d4:	08001add 	.word	0x08001add
 80018d8:	08001d1b 	.word	0x08001d1b
 80018dc:	08001d1b 	.word	0x08001d1b
 80018e0:	08001d1b 	.word	0x08001d1b
 80018e4:	08001d1b 	.word	0x08001d1b
 80018e8:	08001d1b 	.word	0x08001d1b
 80018ec:	08001d1b 	.word	0x08001d1b
 80018f0:	08001d1b 	.word	0x08001d1b
 80018f4:	08001add 	.word	0x08001add
		{
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi_rev_2byte[0] & 0b00000111)
 80018f8:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_SPI_RxCpltCallback+0x2cc>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	2b04      	cmp	r3, #4
 8001902:	d03e      	beq.n	8001982 <HAL_SPI_RxCpltCallback+0x1ce>
 8001904:	2b04      	cmp	r3, #4
 8001906:	dc4c      	bgt.n	80019a2 <HAL_SPI_RxCpltCallback+0x1ee>
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <HAL_SPI_RxCpltCallback+0x15e>
 800190c:	2b01      	cmp	r3, #1
 800190e:	d014      	beq.n	800193a <HAL_SPI_RxCpltCallback+0x186>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 8001910:	e047      	b.n	80019a2 <HAL_SPI_RxCpltCallback+0x1ee>
				if (BOARD_NUMBER == 1)
 8001912:	4b5c      	ldr	r3, [pc, #368]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d145      	bne.n	80019a6 <HAL_SPI_RxCpltCallback+0x1f2>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2d4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	fb12 f303 	smulbb	r3, r2, r3
 800192a:	b29a      	uxth	r2, r3
 800192c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001930:	4957      	ldr	r1, [pc, #348]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2dc>)
 8001932:	4858      	ldr	r0, [pc, #352]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001934:	f005 ff19 	bl	800776a <HAL_SPI_Receive>
				break;
 8001938:	e035      	b.n	80019a6 <HAL_SPI_RxCpltCallback+0x1f2>
				if (BOARD_NUMBER == 2)
 800193a:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2d0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d10f      	bne.n	8001962 <HAL_SPI_RxCpltCallback+0x1ae>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001942:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2d8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	fb12 f303 	smulbb	r3, r2, r3
 8001952:	b29a      	uxth	r2, r3
 8001954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2dc>)
 800195a:	484e      	ldr	r0, [pc, #312]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2e0>)
 800195c:	f005 ff05 	bl	800776a <HAL_SPI_Receive>
				break;
 8001960:	e022      	b.n	80019a8 <HAL_SPI_RxCpltCallback+0x1f4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b48      	ldr	r3, [pc, #288]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2d8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	fb12 f303 	smulbb	r3, r2, r3
 8001972:	b29a      	uxth	r2, r3
 8001974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001978:	4947      	ldr	r1, [pc, #284]	; (8001a98 <HAL_SPI_RxCpltCallback+0x2e4>)
 800197a:	4846      	ldr	r0, [pc, #280]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2e0>)
 800197c:	f005 fef5 	bl	800776a <HAL_SPI_Receive>
				break;
 8001980:	e012      	b.n	80019a8 <HAL_SPI_RxCpltCallback+0x1f4>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2d8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	b29b      	uxth	r3, r3
 800198e:	fb12 f303 	smulbb	r3, r2, r3
 8001992:	b29a      	uxth	r2, r3
 8001994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001998:	493d      	ldr	r1, [pc, #244]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2dc>)
 800199a:	483e      	ldr	r0, [pc, #248]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2e0>)
 800199c:	f005 fee5 	bl	800776a <HAL_SPI_Receive>
				break;
 80019a0:	e002      	b.n	80019a8 <HAL_SPI_RxCpltCallback+0x1f4>
				break;
 80019a2:	bf00      	nop
 80019a4:	e09b      	b.n	8001ade <HAL_SPI_RxCpltCallback+0x32a>
				break;
 80019a6:	bf00      	nop
			}
			break;
 80019a8:	e099      	b.n	8001ade <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi_rev_2byte[0] & 0b00000111)
 80019aa:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <HAL_SPI_RxCpltCallback+0x2cc>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d03e      	beq.n	8001a34 <HAL_SPI_RxCpltCallback+0x280>
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	dc4c      	bgt.n	8001a54 <HAL_SPI_RxCpltCallback+0x2a0>
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HAL_SPI_RxCpltCallback+0x210>
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d014      	beq.n	80019ec <HAL_SPI_RxCpltCallback+0x238>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 80019c2:	e047      	b.n	8001a54 <HAL_SPI_RxCpltCallback+0x2a0>
				if (BOARD_NUMBER == 1)
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2d0>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d145      	bne.n	8001a58 <HAL_SPI_RxCpltCallback+0x2a4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2d4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2d8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	fb12 f303 	smulbb	r3, r2, r3
 80019dc:	b29a      	uxth	r2, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	492e      	ldr	r1, [pc, #184]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2e8>)
 80019e4:	482b      	ldr	r0, [pc, #172]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2e0>)
 80019e6:	f005 fec0 	bl	800776a <HAL_SPI_Receive>
				break;
 80019ea:	e035      	b.n	8001a58 <HAL_SPI_RxCpltCallback+0x2a4>
				if (BOARD_NUMBER == 2)
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2d0>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d10f      	bne.n	8001a14 <HAL_SPI_RxCpltCallback+0x260>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2d4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2d8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	fb12 f303 	smulbb	r3, r2, r3
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0a:	4924      	ldr	r1, [pc, #144]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2e8>)
 8001a0c:	4821      	ldr	r0, [pc, #132]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001a0e:	f005 feac 	bl	800776a <HAL_SPI_Receive>
				break;
 8001a12:	e022      	b.n	8001a5a <HAL_SPI_RxCpltCallback+0x2a6>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	fb12 f303 	smulbb	r3, r2, r3
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	491b      	ldr	r1, [pc, #108]	; (8001a98 <HAL_SPI_RxCpltCallback+0x2e4>)
 8001a2c:	4819      	ldr	r0, [pc, #100]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001a2e:	f005 fe9c 	bl	800776a <HAL_SPI_Receive>
				break;
 8001a32:	e012      	b.n	8001a5a <HAL_SPI_RxCpltCallback+0x2a6>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	fb12 f303 	smulbb	r3, r2, r3
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	4914      	ldr	r1, [pc, #80]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2e8>)
 8001a4c:	4811      	ldr	r0, [pc, #68]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001a4e:	f005 fe8c 	bl	800776a <HAL_SPI_Receive>
				break;
 8001a52:	e002      	b.n	8001a5a <HAL_SPI_RxCpltCallback+0x2a6>
				break;
 8001a54:	bf00      	nop
 8001a56:	e042      	b.n	8001ade <HAL_SPI_RxCpltCallback+0x32a>
				break;
 8001a58:	bf00      	nop
			}
			break;
 8001a5a:	e040      	b.n	8001ade <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00010000: //Write Registers data
			switch (spi_rev_2byte[0] & 0b00000111)
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d033      	beq.n	8001ad0 <HAL_SPI_RxCpltCallback+0x31c>
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	dc35      	bgt.n	8001ad8 <HAL_SPI_RxCpltCallback+0x324>
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d017      	beq.n	8001aa0 <HAL_SPI_RxCpltCallback+0x2ec>
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d021      	beq.n	8001ab8 <HAL_SPI_RxCpltCallback+0x304>
				break;
			case 0b00000100: //Broadcast to every board
				Write_Registers_data(1);
				break;
			default:
				break;
 8001a74:	e030      	b.n	8001ad8 <HAL_SPI_RxCpltCallback+0x324>
 8001a76:	bf00      	nop
 8001a78:	40003800 	.word	0x40003800
 8001a7c:	40003c00 	.word	0x40003c00
 8001a80:	2008bd30 	.word	0x2008bd30
 8001a84:	2000001e 	.word	0x2000001e
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	2000e170 	.word	0x2000e170
 8001a94:	200001d0 	.word	0x200001d0
 8001a98:	200002c8 	.word	0x200002c8
 8001a9c:	2001c018 	.word	0x2001c018
				if (BOARD_NUMBER == 1)
 8001aa0:	4bac      	ldr	r3, [pc, #688]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d103      	bne.n	8001ab0 <HAL_SPI_RxCpltCallback+0x2fc>
					Write_Registers_data(1);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff fd5b 	bl	8001564 <Write_Registers_data>
				break;
 8001aae:	e014      	b.n	8001ada <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff fd57 	bl	8001564 <Write_Registers_data>
				break;
 8001ab6:	e010      	b.n	8001ada <HAL_SPI_RxCpltCallback+0x326>
				if (BOARD_NUMBER == 2)
 8001ab8:	4ba6      	ldr	r3, [pc, #664]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d103      	bne.n	8001ac8 <HAL_SPI_RxCpltCallback+0x314>
					Write_Registers_data(1);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fd4f 	bl	8001564 <Write_Registers_data>
				break;
 8001ac6:	e008      	b.n	8001ada <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fd4b 	bl	8001564 <Write_Registers_data>
				break;
 8001ace:	e004      	b.n	8001ada <HAL_SPI_RxCpltCallback+0x326>
				Write_Registers_data(1);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff fd47 	bl	8001564 <Write_Registers_data>
				break;
 8001ad6:	e000      	b.n	8001ada <HAL_SPI_RxCpltCallback+0x326>
				break;
 8001ad8:	bf00      	nop
			}
			break;
 8001ada:	e000      	b.n	8001ade <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00011000: //Write partial content of frame buffer
			break;
 8001adc:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 8001ade:	e11c      	b.n	8001d1a <HAL_SPI_RxCpltCallback+0x566>
	case 0b01000000: //Master SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001ae0:	4b9d      	ldr	r3, [pc, #628]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ae8:	2b28      	cmp	r3, #40	; 0x28
 8001aea:	f200 8118 	bhi.w	8001d1e <HAL_SPI_RxCpltCallback+0x56a>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <HAL_SPI_RxCpltCallback+0x340>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b99 	.word	0x08001b99
 8001af8:	08001d1f 	.word	0x08001d1f
 8001afc:	08001d1f 	.word	0x08001d1f
 8001b00:	08001d1f 	.word	0x08001d1f
 8001b04:	08001d1f 	.word	0x08001d1f
 8001b08:	08001d1f 	.word	0x08001d1f
 8001b0c:	08001d1f 	.word	0x08001d1f
 8001b10:	08001d1f 	.word	0x08001d1f
 8001b14:	08001b99 	.word	0x08001b99
 8001b18:	08001d1f 	.word	0x08001d1f
 8001b1c:	08001d1f 	.word	0x08001d1f
 8001b20:	08001d1f 	.word	0x08001d1f
 8001b24:	08001d1f 	.word	0x08001d1f
 8001b28:	08001d1f 	.word	0x08001d1f
 8001b2c:	08001d1f 	.word	0x08001d1f
 8001b30:	08001d1f 	.word	0x08001d1f
 8001b34:	08001b99 	.word	0x08001b99
 8001b38:	08001d1f 	.word	0x08001d1f
 8001b3c:	08001d1f 	.word	0x08001d1f
 8001b40:	08001d1f 	.word	0x08001d1f
 8001b44:	08001d1f 	.word	0x08001d1f
 8001b48:	08001d1f 	.word	0x08001d1f
 8001b4c:	08001d1f 	.word	0x08001d1f
 8001b50:	08001d1f 	.word	0x08001d1f
 8001b54:	08001b99 	.word	0x08001b99
 8001b58:	08001d1f 	.word	0x08001d1f
 8001b5c:	08001d1f 	.word	0x08001d1f
 8001b60:	08001d1f 	.word	0x08001d1f
 8001b64:	08001d1f 	.word	0x08001d1f
 8001b68:	08001d1f 	.word	0x08001d1f
 8001b6c:	08001d1f 	.word	0x08001d1f
 8001b70:	08001d1f 	.word	0x08001d1f
 8001b74:	08001b99 	.word	0x08001b99
 8001b78:	08001d1f 	.word	0x08001d1f
 8001b7c:	08001d1f 	.word	0x08001d1f
 8001b80:	08001d1f 	.word	0x08001d1f
 8001b84:	08001d1f 	.word	0x08001d1f
 8001b88:	08001d1f 	.word	0x08001d1f
 8001b8c:	08001d1f 	.word	0x08001d1f
 8001b90:	08001d1f 	.word	0x08001d1f
 8001b94:	08001b99 	.word	0x08001b99
		{
		case 0b00000000: //Start SPI write data
			break;
 8001b98:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001b9a:	e0c0      	b.n	8001d1e <HAL_SPI_RxCpltCallback+0x56a>
	case 0b10000000: //I2C command
		switch (spi_rev_2byte[0] & 0b00111000)
 8001b9c:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_SPI_RxCpltCallback+0x3fc>
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	f040 80ba 	bne.w	8001d22 <HAL_SPI_RxCpltCallback+0x56e>
		{
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001bae:	e000      	b.n	8001bb2 <HAL_SPI_RxCpltCallback+0x3fe>
			break;
 8001bb0:	bf00      	nop
		}
		break;
 8001bb2:	e0b6      	b.n	8001d22 <HAL_SPI_RxCpltCallback+0x56e>
	case 0b11000000: //SPI flash function & Slave SPI
		switch (spi_rev_2byte[0] & 0b00111000)
 8001bb4:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	f000 80aa 	beq.w	8001d16 <HAL_SPI_RxCpltCallback+0x562>
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	f300 80af 	bgt.w	8001d26 <HAL_SPI_RxCpltCallback+0x572>
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_SPI_RxCpltCallback+0x41e>
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d078      	beq.n	8001cc2 <HAL_SPI_RxCpltCallback+0x50e>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001bd0:	e0a9      	b.n	8001d26 <HAL_SPI_RxCpltCallback+0x572>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001bd2:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d04c      	beq.n	8001c78 <HAL_SPI_RxCpltCallback+0x4c4>
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	dc69      	bgt.n	8001cb6 <HAL_SPI_RxCpltCallback+0x502>
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_SPI_RxCpltCallback+0x438>
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d023      	beq.n	8001c32 <HAL_SPI_RxCpltCallback+0x47e>
				break;
 8001bea:	e064      	b.n	8001cb6 <HAL_SPI_RxCpltCallback+0x502>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001bec:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	fb12 f303 	smulbb	r3, r2, r3
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	4958      	ldr	r1, [pc, #352]	; (8001d64 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c04:	4858      	ldr	r0, [pc, #352]	; (8001d68 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c06:	f005 fdb0 	bl	800776a <HAL_SPI_Receive>
				if (BOARD_NUMBER == 1)
 8001c0a:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d153      	bne.n	8001cba <HAL_SPI_RxCpltCallback+0x506>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001c12:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c14:	785b      	ldrb	r3, [r3, #1]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fffa 	bl	8002c14 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001c20:	4b4d      	ldr	r3, [pc, #308]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	484e      	ldr	r0, [pc, #312]	; (8001d64 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c2c:	f000 fc44 	bl	80024b8 <write_flash_page>
				break;
 8001c30:	e043      	b.n	8001cba <HAL_SPI_RxCpltCallback+0x506>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001c32:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	fb12 f303 	smulbb	r3, r2, r3
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c48:	4946      	ldr	r1, [pc, #280]	; (8001d64 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c4a:	4847      	ldr	r0, [pc, #284]	; (8001d68 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c4c:	f005 fd8d 	bl	800776a <HAL_SPI_Receive>
				if (BOARD_NUMBER == 2)
 8001c50:	4b40      	ldr	r3, [pc, #256]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d132      	bne.n	8001cbe <HAL_SPI_RxCpltCallback+0x50a>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001c58:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 ffd7 	bl	8002c14 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001c66:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c68:	785b      	ldrb	r3, [r3, #1]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	483c      	ldr	r0, [pc, #240]	; (8001d64 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c72:	f000 fc21 	bl	80024b8 <write_flash_page>
				break;
 8001c76:	e022      	b.n	8001cbe <HAL_SPI_RxCpltCallback+0x50a>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001c78:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	fb12 f303 	smulbb	r3, r2, r3
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	4935      	ldr	r1, [pc, #212]	; (8001d64 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c90:	4835      	ldr	r0, [pc, #212]	; (8001d68 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c92:	f005 fd6a 	bl	800776a <HAL_SPI_Receive>
				erase_flash_sector(spi_rev_2byte[1] - 1);
 8001c96:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c98:	785b      	ldrb	r3, [r3, #1]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 ffb8 	bl	8002c14 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	482d      	ldr	r0, [pc, #180]	; (8001d64 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001cb0:	f000 fc02 	bl	80024b8 <write_flash_page>
				break;
 8001cb4:	e004      	b.n	8001cc0 <HAL_SPI_RxCpltCallback+0x50c>
				break;
 8001cb6:	bf00      	nop
 8001cb8:	e02e      	b.n	8001d18 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001cba:	bf00      	nop
 8001cbc:	e02c      	b.n	8001d18 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001cbe:	bf00      	nop
			break;
 8001cc0:	e02a      	b.n	8001d18 <HAL_SPI_RxCpltCallback+0x564>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d014      	beq.n	8001cf8 <HAL_SPI_RxCpltCallback+0x544>
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	dc1d      	bgt.n	8001d0e <HAL_SPI_RxCpltCallback+0x55a>
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_SPI_RxCpltCallback+0x526>
 8001cd6:	2b01      	cmp	r3, #1
				break;
 8001cd8:	e01c      	b.n	8001d14 <HAL_SPI_RxCpltCallback+0x560>
				if (BOARD_NUMBER == 1)
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d117      	bne.n	8001d12 <HAL_SPI_RxCpltCallback+0x55e>
					reset_flash_software();
 8001ce2:	f001 f86d 	bl	8002dc0 <reset_flash_software>
					read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481c      	ldr	r0, [pc, #112]	; (8001d64 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001cf2:	f000 fcb1 	bl	8002658 <read_flash_page>
				break;
 8001cf6:	e00c      	b.n	8001d12 <HAL_SPI_RxCpltCallback+0x55e>
				reset_flash_software();
 8001cf8:	f001 f862 	bl	8002dc0 <reset_flash_software>
				read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4619      	mov	r1, r3
 8001d06:	4817      	ldr	r0, [pc, #92]	; (8001d64 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001d08:	f000 fca6 	bl	8002658 <read_flash_page>
				break;
 8001d0c:	e002      	b.n	8001d14 <HAL_SPI_RxCpltCallback+0x560>
				break;
 8001d0e:	bf00      	nop
 8001d10:	e002      	b.n	8001d18 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001d12:	bf00      	nop
			break;
 8001d14:	e000      	b.n	8001d18 <HAL_SPI_RxCpltCallback+0x564>
			break;
 8001d16:	bf00      	nop
		break;
 8001d18:	e005      	b.n	8001d26 <HAL_SPI_RxCpltCallback+0x572>
		break;
 8001d1a:	bf00      	nop
 8001d1c:	e004      	b.n	8001d28 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001d1e:	bf00      	nop
 8001d20:	e002      	b.n	8001d28 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001d22:	bf00      	nop
 8001d24:	e000      	b.n	8001d28 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001d26:	bf00      	nop
	}
	// USB command: ID
	switch (spi_rev_2byte[0] & 0b00000111)
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_SPI_RxCpltCallback+0x586>
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d002      	beq.n	8001d3e <HAL_SPI_RxCpltCallback+0x58a>
	case 0b00000000: //Command for DIP switch ID = 00
		break;
	case 0b00000001: //Command for DIP switch ID = 01
		break;
	default: //Broadcast to every board
		break;
 8001d38:	e002      	b.n	8001d40 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001d3a:	bf00      	nop
 8001d3c:	e000      	b.n	8001d40 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001d3e:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8001d40:	2202      	movs	r2, #2
 8001d42:	4905      	ldr	r1, [pc, #20]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d44:	4808      	ldr	r0, [pc, #32]	; (8001d68 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001d46:	f006 f853 	bl	8007df0 <HAL_SPI_Receive_IT>
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000001e 	.word	0x2000001e
 8001d58:	2008bd30 	.word	0x2008bd30
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004
 8001d64:	200002c8 	.word	0x200002c8
 8001d68:	200001d0 	.word	0x200001d0

08001d6c <display_panel>:

void display_panel(uint8_t *frame_buf)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b08b      	sub	sp, #44	; 0x2c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	int num_ones = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <display_panel+0xe4>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <display_panel+0xe8>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	4313      	orrs	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 12; i++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	e00d      	b.n	8001dae <display_panel+0x42>
	{
		if (Pixel_Mapping_one & (1 << i))
 8001d92:	897a      	ldrh	r2, [r7, #10]
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	fa42 f303 	asr.w	r3, r2, r3
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <display_panel+0x3c>
		{
			num_ones++;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	3301      	adds	r3, #1
 8001dac:	623b      	str	r3, [r7, #32]
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	2b0b      	cmp	r3, #11
 8001db2:	ddee      	ble.n	8001d92 <display_panel+0x26>
		}
	}

	int frame_buf_count = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
	int Pixel_Mapping_one_count = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
	int c = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e034      	b.n	8001e30 <display_panel+0xc4>
	{
		Pixel_Mapping_one_count = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
		c = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 12; j++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	e022      	b.n	8001e1a <display_panel+0xae>
		{
			if (Pixel_Mapping_one & (1 << j))
 8001dd4:	897a      	ldrh	r2, [r7, #10]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	fa42 f303 	asr.w	r3, r2, r3
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d014      	beq.n	8001e0e <display_panel+0xa2>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4413      	add	r3, r2
 8001dea:	61fb      	str	r3, [r7, #28]
				image_arr_rgb888[frame_buf_count] = frame_buf[i + c];
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	4413      	add	r3, r2
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	7819      	ldrb	r1, [r3, #0]
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <display_panel+0xec>)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	4413      	add	r3, r2
 8001e00:	460a      	mov	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
				c++;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
				Pixel_Mapping_one_count = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
			}
			Pixel_Mapping_one_count++;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	3301      	adds	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
		for (int j = 0; j < 12; j++)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b0b      	cmp	r3, #11
 8001e1e:	ddd9      	ble.n	8001dd4 <display_panel+0x68>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4413      	add	r3, r2
 8001e26:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	4413      	add	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <display_panel+0xf0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <display_panel+0xf4>)
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	fb03 f202 	mul.w	r2, r3, r2
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d8c1      	bhi.n	8001dc6 <display_panel+0x5a>
	}
}
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	372c      	adds	r7, #44	; 0x2c
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	2000001c 	.word	0x2000001c
 8001e54:	2000001d 	.word	0x2000001d
 8001e58:	2007de84 	.word	0x2007de84
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000004 	.word	0x20000004

08001e64 <read_flash_SR>:

/*====================================flash function begin====================================*/
uint8_t read_flash_SR()
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	uint8_t dat[1] = {0x00};
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e74:	480e      	ldr	r0, [pc, #56]	; (8001eb0 <read_flash_SR+0x4c>)
 8001e76:	f003 f9ab 	bl	80051d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x05}, 1, 1000);
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	703b      	strb	r3, [r7, #0]
 8001e7e:	4639      	mov	r1, r7
 8001e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e84:	2201      	movs	r2, #1
 8001e86:	480b      	ldr	r0, [pc, #44]	; (8001eb4 <read_flash_SR+0x50>)
 8001e88:	f005 fb01 	bl	800748e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)dat, 1, 1000);
 8001e8c:	1d39      	adds	r1, r7, #4
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	2201      	movs	r2, #1
 8001e94:	4807      	ldr	r0, [pc, #28]	; (8001eb4 <read_flash_SR+0x50>)
 8001e96:	f005 fc68 	bl	800776a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea0:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <read_flash_SR+0x4c>)
 8001ea2:	f003 f995 	bl	80051d0 <HAL_GPIO_WritePin>

	return dat[0];
 8001ea6:	793b      	ldrb	r3, [r7, #4]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	2000016c 	.word	0x2000016c

08001eb8 <flash_wait_nobusy>:

void flash_wait_nobusy(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    while(((read_flash_SR()) & 0x01)==0x01);
 8001ebc:	bf00      	nop
 8001ebe:	f7ff ffd1 	bl	8001e64 <read_flash_SR>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d0f8      	beq.n	8001ebe <flash_wait_nobusy+0x6>
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <mode_init>:
		delay_us(10);

		flash_wait_nobusy();
	}
}*/
void mode_init(){
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	e00f      	b.n	8001f00 <mode_init+0x2c>
		Mode_config[i*2]=i;//picture_id
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	b2d1      	uxtb	r1, r2
 8001ee8:	4ac4      	ldr	r2, [pc, #784]	; (80021fc <mode_init+0x328>)
 8001eea:	54d1      	strb	r1, [r2, r3]
		Mode_config[i*2+1]=i;//picture_delay_time
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	b2d1      	uxtb	r1, r2
 8001ef6:	4ac1      	ldr	r2, [pc, #772]	; (80021fc <mode_init+0x328>)
 8001ef8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3301      	adds	r3, #1
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b6e      	cmp	r3, #110	; 0x6e
 8001f04:	ddec      	ble.n	8001ee0 <mode_init+0xc>
	}
	Mode_config[Max_pic_per_mode*(Max_mode_num-1)*2]=0;
 8001f06:	4bbd      	ldr	r3, [pc, #756]	; (80021fc <mode_init+0x328>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	//test mode 1
	Mode_config[0]=0;//frist pic
 8001f0e:	4bbb      	ldr	r3, [pc, #748]	; (80021fc <mode_init+0x328>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
	Mode_config[1]=2;//frsit picture delay time
 8001f14:	4bb9      	ldr	r3, [pc, #740]	; (80021fc <mode_init+0x328>)
 8001f16:	2202      	movs	r2, #2
 8001f18:	705a      	strb	r2, [r3, #1]
	Mode_config[2]=1;
 8001f1a:	4bb8      	ldr	r3, [pc, #736]	; (80021fc <mode_init+0x328>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	709a      	strb	r2, [r3, #2]
	Mode_config[3]=2;
 8001f20:	4bb6      	ldr	r3, [pc, #728]	; (80021fc <mode_init+0x328>)
 8001f22:	2202      	movs	r2, #2
 8001f24:	70da      	strb	r2, [r3, #3]
	Mode_config[4]=255;//no pic
 8001f26:	4bb5      	ldr	r3, [pc, #724]	; (80021fc <mode_init+0x328>)
 8001f28:	22ff      	movs	r2, #255	; 0xff
 8001f2a:	711a      	strb	r2, [r3, #4]
	Mode_config[5]=1;
 8001f2c:	4bb3      	ldr	r3, [pc, #716]	; (80021fc <mode_init+0x328>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	715a      	strb	r2, [r3, #5]
	Mode_config[6]=255;
 8001f32:	4bb2      	ldr	r3, [pc, #712]	; (80021fc <mode_init+0x328>)
 8001f34:	22ff      	movs	r2, #255	; 0xff
 8001f36:	719a      	strb	r2, [r3, #6]
	Mode_config[7]=1;
 8001f38:	4bb0      	ldr	r3, [pc, #704]	; (80021fc <mode_init+0x328>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	71da      	strb	r2, [r3, #7]
	Mode_config[8]=255;
 8001f3e:	4baf      	ldr	r3, [pc, #700]	; (80021fc <mode_init+0x328>)
 8001f40:	22ff      	movs	r2, #255	; 0xff
 8001f42:	721a      	strb	r2, [r3, #8]
	Mode_config[9]=1;
 8001f44:	4bad      	ldr	r3, [pc, #692]	; (80021fc <mode_init+0x328>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	725a      	strb	r2, [r3, #9]
	//test mode 2
	Mode_config[10]=0;
 8001f4a:	4bac      	ldr	r3, [pc, #688]	; (80021fc <mode_init+0x328>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	729a      	strb	r2, [r3, #10]
	Mode_config[11]=4;
 8001f50:	4baa      	ldr	r3, [pc, #680]	; (80021fc <mode_init+0x328>)
 8001f52:	2204      	movs	r2, #4
 8001f54:	72da      	strb	r2, [r3, #11]
	Mode_config[12]=1;
 8001f56:	4ba9      	ldr	r3, [pc, #676]	; (80021fc <mode_init+0x328>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	731a      	strb	r2, [r3, #12]
	Mode_config[13]=4;
 8001f5c:	4ba7      	ldr	r3, [pc, #668]	; (80021fc <mode_init+0x328>)
 8001f5e:	2204      	movs	r2, #4
 8001f60:	735a      	strb	r2, [r3, #13]
	Mode_config[14]=255;
 8001f62:	4ba6      	ldr	r3, [pc, #664]	; (80021fc <mode_init+0x328>)
 8001f64:	22ff      	movs	r2, #255	; 0xff
 8001f66:	739a      	strb	r2, [r3, #14]
	Mode_config[15]=1;
 8001f68:	4ba4      	ldr	r3, [pc, #656]	; (80021fc <mode_init+0x328>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	73da      	strb	r2, [r3, #15]
	Mode_config[16]=255;
 8001f6e:	4ba3      	ldr	r3, [pc, #652]	; (80021fc <mode_init+0x328>)
 8001f70:	22ff      	movs	r2, #255	; 0xff
 8001f72:	741a      	strb	r2, [r3, #16]
	Mode_config[17]=1;
 8001f74:	4ba1      	ldr	r3, [pc, #644]	; (80021fc <mode_init+0x328>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	745a      	strb	r2, [r3, #17]
	Mode_config[18]=255;
 8001f7a:	4ba0      	ldr	r3, [pc, #640]	; (80021fc <mode_init+0x328>)
 8001f7c:	22ff      	movs	r2, #255	; 0xff
 8001f7e:	749a      	strb	r2, [r3, #18]
	Mode_config[19]=1;
 8001f80:	4b9e      	ldr	r3, [pc, #632]	; (80021fc <mode_init+0x328>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	74da      	strb	r2, [r3, #19]
	//test mode 3
	Mode_config[20]=2;
 8001f86:	4b9d      	ldr	r3, [pc, #628]	; (80021fc <mode_init+0x328>)
 8001f88:	2202      	movs	r2, #2
 8001f8a:	751a      	strb	r2, [r3, #20]
	Mode_config[21]=2;
 8001f8c:	4b9b      	ldr	r3, [pc, #620]	; (80021fc <mode_init+0x328>)
 8001f8e:	2202      	movs	r2, #2
 8001f90:	755a      	strb	r2, [r3, #21]
	Mode_config[22]=3;
 8001f92:	4b9a      	ldr	r3, [pc, #616]	; (80021fc <mode_init+0x328>)
 8001f94:	2203      	movs	r2, #3
 8001f96:	759a      	strb	r2, [r3, #22]
	Mode_config[23]=2;
 8001f98:	4b98      	ldr	r3, [pc, #608]	; (80021fc <mode_init+0x328>)
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	75da      	strb	r2, [r3, #23]
	Mode_config[24]=4;
 8001f9e:	4b97      	ldr	r3, [pc, #604]	; (80021fc <mode_init+0x328>)
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	761a      	strb	r2, [r3, #24]
	Mode_config[25]=2;
 8001fa4:	4b95      	ldr	r3, [pc, #596]	; (80021fc <mode_init+0x328>)
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	765a      	strb	r2, [r3, #25]
	Mode_config[26]=5;
 8001faa:	4b94      	ldr	r3, [pc, #592]	; (80021fc <mode_init+0x328>)
 8001fac:	2205      	movs	r2, #5
 8001fae:	769a      	strb	r2, [r3, #26]
	Mode_config[27]=2;
 8001fb0:	4b92      	ldr	r3, [pc, #584]	; (80021fc <mode_init+0x328>)
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	76da      	strb	r2, [r3, #27]
	Mode_config[28]=255;
 8001fb6:	4b91      	ldr	r3, [pc, #580]	; (80021fc <mode_init+0x328>)
 8001fb8:	22ff      	movs	r2, #255	; 0xff
 8001fba:	771a      	strb	r2, [r3, #28]
	Mode_config[29]=1;
 8001fbc:	4b8f      	ldr	r3, [pc, #572]	; (80021fc <mode_init+0x328>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	775a      	strb	r2, [r3, #29]
	//test mode 4
	Mode_config[30]=2;
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <mode_init+0x328>)
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	779a      	strb	r2, [r3, #30]
	Mode_config[31]=4;
 8001fc8:	4b8c      	ldr	r3, [pc, #560]	; (80021fc <mode_init+0x328>)
 8001fca:	2204      	movs	r2, #4
 8001fcc:	77da      	strb	r2, [r3, #31]
	Mode_config[32]=3;
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <mode_init+0x328>)
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	f883 2020 	strb.w	r2, [r3, #32]
	Mode_config[33]=4;
 8001fd6:	4b89      	ldr	r3, [pc, #548]	; (80021fc <mode_init+0x328>)
 8001fd8:	2204      	movs	r2, #4
 8001fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Mode_config[34]=4;
 8001fde:	4b87      	ldr	r3, [pc, #540]	; (80021fc <mode_init+0x328>)
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Mode_config[35]=4;
 8001fe6:	4b85      	ldr	r3, [pc, #532]	; (80021fc <mode_init+0x328>)
 8001fe8:	2204      	movs	r2, #4
 8001fea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Mode_config[36]=5;
 8001fee:	4b83      	ldr	r3, [pc, #524]	; (80021fc <mode_init+0x328>)
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Mode_config[37]=4;
 8001ff6:	4b81      	ldr	r3, [pc, #516]	; (80021fc <mode_init+0x328>)
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Mode_config[38]=255;
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <mode_init+0x328>)
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Mode_config[39]=1;
 8002006:	4b7d      	ldr	r3, [pc, #500]	; (80021fc <mode_init+0x328>)
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//test mode 4
	Mode_config[40]=7;
 800200e:	4b7b      	ldr	r3, [pc, #492]	; (80021fc <mode_init+0x328>)
 8002010:	2207      	movs	r2, #7
 8002012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Mode_config[41]=2;
 8002016:	4b79      	ldr	r3, [pc, #484]	; (80021fc <mode_init+0x328>)
 8002018:	2202      	movs	r2, #2
 800201a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Mode_config[42]=8;
 800201e:	4b77      	ldr	r3, [pc, #476]	; (80021fc <mode_init+0x328>)
 8002020:	2208      	movs	r2, #8
 8002022:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Mode_config[43]=2;
 8002026:	4b75      	ldr	r3, [pc, #468]	; (80021fc <mode_init+0x328>)
 8002028:	2202      	movs	r2, #2
 800202a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Mode_config[44]=9;
 800202e:	4b73      	ldr	r3, [pc, #460]	; (80021fc <mode_init+0x328>)
 8002030:	2209      	movs	r2, #9
 8002032:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Mode_config[45]=2;
 8002036:	4b71      	ldr	r3, [pc, #452]	; (80021fc <mode_init+0x328>)
 8002038:	2202      	movs	r2, #2
 800203a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Mode_config[46]=10;
 800203e:	4b6f      	ldr	r3, [pc, #444]	; (80021fc <mode_init+0x328>)
 8002040:	220a      	movs	r2, #10
 8002042:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Mode_config[47]=2;
 8002046:	4b6d      	ldr	r3, [pc, #436]	; (80021fc <mode_init+0x328>)
 8002048:	2202      	movs	r2, #2
 800204a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Mode_config[48]=255;
 800204e:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <mode_init+0x328>)
 8002050:	22ff      	movs	r2, #255	; 0xff
 8002052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Mode_config[49]=1;
 8002056:	4b69      	ldr	r3, [pc, #420]	; (80021fc <mode_init+0x328>)
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	//test mode 6
	Mode_config[50]=7;
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <mode_init+0x328>)
 8002060:	2207      	movs	r2, #7
 8002062:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Mode_config[51]=4;
 8002066:	4b65      	ldr	r3, [pc, #404]	; (80021fc <mode_init+0x328>)
 8002068:	2204      	movs	r2, #4
 800206a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Mode_config[52]=8;
 800206e:	4b63      	ldr	r3, [pc, #396]	; (80021fc <mode_init+0x328>)
 8002070:	2208      	movs	r2, #8
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Mode_config[53]=4;
 8002076:	4b61      	ldr	r3, [pc, #388]	; (80021fc <mode_init+0x328>)
 8002078:	2204      	movs	r2, #4
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	Mode_config[54]=9;
 800207e:	4b5f      	ldr	r3, [pc, #380]	; (80021fc <mode_init+0x328>)
 8002080:	2209      	movs	r2, #9
 8002082:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Mode_config[55]=4;
 8002086:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <mode_init+0x328>)
 8002088:	2204      	movs	r2, #4
 800208a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Mode_config[56]=10;
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <mode_init+0x328>)
 8002090:	220a      	movs	r2, #10
 8002092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Mode_config[57]=4;
 8002096:	4b59      	ldr	r3, [pc, #356]	; (80021fc <mode_init+0x328>)
 8002098:	2204      	movs	r2, #4
 800209a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Mode_config[58]=255;
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <mode_init+0x328>)
 80020a0:	22ff      	movs	r2, #255	; 0xff
 80020a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Mode_config[59]=4;
 80020a6:	4b55      	ldr	r3, [pc, #340]	; (80021fc <mode_init+0x328>)
 80020a8:	2204      	movs	r2, #4
 80020aa:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//test mode 7
	Mode_config[60]=11;
 80020ae:	4b53      	ldr	r3, [pc, #332]	; (80021fc <mode_init+0x328>)
 80020b0:	220b      	movs	r2, #11
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Mode_config[61]=2;
 80020b6:	4b51      	ldr	r3, [pc, #324]	; (80021fc <mode_init+0x328>)
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Mode_config[62]=12;
 80020be:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <mode_init+0x328>)
 80020c0:	220c      	movs	r2, #12
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Mode_config[63]=2;
 80020c6:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <mode_init+0x328>)
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Mode_config[64]=255;
 80020ce:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <mode_init+0x328>)
 80020d0:	22ff      	movs	r2, #255	; 0xff
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Mode_config[65]=1;
 80020d6:	4b49      	ldr	r3, [pc, #292]	; (80021fc <mode_init+0x328>)
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Mode_config[66]=255;
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <mode_init+0x328>)
 80020e0:	22ff      	movs	r2, #255	; 0xff
 80020e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Mode_config[67]=1;
 80020e6:	4b45      	ldr	r3, [pc, #276]	; (80021fc <mode_init+0x328>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Mode_config[68]=255;
 80020ee:	4b43      	ldr	r3, [pc, #268]	; (80021fc <mode_init+0x328>)
 80020f0:	22ff      	movs	r2, #255	; 0xff
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Mode_config[69]=1;
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <mode_init+0x328>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	//test mode 8
	Mode_config[70]=11;
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <mode_init+0x328>)
 8002100:	220b      	movs	r2, #11
 8002102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Mode_config[71]=4;
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <mode_init+0x328>)
 8002108:	2204      	movs	r2, #4
 800210a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	Mode_config[72]=12;
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <mode_init+0x328>)
 8002110:	220c      	movs	r2, #12
 8002112:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Mode_config[73]=4;
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <mode_init+0x328>)
 8002118:	2204      	movs	r2, #4
 800211a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Mode_config[74]=255;
 800211e:	4b37      	ldr	r3, [pc, #220]	; (80021fc <mode_init+0x328>)
 8002120:	22ff      	movs	r2, #255	; 0xff
 8002122:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Mode_config[75]=1;
 8002126:	4b35      	ldr	r3, [pc, #212]	; (80021fc <mode_init+0x328>)
 8002128:	2201      	movs	r2, #1
 800212a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Mode_config[76]=255;
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <mode_init+0x328>)
 8002130:	22ff      	movs	r2, #255	; 0xff
 8002132:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Mode_config[77]=1;
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <mode_init+0x328>)
 8002138:	2201      	movs	r2, #1
 800213a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Mode_config[78]=255;
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <mode_init+0x328>)
 8002140:	22ff      	movs	r2, #255	; 0xff
 8002142:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Mode_config[79]=1;
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <mode_init+0x328>)
 8002148:	2201      	movs	r2, #1
 800214a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	//test mode 9
	Mode_config[80]=13;
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <mode_init+0x328>)
 8002150:	220d      	movs	r2, #13
 8002152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Mode_config[81]=2;
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <mode_init+0x328>)
 8002158:	2202      	movs	r2, #2
 800215a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Mode_config[82]=14;
 800215e:	4b27      	ldr	r3, [pc, #156]	; (80021fc <mode_init+0x328>)
 8002160:	220e      	movs	r2, #14
 8002162:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Mode_config[83]=2;
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <mode_init+0x328>)
 8002168:	2202      	movs	r2, #2
 800216a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Mode_config[84]=255;
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <mode_init+0x328>)
 8002170:	22ff      	movs	r2, #255	; 0xff
 8002172:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Mode_config[85]=1;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <mode_init+0x328>)
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Mode_config[86]=255;
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <mode_init+0x328>)
 8002180:	22ff      	movs	r2, #255	; 0xff
 8002182:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Mode_config[87]=1;
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <mode_init+0x328>)
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Mode_config[88]=255;
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <mode_init+0x328>)
 8002190:	22ff      	movs	r2, #255	; 0xff
 8002192:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	Mode_config[89]=1;
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <mode_init+0x328>)
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//test mode 10
	Mode_config[90]=13;
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <mode_init+0x328>)
 80021a0:	220d      	movs	r2, #13
 80021a2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	Mode_config[91]=4;
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <mode_init+0x328>)
 80021a8:	2204      	movs	r2, #4
 80021aa:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Mode_config[92]=14;
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <mode_init+0x328>)
 80021b0:	220e      	movs	r2, #14
 80021b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	Mode_config[93]=4;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <mode_init+0x328>)
 80021b8:	2204      	movs	r2, #4
 80021ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	Mode_config[94]=255;
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <mode_init+0x328>)
 80021c0:	22ff      	movs	r2, #255	; 0xff
 80021c2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Mode_config[95]=1;
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <mode_init+0x328>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	Mode_config[96]=255;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <mode_init+0x328>)
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	Mode_config[97]=1;
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <mode_init+0x328>)
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	Mode_config[98]=255;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <mode_init+0x328>)
 80021e0:	22ff      	movs	r2, #255	; 0xff
 80021e2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	Mode_config[99]=1;
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <mode_init+0x328>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2008bd38 	.word	0x2008bd38

08002200 <write_flash_config>:
void write_flash_config()
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
	//content_size�?????0=16kb, 1=32kb, 2=32kb, 3=64kb
	int divide_value = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64; //divide_value=4
 800220a:	4b60      	ldr	r3, [pc, #384]	; (800238c <write_flash_config+0x18c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <write_flash_config+0x18>
 8002212:	2304      	movs	r3, #4
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002216:	e00c      	b.n	8002232 <write_flash_config+0x32>
	else if(content_size==1) divide_value=256/128; //divide_value=2
 8002218:	4b5c      	ldr	r3, [pc, #368]	; (800238c <write_flash_config+0x18c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <write_flash_config+0x26>
 8002220:	2302      	movs	r3, #2
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002224:	e005      	b.n	8002232 <write_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;//divide_value=1
 8002226:	4b59      	ldr	r3, [pc, #356]	; (800238c <write_flash_config+0x18c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d101      	bne.n	8002232 <write_flash_config+0x32>
 800222e:	2301      	movs	r3, #1
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
	int image_id = 31;
 8002232:	231f      	movs	r3, #31
 8002234:	623b      	str	r3, [r7, #32]
	erase_flash_sector(image_id);
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fcea 	bl	8002c14 <erase_flash_sector>

	int image_id_H = image_id / divide_value;
 8002240:	6a3a      	ldr	r2, [r7, #32]
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	fb92 f3f3 	sdiv	r3, r2, r3
 8002248:	61fb      	str	r3, [r7, #28]
	int image_id_L = image_id % divide_value;
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002254:	fb01 f202 	mul.w	r2, r1, r2
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
	int count = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	fb92 f3f3 	sdiv	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	e076      	b.n	8002362 <write_flash_config+0x162>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800227a:	4845      	ldr	r0, [pc, #276]	; (8002390 <write_flash_config+0x190>)
 800227c:	f002 ffa8 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002280:	2306      	movs	r3, #6
 8002282:	753b      	strb	r3, [r7, #20]
 8002284:	f107 0114 	add.w	r1, r7, #20
 8002288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228c:	2201      	movs	r2, #1
 800228e:	4841      	ldr	r0, [pc, #260]	; (8002394 <write_flash_config+0x194>)
 8002290:	f005 f8fd 	bl	800748e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800229a:	483d      	ldr	r0, [pc, #244]	; (8002390 <write_flash_config+0x190>)
 800229c:	f002 ff98 	bl	80051d0 <HAL_GPIO_WritePin>
		delay_us(10);
 80022a0:	200a      	movs	r0, #10
 80022a2:	f000 ffaf 	bl	8003204 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ac:	4838      	ldr	r0, [pc, #224]	; (8002390 <write_flash_config+0x190>)
 80022ae:	f002 ff8f 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 80022b2:	2302      	movs	r3, #2
 80022b4:	743b      	strb	r3, [r7, #16]
 80022b6:	f107 0110 	add.w	r1, r7, #16
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	2201      	movs	r2, #1
 80022c0:	4834      	ldr	r0, [pc, #208]	; (8002394 <write_flash_config+0x194>)
 80022c2:	f005 f8e4 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	733b      	strb	r3, [r7, #12]
 80022cc:	f107 010c 	add.w	r1, r7, #12
 80022d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d4:	2201      	movs	r2, #1
 80022d6:	482f      	ldr	r0, [pc, #188]	; (8002394 <write_flash_config+0x194>)
 80022d8:	f005 f8d9 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	723b      	strb	r3, [r7, #8]
 80022e2:	f107 0108 	add.w	r1, r7, #8
 80022e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ea:	2201      	movs	r2, #1
 80022ec:	4829      	ldr	r0, [pc, #164]	; (8002394 <write_flash_config+0x194>)
 80022ee:	f005 f8ce 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80022f2:	2300      	movs	r3, #0
 80022f4:	713b      	strb	r3, [r7, #4]
 80022f6:	1d39      	adds	r1, r7, #4
 80022f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fc:	2201      	movs	r2, #1
 80022fe:	4825      	ldr	r0, [pc, #148]	; (8002394 <write_flash_config+0x194>)
 8002300:	f005 f8c5 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &Mode_config[0], Max_pic_per_mode*Max_mode_num*2, 1000);
 8002304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002308:	226e      	movs	r2, #110	; 0x6e
 800230a:	4923      	ldr	r1, [pc, #140]	; (8002398 <write_flash_config+0x198>)
 800230c:	4821      	ldr	r0, [pc, #132]	; (8002394 <write_flash_config+0x194>)
 800230e:	f005 f8be 	bl	800748e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002312:	2201      	movs	r2, #1
 8002314:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002318:	481d      	ldr	r0, [pc, #116]	; (8002390 <write_flash_config+0x190>)
 800231a:	f002 ff59 	bl	80051d0 <HAL_GPIO_WritePin>
		delay_us(10);
 800231e:	200a      	movs	r0, #10
 8002320:	f000 ff70 	bl	8003204 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232a:	4819      	ldr	r0, [pc, #100]	; (8002390 <write_flash_config+0x190>)
 800232c:	f002 ff50 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002330:	2304      	movs	r3, #4
 8002332:	703b      	strb	r3, [r7, #0]
 8002334:	4639      	mov	r1, r7
 8002336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233a:	2201      	movs	r2, #1
 800233c:	4815      	ldr	r0, [pc, #84]	; (8002394 <write_flash_config+0x194>)
 800233e:	f005 f8a6 	bl	800748e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002342:	2201      	movs	r2, #1
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	4811      	ldr	r0, [pc, #68]	; (8002390 <write_flash_config+0x190>)
 800234a:	f002 ff41 	bl	80051d0 <HAL_GPIO_WritePin>
		delay_us(1000);
 800234e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002352:	f000 ff57 	bl	8003204 <delay_us>
		count++;
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	3301      	adds	r3, #1
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	3301      	adds	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	3301      	adds	r3, #1
 8002366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800236a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800236c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	461a      	mov	r2, r3
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	4293      	cmp	r3, r2
 800237a:	f4ff af7b 	bcc.w	8002274 <write_flash_config+0x74>
	}

	flash_wait_nobusy();
 800237e:	f7ff fd9b 	bl	8001eb8 <flash_wait_nobusy>
}
 8002382:	bf00      	nop
 8002384:	3730      	adds	r7, #48	; 0x30
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000000b 	.word	0x2000000b
 8002390:	48000400 	.word	0x48000400
 8002394:	2000016c 	.word	0x2000016c
 8002398:	2008bd38 	.word	0x2008bd38

0800239c <read_flash_config>:
void read_flash_config()
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
	int divide_value = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
	if(content_size==0) divide_value=256/64;
 80023a6:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <read_flash_config+0x10c>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <read_flash_config+0x18>
 80023ae:	2304      	movs	r3, #4
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	e00c      	b.n	80023ce <read_flash_config+0x32>
	else if(content_size==1) divide_value=256/128;
 80023b4:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <read_flash_config+0x10c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d102      	bne.n	80023c2 <read_flash_config+0x26>
 80023bc:	2302      	movs	r3, #2
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	e005      	b.n	80023ce <read_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <read_flash_config+0x10c>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d101      	bne.n	80023ce <read_flash_config+0x32>
 80023ca:	2301      	movs	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24

	int image_id= 31;
 80023ce:	231f      	movs	r3, #31
 80023d0:	61fb      	str	r3, [r7, #28]
	int image_id_H = image_id / divide_value;
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80023da:	61bb      	str	r3, [r7, #24]
	int image_id_L = image_id % divide_value;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	fb93 f2f2 	sdiv	r2, r3, r2
 80023e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e6:	fb01 f202 	mul.w	r2, r1, r2
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
	int count = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80023f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	e03d      	b.n	8002482 <read_flash_config+0xe6>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240c:	4827      	ldr	r0, [pc, #156]	; (80024ac <read_flash_config+0x110>)
 800240e:	f002 fedf 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 8002412:	2303      	movs	r3, #3
 8002414:	733b      	strb	r3, [r7, #12]
 8002416:	f107 010c 	add.w	r1, r7, #12
 800241a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241e:	2201      	movs	r2, #1
 8002420:	4823      	ldr	r0, [pc, #140]	; (80024b0 <read_flash_config+0x114>)
 8002422:	f005 f834 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	723b      	strb	r3, [r7, #8]
 800242c:	f107 0108 	add.w	r1, r7, #8
 8002430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002434:	2201      	movs	r2, #1
 8002436:	481e      	ldr	r0, [pc, #120]	; (80024b0 <read_flash_config+0x114>)
 8002438:	f005 f829 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	713b      	strb	r3, [r7, #4]
 8002442:	1d39      	adds	r1, r7, #4
 8002444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002448:	2201      	movs	r2, #1
 800244a:	4819      	ldr	r0, [pc, #100]	; (80024b0 <read_flash_config+0x114>)
 800244c:	f005 f81f 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002450:	2300      	movs	r3, #0
 8002452:	703b      	strb	r3, [r7, #0]
 8002454:	4639      	mov	r1, r7
 8002456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245a:	2201      	movs	r2, #1
 800245c:	4814      	ldr	r0, [pc, #80]	; (80024b0 <read_flash_config+0x114>)
 800245e:	f005 f816 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &Mode_config[0],  Max_pic_per_mode*Max_mode_num*2, 1000);
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	226e      	movs	r2, #110	; 0x6e
 8002468:	4912      	ldr	r1, [pc, #72]	; (80024b4 <read_flash_config+0x118>)
 800246a:	4811      	ldr	r0, [pc, #68]	; (80024b0 <read_flash_config+0x114>)
 800246c:	f005 f97d 	bl	800776a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002476:	480d      	ldr	r0, [pc, #52]	; (80024ac <read_flash_config+0x110>)
 8002478:	f002 feaa 	bl	80051d0 <HAL_GPIO_WritePin>
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	3301      	adds	r3, #1
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3301      	adds	r3, #1
 8002486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	461a      	mov	r2, r3
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	4293      	cmp	r3, r2
 800249a:	d3b4      	bcc.n	8002406 <read_flash_config+0x6a>
	}
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000000b 	.word	0x2000000b
 80024ac:	48000400 	.word	0x48000400
 80024b0:	2000016c 	.word	0x2000016c
 80024b4:	2008bd38 	.word	0x2008bd38

080024b8 <write_flash_page>:
void write_flash_page(uint8_t *data, uint8_t image_id)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08e      	sub	sp, #56	; 0x38
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
	if(content_size==0) divide_value=256/64;
 80024c8:	4b60      	ldr	r3, [pc, #384]	; (800264c <write_flash_page+0x194>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <write_flash_page+0x1e>
 80024d0:	2304      	movs	r3, #4
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
 80024d4:	e00c      	b.n	80024f0 <write_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 80024d6:	4b5d      	ldr	r3, [pc, #372]	; (800264c <write_flash_page+0x194>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <write_flash_page+0x2c>
 80024de:	2302      	movs	r3, #2
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
 80024e2:	e005      	b.n	80024f0 <write_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <write_flash_page+0x194>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d101      	bne.n	80024f0 <write_flash_page+0x38>
 80024ec:	2301      	movs	r3, #1
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34

	int image_id_H = image_id / divide_value;
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
	int image_id_L = image_id % divide_value;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fe:	fb93 f2f2 	sdiv	r2, r3, r2
 8002502:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002504:	fb01 f202 	mul.w	r2, r1, r2
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
	int count = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002516:	fb92 f3f3 	sdiv	r3, r2, r3
 800251a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002522:	e07e      	b.n	8002622 <write_flash_page+0x16a>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002524:	2200      	movs	r2, #0
 8002526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800252a:	4849      	ldr	r0, [pc, #292]	; (8002650 <write_flash_page+0x198>)
 800252c:	f002 fe50 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002530:	2306      	movs	r3, #6
 8002532:	f887 3020 	strb.w	r3, [r7, #32]
 8002536:	f107 0120 	add.w	r1, r7, #32
 800253a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253e:	2201      	movs	r2, #1
 8002540:	4844      	ldr	r0, [pc, #272]	; (8002654 <write_flash_page+0x19c>)
 8002542:	f004 ffa4 	bl	800748e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002546:	2201      	movs	r2, #1
 8002548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800254c:	4840      	ldr	r0, [pc, #256]	; (8002650 <write_flash_page+0x198>)
 800254e:	f002 fe3f 	bl	80051d0 <HAL_GPIO_WritePin>
		delay_us(10);
 8002552:	200a      	movs	r0, #10
 8002554:	f000 fe56 	bl	8003204 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800255e:	483c      	ldr	r0, [pc, #240]	; (8002650 <write_flash_page+0x198>)
 8002560:	f002 fe36 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 8002564:	2302      	movs	r3, #2
 8002566:	773b      	strb	r3, [r7, #28]
 8002568:	f107 011c 	add.w	r1, r7, #28
 800256c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002570:	2201      	movs	r2, #1
 8002572:	4838      	ldr	r0, [pc, #224]	; (8002654 <write_flash_page+0x19c>)
 8002574:	f004 ff8b 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	b2db      	uxtb	r3, r3
 800257c:	763b      	strb	r3, [r7, #24]
 800257e:	f107 0118 	add.w	r1, r7, #24
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	2201      	movs	r2, #1
 8002588:	4832      	ldr	r0, [pc, #200]	; (8002654 <write_flash_page+0x19c>)
 800258a:	f004 ff80 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	b2db      	uxtb	r3, r3
 8002592:	753b      	strb	r3, [r7, #20]
 8002594:	f107 0114 	add.w	r1, r7, #20
 8002598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259c:	2201      	movs	r2, #1
 800259e:	482d      	ldr	r0, [pc, #180]	; (8002654 <write_flash_page+0x19c>)
 80025a0:	f004 ff75 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80025a4:	2300      	movs	r3, #0
 80025a6:	743b      	strb	r3, [r7, #16]
 80025a8:	f107 0110 	add.w	r1, r7, #16
 80025ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b0:	2201      	movs	r2, #1
 80025b2:	4828      	ldr	r0, [pc, #160]	; (8002654 <write_flash_page+0x19c>)
 80025b4:	f004 ff6b 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &data[count*256], 256, 1000);
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	461a      	mov	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1899      	adds	r1, r3, r2
 80025c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ca:	4822      	ldr	r0, [pc, #136]	; (8002654 <write_flash_page+0x19c>)
 80025cc:	f004 ff5f 	bl	800748e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80025d0:	2201      	movs	r2, #1
 80025d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d6:	481e      	ldr	r0, [pc, #120]	; (8002650 <write_flash_page+0x198>)
 80025d8:	f002 fdfa 	bl	80051d0 <HAL_GPIO_WritePin>
		delay_us(10);
 80025dc:	200a      	movs	r0, #10
 80025de:	f000 fe11 	bl	8003204 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e8:	4819      	ldr	r0, [pc, #100]	; (8002650 <write_flash_page+0x198>)
 80025ea:	f002 fdf1 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 80025ee:	2304      	movs	r3, #4
 80025f0:	733b      	strb	r3, [r7, #12]
 80025f2:	f107 010c 	add.w	r1, r7, #12
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	2201      	movs	r2, #1
 80025fc:	4815      	ldr	r0, [pc, #84]	; (8002654 <write_flash_page+0x19c>)
 80025fe:	f004 ff46 	bl	800748e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002608:	4811      	ldr	r0, [pc, #68]	; (8002650 <write_flash_page+0x198>)
 800260a:	f002 fde1 	bl	80051d0 <HAL_GPIO_WritePin>
		delay_us(1000);
 800260e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002612:	f000 fdf7 	bl	8003204 <delay_us>
		count++;
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	3301      	adds	r3, #1
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	3301      	adds	r3, #1
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	3301      	adds	r3, #1
 8002626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800262a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	461a      	mov	r2, r3
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	4293      	cmp	r3, r2
 800263a:	f4ff af73 	bcc.w	8002524 <write_flash_page+0x6c>
	}

	flash_wait_nobusy();
 800263e:	f7ff fc3b 	bl	8001eb8 <flash_wait_nobusy>
}
 8002642:	bf00      	nop
 8002644:	3738      	adds	r7, #56	; 0x38
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000000b 	.word	0x2000000b
 8002650:	48000400 	.word	0x48000400
 8002654:	2000016c 	.word	0x2000016c

08002658 <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <read_flash_page+0x120>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <read_flash_page+0x1e>
 8002670:	2304      	movs	r3, #4
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002674:	e00c      	b.n	8002690 <read_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <read_flash_page+0x120>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <read_flash_page+0x2c>
 800267e:	2302      	movs	r3, #2
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002682:	e005      	b.n	8002690 <read_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8002684:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <read_flash_page+0x120>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d101      	bne.n	8002690 <read_flash_page+0x38>
 800268c:	2301      	movs	r3, #1
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c

	int image_id_H = image_id / divide_value;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	fb92 f3f3 	sdiv	r3, r2, r3
 8002698:	623b      	str	r3, [r7, #32]
	int image_id_L = image_id % divide_value;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269e:	fb93 f2f2 	sdiv	r2, r3, r2
 80026a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026a4:	fb01 f202 	mul.w	r2, r1, r2
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	61fb      	str	r3, [r7, #28]
	int count = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80026b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	e047      	b.n	8002754 <read_flash_page+0xfc>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80026c4:	2200      	movs	r2, #0
 80026c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ca:	482c      	ldr	r0, [pc, #176]	; (800277c <read_flash_page+0x124>)
 80026cc:	f002 fd80 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 80026d0:	2303      	movs	r3, #3
 80026d2:	763b      	strb	r3, [r7, #24]
 80026d4:	f107 0118 	add.w	r1, r7, #24
 80026d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026dc:	2201      	movs	r2, #1
 80026de:	4828      	ldr	r0, [pc, #160]	; (8002780 <read_flash_page+0x128>)
 80026e0:	f004 fed5 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	753b      	strb	r3, [r7, #20]
 80026ea:	f107 0114 	add.w	r1, r7, #20
 80026ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f2:	2201      	movs	r2, #1
 80026f4:	4822      	ldr	r0, [pc, #136]	; (8002780 <read_flash_page+0x128>)
 80026f6:	f004 feca 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	743b      	strb	r3, [r7, #16]
 8002700:	f107 0110 	add.w	r1, r7, #16
 8002704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002708:	2201      	movs	r2, #1
 800270a:	481d      	ldr	r0, [pc, #116]	; (8002780 <read_flash_page+0x128>)
 800270c:	f004 febf 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002710:	2300      	movs	r3, #0
 8002712:	733b      	strb	r3, [r7, #12]
 8002714:	f107 010c 	add.w	r1, r7, #12
 8002718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271c:	2201      	movs	r2, #1
 800271e:	4818      	ldr	r0, [pc, #96]	; (8002780 <read_flash_page+0x128>)
 8002720:	f004 feb5 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &data[count*256], 256, 1000);
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	461a      	mov	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	1899      	adds	r1, r3, r2
 800272e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002736:	4812      	ldr	r0, [pc, #72]	; (8002780 <read_flash_page+0x128>)
 8002738:	f005 f817 	bl	800776a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002742:	480e      	ldr	r0, [pc, #56]	; (800277c <read_flash_page+0x124>)
 8002744:	f002 fd44 	bl	80051d0 <HAL_GPIO_WritePin>
		count++;
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	3301      	adds	r3, #1
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	3301      	adds	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	3301      	adds	r3, #1
 8002758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800275c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275e:	fb91 f2f2 	sdiv	r2, r1, r2
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	461a      	mov	r2, r3
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	4293      	cmp	r3, r2
 800276c:	d3aa      	bcc.n	80026c4 <read_flash_page+0x6c>
	}
}
 800276e:	bf00      	nop
 8002770:	bf00      	nop
 8002772:	3730      	adds	r7, #48	; 0x30
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	2000000b 	.word	0x2000000b
 800277c:	48000400 	.word	0x48000400
 8002780:	2000016c 	.word	0x2000016c

08002784 <read_flash_page_DMA2d>:

void read_flash_page_DMA2d(uint8_t *data, uint8_t image_id)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	f5ad 4d5e 	sub.w	sp, sp, #56832	; 0xde00
 800278a:	b0be      	sub	sp, #248	; 0xf8
 800278c:	af00      	add	r7, sp, #0
 800278e:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 8002792:	f6a3 63f4 	subw	r3, r3, #3828	; 0xef4
 8002796:	6018      	str	r0, [r3, #0]
 8002798:	460a      	mov	r2, r1
 800279a:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 800279e:	f6a3 63f5 	subw	r3, r3, #3829	; 0xef5
 80027a2:	701a      	strb	r2, [r3, #0]
	int divide_value = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80027aa:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 80027ae:	6013      	str	r3, [r2, #0]
	if(content_size==0) divide_value=256/64;
 80027b0:	4bc1      	ldr	r3, [pc, #772]	; (8002ab8 <read_flash_page_DMA2d+0x334>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <read_flash_page_DMA2d+0x42>
 80027b8:	2304      	movs	r3, #4
 80027ba:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80027be:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e014      	b.n	80027f0 <read_flash_page_DMA2d+0x6c>
	else if(content_size==1) divide_value=256/128;
 80027c6:	4bbc      	ldr	r3, [pc, #752]	; (8002ab8 <read_flash_page_DMA2d+0x334>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d106      	bne.n	80027dc <read_flash_page_DMA2d+0x58>
 80027ce:	2302      	movs	r3, #2
 80027d0:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80027d4:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e009      	b.n	80027f0 <read_flash_page_DMA2d+0x6c>
	else if(content_size==2) divide_value=256/256;
 80027dc:	4bb6      	ldr	r3, [pc, #728]	; (8002ab8 <read_flash_page_DMA2d+0x334>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d105      	bne.n	80027f0 <read_flash_page_DMA2d+0x6c>
 80027e4:	2301      	movs	r3, #1
 80027e6:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80027ea:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 80027ee:	6013      	str	r3, [r2, #0]
	uint8_t frame_buf[MAX_IMAGE_SIZE] = {0};
 80027f0:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 80027f4:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	3304      	adds	r3, #4
 80027fe:	f64d 62a4 	movw	r2, #56996	; 0xdea4
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f006 ffc3 	bl	8009790 <memset>
	memset(frame_buf, 0, sizeof(frame_buf));
 800280a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800280e:	3bdc      	subs	r3, #220	; 0xdc
 8002810:	f64d 62a8 	movw	r2, #57000	; 0xdea8
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f006 ffba 	bl	8009790 <memset>

	int image_id_H = image_id / divide_value;
 800281c:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 8002820:	f6a3 63f5 	subw	r3, r3, #3829	; 0xef5
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 800282a:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fb92 f3f3 	sdiv	r3, r2, r3
 8002834:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002838:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 800283c:	6013      	str	r3, [r2, #0]
	int image_id_L = image_id % divide_value;
 800283e:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 8002842:	f6a3 63f5 	subw	r3, r3, #3829	; 0xef5
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 800284c:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	fb93 f2f2 	sdiv	r2, r3, r2
 8002856:	f507 415e 	add.w	r1, r7, #56832	; 0xde00
 800285a:	f101 01f4 	add.w	r1, r1, #244	; 0xf4
 800285e:	6809      	ldr	r1, [r1, #0]
 8002860:	fb01 f202 	mul.w	r2, r1, r2
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 800286a:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 800286e:	6013      	str	r3, [r2, #0]
	int count = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002876:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 800287a:	6013      	str	r3, [r2, #0]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800287c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002880:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002884:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fb92 f3f3 	sdiv	r3, r2, r3
 800288e:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002892:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80028a0:	f102 02ec 	add.w	r2, r2, #236	; 0xec
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e078      	b.n	800299a <read_flash_page_DMA2d+0x216>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ae:	4883      	ldr	r0, [pc, #524]	; (8002abc <read_flash_page_DMA2d+0x338>)
 80028b0:	f002 fc8e 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 80028b4:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 80028b8:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 80028bc:	2203      	movs	r2, #3
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80028c4:	39e0      	subs	r1, #224	; 0xe0
 80028c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ca:	2201      	movs	r2, #1
 80028cc:	487c      	ldr	r0, [pc, #496]	; (8002ac0 <read_flash_page_DMA2d+0x33c>)
 80028ce:	f004 fdde 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80028d2:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 80028d6:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 80028e2:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80028ec:	39e4      	subs	r1, #228	; 0xe4
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	2201      	movs	r2, #1
 80028f4:	4872      	ldr	r0, [pc, #456]	; (8002ac0 <read_flash_page_DMA2d+0x33c>)
 80028f6:	f004 fdca 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80028fa:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 80028fe:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 800290a:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8002914:	39e8      	subs	r1, #232	; 0xe8
 8002916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291a:	2201      	movs	r2, #1
 800291c:	4868      	ldr	r0, [pc, #416]	; (8002ac0 <read_flash_page_DMA2d+0x33c>)
 800291e:	f004 fdb6 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002922:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 8002926:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8002932:	39ec      	subs	r1, #236	; 0xec
 8002934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002938:	2201      	movs	r2, #1
 800293a:	4861      	ldr	r0, [pc, #388]	; (8002ac0 <read_flash_page_DMA2d+0x33c>)
 800293c:	f004 fda7 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &frame_buf[count*256], 256, 1000);
 8002940:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002944:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	021a      	lsls	r2, r3, #8
 800294c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002950:	3bdc      	subs	r3, #220	; 0xdc
 8002952:	1899      	adds	r1, r3, r2
 8002954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800295c:	4858      	ldr	r0, [pc, #352]	; (8002ac0 <read_flash_page_DMA2d+0x33c>)
 800295e:	f004 ff04 	bl	800776a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002962:	2201      	movs	r2, #1
 8002964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002968:	4854      	ldr	r0, [pc, #336]	; (8002abc <read_flash_page_DMA2d+0x338>)
 800296a:	f002 fc31 	bl	80051d0 <HAL_GPIO_WritePin>
		count++;
 800296e:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002972:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 800297e:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 8002982:	6013      	str	r3, [r2, #0]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002984:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002988:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002994:	f102 02ec 	add.w	r2, r2, #236	; 0xec
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 800299e:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029aa:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80029ae:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	fb91 f2f2 	sdiv	r2, r1, r2
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 80029c2:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4293      	cmp	r3, r2
 80029ca:	f4ff af6d 	bcc.w	80028a8 <read_flash_page_DMA2d+0x124>
	}

	int num_ones = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80029d4:	f102 02e8 	add.w	r2, r2, #232	; 0xe8
 80029d8:	6013      	str	r3, [r2, #0]
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <read_flash_page_DMA2d+0x340>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b21a      	sxth	r2, r3
 80029e0:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <read_flash_page_DMA2d+0x344>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	b21b      	sxth	r3, r3
 80029e8:	4313      	orrs	r3, r2
 80029ea:	b21b      	sxth	r3, r3
 80029ec:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80029f0:	f102 02c6 	add.w	r2, r2, #198	; 0xc6
 80029f4:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < 12; i++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80029fc:	f102 02e4 	add.w	r2, r2, #228	; 0xe4
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e025      	b.n	8002a50 <read_flash_page_DMA2d+0x2cc>
	{
		if (Pixel_Mapping_one & (1 << i))
 8002a04:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002a08:	f103 03c6 	add.w	r3, r3, #198	; 0xc6
 8002a0c:	881a      	ldrh	r2, [r3, #0]
 8002a0e:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002a12:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa42 f303 	asr.w	r3, r2, r3
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <read_flash_page_DMA2d+0x2b6>
		{
			num_ones++;
 8002a24:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002a28:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a34:	f102 02e8 	add.w	r2, r2, #232	; 0xe8
 8002a38:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 12; i++)
 8002a3a:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002a3e:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a4a:	f102 02e4 	add.w	r2, r2, #228	; 0xe4
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002a54:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b0b      	cmp	r3, #11
 8002a5c:	ddd2      	ble.n	8002a04 <read_flash_page_DMA2d+0x280>
		}
	}

	int frame_buf_count = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a64:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8002a68:	6013      	str	r3, [r2, #0]
	int Pixel_Mapping_one_count = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a70:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8002a74:	6013      	str	r3, [r2, #0]
	int c = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a7c:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8002a80:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8002a82:	2300      	movs	r3, #0
 8002a84:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a88:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e0a7      	b.n	8002be0 <read_flash_page_DMA2d+0x45c>
	{
		Pixel_Mapping_one_count = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a96:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8002a9a:	6013      	str	r3, [r2, #0]
		c = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002aa2:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8002aa6:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < 12; j++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002aae:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e06d      	b.n	8002b92 <read_flash_page_DMA2d+0x40e>
 8002ab6:	bf00      	nop
 8002ab8:	2000000b 	.word	0x2000000b
 8002abc:	48000400 	.word	0x48000400
 8002ac0:	2000016c 	.word	0x2000016c
 8002ac4:	2000001c 	.word	0x2000001c
 8002ac8:	2000001d 	.word	0x2000001d
		{
			if (Pixel_Mapping_one & (1 << j))
 8002acc:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002ad0:	f103 03c6 	add.w	r3, r3, #198	; 0xc6
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002ada:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa42 f303 	asr.w	r3, r2, r3
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d03c      	beq.n	8002b66 <read_flash_page_DMA2d+0x3e2>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8002aec:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002af0:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002afa:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b06:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8002b0a:	6013      	str	r3, [r2, #0]
				data[frame_buf_count] = frame_buf[i + c];
 8002b0c:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b10:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b1a:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	441a      	add	r2, r3
 8002b22:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b26:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f607 61f8 	addw	r1, r7, #3832	; 0xef8
 8002b30:	f6a1 61f4 	subw	r1, r1, #3828	; 0xef4
 8002b34:	6809      	ldr	r1, [r1, #0]
 8002b36:	440b      	add	r3, r1
 8002b38:	f607 61f8 	addw	r1, r7, #3832	; 0xef8
 8002b3c:	f6a1 61dc 	subw	r1, r1, #3804	; 0xedc
 8002b40:	5c8a      	ldrb	r2, [r1, r2]
 8002b42:	701a      	strb	r2, [r3, #0]
				c++;
 8002b44:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b48:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b54:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8002b58:	6013      	str	r3, [r2, #0]
				Pixel_Mapping_one_count = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b60:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8002b64:	6013      	str	r3, [r2, #0]
			}
			Pixel_Mapping_one_count++;
 8002b66:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b6a:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b76:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8002b7a:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < 12; j++)
 8002b7c:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b80:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b8c:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b96:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b0b      	cmp	r3, #11
 8002b9e:	dd95      	ble.n	8002acc <read_flash_page_DMA2d+0x348>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8002ba0:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002ba4:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002bae:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002bba:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8002bbe:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8002bc0:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002bc4:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002bce:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002bda:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <read_flash_page_DMA2d+0x488>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <read_flash_page_DMA2d+0x48c>)
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	fb03 f202 	mul.w	r2, r3, r2
 8002bec:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002bf0:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	f63f af4a 	bhi.w	8002a90 <read_flash_page_DMA2d+0x30c>
	}
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	f507 475e 	add.w	r7, r7, #56832	; 0xde00
 8002c04:	37f8      	adds	r7, #248	; 0xf8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20000004 	.word	0x20000004

08002c14 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
	int divide_value = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8002c22:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <erase_flash_sector+0x1a0>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <erase_flash_sector+0x1c>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2e:	e00c      	b.n	8002c4a <erase_flash_sector+0x36>
	else if(content_size==1) divide_value=256/128;
 8002c30:	4b60      	ldr	r3, [pc, #384]	; (8002db4 <erase_flash_sector+0x1a0>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d102      	bne.n	8002c3e <erase_flash_sector+0x2a>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3c:	e005      	b.n	8002c4a <erase_flash_sector+0x36>
	else if(content_size==2) divide_value=256/256;
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <erase_flash_sector+0x1a0>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d101      	bne.n	8002c4a <erase_flash_sector+0x36>
 8002c46:	2301      	movs	r3, #1
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t page_count = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(content_size==0) page_count=16/4;
 8002c50:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <erase_flash_sector+0x1a0>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <erase_flash_sector+0x4c>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c5e:	e00e      	b.n	8002c7e <erase_flash_sector+0x6a>
	else if(content_size==1) page_count=32/4;
 8002c60:	4b54      	ldr	r3, [pc, #336]	; (8002db4 <erase_flash_sector+0x1a0>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d103      	bne.n	8002c70 <erase_flash_sector+0x5c>
 8002c68:	2308      	movs	r3, #8
 8002c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c6e:	e006      	b.n	8002c7e <erase_flash_sector+0x6a>
	else if(content_size==2) page_count=64/4;
 8002c70:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <erase_flash_sector+0x1a0>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d102      	bne.n	8002c7e <erase_flash_sector+0x6a>
 8002c78:	2310      	movs	r3, #16
 8002c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	int image_id_H = image_id / divide_value;
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
	int image_id_L = image_id % divide_value;
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c8c:	fb93 f2f2 	sdiv	r2, r3, r2
 8002c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c92:	fb01 f202 	mul.w	r2, r1, r2
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	623b      	str	r3, [r7, #32]

	reset_flash_software();
 8002c9a:	f000 f891 	bl	8002dc0 <reset_flash_software>

	for(uint8_t i = 0; i < page_count; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ca4:	e07a      	b.n	8002d9c <erase_flash_sector+0x188>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cac:	4842      	ldr	r0, [pc, #264]	; (8002db8 <erase_flash_sector+0x1a4>)
 8002cae:	f002 fa8f 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	773b      	strb	r3, [r7, #28]
 8002cb6:	f107 011c 	add.w	r1, r7, #28
 8002cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	483e      	ldr	r0, [pc, #248]	; (8002dbc <erase_flash_sector+0x1a8>)
 8002cc2:	f004 fbe4 	bl	800748e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ccc:	483a      	ldr	r0, [pc, #232]	; (8002db8 <erase_flash_sector+0x1a4>)
 8002cce:	f002 fa7f 	bl	80051d0 <HAL_GPIO_WritePin>
		delay_us(10);
 8002cd2:	200a      	movs	r0, #10
 8002cd4:	f000 fa96 	bl	8003204 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cde:	4836      	ldr	r0, [pc, #216]	; (8002db8 <erase_flash_sector+0x1a4>)
 8002ce0:	f002 fa76 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x20}, 1, 1000);
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	763b      	strb	r3, [r7, #24]
 8002ce8:	f107 0118 	add.w	r1, r7, #24
 8002cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4832      	ldr	r0, [pc, #200]	; (8002dbc <erase_flash_sector+0x1a8>)
 8002cf4:	f004 fbcb 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	753b      	strb	r3, [r7, #20]
 8002cfe:	f107 0114 	add.w	r1, r7, #20
 8002d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d06:	2201      	movs	r2, #1
 8002d08:	482c      	ldr	r0, [pc, #176]	; (8002dbc <erase_flash_sector+0x1a8>)
 8002d0a:	f004 fbc0 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){(image_id_L*(0x10*page_count)) + (0x10*i)}, 1, 1000);
 8002d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d12:	6a3a      	ldr	r2, [r7, #32]
 8002d14:	fb03 f202 	mul.w	r2, r3, r2
 8002d18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002d1c:	4413      	add	r3, r2
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	743b      	strb	r3, [r7, #16]
 8002d26:	f107 0110 	add.w	r1, r7, #16
 8002d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4822      	ldr	r0, [pc, #136]	; (8002dbc <erase_flash_sector+0x1a8>)
 8002d32:	f004 fbac 	bl	800748e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002d36:	2300      	movs	r3, #0
 8002d38:	733b      	strb	r3, [r7, #12]
 8002d3a:	f107 010c 	add.w	r1, r7, #12
 8002d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d42:	2201      	movs	r2, #1
 8002d44:	481d      	ldr	r0, [pc, #116]	; (8002dbc <erase_flash_sector+0x1a8>)
 8002d46:	f004 fba2 	bl	800748e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d50:	4819      	ldr	r0, [pc, #100]	; (8002db8 <erase_flash_sector+0x1a4>)
 8002d52:	f002 fa3d 	bl	80051d0 <HAL_GPIO_WritePin>
		delay_us(10);
 8002d56:	200a      	movs	r0, #10
 8002d58:	f000 fa54 	bl	8003204 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d62:	4815      	ldr	r0, [pc, #84]	; (8002db8 <erase_flash_sector+0x1a4>)
 8002d64:	f002 fa34 	bl	80051d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002d68:	2304      	movs	r3, #4
 8002d6a:	723b      	strb	r3, [r7, #8]
 8002d6c:	f107 0108 	add.w	r1, r7, #8
 8002d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d74:	2201      	movs	r2, #1
 8002d76:	4811      	ldr	r0, [pc, #68]	; (8002dbc <erase_flash_sector+0x1a8>)
 8002d78:	f004 fb89 	bl	800748e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d82:	480d      	ldr	r0, [pc, #52]	; (8002db8 <erase_flash_sector+0x1a4>)
 8002d84:	f002 fa24 	bl	80051d0 <HAL_GPIO_WritePin>
		delay_us(10);
 8002d88:	200a      	movs	r0, #10
 8002d8a:	f000 fa3b 	bl	8003204 <delay_us>

		flash_wait_nobusy();
 8002d8e:	f7ff f893 	bl	8001eb8 <flash_wait_nobusy>
	for(uint8_t i = 0; i < page_count; i++)
 8002d92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002d96:	3301      	adds	r3, #1
 8002d98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d9c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002da0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002da4:	429a      	cmp	r2, r3
 8002da6:	f4ff af7e 	bcc.w	8002ca6 <erase_flash_sector+0x92>
	}
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	3730      	adds	r7, #48	; 0x30
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	2000000b 	.word	0x2000000b
 8002db8:	48000400 	.word	0x48000400
 8002dbc:	2000016c 	.word	0x2000016c

08002dc0 <reset_flash_software>:

void reset_flash_software()
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dcc:	481a      	ldr	r0, [pc, #104]	; (8002e38 <reset_flash_software+0x78>)
 8002dce:	f002 f9ff 	bl	80051d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x66}, 1, 1000);
 8002dd2:	2366      	movs	r3, #102	; 0x66
 8002dd4:	713b      	strb	r3, [r7, #4]
 8002dd6:	1d39      	adds	r1, r7, #4
 8002dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4817      	ldr	r0, [pc, #92]	; (8002e3c <reset_flash_software+0x7c>)
 8002de0:	f004 fb55 	bl	800748e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002de4:	2201      	movs	r2, #1
 8002de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dea:	4813      	ldr	r0, [pc, #76]	; (8002e38 <reset_flash_software+0x78>)
 8002dec:	f002 f9f0 	bl	80051d0 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002df0:	2001      	movs	r0, #1
 8002df2:	f000 fa22 	bl	800323a <delay_100ns>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002df6:	2200      	movs	r2, #0
 8002df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dfc:	480e      	ldr	r0, [pc, #56]	; (8002e38 <reset_flash_software+0x78>)
 8002dfe:	f002 f9e7 	bl	80051d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x99}, 1, 1000);
 8002e02:	2399      	movs	r3, #153	; 0x99
 8002e04:	703b      	strb	r3, [r7, #0]
 8002e06:	4639      	mov	r1, r7
 8002e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	480b      	ldr	r0, [pc, #44]	; (8002e3c <reset_flash_software+0x7c>)
 8002e10:	f004 fb3d 	bl	800748e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002e14:	2201      	movs	r2, #1
 8002e16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e1a:	4807      	ldr	r0, [pc, #28]	; (8002e38 <reset_flash_software+0x78>)
 8002e1c:	f002 f9d8 	bl	80051d0 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002e20:	2001      	movs	r0, #1
 8002e22:	f000 fa0a 	bl	800323a <delay_100ns>
	delay_us(1000);
 8002e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e2a:	f000 f9eb 	bl	8003204 <delay_us>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	48000400 	.word	0x48000400
 8002e3c:	2000016c 	.word	0x2000016c

08002e40 <my_MX_DSIHOST_DSI_Init>:
/*====================================flash function end====================================*/

/*====================================customized function start====================================*/
static void my_MX_DSIHOST_DSI_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b0ae      	sub	sp, #184	; 0xb8
 8002e44:	af00      	add	r7, sp, #0
  DSI_PLLInitTypeDef PLLInit = {0};
 8002e46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8002e52:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f006 fc98 	bl	8009790 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8002e60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
 8002e70:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	226c      	movs	r2, #108	; 0x6c
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f006 fc89 	bl	8009790 <memset>
  hdsi.Instance = DSI;
 8002e7e:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002e80:	4a6d      	ldr	r2, [pc, #436]	; (8003038 <my_MX_DSIHOST_DSI_Init+0x1f8>)
 8002e82:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002e84:	4b6b      	ldr	r3, [pc, #428]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8002e8a:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8002e90:	4b68      	ldr	r3, [pc, #416]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8002e96:	2332      	movs	r3, #50	; 0x32
 8002e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002ea8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002eac:	4619      	mov	r1, r3
 8002eae:	4861      	ldr	r0, [pc, #388]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002eb0:	f001 f9a0 	bl	80041f4 <HAL_DSI_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <my_MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8002eba:	f000 fa41 	bl	8003340 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002ef4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002ef8:	4619      	mov	r1, r3
 8002efa:	484e      	ldr	r0, [pc, #312]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002efc:	f001 fded 	bl	8004ada <HAL_DSI_ConfigHostTimeouts>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <my_MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8002f06:	f000 fa1b 	bl	8003340 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8002f0a:	2313      	movs	r3, #19
 8002f0c:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8002f12:	2309      	movs	r3, #9
 8002f14:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8002f16:	230a      	movs	r3, #10
 8002f18:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8002f26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4841      	ldr	r0, [pc, #260]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f2e:	f001 fd6a 	bl	8004a06 <HAL_DSI_ConfigPhyTimer>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <my_MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8002f38:	f000 fa02 	bl	8003340 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8002f3c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f40:	483c      	ldr	r0, [pc, #240]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f42:	f001 ff86 	bl	8004e52 <HAL_DSI_SetLowPowerRXFilter>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <my_MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8002f4c:	f000 f9f8 	bl	8003340 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8002f50:	2100      	movs	r1, #0
 8002f52:	4838      	ldr	r0, [pc, #224]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f54:	f001 fa6a 	bl	800442c <HAL_DSI_ConfigErrorMonitor>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <my_MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8002f5e:	f000 f9ef 	bl	8003340 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8002f66:	2305      	movs	r3, #5
 8002f68:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8002f72:	2378      	movs	r3, #120	; 0x78
 8002f74:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = HSA;
 8002f8a:	4b2c      	ldr	r3, [pc, #176]	; (800303c <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = HBP;
 8002f90:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <my_MX_DSIHOST_DSI_Init+0x200>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = HSA+HBP+IMAGE_H+HFP;
 8002f96:	4b29      	ldr	r3, [pc, #164]	; (800303c <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <my_MX_DSIHOST_DSI_Init+0x200>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b27      	ldr	r3, [pc, #156]	; (8003044 <my_MX_DSIHOST_DSI_Init+0x204>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4413      	add	r3, r2
 8002faa:	4a27      	ldr	r2, [pc, #156]	; (8003048 <my_MX_DSIHOST_DSI_Init+0x208>)
 8002fac:	8812      	ldrh	r2, [r2, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = VSA;
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <my_MX_DSIHOST_DSI_Init+0x20c>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = VBP;
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <my_MX_DSIHOST_DSI_Init+0x210>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = VFP;
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <my_MX_DSIHOST_DSI_Init+0x214>)
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = IMAGE_W;
 8002fc4:	4b24      	ldr	r3, [pc, #144]	; (8003058 <my_MX_DSIHOST_DSI_Init+0x218>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8002fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fce:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8002fd0:	231c      	movs	r3, #28
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8002fd4:	2350      	movs	r3, #80	; 0x50
 8002fd6:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8002fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fdc:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8002fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe2:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8002fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8002fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fee:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8002ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ff4:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8002ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ffa:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8003000:	1d3b      	adds	r3, r7, #4
 8003002:	4619      	mov	r1, r3
 8003004:	480b      	ldr	r0, [pc, #44]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8003006:	f001 faf6 	bl	80045f6 <HAL_DSI_ConfigVideoMode>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <my_MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8003010:	f000 f996 	bl	8003340 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8003014:	2100      	movs	r1, #0
 8003016:	4807      	ldr	r0, [pc, #28]	; (8003034 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8003018:	f001 fac5 	bl	80045a6 <HAL_DSI_SetGenericVCID>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <my_MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8003022:	f000 f98d 	bl	8003340 <Error_Handler>
  }
  LCD_PowerOn();
 8003026:	f7fe fa87 	bl	8001538 <LCD_PowerOn>
}
 800302a:	bf00      	nop
 800302c:	37b8      	adds	r7, #184	; 0xb8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200000a8 	.word	0x200000a8
 8003038:	40016c00 	.word	0x40016c00
 800303c:	20000010 	.word	0x20000010
 8003040:	20000012 	.word	0x20000012
 8003044:	20000000 	.word	0x20000000
 8003048:	20000014 	.word	0x20000014
 800304c:	20000016 	.word	0x20000016
 8003050:	20000018 	.word	0x20000018
 8003054:	2000001a 	.word	0x2000001a
 8003058:	20000004 	.word	0x20000004

0800305c <my_MX_LTDC_Init>:
static void my_MX_LTDC_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08e      	sub	sp, #56	; 0x38
 8003060:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	2234      	movs	r2, #52	; 0x34
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f006 fb91 	bl	8009790 <memset>
  hltdc.Instance = LTDC;
 800306e:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 8003070:	4a5a      	ldr	r2, [pc, #360]	; (80031dc <my_MX_LTDC_Init+0x180>)
 8003072:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8003074:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 8003076:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800307a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 800307c:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 800307e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003082:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003084:	4b54      	ldr	r3, [pc, #336]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800308a:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = HSA-1;
 8003090:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <my_MX_LTDC_Init+0x184>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	3b01      	subs	r3, #1
 8003096:	461a      	mov	r2, r3
 8003098:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 800309a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = VSA-1;
 800309c:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <my_MX_LTDC_Init+0x188>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 80030a6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = HSA+HBP-1;
 80030a8:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <my_MX_LTDC_Init+0x184>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <my_MX_LTDC_Init+0x18c>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	4413      	add	r3, r2
 80030b4:	3b01      	subs	r3, #1
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 80030ba:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = VSA+VBP-1;
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <my_MX_LTDC_Init+0x188>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <my_MX_LTDC_Init+0x190>)
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	4413      	add	r3, r2
 80030c8:	3b01      	subs	r3, #1
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 80030ce:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = HSA+HBP+IMAGE_H-1;
 80030d0:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <my_MX_LTDC_Init+0x184>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b44      	ldr	r3, [pc, #272]	; (80031e8 <my_MX_LTDC_Init+0x18c>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	461a      	mov	r2, r3
 80030de:	4b44      	ldr	r3, [pc, #272]	; (80031f0 <my_MX_LTDC_Init+0x194>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	3b01      	subs	r3, #1
 80030e6:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 80030e8:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = VSA+VBP+IMAGE_W-1;
 80030ea:	4b3e      	ldr	r3, [pc, #248]	; (80031e4 <my_MX_LTDC_Init+0x188>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b3e      	ldr	r3, [pc, #248]	; (80031ec <my_MX_LTDC_Init+0x190>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <my_MX_LTDC_Init+0x198>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4413      	add	r3, r2
 80030fe:	3b01      	subs	r3, #1
 8003100:	4a35      	ldr	r2, [pc, #212]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 8003102:	6293      	str	r3, [r2, #40]	; 0x28
  hltdc.Init.TotalWidth = HSA+HBP+IMAGE_H+HFP-1;
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <my_MX_LTDC_Init+0x184>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <my_MX_LTDC_Init+0x18c>)
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	4413      	add	r3, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <my_MX_LTDC_Init+0x194>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4413      	add	r3, r2
 8003118:	4a37      	ldr	r2, [pc, #220]	; (80031f8 <my_MX_LTDC_Init+0x19c>)
 800311a:	8812      	ldrh	r2, [r2, #0]
 800311c:	4413      	add	r3, r2
 800311e:	3b01      	subs	r3, #1
 8003120:	4a2d      	ldr	r2, [pc, #180]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 8003122:	62d3      	str	r3, [r2, #44]	; 0x2c
  hltdc.Init.TotalHeigh = VSA+VBP+IMAGE_W+VFP-1;
 8003124:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <my_MX_LTDC_Init+0x188>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	4b30      	ldr	r3, [pc, #192]	; (80031ec <my_MX_LTDC_Init+0x190>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	4413      	add	r3, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <my_MX_LTDC_Init+0x198>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4413      	add	r3, r2
 8003138:	4a30      	ldr	r2, [pc, #192]	; (80031fc <my_MX_LTDC_Init+0x1a0>)
 800313a:	8812      	ldrh	r2, [r2, #0]
 800313c:	4413      	add	r3, r2
 800313e:	3b01      	subs	r3, #1
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 8003142:	6313      	str	r3, [r2, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 8003146:	22ff      	movs	r2, #255	; 0xff
 8003148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8003154:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800315c:	481e      	ldr	r0, [pc, #120]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 800315e:	f002 f867 	bl	8005230 <HAL_LTDC_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <my_MX_LTDC_Init+0x110>
  {
    Error_Handler();
 8003168:	f000 f8ea 	bl	8003340 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = IMAGE_H;
 8003170:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <my_MX_LTDC_Init+0x194>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = IMAGE_W;
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <my_MX_LTDC_Init+0x198>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8003180:	2301      	movs	r3, #1
 8003182:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003184:	23ff      	movs	r3, #255	; 0xff
 8003186:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800318c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003190:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003192:	2305      	movs	r3, #5
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <my_MX_LTDC_Init+0x1a4>)
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = IMAGE_H;
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <my_MX_LTDC_Init+0x194>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = IMAGE_W;
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <my_MX_LTDC_Init+0x198>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 80031a6:	23ff      	movs	r3, #255	; 0xff
 80031a8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 80031ac:	23ff      	movs	r3, #255	; 0xff
 80031ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 80031b2:	23ff      	movs	r3, #255	; 0xff
 80031b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	2200      	movs	r2, #0
 80031bc:	4619      	mov	r1, r3
 80031be:	4806      	ldr	r0, [pc, #24]	; (80031d8 <my_MX_LTDC_Init+0x17c>)
 80031c0:	f002 f9c8 	bl	8005554 <HAL_LTDC_ConfigLayer>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <my_MX_LTDC_Init+0x172>
  {
    Error_Handler();
 80031ca:	f000 f8b9 	bl	8003340 <Error_Handler>
  }
}
 80031ce:	bf00      	nop
 80031d0:	3738      	adds	r7, #56	; 0x38
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200000c4 	.word	0x200000c4
 80031dc:	40016800 	.word	0x40016800
 80031e0:	20000010 	.word	0x20000010
 80031e4:	20000016 	.word	0x20000016
 80031e8:	20000012 	.word	0x20000012
 80031ec:	20000018 	.word	0x20000018
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000004 	.word	0x20000004
 80031f8:	20000014 	.word	0x20000014
 80031fc:	2000001a 	.word	0x2000001a
 8003200:	2007de84 	.word	0x2007de84

08003204 <delay_us>:
/*====================================customized function end====================================*/

void delay_us(int time)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
	while (time--)
 8003210:	e007      	b.n	8003222 <delay_us+0x1e>
	{
		i = 13;
 8003212:	230d      	movs	r3, #13
 8003214:	60fb      	str	r3, [r7, #12]
		while (i--);
 8003216:	bf00      	nop
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	60fa      	str	r2, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1fa      	bne.n	8003218 <delay_us+0x14>
	while (time--)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	1e5a      	subs	r2, r3, #1
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f2      	bne.n	8003212 <delay_us+0xe>
	}
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <delay_100ns>:

void delay_100ns(int time)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
	int i = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
	while (time--)
 8003246:	e007      	b.n	8003258 <delay_100ns+0x1e>
	{
		i = 1;
 8003248:	2301      	movs	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
		while (i--);
 800324c:	bf00      	nop
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1e5a      	subs	r2, r3, #1
 8003252:	60fa      	str	r2, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1fa      	bne.n	800324e <delay_100ns+0x14>
	while (time--)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1e5a      	subs	r2, r3, #1
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f2      	bne.n	8003248 <delay_100ns+0xe>
	}
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_GPIO_EXTI_Callback>:

int button_count = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af02      	add	r7, sp, #8
 8003276:	4603      	mov	r3, r0
 8003278:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d103      	bne.n	800328a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		if(play_mode = 3){
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <HAL_GPIO_EXTI_Callback+0xac>)
 8003284:	2203      	movs	r2, #3
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e033      	b.n	80032f2 <HAL_GPIO_EXTI_Callback+0x82>

		}
	}
	else if(GPIO_Pin == GPIO_PIN_8 && Mode_changed == 0){
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003290:	d12f      	bne.n	80032f2 <HAL_GPIO_EXTI_Callback+0x82>
 8003292:	4b23      	ldr	r3, [pc, #140]	; (8003320 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d12b      	bne.n	80032f2 <HAL_GPIO_EXTI_Callback+0x82>
		if(g_Mode_picture_count <= g_current_pic ){
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_GPIO_EXTI_Callback+0xb4>)
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_GPIO_EXTI_Callback+0xb8>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d802      	bhi.n	80032ac <HAL_GPIO_EXTI_Callback+0x3c>
			g_current_pic = 0;
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_GPIO_EXTI_Callback+0xb8>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
		}

	    if (HAL_DMA2D_Start(&hdma2d, (uint32_t) &frame_buf_mode[MAX_IMAGE_SIZE*g_current_pic], &image_arr_rgb888, IMAGE_W, IMAGE_H) == HAL_OK) {
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_GPIO_EXTI_Callback+0xb8>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	f64d 63a8 	movw	r3, #57000	; 0xdea8
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	4a1c      	ldr	r2, [pc, #112]	; (800332c <HAL_GPIO_EXTI_Callback+0xbc>)
 80032bc:	4413      	add	r3, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	491b      	ldr	r1, [pc, #108]	; (8003330 <HAL_GPIO_EXTI_Callback+0xc0>)
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_GPIO_EXTI_Callback+0xc4>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_GPIO_EXTI_Callback+0xc8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	460a      	mov	r2, r1
 80032d0:	4601      	mov	r1, r0
 80032d2:	481a      	ldr	r0, [pc, #104]	; (800333c <HAL_GPIO_EXTI_Callback+0xcc>)
 80032d4:	f000 fced 	bl	8003cb2 <HAL_DMA2D_Start>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <HAL_GPIO_EXTI_Callback+0x76>
	        // Wait for the transfer to complete
	        HAL_DMA2D_PollForTransfer(&hdma2d, 50); // Timeout in milliseconds
 80032de:	2132      	movs	r1, #50	; 0x32
 80032e0:	4816      	ldr	r0, [pc, #88]	; (800333c <HAL_GPIO_EXTI_Callback+0xcc>)
 80032e2:	f000 fd11 	bl	8003d08 <HAL_DMA2D_PollForTransfer>
	    }
	    g_current_pic++;
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_GPIO_EXTI_Callback+0xb8>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_GPIO_EXTI_Callback+0xb8>)
 80032f0:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_8 && Mode_changed == 1){
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f8:	d10c      	bne.n	8003314 <HAL_GPIO_EXTI_Callback+0xa4>
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_GPIO_EXTI_Callback+0xb0>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d108      	bne.n	8003314 <HAL_GPIO_EXTI_Callback+0xa4>
		g_current_pic++;
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	3301      	adds	r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_GPIO_EXTI_Callback+0xb8>)
 800330c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800330e:	2064      	movs	r0, #100	; 0x64
 8003310:	f000 fada 	bl	80038c8 <HAL_Delay>
	}
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	2007de80 	.word	0x2007de80
 8003320:	2008bd34 	.word	0x2008bd34
 8003324:	2008bdb3 	.word	0x2008bdb3
 8003328:	2008bdb2 	.word	0x2008bdb2
 800332c:	20037d68 	.word	0x20037d68
 8003330:	2007de84 	.word	0x2007de84
 8003334:	20000004 	.word	0x20000004
 8003338:	20000000 	.word	0x20000000
 800333c:	20000048 	.word	0x20000048

08003340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003344:	b672      	cpsid	i
}
 8003346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003348:	e7fe      	b.n	8003348 <Error_Handler+0x8>
	...

0800334c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_MspInit+0x44>)
 8003354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <HAL_MspInit+0x44>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6613      	str	r3, [r2, #96]	; 0x60
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_MspInit+0x44>)
 8003360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_MspInit+0x44>)
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	4a08      	ldr	r2, [pc, #32]	; (8003390 <HAL_MspInit+0x44>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	6593      	str	r3, [r2, #88]	; 0x58
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_MspInit+0x44>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000

08003394 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_DMA2D_MspInit+0x38>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10b      	bne.n	80033be <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <HAL_DMA2D_MspInit+0x3c>)
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <HAL_DMA2D_MspInit+0x3c>)
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	6493      	str	r3, [r2, #72]	; 0x48
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <HAL_DMA2D_MspInit+0x3c>)
 80033b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	4002b000 	.word	0x4002b000
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0aa      	sub	sp, #168	; 0xa8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	229c      	movs	r2, #156	; 0x9c
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f006 f9d3 	bl	8009790 <memset>
  if(hdsi->Instance==DSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a11      	ldr	r2, [pc, #68]	; (8003434 <HAL_DSI_MspInit+0x60>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d11b      	bne.n	800342c <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80033f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80033f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003400:	f107 030c 	add.w	r3, r7, #12
 8003404:	4618      	mov	r0, r3
 8003406:	f003 fa27 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8003410:	f7ff ff96 	bl	8003340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_DSI_MspInit+0x64>)
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	4a07      	ldr	r2, [pc, #28]	; (8003438 <HAL_DSI_MspInit+0x64>)
 800341a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800341e:	6613      	str	r3, [r2, #96]	; 0x60
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_DSI_MspInit+0x64>)
 8003422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800342c:	bf00      	nop
 800342e:	37a8      	adds	r7, #168	; 0xa8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40016c00 	.word	0x40016c00
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b0aa      	sub	sp, #168	; 0xa8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	229c      	movs	r2, #156	; 0x9c
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f006 f99f 	bl	8009790 <memset>
  if(hltdc->Instance==LTDC)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <HAL_LTDC_MspInit+0x90>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d133      	bne.n	80034c4 <HAL_LTDC_MspInit+0x88>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800345c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003460:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 8003462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003466:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 800346a:	2303      	movs	r3, #3
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8003472:	2308      	movs	r3, #8
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8003476:	2302      	movs	r3, #2
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 800347a:	2302      	movs	r3, #2
 800347c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 800347e:	2302      	movs	r3, #2
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8003482:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003486:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	4618      	mov	r0, r3
 800348e:	f003 f9e3 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 8003498:	f7ff ff52 	bl	8003340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_LTDC_MspInit+0x94>)
 800349e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a0:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_LTDC_MspInit+0x94>)
 80034a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034a6:	6613      	str	r3, [r2, #96]	; 0x60
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_LTDC_MspInit+0x94>)
 80034aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	205b      	movs	r0, #91	; 0x5b
 80034ba:	f000 fb04 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80034be:	205b      	movs	r0, #91	; 0x5b
 80034c0:	f000 fb1d 	bl	8003afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80034c4:	bf00      	nop
 80034c6:	37a8      	adds	r7, #168	; 0xa8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40016800 	.word	0x40016800
 80034d0:	40021000 	.word	0x40021000

080034d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a42      	ldr	r2, [pc, #264]	; (80035fc <HAL_SPI_MspInit+0x128>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d128      	bne.n	8003548 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034f6:	4b42      	ldr	r3, [pc, #264]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	4a41      	ldr	r2, [pc, #260]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003500:	6593      	str	r3, [r2, #88]	; 0x58
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	4a3b      	ldr	r2, [pc, #236]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003514:	f043 0308 	orr.w	r3, r3, #8
 8003518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3;
 8003526:	231a      	movs	r3, #26
 8003528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003532:	2303      	movs	r3, #3
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003536:	2305      	movs	r3, #5
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800353a:	f107 031c 	add.w	r3, r7, #28
 800353e:	4619      	mov	r1, r3
 8003540:	4830      	ldr	r0, [pc, #192]	; (8003604 <HAL_SPI_MspInit+0x130>)
 8003542:	f001 fcb3 	bl	8004eac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003546:	e054      	b.n	80035f2 <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2e      	ldr	r2, [pc, #184]	; (8003608 <HAL_SPI_MspInit+0x134>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d14f      	bne.n	80035f2 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003552:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	4a2a      	ldr	r2, [pc, #168]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355c:	6593      	str	r3, [r2, #88]	; 0x58
 800355e:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	4a24      	ldr	r2, [pc, #144]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8003582:	f002 fa81 	bl	8005a88 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_SPI_MspInit+0x12c>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 800359e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	2302      	movs	r3, #2
 80035a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ac:	2303      	movs	r3, #3
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035b0:	2306      	movs	r3, #6
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035b4:	f107 031c 	add.w	r3, r7, #28
 80035b8:	4619      	mov	r1, r3
 80035ba:	4814      	ldr	r0, [pc, #80]	; (800360c <HAL_SPI_MspInit+0x138>)
 80035bc:	f001 fc76 	bl	8004eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80035c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035d2:	2306      	movs	r3, #6
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035d6:	f107 031c 	add.w	r3, r7, #28
 80035da:	4619      	mov	r1, r3
 80035dc:	480c      	ldr	r0, [pc, #48]	; (8003610 <HAL_SPI_MspInit+0x13c>)
 80035de:	f001 fc65 	bl	8004eac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2100      	movs	r1, #0
 80035e6:	2033      	movs	r0, #51	; 0x33
 80035e8:	f000 fa6d 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80035ec:	2033      	movs	r0, #51	; 0x33
 80035ee:	f000 fa86 	bl	8003afe <HAL_NVIC_EnableIRQ>
}
 80035f2:	bf00      	nop
 80035f4:	3730      	adds	r7, #48	; 0x30
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40003800 	.word	0x40003800
 8003600:	40021000 	.word	0x40021000
 8003604:	48000c00 	.word	0x48000c00
 8003608:	40003c00 	.word	0x40003c00
 800360c:	48001800 	.word	0x48001800
 8003610:	48000800 	.word	0x48000800

08003614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b0b0      	sub	sp, #192	; 0xc0
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800362c:	f107 0310 	add.w	r3, r7, #16
 8003630:	229c      	movs	r2, #156	; 0x9c
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f006 f8ab 	bl	8009790 <memset>
  if(huart->Instance==UART4)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <HAL_UART_MspInit+0xb0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d13b      	bne.n	80036bc <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003644:	2308      	movs	r3, #8
 8003646:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003648:	2300      	movs	r3, #0
 800364a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800364c:	f107 0310 	add.w	r3, r7, #16
 8003650:	4618      	mov	r0, r3
 8003652:	f003 f901 	bl	8006858 <HAL_RCCEx_PeriphCLKConfig>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800365c:	f7ff fe70 	bl	8003340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_UART_MspInit+0xb4>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_UART_MspInit+0xb4>)
 8003666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800366a:	6593      	str	r3, [r2, #88]	; 0x58
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_UART_MspInit+0xb4>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003678:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <HAL_UART_MspInit+0xb4>)
 800367a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_UART_MspInit+0xb4>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_UART_MspInit+0xb4>)
 8003686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003690:	2303      	movs	r3, #3
 8003692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003696:	2302      	movs	r3, #2
 8003698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a2:	2303      	movs	r3, #3
 80036a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036a8:	2308      	movs	r3, #8
 80036aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036b2:	4619      	mov	r1, r3
 80036b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b8:	f001 fbf8 	bl	8004eac <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80036bc:	bf00      	nop
 80036be:	37c0      	adds	r7, #192	; 0xc0
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40004c00 	.word	0x40004c00
 80036c8:	40021000 	.word	0x40021000

080036cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036d0:	e7fe      	b.n	80036d0 <NMI_Handler+0x4>

080036d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d6:	e7fe      	b.n	80036d6 <HardFault_Handler+0x4>

080036d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036dc:	e7fe      	b.n	80036dc <MemManage_Handler+0x4>

080036de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036e2:	e7fe      	b.n	80036e2 <BusFault_Handler+0x4>

080036e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e8:	e7fe      	b.n	80036e8 <UsageFault_Handler+0x4>

080036ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003718:	f000 f8b6 	bl	8003888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}

08003720 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sync_Pin);
 8003724:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003728:	f001 fd6a 	bl	8005200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}

08003730 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pic_sw_Pin);
 8003734:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003738:	f001 fd62 	bl	8005200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	bd80      	pop	{r7, pc}

08003740 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003744:	4802      	ldr	r0, [pc, #8]	; (8003750 <SPI3_IRQHandler+0x10>)
 8003746:	f004 fcb3 	bl	80080b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	200001d0 	.word	0x200001d0

08003754 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <LTDC_IRQHandler+0x10>)
 800375a:	f001 fe39 	bl	80053d0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200000c4 	.word	0x200000c4

08003768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <SystemInit+0x20>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <SystemInit+0x20>)
 8003774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800378c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003790:	f7ff ffea 	bl	8003768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003794:	480c      	ldr	r0, [pc, #48]	; (80037c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003796:	490d      	ldr	r1, [pc, #52]	; (80037cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <LoopForever+0xe>)
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800379c:	e002      	b.n	80037a4 <LoopCopyDataInit>

0800379e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037a2:	3304      	adds	r3, #4

080037a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a8:	d3f9      	bcc.n	800379e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037ac:	4c0a      	ldr	r4, [pc, #40]	; (80037d8 <LoopForever+0x16>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b0:	e001      	b.n	80037b6 <LoopFillZerobss>

080037b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b4:	3204      	adds	r2, #4

080037b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b8:	d3fb      	bcc.n	80037b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ba:	f005 ffc5 	bl	8009748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037be:	f7fc fe9f 	bl	8000500 <main>

080037c2 <LoopForever>:

LoopForever:
    b LoopForever
 80037c2:	e7fe      	b.n	80037c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80037c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80037c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037cc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80037d0:	080098b8 	.word	0x080098b8
  ldr r2, =_sbss
 80037d4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80037d8:	2008bdb8 	.word	0x2008bdb8

080037dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037dc:	e7fe      	b.n	80037dc <ADC1_IRQHandler>

080037de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e8:	2003      	movs	r0, #3
 80037ea:	f000 f961 	bl	8003ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ee:	2002      	movs	r0, #2
 80037f0:	f000 f80e 	bl	8003810 <HAL_InitTick>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	71fb      	strb	r3, [r7, #7]
 80037fe:	e001      	b.n	8003804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003800:	f7ff fda4 	bl	800334c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003804:	79fb      	ldrb	r3, [r7, #7]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800381c:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_InitTick+0x6c>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d023      	beq.n	800386c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003824:	4b16      	ldr	r3, [pc, #88]	; (8003880 <HAL_InitTick+0x70>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_InitTick+0x6c>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003832:	fbb3 f3f1 	udiv	r3, r3, r1
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f96d 	bl	8003b1a <HAL_SYSTICK_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b0f      	cmp	r3, #15
 800384a:	d809      	bhi.n	8003860 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800384c:	2200      	movs	r2, #0
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	f000 f937 	bl	8003ac6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003858:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <HAL_InitTick+0x74>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e007      	b.n	8003870 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	e004      	b.n	8003870 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	e001      	b.n	8003870 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000028 	.word	0x20000028
 8003880:	20000020 	.word	0x20000020
 8003884:	20000024 	.word	0x20000024

08003888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_IncTick+0x20>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_IncTick+0x24>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4413      	add	r3, r2
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_IncTick+0x24>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000028 	.word	0x20000028
 80038ac:	2008bdb4 	.word	0x2008bdb4

080038b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return uwTick;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_GetTick+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	2008bdb4 	.word	0x2008bdb4

080038c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038d0:	f7ff ffee 	bl	80038b0 <HAL_GetTick>
 80038d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d005      	beq.n	80038ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_Delay+0x44>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ee:	bf00      	nop
 80038f0:	f7ff ffde 	bl	80038b0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d8f7      	bhi.n	80038f0 <HAL_Delay+0x28>
  {
  }
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000028 	.word	0x20000028

08003910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800392c:	4013      	ands	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800393c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <__NVIC_GetPriorityGrouping+0x18>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f003 0307 	and.w	r3, r3, #7
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db0b      	blt.n	800399e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4907      	ldr	r1, [pc, #28]	; (80039ac <__NVIC_EnableIRQ+0x38>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2001      	movs	r0, #1
 8003996:	fa00 f202 	lsl.w	r2, r0, r2
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	db0a      	blt.n	80039da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	490c      	ldr	r1, [pc, #48]	; (80039fc <__NVIC_SetPriority+0x4c>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	440b      	add	r3, r1
 80039d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d8:	e00a      	b.n	80039f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4908      	ldr	r1, [pc, #32]	; (8003a00 <__NVIC_SetPriority+0x50>)
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	3b04      	subs	r3, #4
 80039e8:	0112      	lsls	r2, r2, #4
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	440b      	add	r3, r1
 80039ee:	761a      	strb	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000e100 	.word	0xe000e100
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f1c3 0307 	rsb	r3, r3, #7
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	bf28      	it	cs
 8003a22:	2304      	movcs	r3, #4
 8003a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d902      	bls.n	8003a34 <NVIC_EncodePriority+0x30>
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3b03      	subs	r3, #3
 8003a32:	e000      	b.n	8003a36 <NVIC_EncodePriority+0x32>
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	401a      	ands	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	43d9      	mvns	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	4313      	orrs	r3, r2
         );
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	; 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a7c:	d301      	bcc.n	8003a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00f      	b.n	8003aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <SysTick_Config+0x40>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f7ff ff8e 	bl	80039b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <SysTick_Config+0x40>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9a:	4b04      	ldr	r3, [pc, #16]	; (8003aac <SysTick_Config+0x40>)
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	e000e010 	.word	0xe000e010

08003ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff29 	bl	8003910 <__NVIC_SetPriorityGrouping>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad8:	f7ff ff3e 	bl	8003958 <__NVIC_GetPriorityGrouping>
 8003adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff8e 	bl	8003a04 <NVIC_EncodePriority>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff5d 	bl	80039b0 <__NVIC_SetPriority>
}
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff31 	bl	8003974 <__NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ffa2 	bl	8003a6c <SysTick_Config>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d005      	beq.n	8003b56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e047      	b.n	8003be6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 020e 	bic.w	r2, r2, #14
 8003b64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f003 021c 	and.w	r2, r3, #28
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2101      	movs	r1, #1
 8003b94:	fa01 f202 	lsl.w	r2, r1, r2
 8003b98:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ba2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bc4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
    }
  }
  return status;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e053      	b.n	8003caa <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fbbc 	bl	8003394 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
#if defined(DMA2D_LINE_OFFSET_MODE_SUPPORT)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6851      	ldr	r1, [r2, #4]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	69d2      	ldr	r2, [r2, #28]
 8003c3a:	4311      	orrs	r1, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
#endif /* DMA2D_LINE_OFFSET_MODE_SUPPORT */

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
#if defined(DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6891      	ldr	r1, [r2, #8]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6992      	ldr	r2, [r2, #24]
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6353      	str	r3, [r2, #52]	; 0x34
#else
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
#endif /* DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT */

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	0c1b      	lsrs	r3, r3, #16
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68d1      	ldr	r1, [r2, #12]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	430b      	orrs	r3, r1
 8003c78:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c80:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	051a      	lsls	r2, r3, #20
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	055b      	lsls	r3, r3, #21
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af02      	add	r7, sp, #8
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_DMA2D_Start+0x1c>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e018      	b.n	8003d00 <HAL_DMA2D_Start+0x4e>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f995 	bl	8004018 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d056      	beq.n	8003dd2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d24:	f7ff fdc4 	bl	80038b0 <HAL_GetTick>
 8003d28:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003d2a:	e04b      	b.n	8003dc4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d023      	beq.n	8003d86 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	f043 0202 	orr.w	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	f043 0201 	orr.w	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2221      	movs	r2, #33	; 0x21
 8003d70:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2204      	movs	r2, #4
 8003d76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0a5      	b.n	8003ed2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d01a      	beq.n	8003dc4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d8e:	f7ff fd8f 	bl	80038b0 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <HAL_DMA2D_PollForTransfer+0x9c>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10f      	bne.n	8003dc4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2203      	movs	r2, #3
 8003db4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e086      	b.n	8003ed2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ac      	beq.n	8003d2c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d061      	beq.n	8003eb8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003df4:	f7ff fd5c 	bl	80038b0 <HAL_GetTick>
 8003df8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003dfa:	e056      	b.n	8003eaa <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02e      	beq.n	8003e6c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2229      	movs	r2, #41	; 0x29
 8003e56:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e032      	b.n	8003ed2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d01a      	beq.n	8003eaa <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e74:	f7ff fd1c 	bl	80038b0 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <HAL_DMA2D_PollForTransfer+0x182>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10f      	bne.n	8003eaa <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2203      	movs	r2, #3
 8003e9a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e013      	b.n	8003ed2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0a1      	beq.n	8003dfc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2212      	movs	r2, #18
 8003ebe:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_DMA2D_ConfigLayer+0x20>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e084      	b.n	8004006 <HAL_DMA2D_ConfigLayer+0x12a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	3328      	adds	r3, #40	; 0x28
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003f30:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003f3c:	4b35      	ldr	r3, [pc, #212]	; (8004014 <HAL_DMA2D_ConfigLayer+0x138>)
 8003f3e:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b0a      	cmp	r3, #10
 8003f46:	d003      	beq.n	8003f50 <HAL_DMA2D_ConfigLayer+0x74>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b09      	cmp	r3, #9
 8003f4e:	d107      	bne.n	8003f60 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e005      	b.n	8003f6c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d120      	bne.n	8003fb4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	ea02 0103 	and.w	r1, r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b0a      	cmp	r3, #10
 8003f9a:	d003      	beq.n	8003fa4 <HAL_DMA2D_ConfigLayer+0xc8>
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b09      	cmp	r3, #9
 8003fa2:	d127      	bne.n	8003ff4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb2:	e01f      	b.n	8003ff4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	ea02 0103 	and.w	r1, r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b0a      	cmp	r3, #10
 8003fdc:	d003      	beq.n	8003fe6 <HAL_DMA2D_ConfigLayer+0x10a>
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b09      	cmp	r3, #9
 8003fe4:	d106      	bne.n	8003ff4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ff2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	ff33000f 	.word	0xff33000f

08004018 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004018:	b480      	push	{r7}
 800401a:	b08b      	sub	sp, #44	; 0x2c
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	041a      	lsls	r2, r3, #16
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004050:	d174      	bne.n	800413c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004058:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004060:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004068:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d108      	bne.n	800408a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	431a      	orrs	r2, r3
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	4313      	orrs	r3, r2
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
 8004088:	e053      	b.n	8004132 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d106      	bne.n	80040a0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4313      	orrs	r3, r2
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
 800409e:	e048      	b.n	8004132 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d111      	bne.n	80040cc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	0cdb      	lsrs	r3, r3, #19
 80040ac:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	0a9b      	lsrs	r3, r3, #10
 80040b2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	08db      	lsrs	r3, r3, #3
 80040b8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	02db      	lsls	r3, r3, #11
 80040c2:	4313      	orrs	r3, r2
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ca:	e032      	b.n	8004132 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d117      	bne.n	8004104 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	0fdb      	lsrs	r3, r3, #31
 80040d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	0cdb      	lsrs	r3, r3, #19
 80040de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	0adb      	lsrs	r3, r3, #11
 80040e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	08db      	lsrs	r3, r3, #3
 80040ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	431a      	orrs	r2, r3
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	03db      	lsls	r3, r3, #15
 80040fa:	4313      	orrs	r3, r2
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
 8004102:	e016      	b.n	8004132 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	0f1b      	lsrs	r3, r3, #28
 8004108:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	0d1b      	lsrs	r3, r3, #20
 800410e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	0b1b      	lsrs	r3, r3, #12
 8004114:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	011a      	lsls	r2, r3, #4
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	431a      	orrs	r2, r3
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	031b      	lsls	r3, r3, #12
 800412a:	4313      	orrs	r3, r2
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
#endif /*DMA2D_M2M_BLEND_FIXED_COLOR_FG_BG_SUPPORT*/
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800413a:	e00d      	b.n	8004158 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004144:	d104      	bne.n	8004150 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	615a      	str	r2, [r3, #20]
}
 800414e:	e003      	b.n	8004158 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	60da      	str	r2, [r3, #12]
}
 8004158:	bf00      	nop
 800415a:	372c      	adds	r7, #44	; 0x2c
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	019a      	lsls	r2, r3, #6
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	431a      	orrs	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	431a      	orrs	r2, r3
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80041a4:	f7ff fb84 	bl	80038b0 <HAL_GetTick>
 80041a8:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80041aa:	e009      	b.n	80041c0 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80041ac:	f7ff fb80 	bl	80038b0 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ba:	d901      	bls.n	80041c0 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e015      	b.n	80041ec <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ee      	beq.n	80041ac <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	019a      	lsls	r2, r3, #6
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	ea42 0103 	orr.w	r1, r2, r3
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	041a      	lsls	r2, r3, #16
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e10b      	b.n	8004420 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7c5b      	ldrb	r3, [r3, #17]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff f8de 	bl	80033d4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2203      	movs	r2, #3
 800421c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004232:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800423e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004246:	f7ff fb33 	bl	80038b0 <HAL_GetTick>
 800424a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800424c:	e009      	b.n	8004262 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800424e:	f7ff fb2f 	bl	80038b0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800425c:	d901      	bls.n	8004262 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e0de      	b.n	8004420 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800426a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0ed      	beq.n	800424e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8004282:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8004286:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800429e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80042a6:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80042da:	2001      	movs	r0, #1
 80042dc:	f7ff faf4 	bl	80038c8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80042e0:	f7ff fae6 	bl	80038b0 <HAL_GetTick>
 80042e4:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80042e6:	e009      	b.n	80042fc <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80042e8:	f7ff fae2 	bl	80038b0 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f6:	d901      	bls.n	80042fc <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e091      	b.n	8004420 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ed      	beq.n	80042e8 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0206 	orr.w	r2, r2, #6
 800431c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0203 	bic.w	r2, r2, #3
 8004330:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0203 	bic.w	r2, r2, #3
 800435e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004386:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_DSI_Init+0x1b4>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	e000      	b.n	80043aa <HAL_DSI_Init+0x1b6>
 80043a8:	2301      	movs	r3, #1
 80043aa:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_DSI_Init+0x234>)
 80043b0:	fb03 f202 	mul.w	r2, r3, r2
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	409a      	lsls	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80043e0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	003d0900 	.word	0x003d0900

0800442c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	7c1b      	ldrb	r3, [r3, #16]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_DSI_ConfigErrorMonitor+0x16>
 800443e:	2302      	movs	r3, #2
 8004440:	e0ab      	b.n	800459a <HAL_DSI_ConfigErrorMonitor+0x16e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2200      	movs	r2, #0
 800444e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800447c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004480:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800449e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d009      	beq.n	80044c0 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0202 	orr.w	r2, r2, #2
 80044da:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 020c 	orr.w	r2, r2, #12
 80044f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0210 	orr.w	r2, r2, #16
 8004516:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0220 	orr.w	r2, r2, #32
 8004534:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004552:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004570:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800458e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	7c1b      	ldrb	r3, [r3, #16]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_DSI_SetGenericVCID+0x16>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e016      	b.n	80045ea <HAL_DSI_SetGenericVCID+0x44>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0203 	bic.w	r2, r2, #3
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	7c1b      	ldrb	r3, [r3, #16]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_DSI_ConfigVideoMode+0x16>
 8004608:	2302      	movs	r3, #2
 800460a:	e1f6      	b.n	80049fa <HAL_DSI_ConfigVideoMode+0x404>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0203 	bic.w	r2, r2, #3
 8004644:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004666:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800466a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800468c:	f023 031f 	bic.w	r3, r3, #31
 8004690:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80046b2:	f023 031f 	bic.w	r3, r3, #31
 80046b6:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0203 	bic.w	r2, r2, #3
 80046d8:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68d9      	ldr	r1, [r3, #12]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0207 	bic.w	r2, r2, #7
 80046fa:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6959      	ldr	r1, [r3, #20]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	431a      	orrs	r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 020f 	bic.w	r2, r2, #15
 8004728:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6919      	ldr	r1, [r3, #16]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 020e 	bic.w	r2, r2, #14
 800474c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	005a      	lsls	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d110      	bne.n	8004792 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800477e:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6919      	ldr	r1, [r3, #16]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80047a0:	f023 030f 	bic.w	r3, r3, #15
 80047a4:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80047c6:	f023 030f 	bic.w	r3, r3, #15
 80047ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047f0:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004838:	f023 0303 	bic.w	r3, r3, #3
 800483c:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004884:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004888:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699a      	ldr	r2, [r3, #24]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80048cc:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6999      	ldr	r1, [r3, #24]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d8:	041a      	lsls	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048f0:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6999      	ldr	r1, [r3, #24]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004912:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004956:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7c1b      	ldrb	r3, [r3, #16]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_DSI_ConfigPhyTimer+0x16>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e058      	b.n	8004ace <HAL_DSI_ConfigPhyTimer+0xc8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	bf38      	it	cc
 8004a2e:	4613      	movcc	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004a42:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	041a      	lsls	r2, r3, #16
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004a70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004aaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	021a      	lsls	r2, r3, #8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	7c1b      	ldrb	r3, [r3, #16]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e0b4      	b.n	8004c5a <HAL_DSI_ConfigHostTimeouts+0x180>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b04:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6899      	ldr	r1, [r3, #8]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	021a      	lsls	r2, r3, #8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b292      	uxth	r2, r2
 8004b26:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	041a      	lsls	r2, r3, #16
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	0c1b      	lsrs	r3, r3, #16
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	0c1b      	lsrs	r3, r3, #16
 8004bb8:	041b      	lsls	r3, r3, #16
 8004bba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	0c1b      	lsrs	r3, r3, #16
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	7c1b      	ldrb	r3, [r3, #16]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_DSI_Start+0x14>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e02b      	b.n	8004cd2 <HAL_DSI_Start+0x6c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	605a      	str	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0208 	orr.w	r2, r2, #8
 8004cb6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b088      	sub	sp, #32
 8004ce2:	af02      	add	r7, sp, #8
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	7c1b      	ldrb	r3, [r3, #16]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_DSI_ShortWrite+0x1a>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e010      	b.n	8004d1a <HAL_DSI_ShortWrite+0x3c>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fa44 	bl	8004196 <DSI_ShortWrite>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	741a      	strb	r2, [r3, #16]

  return status;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b08c      	sub	sp, #48	; 0x30
 8004d26:	af02      	add	r7, sp, #8
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d32:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	7c1b      	ldrb	r3, [r3, #16]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_DSI_LongWrite+0x1e>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e084      	b.n	8004e4a <HAL_DSI_LongWrite+0x128>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d46:	f7fe fdb3 	bl	80038b0 <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004d4c:	e00c      	b.n	8004d68 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004d4e:	f7fe fdaf 	bl	80038b0 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d5c:	d904      	bls.n	8004d68 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e070      	b.n	8004e4a <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0eb      	beq.n	8004d4e <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	bf28      	it	cs
 8004d80:	2303      	movcs	r3, #3
 8004d82:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004d84:	2300      	movs	r3, #0
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	e00f      	b.n	8004daa <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	4413      	add	r3, r2
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	3301      	adds	r3, #1
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	3301      	adds	r3, #1
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	6a3a      	ldr	r2, [r7, #32]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d3eb      	bcc.n	8004d8a <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004dca:	e028      	b.n	8004e1e <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	bf28      	it	cs
 8004dd2:	2304      	movcs	r3, #4
 8004dd4:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	623b      	str	r3, [r7, #32]
 8004dde:	e00e      	b.n	8004dfe <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	4413      	add	r3, r2
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	623b      	str	r3, [r7, #32]
 8004dfe:	6a3a      	ldr	r2, [r7, #32]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d3ec      	bcc.n	8004de0 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1d3      	bne.n	8004dcc <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e2c:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	f7ff f991 	bl	8004164 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3728      	adds	r7, #40	; 0x28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7c1b      	ldrb	r3, [r3, #16]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e01b      	b.n	8004ea0 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004e7e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	065a      	lsls	r2, r3, #25
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eba:	e166      	b.n	800518a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	4013      	ands	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8158 	beq.w	8005184 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d005      	beq.n	8004eec <HAL_GPIO_Init+0x40>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d130      	bne.n	8004f4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4013      	ands	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f22:	2201      	movs	r2, #1
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	f003 0201 	and.w	r2, r3, #1
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d017      	beq.n	8004f8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	2203      	movs	r2, #3
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d123      	bne.n	8004fde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	08da      	lsrs	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3208      	adds	r2, #8
 8004f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	220f      	movs	r2, #15
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	08da      	lsrs	r2, r3, #3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3208      	adds	r2, #8
 8004fd8:	6939      	ldr	r1, [r7, #16]
 8004fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	2203      	movs	r2, #3
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0203 	and.w	r2, r3, #3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80b2 	beq.w	8005184 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005020:	4b61      	ldr	r3, [pc, #388]	; (80051a8 <HAL_GPIO_Init+0x2fc>)
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	4a60      	ldr	r2, [pc, #384]	; (80051a8 <HAL_GPIO_Init+0x2fc>)
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	6613      	str	r3, [r2, #96]	; 0x60
 800502c:	4b5e      	ldr	r3, [pc, #376]	; (80051a8 <HAL_GPIO_Init+0x2fc>)
 800502e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005038:	4a5c      	ldr	r2, [pc, #368]	; (80051ac <HAL_GPIO_Init+0x300>)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	089b      	lsrs	r3, r3, #2
 800503e:	3302      	adds	r3, #2
 8005040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	220f      	movs	r2, #15
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005062:	d02b      	beq.n	80050bc <HAL_GPIO_Init+0x210>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_GPIO_Init+0x304>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d025      	beq.n	80050b8 <HAL_GPIO_Init+0x20c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a51      	ldr	r2, [pc, #324]	; (80051b4 <HAL_GPIO_Init+0x308>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d01f      	beq.n	80050b4 <HAL_GPIO_Init+0x208>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a50      	ldr	r2, [pc, #320]	; (80051b8 <HAL_GPIO_Init+0x30c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d019      	beq.n	80050b0 <HAL_GPIO_Init+0x204>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a4f      	ldr	r2, [pc, #316]	; (80051bc <HAL_GPIO_Init+0x310>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <HAL_GPIO_Init+0x200>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a4e      	ldr	r2, [pc, #312]	; (80051c0 <HAL_GPIO_Init+0x314>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00d      	beq.n	80050a8 <HAL_GPIO_Init+0x1fc>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a4d      	ldr	r2, [pc, #308]	; (80051c4 <HAL_GPIO_Init+0x318>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <HAL_GPIO_Init+0x1f8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a4c      	ldr	r2, [pc, #304]	; (80051c8 <HAL_GPIO_Init+0x31c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <HAL_GPIO_Init+0x1f4>
 800509c:	2307      	movs	r3, #7
 800509e:	e00e      	b.n	80050be <HAL_GPIO_Init+0x212>
 80050a0:	2308      	movs	r3, #8
 80050a2:	e00c      	b.n	80050be <HAL_GPIO_Init+0x212>
 80050a4:	2306      	movs	r3, #6
 80050a6:	e00a      	b.n	80050be <HAL_GPIO_Init+0x212>
 80050a8:	2305      	movs	r3, #5
 80050aa:	e008      	b.n	80050be <HAL_GPIO_Init+0x212>
 80050ac:	2304      	movs	r3, #4
 80050ae:	e006      	b.n	80050be <HAL_GPIO_Init+0x212>
 80050b0:	2303      	movs	r3, #3
 80050b2:	e004      	b.n	80050be <HAL_GPIO_Init+0x212>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e002      	b.n	80050be <HAL_GPIO_Init+0x212>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_GPIO_Init+0x212>
 80050bc:	2300      	movs	r3, #0
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	f002 0203 	and.w	r2, r2, #3
 80050c4:	0092      	lsls	r2, r2, #2
 80050c6:	4093      	lsls	r3, r2
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050ce:	4937      	ldr	r1, [pc, #220]	; (80051ac <HAL_GPIO_Init+0x300>)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	089b      	lsrs	r3, r3, #2
 80050d4:	3302      	adds	r3, #2
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050dc:	4b3b      	ldr	r3, [pc, #236]	; (80051cc <HAL_GPIO_Init+0x320>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	43db      	mvns	r3, r3
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4013      	ands	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005100:	4a32      	ldr	r2, [pc, #200]	; (80051cc <HAL_GPIO_Init+0x320>)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005106:	4b31      	ldr	r3, [pc, #196]	; (80051cc <HAL_GPIO_Init+0x320>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	43db      	mvns	r3, r3
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4013      	ands	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800512a:	4a28      	ldr	r2, [pc, #160]	; (80051cc <HAL_GPIO_Init+0x320>)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005130:	4b26      	ldr	r3, [pc, #152]	; (80051cc <HAL_GPIO_Init+0x320>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	43db      	mvns	r3, r3
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4013      	ands	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005154:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <HAL_GPIO_Init+0x320>)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800515a:	4b1c      	ldr	r3, [pc, #112]	; (80051cc <HAL_GPIO_Init+0x320>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	43db      	mvns	r3, r3
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4013      	ands	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800517e:	4a13      	ldr	r2, [pc, #76]	; (80051cc <HAL_GPIO_Init+0x320>)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	3301      	adds	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	f47f ae91 	bne.w	8004ebc <HAL_GPIO_Init+0x10>
  }
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40010000 	.word	0x40010000
 80051b0:	48000400 	.word	0x48000400
 80051b4:	48000800 	.word	0x48000800
 80051b8:	48000c00 	.word	0x48000c00
 80051bc:	48001000 	.word	0x48001000
 80051c0:	48001400 	.word	0x48001400
 80051c4:	48001800 	.word	0x48001800
 80051c8:	48001c00 	.word	0x48001c00
 80051cc:	40010400 	.word	0x40010400

080051d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
 80051dc:	4613      	mov	r3, r2
 80051de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051e0:	787b      	ldrb	r3, [r7, #1]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051ec:	e002      	b.n	80051f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051ee:	887a      	ldrh	r2, [r7, #2]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800520a:	4b08      	ldr	r3, [pc, #32]	; (800522c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d006      	beq.n	8005224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005216:	4a05      	ldr	r2, [pc, #20]	; (800522c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe f826 	bl	8003270 <HAL_GPIO_EXTI_Callback>
  }
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40010400 	.word	0x40010400

08005230 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e0bf      	b.n	80053c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7fe f8f0 	bl	800343c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005272:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6999      	ldr	r1, [r3, #24]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005288:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6899      	ldr	r1, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	4b4a      	ldr	r3, [pc, #296]	; (80053cc <HAL_LTDC_Init+0x19c>)
 80052a4:	400b      	ands	r3, r1
 80052a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6899      	ldr	r1, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68d9      	ldr	r1, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b3e      	ldr	r3, [pc, #248]	; (80053cc <HAL_LTDC_Init+0x19c>)
 80052d2:	400b      	ands	r3, r1
 80052d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68d9      	ldr	r1, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1a      	ldr	r2, [r3, #32]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6919      	ldr	r1, [r3, #16]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b33      	ldr	r3, [pc, #204]	; (80053cc <HAL_LTDC_Init+0x19c>)
 8005300:	400b      	ands	r3, r1
 8005302:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6919      	ldr	r1, [r3, #16]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6959      	ldr	r1, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	4b27      	ldr	r3, [pc, #156]	; (80053cc <HAL_LTDC_Init+0x19c>)
 800532e:	400b      	ands	r3, r1
 8005330:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6959      	ldr	r1, [r3, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0206 	orr.w	r2, r2, #6
 800539e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	f000f800 	.word	0xf000f800

080053d0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d023      	beq.n	800543a <HAL_LTDC_IRQHandler+0x6a>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01e      	beq.n	800543a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0204 	bic.w	r2, r2, #4
 800540a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2204      	movs	r2, #4
 8005412:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800541a:	f043 0201 	orr.w	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2204      	movs	r2, #4
 8005428:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f86f 	bl	8005518 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d023      	beq.n	800548c <HAL_LTDC_IRQHandler+0xbc>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01e      	beq.n	800548c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0202 	bic.w	r2, r2, #2
 800545c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2202      	movs	r2, #2
 8005464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800546c:	f043 0202 	orr.w	r2, r3, #2
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2204      	movs	r2, #4
 800547a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f846 	bl	8005518 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01b      	beq.n	80054ce <HAL_LTDC_IRQHandler+0xfe>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d016      	beq.n	80054ce <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0201 	bic.w	r2, r2, #1
 80054ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2201      	movs	r2, #1
 80054b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f82f 	bl	800552c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <HAL_LTDC_IRQHandler+0x140>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0208 	bic.w	r2, r2, #8
 80054f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2208      	movs	r2, #8
 80054f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f818 	bl	8005540 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005510:	bf00      	nop
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005554:	b5b0      	push	{r4, r5, r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_LTDC_ConfigLayer+0x1a>
 800556a:	2302      	movs	r3, #2
 800556c:	e02c      	b.n	80055c8 <HAL_LTDC_ConfigLayer+0x74>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2202      	movs	r2, #2
 800557a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2134      	movs	r1, #52	; 0x34
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	4413      	add	r3, r2
 800558a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4614      	mov	r4, r2
 8005592:	461d      	mov	r5, r3
 8005594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800559a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800559c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800559e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f811 	bl	80055d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2201      	movs	r2, #1
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bdb0      	pop	{r4, r5, r7, pc}

080055d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b089      	sub	sp, #36	; 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ec:	4413      	add	r3, r2
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	01db      	lsls	r3, r3, #7
 80055fc:	4413      	add	r3, r2
 80055fe:	3384      	adds	r3, #132	; 0x84
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	4611      	mov	r1, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	01d2      	lsls	r2, r2, #7
 800560c:	440a      	add	r2, r1
 800560e:	3284      	adds	r2, #132	; 0x84
 8005610:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005614:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005626:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005628:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4619      	mov	r1, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	01db      	lsls	r3, r3, #7
 8005634:	440b      	add	r3, r1
 8005636:	3384      	adds	r3, #132	; 0x84
 8005638:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800563e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800564e:	4413      	add	r3, r2
 8005650:	041b      	lsls	r3, r3, #16
 8005652:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	01db      	lsls	r3, r3, #7
 800565e:	4413      	add	r3, r2
 8005660:	3384      	adds	r3, #132	; 0x84
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	4611      	mov	r1, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	01d2      	lsls	r2, r2, #7
 800566e:	440a      	add	r2, r1
 8005670:	3284      	adds	r2, #132	; 0x84
 8005672:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005676:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005686:	4413      	add	r3, r2
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4619      	mov	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	01db      	lsls	r3, r3, #7
 8005694:	440b      	add	r3, r1
 8005696:	3384      	adds	r3, #132	; 0x84
 8005698:	4619      	mov	r1, r3
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	01db      	lsls	r3, r3, #7
 80056aa:	4413      	add	r3, r2
 80056ac:	3384      	adds	r3, #132	; 0x84
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	4611      	mov	r1, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	01d2      	lsls	r2, r2, #7
 80056ba:	440a      	add	r2, r1
 80056bc:	3284      	adds	r2, #132	; 0x84
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	01db      	lsls	r3, r3, #7
 80056ce:	4413      	add	r3, r2
 80056d0:	3384      	adds	r3, #132	; 0x84
 80056d2:	461a      	mov	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80056ea:	041b      	lsls	r3, r3, #16
 80056ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	061b      	lsls	r3, r3, #24
 80056f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	01db      	lsls	r3, r3, #7
 8005700:	4413      	add	r3, r2
 8005702:	3384      	adds	r3, #132	; 0x84
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	01db      	lsls	r3, r3, #7
 8005710:	4413      	add	r3, r2
 8005712:	3384      	adds	r3, #132	; 0x84
 8005714:	461a      	mov	r2, r3
 8005716:	2300      	movs	r3, #0
 8005718:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005720:	461a      	mov	r2, r3
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	431a      	orrs	r2, r3
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	431a      	orrs	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4619      	mov	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	01db      	lsls	r3, r3, #7
 8005734:	440b      	add	r3, r1
 8005736:	3384      	adds	r3, #132	; 0x84
 8005738:	4619      	mov	r1, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	01db      	lsls	r3, r3, #7
 800574a:	4413      	add	r3, r2
 800574c:	3384      	adds	r3, #132	; 0x84
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	4611      	mov	r1, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	01d2      	lsls	r2, r2, #7
 800575a:	440a      	add	r2, r1
 800575c:	3284      	adds	r2, #132	; 0x84
 800575e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005762:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	01db      	lsls	r3, r3, #7
 800576e:	4413      	add	r3, r2
 8005770:	3384      	adds	r3, #132	; 0x84
 8005772:	461a      	mov	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	01db      	lsls	r3, r3, #7
 8005784:	4413      	add	r3, r2
 8005786:	3384      	adds	r3, #132	; 0x84
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	4611      	mov	r1, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	01d2      	lsls	r2, r2, #7
 8005794:	440a      	add	r2, r1
 8005796:	3284      	adds	r2, #132	; 0x84
 8005798:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800579c:	f023 0307 	bic.w	r3, r3, #7
 80057a0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	6809      	ldr	r1, [r1, #0]
 80057ae:	4608      	mov	r0, r1
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	01c9      	lsls	r1, r1, #7
 80057b4:	4401      	add	r1, r0
 80057b6:	3184      	adds	r1, #132	; 0x84
 80057b8:	4313      	orrs	r3, r2
 80057ba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	01db      	lsls	r3, r3, #7
 80057c6:	4413      	add	r3, r2
 80057c8:	3384      	adds	r3, #132	; 0x84
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	01db      	lsls	r3, r3, #7
 80057d6:	4413      	add	r3, r2
 80057d8:	3384      	adds	r3, #132	; 0x84
 80057da:	461a      	mov	r2, r3
 80057dc:	2300      	movs	r3, #0
 80057de:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	01db      	lsls	r3, r3, #7
 80057ea:	4413      	add	r3, r2
 80057ec:	3384      	adds	r3, #132	; 0x84
 80057ee:	461a      	mov	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80057fe:	2304      	movs	r3, #4
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	e01b      	b.n	800583c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d102      	bne.n	8005812 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800580c:	2303      	movs	r3, #3
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e014      	b.n	800583c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b04      	cmp	r3, #4
 8005818:	d00b      	beq.n	8005832 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800581e:	2b02      	cmp	r3, #2
 8005820:	d007      	beq.n	8005832 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005826:	2b03      	cmp	r3, #3
 8005828:	d003      	beq.n	8005832 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800582e:	2b07      	cmp	r3, #7
 8005830:	d102      	bne.n	8005838 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005832:	2302      	movs	r3, #2
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	e001      	b.n	800583c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005838:	2301      	movs	r3, #1
 800583a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	01db      	lsls	r3, r3, #7
 8005846:	4413      	add	r3, r2
 8005848:	3384      	adds	r3, #132	; 0x84
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	4611      	mov	r1, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	01d2      	lsls	r2, r2, #7
 8005856:	440a      	add	r2, r1
 8005858:	3284      	adds	r2, #132	; 0x84
 800585a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800585e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6859      	ldr	r1, [r3, #4]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	1acb      	subs	r3, r1, r3
 8005876:	69f9      	ldr	r1, [r7, #28]
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800587e:	68f9      	ldr	r1, [r7, #12]
 8005880:	6809      	ldr	r1, [r1, #0]
 8005882:	4608      	mov	r0, r1
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	01c9      	lsls	r1, r1, #7
 8005888:	4401      	add	r1, r0
 800588a:	3184      	adds	r1, #132	; 0x84
 800588c:	4313      	orrs	r3, r2
 800588e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	01db      	lsls	r3, r3, #7
 800589a:	4413      	add	r3, r2
 800589c:	3384      	adds	r3, #132	; 0x84
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	4611      	mov	r1, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	01d2      	lsls	r2, r2, #7
 80058aa:	440a      	add	r2, r1
 80058ac:	3284      	adds	r2, #132	; 0x84
 80058ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	01db      	lsls	r3, r3, #7
 80058c2:	4413      	add	r3, r2
 80058c4:	3384      	adds	r3, #132	; 0x84
 80058c6:	461a      	mov	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	01db      	lsls	r3, r3, #7
 80058d8:	4413      	add	r3, r2
 80058da:	3384      	adds	r3, #132	; 0x84
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	6812      	ldr	r2, [r2, #0]
 80058e2:	4611      	mov	r1, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	01d2      	lsls	r2, r2, #7
 80058e8:	440a      	add	r2, r1
 80058ea:	3284      	adds	r2, #132	; 0x84
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6013      	str	r3, [r2, #0]
}
 80058f2:	bf00      	nop
 80058f4:	3724      	adds	r7, #36	; 0x24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005904:	4b0d      	ldr	r3, [pc, #52]	; (800593c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800590c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005910:	d102      	bne.n	8005918 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005916:	e00b      	b.n	8005930 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005918:	4b08      	ldr	r3, [pc, #32]	; (800593c <HAL_PWREx_GetVoltageRange+0x3c>)
 800591a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005926:	d102      	bne.n	800592e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800592c:	e000      	b.n	8005930 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800592e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40007000 	.word	0x40007000

08005940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d141      	bne.n	80059d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800594e:	4b4b      	ldr	r3, [pc, #300]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595a:	d131      	bne.n	80059c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800595c:	4b47      	ldr	r3, [pc, #284]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800595e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005962:	4a46      	ldr	r2, [pc, #280]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005968:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800596c:	4b43      	ldr	r3, [pc, #268]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005974:	4a41      	ldr	r2, [pc, #260]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800597a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800597c:	4b40      	ldr	r3, [pc, #256]	; (8005a80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2232      	movs	r2, #50	; 0x32
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	4a3f      	ldr	r2, [pc, #252]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	0c9b      	lsrs	r3, r3, #18
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005992:	e002      	b.n	800599a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3b01      	subs	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800599a:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a6:	d102      	bne.n	80059ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f2      	bne.n	8005994 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059ae:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ba:	d158      	bne.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e057      	b.n	8005a70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059c0:	4b2e      	ldr	r3, [pc, #184]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c6:	4a2d      	ldr	r2, [pc, #180]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80059d0:	e04d      	b.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d8:	d141      	bne.n	8005a5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059da:	4b28      	ldr	r3, [pc, #160]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e6:	d131      	bne.n	8005a4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059e8:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ee:	4a23      	ldr	r2, [pc, #140]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059f8:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a00:	4a1e      	ldr	r2, [pc, #120]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2232      	movs	r2, #50	; 0x32
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	0c9b      	lsrs	r3, r3, #18
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a1e:	e002      	b.n	8005a26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a26:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a32:	d102      	bne.n	8005a3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f2      	bne.n	8005a20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a3a:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a46:	d112      	bne.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e011      	b.n	8005a70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a52:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a5c:	e007      	b.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a66:	4a05      	ldr	r2, [pc, #20]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a6c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40007000 	.word	0x40007000
 8005a80:	20000020 	.word	0x20000020
 8005a84:	431bde83 	.word	0x431bde83

08005a88 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4a04      	ldr	r2, [pc, #16]	; (8005aa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a96:	6053      	str	r3, [r2, #4]
}
 8005a98:	bf00      	nop
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40007000 	.word	0x40007000

08005aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d102      	bne.n	8005abc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f000 bc08 	b.w	80062cc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005abc:	4b96      	ldr	r3, [pc, #600]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 030c 	and.w	r3, r3, #12
 8005ac4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac6:	4b94      	ldr	r3, [pc, #592]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80e4 	beq.w	8005ca6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <HAL_RCC_OscConfig+0x4c>
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b0c      	cmp	r3, #12
 8005ae8:	f040 808b 	bne.w	8005c02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	f040 8087 	bne.w	8005c02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005af4:	4b88      	ldr	r3, [pc, #544]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <HAL_RCC_OscConfig+0x64>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e3df      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1a      	ldr	r2, [r3, #32]
 8005b10:	4b81      	ldr	r3, [pc, #516]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <HAL_RCC_OscConfig+0x7e>
 8005b1c:	4b7e      	ldr	r3, [pc, #504]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b24:	e005      	b.n	8005b32 <HAL_RCC_OscConfig+0x8a>
 8005b26:	4b7c      	ldr	r3, [pc, #496]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d223      	bcs.n	8005b7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fdcc 	bl	80066d8 <RCC_SetFlashLatencyFromMSIRange>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e3c0      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b4a:	4b73      	ldr	r3, [pc, #460]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a72      	ldr	r2, [pc, #456]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b50:	f043 0308 	orr.w	r3, r3, #8
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	4b70      	ldr	r3, [pc, #448]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	496d      	ldr	r1, [pc, #436]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b68:	4b6b      	ldr	r3, [pc, #428]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	4968      	ldr	r1, [pc, #416]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	604b      	str	r3, [r1, #4]
 8005b7c:	e025      	b.n	8005bca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b7e:	4b66      	ldr	r3, [pc, #408]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b84:	f043 0308 	orr.w	r3, r3, #8
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	4b63      	ldr	r3, [pc, #396]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	4960      	ldr	r1, [pc, #384]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b9c:	4b5e      	ldr	r3, [pc, #376]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	495b      	ldr	r1, [pc, #364]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d109      	bne.n	8005bca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fd8c 	bl	80066d8 <RCC_SetFlashLatencyFromMSIRange>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e380      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bca:	f000 fcc1 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	4b51      	ldr	r3, [pc, #324]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	4950      	ldr	r1, [pc, #320]	; (8005d1c <HAL_RCC_OscConfig+0x274>)
 8005bdc:	5ccb      	ldrb	r3, [r1, r3]
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a4e      	ldr	r2, [pc, #312]	; (8005d20 <HAL_RCC_OscConfig+0x278>)
 8005be8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005bea:	4b4e      	ldr	r3, [pc, #312]	; (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fd fe0e 	bl	8003810 <HAL_InitTick>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d052      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	e364      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d032      	beq.n	8005c70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c0a:	4b43      	ldr	r3, [pc, #268]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a42      	ldr	r2, [pc, #264]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c10:	f043 0301 	orr.w	r3, r3, #1
 8005c14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c16:	f7fd fe4b 	bl	80038b0 <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c1e:	f7fd fe47 	bl	80038b0 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e34d      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c30:	4b39      	ldr	r3, [pc, #228]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c3c:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a35      	ldr	r2, [pc, #212]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c42:	f043 0308 	orr.w	r3, r3, #8
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	4b33      	ldr	r3, [pc, #204]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	4930      	ldr	r1, [pc, #192]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c5a:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	492b      	ldr	r1, [pc, #172]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	604b      	str	r3, [r1, #4]
 8005c6e:	e01a      	b.n	8005ca6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c70:	4b29      	ldr	r3, [pc, #164]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c7c:	f7fd fe18 	bl	80038b0 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c84:	f7fd fe14 	bl	80038b0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e31a      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c96:	4b20      	ldr	r3, [pc, #128]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x1dc>
 8005ca2:	e000      	b.n	8005ca6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ca4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d073      	beq.n	8005d9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x21c>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b0c      	cmp	r3, #12
 8005cbc:	d10e      	bne.n	8005cdc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d10b      	bne.n	8005cdc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc4:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d063      	beq.n	8005d98 <HAL_RCC_OscConfig+0x2f0>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d15f      	bne.n	8005d98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e2f7      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce4:	d106      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x24c>
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e025      	b.n	8005d40 <HAL_RCC_OscConfig+0x298>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cfc:	d114      	bne.n	8005d28 <HAL_RCC_OscConfig+0x280>
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a05      	ldr	r2, [pc, #20]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a02      	ldr	r2, [pc, #8]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	e013      	b.n	8005d40 <HAL_RCC_OscConfig+0x298>
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	08009838 	.word	0x08009838
 8005d20:	20000020 	.word	0x20000020
 8005d24:	20000024 	.word	0x20000024
 8005d28:	4ba0      	ldr	r3, [pc, #640]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a9f      	ldr	r2, [pc, #636]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b9d      	ldr	r3, [pc, #628]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a9c      	ldr	r2, [pc, #624]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d013      	beq.n	8005d70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fd fdb2 	bl	80038b0 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d50:	f7fd fdae 	bl	80038b0 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b64      	cmp	r3, #100	; 0x64
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e2b4      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d62:	4b92      	ldr	r3, [pc, #584]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0x2a8>
 8005d6e:	e014      	b.n	8005d9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fd fd9e 	bl	80038b0 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d78:	f7fd fd9a 	bl	80038b0 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e2a0      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d8a:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x2d0>
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d060      	beq.n	8005e68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_OscConfig+0x310>
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	d119      	bne.n	8005de6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d116      	bne.n	8005de6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db8:	4b7c      	ldr	r3, [pc, #496]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x328>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e27d      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd0:	4b76      	ldr	r3, [pc, #472]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	061b      	lsls	r3, r3, #24
 8005dde:	4973      	ldr	r1, [pc, #460]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de4:	e040      	b.n	8005e68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d023      	beq.n	8005e36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dee:	4b6f      	ldr	r3, [pc, #444]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6e      	ldr	r2, [pc, #440]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfa:	f7fd fd59 	bl	80038b0 <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e02:	f7fd fd55 	bl	80038b0 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e25b      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e14:	4b65      	ldr	r3, [pc, #404]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e20:	4b62      	ldr	r3, [pc, #392]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	061b      	lsls	r3, r3, #24
 8005e2e:	495f      	ldr	r1, [pc, #380]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
 8005e34:	e018      	b.n	8005e68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e36:	4b5d      	ldr	r3, [pc, #372]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a5c      	ldr	r2, [pc, #368]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fd fd35 	bl	80038b0 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e4a:	f7fd fd31 	bl	80038b0 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e237      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e5c:	4b53      	ldr	r3, [pc, #332]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f0      	bne.n	8005e4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d03c      	beq.n	8005eee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01c      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e7c:	4b4b      	ldr	r3, [pc, #300]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e82:	4a4a      	ldr	r2, [pc, #296]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fd fd10 	bl	80038b0 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fd fd0c 	bl	80038b0 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e212      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ea6:	4b41      	ldr	r3, [pc, #260]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0ef      	beq.n	8005e94 <HAL_RCC_OscConfig+0x3ec>
 8005eb4:	e01b      	b.n	8005eee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb6:	4b3d      	ldr	r3, [pc, #244]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ebc:	4a3b      	ldr	r2, [pc, #236]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec6:	f7fd fcf3 	bl	80038b0 <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ece:	f7fd fcef 	bl	80038b0 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e1f5      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ee0:	4b32      	ldr	r3, [pc, #200]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1ef      	bne.n	8005ece <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80a6 	beq.w	8006048 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005efc:	2300      	movs	r3, #0
 8005efe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f00:	4b2a      	ldr	r3, [pc, #168]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10d      	bne.n	8005f28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0c:	4b27      	ldr	r3, [pc, #156]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f10:	4a26      	ldr	r2, [pc, #152]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f16:	6593      	str	r3, [r2, #88]	; 0x58
 8005f18:	4b24      	ldr	r3, [pc, #144]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f24:	2301      	movs	r3, #1
 8005f26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f28:	4b21      	ldr	r3, [pc, #132]	; (8005fb0 <HAL_RCC_OscConfig+0x508>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d118      	bne.n	8005f66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f34:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCC_OscConfig+0x508>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <HAL_RCC_OscConfig+0x508>)
 8005f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f40:	f7fd fcb6 	bl	80038b0 <HAL_GetTick>
 8005f44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f48:	f7fd fcb2 	bl	80038b0 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e1b8      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f5a:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <HAL_RCC_OscConfig+0x508>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0f0      	beq.n	8005f48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d108      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4d8>
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f74:	4a0d      	ldr	r2, [pc, #52]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f7e:	e029      	b.n	8005fd4 <HAL_RCC_OscConfig+0x52c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	d115      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x50c>
 8005f88:	4b08      	ldr	r3, [pc, #32]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	4a07      	ldr	r2, [pc, #28]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9e:	4a03      	ldr	r2, [pc, #12]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fa8:	e014      	b.n	8005fd4 <HAL_RCC_OscConfig+0x52c>
 8005faa:	bf00      	nop
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40007000 	.word	0x40007000
 8005fb4:	4b9d      	ldr	r3, [pc, #628]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fba:	4a9c      	ldr	r2, [pc, #624]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fc4:	4b99      	ldr	r3, [pc, #612]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fca:	4a98      	ldr	r2, [pc, #608]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8005fcc:	f023 0304 	bic.w	r3, r3, #4
 8005fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d016      	beq.n	800600a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fdc:	f7fd fc68 	bl	80038b0 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe4:	f7fd fc64 	bl	80038b0 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e168      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ffa:	4b8c      	ldr	r3, [pc, #560]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0ed      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x53c>
 8006008:	e015      	b.n	8006036 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600a:	f7fd fc51 	bl	80038b0 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006010:	e00a      	b.n	8006028 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fd fc4d 	bl	80038b0 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e151      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006028:	4b80      	ldr	r3, [pc, #512]	; (800622c <HAL_RCC_OscConfig+0x784>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1ed      	bne.n	8006012 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006036:	7ffb      	ldrb	r3, [r7, #31]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d105      	bne.n	8006048 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800603c:	4b7b      	ldr	r3, [pc, #492]	; (800622c <HAL_RCC_OscConfig+0x784>)
 800603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006040:	4a7a      	ldr	r2, [pc, #488]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8006042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006046:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d03c      	beq.n	80060ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01c      	beq.n	8006096 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800605c:	4b73      	ldr	r3, [pc, #460]	; (800622c <HAL_RCC_OscConfig+0x784>)
 800605e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006062:	4a72      	ldr	r2, [pc, #456]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fd fc20 	bl	80038b0 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006074:	f7fd fc1c 	bl	80038b0 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e122      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006086:	4b69      	ldr	r3, [pc, #420]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8006088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0ef      	beq.n	8006074 <HAL_RCC_OscConfig+0x5cc>
 8006094:	e01b      	b.n	80060ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006096:	4b65      	ldr	r3, [pc, #404]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8006098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800609c:	4a63      	ldr	r2, [pc, #396]	; (800622c <HAL_RCC_OscConfig+0x784>)
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a6:	f7fd fc03 	bl	80038b0 <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060ac:	e008      	b.n	80060c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060ae:	f7fd fbff 	bl	80038b0 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e105      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060c0:	4b5a      	ldr	r3, [pc, #360]	; (800622c <HAL_RCC_OscConfig+0x784>)
 80060c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1ef      	bne.n	80060ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80f9 	beq.w	80062ca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	2b02      	cmp	r3, #2
 80060de:	f040 80cf 	bne.w	8006280 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80060e2:	4b52      	ldr	r3, [pc, #328]	; (800622c <HAL_RCC_OscConfig+0x784>)
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f003 0203 	and.w	r2, r3, #3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d12c      	bne.n	8006150 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	3b01      	subs	r3, #1
 8006102:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006104:	429a      	cmp	r2, r3
 8006106:	d123      	bne.n	8006150 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006114:	429a      	cmp	r2, r3
 8006116:	d11b      	bne.n	8006150 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d113      	bne.n	8006150 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	3b01      	subs	r3, #1
 8006136:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006138:	429a      	cmp	r2, r3
 800613a:	d109      	bne.n	8006150 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	3b01      	subs	r3, #1
 800614a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d071      	beq.n	8006234 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b0c      	cmp	r3, #12
 8006154:	d068      	beq.n	8006228 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006156:	4b35      	ldr	r3, [pc, #212]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d105      	bne.n	800616e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006162:	4b32      	ldr	r3, [pc, #200]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e0ac      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006172:	4b2e      	ldr	r3, [pc, #184]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2d      	ldr	r2, [pc, #180]	; (800622c <HAL_RCC_OscConfig+0x784>)
 8006178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800617c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800617e:	f7fd fb97 	bl	80038b0 <HAL_GetTick>
 8006182:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006184:	e008      	b.n	8006198 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006186:	f7fd fb93 	bl	80038b0 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e099      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006198:	4b24      	ldr	r3, [pc, #144]	; (800622c <HAL_RCC_OscConfig+0x784>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1f0      	bne.n	8006186 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061a4:	4b21      	ldr	r3, [pc, #132]	; (800622c <HAL_RCC_OscConfig+0x784>)
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	4b21      	ldr	r3, [pc, #132]	; (8006230 <HAL_RCC_OscConfig+0x788>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061b4:	3a01      	subs	r2, #1
 80061b6:	0112      	lsls	r2, r2, #4
 80061b8:	4311      	orrs	r1, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061be:	0212      	lsls	r2, r2, #8
 80061c0:	4311      	orrs	r1, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061c6:	0852      	lsrs	r2, r2, #1
 80061c8:	3a01      	subs	r2, #1
 80061ca:	0552      	lsls	r2, r2, #21
 80061cc:	4311      	orrs	r1, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061d2:	0852      	lsrs	r2, r2, #1
 80061d4:	3a01      	subs	r2, #1
 80061d6:	0652      	lsls	r2, r2, #25
 80061d8:	4311      	orrs	r1, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061de:	06d2      	lsls	r2, r2, #27
 80061e0:	430a      	orrs	r2, r1
 80061e2:	4912      	ldr	r1, [pc, #72]	; (800622c <HAL_RCC_OscConfig+0x784>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061e8:	4b10      	ldr	r3, [pc, #64]	; (800622c <HAL_RCC_OscConfig+0x784>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a0f      	ldr	r2, [pc, #60]	; (800622c <HAL_RCC_OscConfig+0x784>)
 80061ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061f4:	4b0d      	ldr	r3, [pc, #52]	; (800622c <HAL_RCC_OscConfig+0x784>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	4a0c      	ldr	r2, [pc, #48]	; (800622c <HAL_RCC_OscConfig+0x784>)
 80061fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006200:	f7fd fb56 	bl	80038b0 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006208:	f7fd fb52 	bl	80038b0 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e058      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800621a:	4b04      	ldr	r3, [pc, #16]	; (800622c <HAL_RCC_OscConfig+0x784>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f0      	beq.n	8006208 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006226:	e050      	b.n	80062ca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e04f      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
 800622c:	40021000 	.word	0x40021000
 8006230:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006234:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d144      	bne.n	80062ca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006240:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 8006246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800624a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800624c:	4b21      	ldr	r3, [pc, #132]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4a20      	ldr	r2, [pc, #128]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 8006252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006256:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006258:	f7fd fb2a 	bl	80038b0 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006260:	f7fd fb26 	bl	80038b0 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e02c      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006272:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0f0      	beq.n	8006260 <HAL_RCC_OscConfig+0x7b8>
 800627e:	e024      	b.n	80062ca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b0c      	cmp	r3, #12
 8006284:	d01f      	beq.n	80062c6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a12      	ldr	r2, [pc, #72]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 800628c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006292:	f7fd fb0d 	bl	80038b0 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800629a:	f7fd fb09 	bl	80038b0 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e00f      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1f0      	bne.n	800629a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	4905      	ldr	r1, [pc, #20]	; (80062d4 <HAL_RCC_OscConfig+0x82c>)
 80062be:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <HAL_RCC_OscConfig+0x830>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	60cb      	str	r3, [r1, #12]
 80062c4:	e001      	b.n	80062ca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40021000 	.word	0x40021000
 80062d8:	feeefffc 	.word	0xfeeefffc

080062dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e11d      	b.n	8006530 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062f4:	4b90      	ldr	r3, [pc, #576]	; (8006538 <HAL_RCC_ClockConfig+0x25c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d910      	bls.n	8006324 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006302:	4b8d      	ldr	r3, [pc, #564]	; (8006538 <HAL_RCC_ClockConfig+0x25c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f023 020f 	bic.w	r2, r3, #15
 800630a:	498b      	ldr	r1, [pc, #556]	; (8006538 <HAL_RCC_ClockConfig+0x25c>)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006312:	4b89      	ldr	r3, [pc, #548]	; (8006538 <HAL_RCC_ClockConfig+0x25c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d001      	beq.n	8006324 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e105      	b.n	8006530 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d010      	beq.n	8006352 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	4b81      	ldr	r3, [pc, #516]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800633c:	429a      	cmp	r2, r3
 800633e:	d908      	bls.n	8006352 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006340:	4b7e      	ldr	r3, [pc, #504]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	497b      	ldr	r1, [pc, #492]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 800634e:	4313      	orrs	r3, r2
 8006350:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d079      	beq.n	8006452 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b03      	cmp	r3, #3
 8006364:	d11e      	bne.n	80063a4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006366:	4b75      	ldr	r3, [pc, #468]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e0dc      	b.n	8006530 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006376:	f000 fa09 	bl	800678c <RCC_GetSysClockFreqFromPLLSource>
 800637a:	4603      	mov	r3, r0
 800637c:	4a70      	ldr	r2, [pc, #448]	; (8006540 <HAL_RCC_ClockConfig+0x264>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d946      	bls.n	8006410 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006382:	4b6e      	ldr	r3, [pc, #440]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d140      	bne.n	8006410 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800638e:	4b6b      	ldr	r3, [pc, #428]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006396:	4a69      	ldr	r2, [pc, #420]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800639e:	2380      	movs	r3, #128	; 0x80
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e035      	b.n	8006410 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d107      	bne.n	80063bc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ac:	4b63      	ldr	r3, [pc, #396]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d115      	bne.n	80063e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0b9      	b.n	8006530 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d107      	bne.n	80063d4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063c4:	4b5d      	ldr	r3, [pc, #372]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d109      	bne.n	80063e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0ad      	b.n	8006530 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063d4:	4b59      	ldr	r3, [pc, #356]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e0a5      	b.n	8006530 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80063e4:	f000 f8b4 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 80063e8:	4603      	mov	r3, r0
 80063ea:	4a55      	ldr	r2, [pc, #340]	; (8006540 <HAL_RCC_ClockConfig+0x264>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d90f      	bls.n	8006410 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80063f0:	4b52      	ldr	r3, [pc, #328]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063fc:	4b4f      	ldr	r3, [pc, #316]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006404:	4a4d      	ldr	r2, [pc, #308]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006410:	4b4a      	ldr	r3, [pc, #296]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f023 0203 	bic.w	r2, r3, #3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4947      	ldr	r1, [pc, #284]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 800641e:	4313      	orrs	r3, r2
 8006420:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006422:	f7fd fa45 	bl	80038b0 <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006428:	e00a      	b.n	8006440 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800642a:	f7fd fa41 	bl	80038b0 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	f241 3288 	movw	r2, #5000	; 0x1388
 8006438:	4293      	cmp	r3, r2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e077      	b.n	8006530 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006440:	4b3e      	ldr	r3, [pc, #248]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 020c 	and.w	r2, r3, #12
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	429a      	cmp	r2, r3
 8006450:	d1eb      	bne.n	800642a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b80      	cmp	r3, #128	; 0x80
 8006456:	d105      	bne.n	8006464 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006458:	4b38      	ldr	r3, [pc, #224]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	4a37      	ldr	r2, [pc, #220]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 800645e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006462:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	4b31      	ldr	r3, [pc, #196]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800647c:	429a      	cmp	r2, r3
 800647e:	d208      	bcs.n	8006492 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006480:	4b2e      	ldr	r3, [pc, #184]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	492b      	ldr	r1, [pc, #172]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 800648e:	4313      	orrs	r3, r2
 8006490:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006492:	4b29      	ldr	r3, [pc, #164]	; (8006538 <HAL_RCC_ClockConfig+0x25c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d210      	bcs.n	80064c2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a0:	4b25      	ldr	r3, [pc, #148]	; (8006538 <HAL_RCC_ClockConfig+0x25c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f023 020f 	bic.w	r2, r3, #15
 80064a8:	4923      	ldr	r1, [pc, #140]	; (8006538 <HAL_RCC_ClockConfig+0x25c>)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b0:	4b21      	ldr	r3, [pc, #132]	; (8006538 <HAL_RCC_ClockConfig+0x25c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d001      	beq.n	80064c2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e036      	b.n	8006530 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d008      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064ce:	4b1b      	ldr	r3, [pc, #108]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	4918      	ldr	r1, [pc, #96]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ec:	4b13      	ldr	r3, [pc, #76]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	4910      	ldr	r1, [pc, #64]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006500:	f000 f826 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 8006504:	4602      	mov	r2, r0
 8006506:	4b0d      	ldr	r3, [pc, #52]	; (800653c <HAL_RCC_ClockConfig+0x260>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	091b      	lsrs	r3, r3, #4
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	490c      	ldr	r1, [pc, #48]	; (8006544 <HAL_RCC_ClockConfig+0x268>)
 8006512:	5ccb      	ldrb	r3, [r1, r3]
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
 800651c:	4a0a      	ldr	r2, [pc, #40]	; (8006548 <HAL_RCC_ClockConfig+0x26c>)
 800651e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <HAL_RCC_ClockConfig+0x270>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f7fd f973 	bl	8003810 <HAL_InitTick>
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]

  return status;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40022000 	.word	0x40022000
 800653c:	40021000 	.word	0x40021000
 8006540:	04c4b400 	.word	0x04c4b400
 8006544:	08009838 	.word	0x08009838
 8006548:	20000020 	.word	0x20000020
 800654c:	20000024 	.word	0x20000024

08006550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006550:	b480      	push	{r7}
 8006552:	b089      	sub	sp, #36	; 0x24
 8006554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	2300      	movs	r3, #0
 800655c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800655e:	4b3e      	ldr	r3, [pc, #248]	; (8006658 <HAL_RCC_GetSysClockFreq+0x108>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006568:	4b3b      	ldr	r3, [pc, #236]	; (8006658 <HAL_RCC_GetSysClockFreq+0x108>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <HAL_RCC_GetSysClockFreq+0x34>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b0c      	cmp	r3, #12
 800657c:	d121      	bne.n	80065c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d11e      	bne.n	80065c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006584:	4b34      	ldr	r3, [pc, #208]	; (8006658 <HAL_RCC_GetSysClockFreq+0x108>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d107      	bne.n	80065a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006590:	4b31      	ldr	r3, [pc, #196]	; (8006658 <HAL_RCC_GetSysClockFreq+0x108>)
 8006592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	f003 030f 	and.w	r3, r3, #15
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	e005      	b.n	80065ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80065a0:	4b2d      	ldr	r3, [pc, #180]	; (8006658 <HAL_RCC_GetSysClockFreq+0x108>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80065ac:	4a2b      	ldr	r2, [pc, #172]	; (800665c <HAL_RCC_GetSysClockFreq+0x10c>)
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10d      	bne.n	80065d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065c0:	e00a      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d102      	bne.n	80065ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065c8:	4b25      	ldr	r3, [pc, #148]	; (8006660 <HAL_RCC_GetSysClockFreq+0x110>)
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	e004      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d101      	bne.n	80065d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065d4:	4b23      	ldr	r3, [pc, #140]	; (8006664 <HAL_RCC_GetSysClockFreq+0x114>)
 80065d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b0c      	cmp	r3, #12
 80065dc:	d134      	bne.n	8006648 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065de:	4b1e      	ldr	r3, [pc, #120]	; (8006658 <HAL_RCC_GetSysClockFreq+0x108>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d003      	beq.n	80065f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d003      	beq.n	80065fc <HAL_RCC_GetSysClockFreq+0xac>
 80065f4:	e005      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80065f6:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <HAL_RCC_GetSysClockFreq+0x110>)
 80065f8:	617b      	str	r3, [r7, #20]
      break;
 80065fa:	e005      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80065fc:	4b19      	ldr	r3, [pc, #100]	; (8006664 <HAL_RCC_GetSysClockFreq+0x114>)
 80065fe:	617b      	str	r3, [r7, #20]
      break;
 8006600:	e002      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	617b      	str	r3, [r7, #20]
      break;
 8006606:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006608:	4b13      	ldr	r3, [pc, #76]	; (8006658 <HAL_RCC_GetSysClockFreq+0x108>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	091b      	lsrs	r3, r3, #4
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	3301      	adds	r3, #1
 8006614:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <HAL_RCC_GetSysClockFreq+0x108>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	fb03 f202 	mul.w	r2, r3, r2
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	fbb2 f3f3 	udiv	r3, r2, r3
 800662c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <HAL_RCC_GetSysClockFreq+0x108>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	0e5b      	lsrs	r3, r3, #25
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	3301      	adds	r3, #1
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	fbb2 f3f3 	udiv	r3, r2, r3
 8006646:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006648:	69bb      	ldr	r3, [r7, #24]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3724      	adds	r7, #36	; 0x24
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40021000 	.word	0x40021000
 800665c:	08009850 	.word	0x08009850
 8006660:	00f42400 	.word	0x00f42400
 8006664:	007a1200 	.word	0x007a1200

08006668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800666c:	4b03      	ldr	r3, [pc, #12]	; (800667c <HAL_RCC_GetHCLKFreq+0x14>)
 800666e:	681b      	ldr	r3, [r3, #0]
}
 8006670:	4618      	mov	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20000020 	.word	0x20000020

08006680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006684:	f7ff fff0 	bl	8006668 <HAL_RCC_GetHCLKFreq>
 8006688:	4602      	mov	r2, r0
 800668a:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	0a1b      	lsrs	r3, r3, #8
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	4904      	ldr	r1, [pc, #16]	; (80066a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006696:	5ccb      	ldrb	r3, [r1, r3]
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40021000 	.word	0x40021000
 80066a8:	08009848 	.word	0x08009848

080066ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80066b0:	f7ff ffda 	bl	8006668 <HAL_RCC_GetHCLKFreq>
 80066b4:	4602      	mov	r2, r0
 80066b6:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	0adb      	lsrs	r3, r3, #11
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	4904      	ldr	r1, [pc, #16]	; (80066d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066c2:	5ccb      	ldrb	r3, [r1, r3]
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000
 80066d4:	08009848 	.word	0x08009848

080066d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80066e4:	4b27      	ldr	r3, [pc, #156]	; (8006784 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80066f0:	f7ff f906 	bl	8005900 <HAL_PWREx_GetVoltageRange>
 80066f4:	6178      	str	r0, [r7, #20]
 80066f6:	e014      	b.n	8006722 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80066f8:	4b22      	ldr	r3, [pc, #136]	; (8006784 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80066fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fc:	4a21      	ldr	r2, [pc, #132]	; (8006784 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80066fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006702:	6593      	str	r3, [r2, #88]	; 0x58
 8006704:	4b1f      	ldr	r3, [pc, #124]	; (8006784 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006710:	f7ff f8f6 	bl	8005900 <HAL_PWREx_GetVoltageRange>
 8006714:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006716:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671a:	4a1a      	ldr	r2, [pc, #104]	; (8006784 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800671c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006720:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006728:	d10b      	bne.n	8006742 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b80      	cmp	r3, #128	; 0x80
 800672e:	d913      	bls.n	8006758 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2ba0      	cmp	r3, #160	; 0xa0
 8006734:	d902      	bls.n	800673c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006736:	2302      	movs	r3, #2
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	e00d      	b.n	8006758 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800673c:	2301      	movs	r3, #1
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	e00a      	b.n	8006758 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b7f      	cmp	r3, #127	; 0x7f
 8006746:	d902      	bls.n	800674e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006748:	2302      	movs	r3, #2
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	e004      	b.n	8006758 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b70      	cmp	r3, #112	; 0x70
 8006752:	d101      	bne.n	8006758 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006754:	2301      	movs	r3, #1
 8006756:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f023 020f 	bic.w	r2, r3, #15
 8006760:	4909      	ldr	r1, [pc, #36]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006768:	4b07      	ldr	r3, [pc, #28]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	429a      	cmp	r2, r3
 8006774:	d001      	beq.n	800677a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40021000 	.word	0x40021000
 8006788:	40022000 	.word	0x40022000

0800678c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006792:	4b2d      	ldr	r3, [pc, #180]	; (8006848 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d00b      	beq.n	80067ba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d825      	bhi.n	80067f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d008      	beq.n	80067c0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d11f      	bne.n	80067f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80067b4:	4b25      	ldr	r3, [pc, #148]	; (800684c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80067b6:	613b      	str	r3, [r7, #16]
    break;
 80067b8:	e01f      	b.n	80067fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80067ba:	4b25      	ldr	r3, [pc, #148]	; (8006850 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80067bc:	613b      	str	r3, [r7, #16]
    break;
 80067be:	e01c      	b.n	80067fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80067c0:	4b21      	ldr	r3, [pc, #132]	; (8006848 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d107      	bne.n	80067dc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80067cc:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80067ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d2:	0a1b      	lsrs	r3, r3, #8
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	e005      	b.n	80067e8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80067dc:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	091b      	lsrs	r3, r3, #4
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80067e8:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f0:	613b      	str	r3, [r7, #16]
    break;
 80067f2:	e002      	b.n	80067fa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	613b      	str	r3, [r7, #16]
    break;
 80067f8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067fa:	4b13      	ldr	r3, [pc, #76]	; (8006848 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	3301      	adds	r3, #1
 8006806:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006808:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	0a1b      	lsrs	r3, r3, #8
 800680e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	fb03 f202 	mul.w	r2, r3, r2
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	fbb2 f3f3 	udiv	r3, r2, r3
 800681e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006820:	4b09      	ldr	r3, [pc, #36]	; (8006848 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	0e5b      	lsrs	r3, r3, #25
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	3301      	adds	r3, #1
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800683a:	683b      	ldr	r3, [r7, #0]
}
 800683c:	4618      	mov	r0, r3
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	40021000 	.word	0x40021000
 800684c:	00f42400 	.word	0x00f42400
 8006850:	007a1200 	.word	0x007a1200
 8006854:	08009850 	.word	0x08009850

08006858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006860:	2300      	movs	r3, #0
 8006862:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006864:	2300      	movs	r3, #0
 8006866:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006870:	2b00      	cmp	r3, #0
 8006872:	d040      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006878:	2b80      	cmp	r3, #128	; 0x80
 800687a:	d02a      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800687c:	2b80      	cmp	r3, #128	; 0x80
 800687e:	d825      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006880:	2b60      	cmp	r3, #96	; 0x60
 8006882:	d026      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006884:	2b60      	cmp	r3, #96	; 0x60
 8006886:	d821      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d006      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	d81d      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d009      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006894:	2b20      	cmp	r3, #32
 8006896:	d010      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006898:	e018      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800689a:	4b89      	ldr	r3, [pc, #548]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	4a88      	ldr	r2, [pc, #544]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068a6:	e015      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fb62 	bl	8006f78 <RCCEx_PLLSAI1_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068b8:	e00c      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3320      	adds	r3, #32
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fc4d 	bl	8007160 <RCCEx_PLLSAI2_Config>
 80068c6:	4603      	mov	r3, r0
 80068c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068ca:	e003      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	74fb      	strb	r3, [r7, #19]
      break;
 80068d0:	e000      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80068d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d4:	7cfb      	ldrb	r3, [r7, #19]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068da:	4b79      	ldr	r3, [pc, #484]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068e0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e8:	4975      	ldr	r1, [pc, #468]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80068f0:	e001      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f2:	7cfb      	ldrb	r3, [r7, #19]
 80068f4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d047      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d030      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006910:	d82a      	bhi.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006916:	d02a      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800691c:	d824      	bhi.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800691e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006922:	d008      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006928:	d81e      	bhi.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800692e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006932:	d010      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006934:	e018      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006936:	4b62      	ldr	r3, [pc, #392]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	4a61      	ldr	r2, [pc, #388]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006940:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006942:	e015      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	2100      	movs	r1, #0
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fb14 	bl	8006f78 <RCCEx_PLLSAI1_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006954:	e00c      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	3320      	adds	r3, #32
 800695a:	2100      	movs	r1, #0
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fbff 	bl	8007160 <RCCEx_PLLSAI2_Config>
 8006962:	4603      	mov	r3, r0
 8006964:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006966:	e003      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	74fb      	strb	r3, [r7, #19]
      break;
 800696c:	e000      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800696e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006976:	4b52      	ldr	r3, [pc, #328]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006978:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800697c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	494e      	ldr	r1, [pc, #312]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800698c:	e001      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698e:	7cfb      	ldrb	r3, [r7, #19]
 8006990:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 809f 	beq.w	8006ade <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a0:	2300      	movs	r3, #0
 80069a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069a4:	4b46      	ldr	r3, [pc, #280]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80069b4:	2300      	movs	r3, #0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00d      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ba:	4b41      	ldr	r3, [pc, #260]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	4a40      	ldr	r2, [pc, #256]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c4:	6593      	str	r3, [r2, #88]	; 0x58
 80069c6:	4b3e      	ldr	r3, [pc, #248]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069d2:	2301      	movs	r3, #1
 80069d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d6:	4b3b      	ldr	r3, [pc, #236]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a3a      	ldr	r2, [pc, #232]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80069dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069e2:	f7fc ff65 	bl	80038b0 <HAL_GetTick>
 80069e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80069e8:	e009      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ea:	f7fc ff61 	bl	80038b0 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d902      	bls.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	74fb      	strb	r3, [r7, #19]
        break;
 80069fc:	e005      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0ef      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006a0a:	7cfb      	ldrb	r3, [r7, #19]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d15b      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a10:	4b2b      	ldr	r3, [pc, #172]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01f      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d019      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a2e:	4b24      	ldr	r3, [pc, #144]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a3a:	4b21      	ldr	r3, [pc, #132]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a40:	4a1f      	ldr	r2, [pc, #124]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a50:	4a1b      	ldr	r2, [pc, #108]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a5a:	4a19      	ldr	r2, [pc, #100]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d016      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6c:	f7fc ff20 	bl	80038b0 <HAL_GetTick>
 8006a70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a72:	e00b      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a74:	f7fc ff1c 	bl	80038b0 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d902      	bls.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	74fb      	strb	r3, [r7, #19]
            break;
 8006a8a:	e006      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0ec      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006a9a:	7cfb      	ldrb	r3, [r7, #19]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10c      	bne.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ab0:	4903      	ldr	r1, [pc, #12]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006ab8:	e008      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aba:	7cfb      	ldrb	r3, [r7, #19]
 8006abc:	74bb      	strb	r3, [r7, #18]
 8006abe:	e005      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	7cfb      	ldrb	r3, [r7, #19]
 8006aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006acc:	7c7b      	ldrb	r3, [r7, #17]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d105      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ad2:	4ba0      	ldr	r3, [pc, #640]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad6:	4a9f      	ldr	r2, [pc, #636]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006adc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006aea:	4b9a      	ldr	r3, [pc, #616]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af0:	f023 0203 	bic.w	r2, r3, #3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	4996      	ldr	r1, [pc, #600]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b0c:	4b91      	ldr	r3, [pc, #580]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b12:	f023 020c 	bic.w	r2, r3, #12
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	498e      	ldr	r1, [pc, #568]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b2e:	4b89      	ldr	r3, [pc, #548]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3c:	4985      	ldr	r1, [pc, #532]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0308 	and.w	r3, r3, #8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b50:	4b80      	ldr	r3, [pc, #512]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5e:	497d      	ldr	r1, [pc, #500]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b72:	4b78      	ldr	r3, [pc, #480]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b80:	4974      	ldr	r1, [pc, #464]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b94:	4b6f      	ldr	r3, [pc, #444]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba2:	496c      	ldr	r1, [pc, #432]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bb6:	4b67      	ldr	r3, [pc, #412]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc4:	4963      	ldr	r1, [pc, #396]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bd8:	4b5e      	ldr	r3, [pc, #376]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be6:	495b      	ldr	r1, [pc, #364]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bfa:	4b56      	ldr	r3, [pc, #344]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	4952      	ldr	r1, [pc, #328]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c1c:	4b4d      	ldr	r3, [pc, #308]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2a:	494a      	ldr	r1, [pc, #296]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c3e:	4b45      	ldr	r3, [pc, #276]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4c:	4941      	ldr	r1, [pc, #260]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c60:	4b3c      	ldr	r3, [pc, #240]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c66:	f023 0203 	bic.w	r2, r3, #3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6e:	4939      	ldr	r1, [pc, #228]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d028      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c82:	4b34      	ldr	r3, [pc, #208]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c90:	4930      	ldr	r1, [pc, #192]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ca0:	d106      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ca2:	4b2c      	ldr	r3, [pc, #176]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	4a2b      	ldr	r2, [pc, #172]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cac:	60d3      	str	r3, [r2, #12]
 8006cae:	e011      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cb8:	d10c      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 f959 	bl	8006f78 <RCCEx_PLLSAI1_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006cca:	7cfb      	ldrb	r3, [r7, #19]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006cd0:	7cfb      	ldrb	r3, [r7, #19]
 8006cd2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d04d      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ce8:	d108      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006cea:	4b1a      	ldr	r3, [pc, #104]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cf0:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cf6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006cfa:	e012      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006cfc:	4b15      	ldr	r3, [pc, #84]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d02:	4a14      	ldr	r2, [pc, #80]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006d0c:	4b11      	ldr	r3, [pc, #68]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d1a:	490e      	ldr	r1, [pc, #56]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d2c:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d36:	60d3      	str	r3, [r2, #12]
 8006d38:	e020      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d42:	d109      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d44:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4a02      	ldr	r2, [pc, #8]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d4e:	60d3      	str	r3, [r2, #12]
 8006d50:	e014      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006d52:	bf00      	nop
 8006d54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d60:	d10c      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3304      	adds	r3, #4
 8006d66:	2101      	movs	r1, #1
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 f905 	bl	8006f78 <RCCEx_PLLSAI1_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d72:	7cfb      	ldrb	r3, [r7, #19]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006d78:	7cfb      	ldrb	r3, [r7, #19]
 8006d7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d028      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d88:	4b7a      	ldr	r3, [pc, #488]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d96:	4977      	ldr	r1, [pc, #476]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da6:	d106      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da8:	4b72      	ldr	r3, [pc, #456]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	4a71      	ldr	r2, [pc, #452]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006db2:	60d3      	str	r3, [r2, #12]
 8006db4:	e011      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dbe:	d10c      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 f8d6 	bl	8006f78 <RCCEx_PLLSAI1_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006dd0:	7cfb      	ldrb	r3, [r7, #19]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006dd6:	7cfb      	ldrb	r3, [r7, #19]
 8006dd8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01e      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006de6:	4b63      	ldr	r3, [pc, #396]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df6:	495f      	ldr	r1, [pc, #380]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	2102      	movs	r1, #2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 f8b1 	bl	8006f78 <RCCEx_PLLSAI1_Config>
 8006e16:	4603      	mov	r3, r0
 8006e18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e1a:	7cfb      	ldrb	r3, [r7, #19]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006e20:	7cfb      	ldrb	r3, [r7, #19]
 8006e22:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e30:	4b50      	ldr	r3, [pc, #320]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e36:	f023 0204 	bic.w	r2, r3, #4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e40:	494c      	ldr	r1, [pc, #304]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00b      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006e54:	4b47      	ldr	r3, [pc, #284]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e5a:	f023 0218 	bic.w	r2, r3, #24
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e64:	4943      	ldr	r1, [pc, #268]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d035      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e78:	4b3e      	ldr	r3, [pc, #248]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a3d      	ldr	r2, [pc, #244]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e84:	f7fc fd14 	bl	80038b0 <HAL_GetTick>
 8006e88:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e8a:	e009      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e8c:	f7fc fd10 	bl	80038b0 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d902      	bls.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	74fb      	strb	r3, [r7, #19]
        break;
 8006e9e:	e005      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ea0:	4b34      	ldr	r3, [pc, #208]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1ef      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006eac:	7cfb      	ldrb	r3, [r7, #19]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d113      	bne.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006eb2:	4b30      	ldr	r3, [pc, #192]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec2:	492c      	ldr	r1, [pc, #176]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3320      	adds	r3, #32
 8006ece:	2102      	movs	r1, #2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 f945 	bl	8007160 <RCCEx_PLLSAI2_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006eda:	7cfb      	ldrb	r3, [r7, #19]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006ee0:	7cfb      	ldrb	r3, [r7, #19]
 8006ee2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01e      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006ef0:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f00:	491c      	ldr	r1, [pc, #112]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f12:	d10c      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3320      	adds	r3, #32
 8006f18:	2101      	movs	r1, #1
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f920 	bl	8007160 <RCCEx_PLLSAI2_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f24:	7cfb      	ldrb	r3, [r7, #19]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006f2a:	7cfb      	ldrb	r3, [r7, #19]
 8006f2c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d017      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f4a:	490a      	ldr	r1, [pc, #40]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f5c:	d105      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	4a04      	ldr	r2, [pc, #16]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f68:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006f6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40021000 	.word	0x40021000

08006f78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f86:	4b72      	ldr	r3, [pc, #456]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00e      	beq.n	8006fb0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f92:	4b6f      	ldr	r3, [pc, #444]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f003 0203 	and.w	r2, r3, #3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d103      	bne.n	8006faa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
       ||
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d142      	bne.n	8007030 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	73fb      	strb	r3, [r7, #15]
 8006fae:	e03f      	b.n	8007030 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d018      	beq.n	8006fea <RCCEx_PLLSAI1_Config+0x72>
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d825      	bhi.n	8007008 <RCCEx_PLLSAI1_Config+0x90>
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d002      	beq.n	8006fc6 <RCCEx_PLLSAI1_Config+0x4e>
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d009      	beq.n	8006fd8 <RCCEx_PLLSAI1_Config+0x60>
 8006fc4:	e020      	b.n	8007008 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006fc6:	4b62      	ldr	r3, [pc, #392]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d11d      	bne.n	800700e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fd6:	e01a      	b.n	800700e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fd8:	4b5d      	ldr	r3, [pc, #372]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d116      	bne.n	8007012 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fe8:	e013      	b.n	8007012 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fea:	4b59      	ldr	r3, [pc, #356]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10f      	bne.n	8007016 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ff6:	4b56      	ldr	r3, [pc, #344]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007006:	e006      	b.n	8007016 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]
      break;
 800700c:	e004      	b.n	8007018 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800700e:	bf00      	nop
 8007010:	e002      	b.n	8007018 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007012:	bf00      	nop
 8007014:	e000      	b.n	8007018 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007016:	bf00      	nop
    }

    if(status == HAL_OK)
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d108      	bne.n	8007030 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800701e:	4b4c      	ldr	r3, [pc, #304]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f023 0203 	bic.w	r2, r3, #3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4949      	ldr	r1, [pc, #292]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 800702c:	4313      	orrs	r3, r2
 800702e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f040 8086 	bne.w	8007144 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007038:	4b45      	ldr	r3, [pc, #276]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a44      	ldr	r2, [pc, #272]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 800703e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007044:	f7fc fc34 	bl	80038b0 <HAL_GetTick>
 8007048:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800704a:	e009      	b.n	8007060 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800704c:	f7fc fc30 	bl	80038b0 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d902      	bls.n	8007060 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	73fb      	strb	r3, [r7, #15]
        break;
 800705e:	e005      	b.n	800706c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007060:	4b3b      	ldr	r3, [pc, #236]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1ef      	bne.n	800704c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d168      	bne.n	8007144 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d113      	bne.n	80070a0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007078:	4b35      	ldr	r3, [pc, #212]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	4b35      	ldr	r3, [pc, #212]	; (8007154 <RCCEx_PLLSAI1_Config+0x1dc>)
 800707e:	4013      	ands	r3, r2
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6892      	ldr	r2, [r2, #8]
 8007084:	0211      	lsls	r1, r2, #8
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	68d2      	ldr	r2, [r2, #12]
 800708a:	06d2      	lsls	r2, r2, #27
 800708c:	4311      	orrs	r1, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6852      	ldr	r2, [r2, #4]
 8007092:	3a01      	subs	r2, #1
 8007094:	0112      	lsls	r2, r2, #4
 8007096:	430a      	orrs	r2, r1
 8007098:	492d      	ldr	r1, [pc, #180]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 800709a:	4313      	orrs	r3, r2
 800709c:	610b      	str	r3, [r1, #16]
 800709e:	e02d      	b.n	80070fc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d115      	bne.n	80070d2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070a6:	4b2a      	ldr	r3, [pc, #168]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	4b2b      	ldr	r3, [pc, #172]	; (8007158 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6892      	ldr	r2, [r2, #8]
 80070b2:	0211      	lsls	r1, r2, #8
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6912      	ldr	r2, [r2, #16]
 80070b8:	0852      	lsrs	r2, r2, #1
 80070ba:	3a01      	subs	r2, #1
 80070bc:	0552      	lsls	r2, r2, #21
 80070be:	4311      	orrs	r1, r2
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6852      	ldr	r2, [r2, #4]
 80070c4:	3a01      	subs	r2, #1
 80070c6:	0112      	lsls	r2, r2, #4
 80070c8:	430a      	orrs	r2, r1
 80070ca:	4921      	ldr	r1, [pc, #132]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	610b      	str	r3, [r1, #16]
 80070d0:	e014      	b.n	80070fc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070d2:	4b1f      	ldr	r3, [pc, #124]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070d4:	691a      	ldr	r2, [r3, #16]
 80070d6:	4b21      	ldr	r3, [pc, #132]	; (800715c <RCCEx_PLLSAI1_Config+0x1e4>)
 80070d8:	4013      	ands	r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6892      	ldr	r2, [r2, #8]
 80070de:	0211      	lsls	r1, r2, #8
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6952      	ldr	r2, [r2, #20]
 80070e4:	0852      	lsrs	r2, r2, #1
 80070e6:	3a01      	subs	r2, #1
 80070e8:	0652      	lsls	r2, r2, #25
 80070ea:	4311      	orrs	r1, r2
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6852      	ldr	r2, [r2, #4]
 80070f0:	3a01      	subs	r2, #1
 80070f2:	0112      	lsls	r2, r2, #4
 80070f4:	430a      	orrs	r2, r1
 80070f6:	4916      	ldr	r1, [pc, #88]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80070fc:	4b14      	ldr	r3, [pc, #80]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a13      	ldr	r2, [pc, #76]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007102:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007106:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007108:	f7fc fbd2 	bl	80038b0 <HAL_GetTick>
 800710c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800710e:	e009      	b.n	8007124 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007110:	f7fc fbce 	bl	80038b0 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d902      	bls.n	8007124 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	73fb      	strb	r3, [r7, #15]
          break;
 8007122:	e005      	b.n	8007130 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0ef      	beq.n	8007110 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007136:	4b06      	ldr	r3, [pc, #24]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	4904      	ldr	r1, [pc, #16]	; (8007150 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007140:	4313      	orrs	r3, r2
 8007142:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40021000 	.word	0x40021000
 8007154:	07ff800f 	.word	0x07ff800f
 8007158:	ff9f800f 	.word	0xff9f800f
 800715c:	f9ff800f 	.word	0xf9ff800f

08007160 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800716e:	4b72      	ldr	r3, [pc, #456]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00e      	beq.n	8007198 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800717a:	4b6f      	ldr	r3, [pc, #444]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f003 0203 	and.w	r2, r3, #3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d103      	bne.n	8007192 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
       ||
 800718e:	2b00      	cmp	r3, #0
 8007190:	d142      	bne.n	8007218 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	73fb      	strb	r3, [r7, #15]
 8007196:	e03f      	b.n	8007218 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b03      	cmp	r3, #3
 800719e:	d018      	beq.n	80071d2 <RCCEx_PLLSAI2_Config+0x72>
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d825      	bhi.n	80071f0 <RCCEx_PLLSAI2_Config+0x90>
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d002      	beq.n	80071ae <RCCEx_PLLSAI2_Config+0x4e>
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d009      	beq.n	80071c0 <RCCEx_PLLSAI2_Config+0x60>
 80071ac:	e020      	b.n	80071f0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071ae:	4b62      	ldr	r3, [pc, #392]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d11d      	bne.n	80071f6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071be:	e01a      	b.n	80071f6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071c0:	4b5d      	ldr	r3, [pc, #372]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d116      	bne.n	80071fa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071d0:	e013      	b.n	80071fa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071d2:	4b59      	ldr	r3, [pc, #356]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10f      	bne.n	80071fe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071de:	4b56      	ldr	r3, [pc, #344]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071ee:	e006      	b.n	80071fe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
      break;
 80071f4:	e004      	b.n	8007200 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80071f6:	bf00      	nop
 80071f8:	e002      	b.n	8007200 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80071fa:	bf00      	nop
 80071fc:	e000      	b.n	8007200 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80071fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d108      	bne.n	8007218 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007206:	4b4c      	ldr	r3, [pc, #304]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f023 0203 	bic.w	r2, r3, #3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4949      	ldr	r1, [pc, #292]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007214:	4313      	orrs	r3, r2
 8007216:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f040 8086 	bne.w	800732c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007220:	4b45      	ldr	r3, [pc, #276]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a44      	ldr	r2, [pc, #272]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800722a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722c:	f7fc fb40 	bl	80038b0 <HAL_GetTick>
 8007230:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007232:	e009      	b.n	8007248 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007234:	f7fc fb3c 	bl	80038b0 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b02      	cmp	r3, #2
 8007240:	d902      	bls.n	8007248 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	73fb      	strb	r3, [r7, #15]
        break;
 8007246:	e005      	b.n	8007254 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007248:	4b3b      	ldr	r3, [pc, #236]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1ef      	bne.n	8007234 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d168      	bne.n	800732c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d113      	bne.n	8007288 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007260:	4b35      	ldr	r3, [pc, #212]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007262:	695a      	ldr	r2, [r3, #20]
 8007264:	4b35      	ldr	r3, [pc, #212]	; (800733c <RCCEx_PLLSAI2_Config+0x1dc>)
 8007266:	4013      	ands	r3, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6892      	ldr	r2, [r2, #8]
 800726c:	0211      	lsls	r1, r2, #8
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68d2      	ldr	r2, [r2, #12]
 8007272:	06d2      	lsls	r2, r2, #27
 8007274:	4311      	orrs	r1, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6852      	ldr	r2, [r2, #4]
 800727a:	3a01      	subs	r2, #1
 800727c:	0112      	lsls	r2, r2, #4
 800727e:	430a      	orrs	r2, r1
 8007280:	492d      	ldr	r1, [pc, #180]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	614b      	str	r3, [r1, #20]
 8007286:	e02d      	b.n	80072e4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d115      	bne.n	80072ba <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800728e:	4b2a      	ldr	r3, [pc, #168]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007290:	695a      	ldr	r2, [r3, #20]
 8007292:	4b2b      	ldr	r3, [pc, #172]	; (8007340 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007294:	4013      	ands	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6892      	ldr	r2, [r2, #8]
 800729a:	0211      	lsls	r1, r2, #8
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6912      	ldr	r2, [r2, #16]
 80072a0:	0852      	lsrs	r2, r2, #1
 80072a2:	3a01      	subs	r2, #1
 80072a4:	0552      	lsls	r2, r2, #21
 80072a6:	4311      	orrs	r1, r2
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6852      	ldr	r2, [r2, #4]
 80072ac:	3a01      	subs	r2, #1
 80072ae:	0112      	lsls	r2, r2, #4
 80072b0:	430a      	orrs	r2, r1
 80072b2:	4921      	ldr	r1, [pc, #132]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	614b      	str	r3, [r1, #20]
 80072b8:	e014      	b.n	80072e4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80072ba:	4b1f      	ldr	r3, [pc, #124]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072bc:	695a      	ldr	r2, [r3, #20]
 80072be:	4b21      	ldr	r3, [pc, #132]	; (8007344 <RCCEx_PLLSAI2_Config+0x1e4>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6892      	ldr	r2, [r2, #8]
 80072c6:	0211      	lsls	r1, r2, #8
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6952      	ldr	r2, [r2, #20]
 80072cc:	0852      	lsrs	r2, r2, #1
 80072ce:	3a01      	subs	r2, #1
 80072d0:	0652      	lsls	r2, r2, #25
 80072d2:	4311      	orrs	r1, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6852      	ldr	r2, [r2, #4]
 80072d8:	3a01      	subs	r2, #1
 80072da:	0112      	lsls	r2, r2, #4
 80072dc:	430a      	orrs	r2, r1
 80072de:	4916      	ldr	r1, [pc, #88]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80072e4:	4b14      	ldr	r3, [pc, #80]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a13      	ldr	r2, [pc, #76]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f0:	f7fc fade 	bl	80038b0 <HAL_GetTick>
 80072f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80072f6:	e009      	b.n	800730c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80072f8:	f7fc fada 	bl	80038b0 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d902      	bls.n	800730c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	73fb      	strb	r3, [r7, #15]
          break;
 800730a:	e005      	b.n	8007318 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0ef      	beq.n	80072f8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800731e:	4b06      	ldr	r3, [pc, #24]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007320:	695a      	ldr	r2, [r3, #20]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	4904      	ldr	r1, [pc, #16]	; (8007338 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007328:	4313      	orrs	r3, r2
 800732a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	40021000 	.word	0x40021000
 800733c:	07ff800f 	.word	0x07ff800f
 8007340:	ff9f800f 	.word	0xff9f800f
 8007344:	f9ff800f 	.word	0xf9ff800f

08007348 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e095      	b.n	8007486 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d108      	bne.n	8007374 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800736a:	d009      	beq.n	8007380 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	61da      	str	r2, [r3, #28]
 8007372:	e005      	b.n	8007380 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fc f89a 	bl	80034d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073c0:	d902      	bls.n	80073c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	e002      	b.n	80073ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80073d6:	d007      	beq.n	80073e8 <HAL_SPI_Init+0xa0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073e0:	d002      	beq.n	80073e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742a:	ea42 0103 	orr.w	r1, r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	0c1b      	lsrs	r3, r3, #16
 8007444:	f003 0204 	and.w	r2, r3, #4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	f003 0310 	and.w	r3, r3, #16
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	f003 0308 	and.w	r3, r3, #8
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007464:	ea42 0103 	orr.w	r1, r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b088      	sub	sp, #32
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	603b      	str	r3, [r7, #0]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_SPI_Transmit+0x22>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e158      	b.n	8007762 <HAL_SPI_Transmit+0x2d4>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074b8:	f7fc f9fa 	bl	80038b0 <HAL_GetTick>
 80074bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d002      	beq.n	80074d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074ce:	2302      	movs	r3, #2
 80074d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074d2:	e13d      	b.n	8007750 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_SPI_Transmit+0x52>
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074e4:	e134      	b.n	8007750 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2203      	movs	r2, #3
 80074ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	88fa      	ldrh	r2, [r7, #6]
 80074fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	88fa      	ldrh	r2, [r7, #6]
 8007504:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007530:	d10f      	bne.n	8007552 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007540:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007550:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755c:	2b40      	cmp	r3, #64	; 0x40
 800755e:	d007      	beq.n	8007570 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800756e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007578:	d94b      	bls.n	8007612 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_SPI_Transmit+0xfa>
 8007582:	8afb      	ldrh	r3, [r7, #22]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d13e      	bne.n	8007606 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	881a      	ldrh	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	1c9a      	adds	r2, r3, #2
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075ac:	e02b      	b.n	8007606 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d112      	bne.n	80075e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	881a      	ldrh	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	1c9a      	adds	r2, r3, #2
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075e0:	e011      	b.n	8007606 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075e2:	f7fc f965 	bl	80038b0 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d803      	bhi.n	80075fa <HAL_SPI_Transmit+0x16c>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f8:	d102      	bne.n	8007600 <HAL_SPI_Transmit+0x172>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d102      	bne.n	8007606 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007604:	e0a4      	b.n	8007750 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1ce      	bne.n	80075ae <HAL_SPI_Transmit+0x120>
 8007610:	e07c      	b.n	800770c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <HAL_SPI_Transmit+0x192>
 800761a:	8afb      	ldrh	r3, [r7, #22]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d170      	bne.n	8007702 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b01      	cmp	r3, #1
 8007628:	d912      	bls.n	8007650 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	881a      	ldrh	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	1c9a      	adds	r2, r3, #2
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b02      	subs	r3, #2
 8007648:	b29a      	uxth	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800764e:	e058      	b.n	8007702 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007676:	e044      	b.n	8007702 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b02      	cmp	r3, #2
 8007684:	d12b      	bne.n	80076de <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	d912      	bls.n	80076b6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	881a      	ldrh	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	1c9a      	adds	r2, r3, #2
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b02      	subs	r3, #2
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076b4:	e025      	b.n	8007702 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	7812      	ldrb	r2, [r2, #0]
 80076c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076dc:	e011      	b.n	8007702 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076de:	f7fc f8e7 	bl	80038b0 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d803      	bhi.n	80076f6 <HAL_SPI_Transmit+0x268>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f4:	d102      	bne.n	80076fc <HAL_SPI_Transmit+0x26e>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007700:	e026      	b.n	8007750 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1b5      	bne.n	8007678 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f001 f8c5 	bl	80088a0 <SPI_EndRxTxTransaction>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2220      	movs	r2, #32
 8007720:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800772a:	2300      	movs	r3, #0
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	613b      	str	r3, [r7, #16]
 800773e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	77fb      	strb	r3, [r7, #31]
 800774c:	e000      	b.n	8007750 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800774e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007760:	7ffb      	ldrb	r3, [r7, #31]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b088      	sub	sp, #32
 800776e:	af02      	add	r7, sp, #8
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007786:	d112      	bne.n	80077ae <HAL_SPI_Receive+0x44>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10e      	bne.n	80077ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2204      	movs	r2, #4
 8007794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007798:	88fa      	ldrh	r2, [r7, #6]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	4613      	mov	r3, r2
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f910 	bl	80079ca <HAL_SPI_TransmitReceive>
 80077aa:	4603      	mov	r3, r0
 80077ac:	e109      	b.n	80079c2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_SPI_Receive+0x52>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e102      	b.n	80079c2 <HAL_SPI_Receive+0x258>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077c4:	f7fc f874 	bl	80038b0 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d002      	beq.n	80077dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
 80077d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077da:	e0e9      	b.n	80079b0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <HAL_SPI_Receive+0x7e>
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077ec:	e0e0      	b.n	80079b0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2204      	movs	r2, #4
 80077f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	88fa      	ldrh	r2, [r7, #6]
 8007806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	88fa      	ldrh	r2, [r7, #6]
 800780e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007838:	d908      	bls.n	800784c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007848:	605a      	str	r2, [r3, #4]
 800784a:	e007      	b.n	800785c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800785a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007864:	d10f      	bne.n	8007886 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007874:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007884:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d007      	beq.n	80078a4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078ac:	d867      	bhi.n	800797e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078ae:	e030      	b.n	8007912 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d117      	bne.n	80078ee <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f103 020c 	add.w	r2, r3, #12
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80078ec:	e011      	b.n	8007912 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078ee:	f7fb ffdf 	bl	80038b0 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d803      	bhi.n	8007906 <HAL_SPI_Receive+0x19c>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d102      	bne.n	800790c <HAL_SPI_Receive+0x1a2>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d102      	bne.n	8007912 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007910:	e04e      	b.n	80079b0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1c8      	bne.n	80078b0 <HAL_SPI_Receive+0x146>
 800791e:	e034      	b.n	800798a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	d115      	bne.n	800795a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007938:	b292      	uxth	r2, r2
 800793a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	1c9a      	adds	r2, r3, #2
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007958:	e011      	b.n	800797e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800795a:	f7fb ffa9 	bl	80038b0 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d803      	bhi.n	8007972 <HAL_SPI_Receive+0x208>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007970:	d102      	bne.n	8007978 <HAL_SPI_Receive+0x20e>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800797c:	e018      	b.n	80079b0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1ca      	bne.n	8007920 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 ff2e 	bl	80087f0 <SPI_EndRxTransaction>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
 80079ac:	e000      	b.n	80079b0 <HAL_SPI_Receive+0x246>
  }

error :
 80079ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b08a      	sub	sp, #40	; 0x28
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079d8:	2301      	movs	r3, #1
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x26>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e1fb      	b.n	8007de8 <HAL_SPI_TransmitReceive+0x41e>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079f8:	f7fb ff5a 	bl	80038b0 <HAL_GetTick>
 80079fc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a04:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007a0c:	887b      	ldrh	r3, [r7, #2]
 8007a0e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007a10:	887b      	ldrh	r3, [r7, #2]
 8007a12:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a14:	7efb      	ldrb	r3, [r7, #27]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d00e      	beq.n	8007a38 <HAL_SPI_TransmitReceive+0x6e>
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a20:	d106      	bne.n	8007a30 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <HAL_SPI_TransmitReceive+0x66>
 8007a2a:	7efb      	ldrb	r3, [r7, #27]
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d003      	beq.n	8007a38 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007a30:	2302      	movs	r3, #2
 8007a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007a36:	e1cd      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <HAL_SPI_TransmitReceive+0x80>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_SPI_TransmitReceive+0x80>
 8007a44:	887b      	ldrh	r3, [r7, #2]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d103      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007a50:	e1c0      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d003      	beq.n	8007a66 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2205      	movs	r2, #5
 8007a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	887a      	ldrh	r2, [r7, #2]
 8007a76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	887a      	ldrh	r2, [r7, #2]
 8007a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	887a      	ldrh	r2, [r7, #2]
 8007a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	887a      	ldrh	r2, [r7, #2]
 8007a92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007aa8:	d802      	bhi.n	8007ab0 <HAL_SPI_TransmitReceive+0xe6>
 8007aaa:	8a3b      	ldrh	r3, [r7, #16]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d908      	bls.n	8007ac2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007abe:	605a      	str	r2, [r3, #4]
 8007ac0:	e007      	b.n	8007ad2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ad0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d007      	beq.n	8007af0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007af8:	d97c      	bls.n	8007bf4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_SPI_TransmitReceive+0x13e>
 8007b02:	8a7b      	ldrh	r3, [r7, #18]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d169      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	881a      	ldrh	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	1c9a      	adds	r2, r3, #2
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b2c:	e056      	b.n	8007bdc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d11b      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x1aa>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d016      	beq.n	8007b74 <HAL_SPI_TransmitReceive+0x1aa>
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d113      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	881a      	ldrh	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	1c9a      	adds	r2, r3, #2
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d11c      	bne.n	8007bbc <HAL_SPI_TransmitReceive+0x1f2>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d016      	beq.n	8007bbc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b98:	b292      	uxth	r2, r2
 8007b9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	1c9a      	adds	r2, r3, #2
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bbc:	f7fb fe78 	bl	80038b0 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d807      	bhi.n	8007bdc <HAL_SPI_TransmitReceive+0x212>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd2:	d003      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007bda:	e0fb      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1a3      	bne.n	8007b2e <HAL_SPI_TransmitReceive+0x164>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d19d      	bne.n	8007b2e <HAL_SPI_TransmitReceive+0x164>
 8007bf2:	e0df      	b.n	8007db4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <HAL_SPI_TransmitReceive+0x23a>
 8007bfc:	8a7b      	ldrh	r3, [r7, #18]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	f040 80cb 	bne.w	8007d9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d912      	bls.n	8007c34 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	881a      	ldrh	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	1c9a      	adds	r2, r3, #2
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	3b02      	subs	r3, #2
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c32:	e0b2      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	7812      	ldrb	r2, [r2, #0]
 8007c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c5a:	e09e      	b.n	8007d9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d134      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x30a>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d02f      	beq.n	8007cd4 <HAL_SPI_TransmitReceive+0x30a>
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d12c      	bne.n	8007cd4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d912      	bls.n	8007caa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	881a      	ldrh	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	1c9a      	adds	r2, r3, #2
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b02      	subs	r3, #2
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ca8:	e012      	b.n	8007cd0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	330c      	adds	r3, #12
 8007cb4:	7812      	ldrb	r2, [r2, #0]
 8007cb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d148      	bne.n	8007d74 <HAL_SPI_TransmitReceive+0x3aa>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d042      	beq.n	8007d74 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d923      	bls.n	8007d42 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	b292      	uxth	r2, r2
 8007d06:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	1c9a      	adds	r2, r3, #2
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	3b02      	subs	r3, #2
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d81f      	bhi.n	8007d70 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d3e:	605a      	str	r2, [r3, #4]
 8007d40:	e016      	b.n	8007d70 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f103 020c 	add.w	r2, r3, #12
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	7812      	ldrb	r2, [r2, #0]
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d70:	2301      	movs	r3, #1
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d74:	f7fb fd9c 	bl	80038b0 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d803      	bhi.n	8007d8c <HAL_SPI_TransmitReceive+0x3c2>
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d102      	bne.n	8007d92 <HAL_SPI_TransmitReceive+0x3c8>
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007d98:	e01c      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f47f af5b 	bne.w	8007c5c <HAL_SPI_TransmitReceive+0x292>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f47f af54 	bne.w	8007c5c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 fd71 	bl	80088a0 <SPI_EndRxTxTransaction>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d006      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	661a      	str	r2, [r3, #96]	; 0x60
 8007dd0:	e000      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007dd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3728      	adds	r7, #40	; 0x28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d110      	bne.n	8007e2c <HAL_SPI_Receive_IT+0x3c>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e12:	d10b      	bne.n	8007e2c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2204      	movs	r2, #4
 8007e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007e1c:	88fb      	ldrh	r3, [r7, #6]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f894 	bl	8007f50 <HAL_SPI_TransmitReceive_IT>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	e089      	b.n	8007f40 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_SPI_Receive_IT+0x4a>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e082      	b.n	8007f40 <HAL_SPI_Receive_IT+0x150>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d002      	beq.n	8007e54 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e52:	e070      	b.n	8007f36 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_SPI_Receive_IT+0x70>
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d102      	bne.n	8007e66 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007e64:	e067      	b.n	8007f36 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2204      	movs	r2, #4
 8007e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	88fa      	ldrh	r2, [r7, #6]
 8007e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	88fa      	ldrh	r2, [r7, #6]
 8007e86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007eaa:	d90b      	bls.n	8007ec4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007eba:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4a22      	ldr	r2, [pc, #136]	; (8007f48 <HAL_SPI_Receive_IT+0x158>)
 8007ec0:	64da      	str	r2, [r3, #76]	; 0x4c
 8007ec2:	e00a      	b.n	8007eda <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ed2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4a1d      	ldr	r2, [pc, #116]	; (8007f4c <HAL_SPI_Receive_IT+0x15c>)
 8007ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ee2:	d10f      	bne.n	8007f04 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ef2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f02:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007f12:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1e:	2b40      	cmp	r3, #64	; 0x40
 8007f20:	d008      	beq.n	8007f34 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	e000      	b.n	8007f36 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8007f34:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	08008569 	.word	0x08008569
 8007f4c:	08008519 	.word	0x08008519

08007f50 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_SPI_TransmitReceive_IT+0x20>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e091      	b.n	8008094 <HAL_SPI_TransmitReceive_IT+0x144>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f7e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f86:	7dbb      	ldrb	r3, [r7, #22]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d00d      	beq.n	8007fa8 <HAL_SPI_TransmitReceive_IT+0x58>
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f92:	d106      	bne.n	8007fa2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <HAL_SPI_TransmitReceive_IT+0x52>
 8007f9c:	7dbb      	ldrb	r3, [r7, #22]
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d002      	beq.n	8007fa8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fa6:	e070      	b.n	800808a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <HAL_SPI_TransmitReceive_IT+0x6a>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_SPI_TransmitReceive_IT+0x6a>
 8007fb4:	887b      	ldrh	r3, [r7, #2]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fbe:	e064      	b.n	800808a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d003      	beq.n	8007fd4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2205      	movs	r2, #5
 8007fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	887a      	ldrh	r2, [r7, #2]
 8007fe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	887a      	ldrh	r2, [r7, #2]
 8007fea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	887a      	ldrh	r2, [r7, #2]
 8007ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	887a      	ldrh	r2, [r7, #2]
 8007ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800800a:	d906      	bls.n	800801a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4a24      	ldr	r2, [pc, #144]	; (80080a0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8008010:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4a23      	ldr	r2, [pc, #140]	; (80080a4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8008016:	651a      	str	r2, [r3, #80]	; 0x50
 8008018:	e005      	b.n	8008026 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4a22      	ldr	r2, [pc, #136]	; (80080a8 <HAL_SPI_TransmitReceive_IT+0x158>)
 800801e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4a22      	ldr	r2, [pc, #136]	; (80080ac <HAL_SPI_TransmitReceive_IT+0x15c>)
 8008024:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800802e:	d802      	bhi.n	8008036 <HAL_SPI_TransmitReceive_IT+0xe6>
 8008030:	887b      	ldrh	r3, [r7, #2]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d908      	bls.n	8008048 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e007      	b.n	8008058 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008056:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8008066:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008072:	2b40      	cmp	r3, #64	; 0x40
 8008074:	d008      	beq.n	8008088 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	e000      	b.n	800808a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8008088:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
}
 8008094:	4618      	mov	r0, r3
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	08008453 	.word	0x08008453
 80080a4:	080084b9 	.word	0x080084b9
 80080a8:	08008303 	.word	0x08008303
 80080ac:	080083c1 	.word	0x080083c1

080080b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	099b      	lsrs	r3, r3, #6
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10f      	bne.n	80080f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	099b      	lsrs	r3, r3, #6
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
    return;
 80080f2:	e0d7      	b.n	80082a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <HAL_SPI_IRQHandler+0x66>
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	09db      	lsrs	r3, r3, #7
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d004      	beq.n	8008116 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
    return;
 8008114:	e0c6      	b.n	80082a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10c      	bne.n	800813c <HAL_SPI_IRQHandler+0x8c>
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	099b      	lsrs	r3, r3, #6
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	0a1b      	lsrs	r3, r3, #8
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 80b4 	beq.w	80082a4 <HAL_SPI_IRQHandler+0x1f4>
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	095b      	lsrs	r3, r3, #5
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80ad 	beq.w	80082a4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	099b      	lsrs	r3, r3, #6
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d023      	beq.n	800819e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d011      	beq.n	8008186 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008166:	f043 0204 	orr.w	r2, r3, #4
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	e00b      	b.n	800819e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008186:	2300      	movs	r3, #0
 8008188:	613b      	str	r3, [r7, #16]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	693b      	ldr	r3, [r7, #16]
        return;
 800819c:	e082      	b.n	80082a4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	095b      	lsrs	r3, r3, #5
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d014      	beq.n	80081d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ae:	f043 0201 	orr.w	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00c      	beq.n	80081fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e4:	f043 0208 	orr.w	r2, r3, #8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081ec:	2300      	movs	r3, #0
 80081ee:	60bb      	str	r3, [r7, #8]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	60bb      	str	r3, [r7, #8]
 80081f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d04f      	beq.n	80082a2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008210:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <HAL_SPI_IRQHandler+0x17e>
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d034      	beq.n	8008298 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0203 	bic.w	r2, r2, #3
 800823c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008242:	2b00      	cmp	r3, #0
 8008244:	d011      	beq.n	800826a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824a:	4a18      	ldr	r2, [pc, #96]	; (80082ac <HAL_SPI_IRQHandler+0x1fc>)
 800824c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008252:	4618      	mov	r0, r3
 8008254:	f7fb fc6d 	bl	8003b32 <HAL_DMA_Abort_IT>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008262:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826e:	2b00      	cmp	r3, #0
 8008270:	d016      	beq.n	80082a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	4a0d      	ldr	r2, [pc, #52]	; (80082ac <HAL_SPI_IRQHandler+0x1fc>)
 8008278:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827e:	4618      	mov	r0, r3
 8008280:	f7fb fc57 	bl	8003b32 <HAL_DMA_Abort_IT>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800828e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008296:	e003      	b.n	80082a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f813 	bl	80082c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800829e:	e000      	b.n	80082a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80082a0:	bf00      	nop
    return;
 80082a2:	bf00      	nop
  }
}
 80082a4:	3720      	adds	r7, #32
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	080082d9 	.word	0x080082d9

080082b0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f7ff ffe5 	bl	80082c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008310:	b29b      	uxth	r3, r3
 8008312:	2b01      	cmp	r3, #1
 8008314:	d923      	bls.n	800835e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008320:	b292      	uxth	r2, r2
 8008322:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	1c9a      	adds	r2, r3, #2
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b02      	subs	r3, #2
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008346:	b29b      	uxth	r3, r3
 8008348:	2b01      	cmp	r3, #1
 800834a:	d11f      	bne.n	800838c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800835a:	605a      	str	r2, [r3, #4]
 800835c:	e016      	b.n	800838c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f103 020c 	add.w	r2, r3, #12
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	7812      	ldrb	r2, [r2, #0]
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008380:	b29b      	uxth	r3, r3
 8008382:	3b01      	subs	r3, #1
 8008384:	b29a      	uxth	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008392:	b29b      	uxth	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10f      	bne.n	80083b8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80083a6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 faba 	bl	800892c <SPI_CloseRxTx_ISR>
    }
  }
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d912      	bls.n	80083f8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d6:	881a      	ldrh	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	1c9a      	adds	r2, r3, #2
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	3b02      	subs	r3, #2
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083f6:	e012      	b.n	800841e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	330c      	adds	r3, #12
 8008402:	7812      	ldrb	r2, [r2, #0]
 8008404:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008422:	b29b      	uxth	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d110      	bne.n	800844a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008436:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800843e:	b29b      	uxth	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fa71 	bl	800892c <SPI_CloseRxTx_ISR>
    }
  }
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008464:	b292      	uxth	r2, r2
 8008466:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	1c9a      	adds	r2, r3, #2
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008478:	b29b      	uxth	r3, r3
 800847a:	3b01      	subs	r3, #1
 800847c:	b29a      	uxth	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10f      	bne.n	80084b0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800849e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d102      	bne.n	80084b0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa3e 	bl	800892c <SPI_CloseRxTx_ISR>
    }
  }
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	881a      	ldrh	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d0:	1c9a      	adds	r2, r3, #2
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084da:	b29b      	uxth	r3, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	b29a      	uxth	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d110      	bne.n	8008510 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084fc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d102      	bne.n	8008510 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa0e 	bl	800892c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f103 020c 	add.w	r2, r3, #12
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	7812      	ldrb	r2, [r2, #0]
 800852e:	b2d2      	uxtb	r2, r2
 8008530:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008542:	b29b      	uxth	r3, r3
 8008544:	3b01      	subs	r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008554:	b29b      	uxth	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa28 	bl	80089b0 <SPI_CloseRx_ISR>
  }
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	b292      	uxth	r2, r2
 800857c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	1c9a      	adds	r2, r3, #2
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa02 	bl	80089b0 <SPI_CloseRx_ISR>
  }
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	4613      	mov	r3, r2
 80085c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085c4:	f7fb f974 	bl	80038b0 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	4413      	add	r3, r2
 80085d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085d4:	f7fb f96c 	bl	80038b0 <HAL_GetTick>
 80085d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085da:	4b39      	ldr	r3, [pc, #228]	; (80086c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	015b      	lsls	r3, r3, #5
 80085e0:	0d1b      	lsrs	r3, r3, #20
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	fb02 f303 	mul.w	r3, r2, r3
 80085e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085ea:	e054      	b.n	8008696 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	d050      	beq.n	8008696 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085f4:	f7fb f95c 	bl	80038b0 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	429a      	cmp	r2, r3
 8008602:	d902      	bls.n	800860a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d13d      	bne.n	8008686 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008622:	d111      	bne.n	8008648 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800862c:	d004      	beq.n	8008638 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008636:	d107      	bne.n	8008648 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008650:	d10f      	bne.n	8008672 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e017      	b.n	80086b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800868c:	2300      	movs	r3, #0
 800868e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	3b01      	subs	r3, #1
 8008694:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689a      	ldr	r2, [r3, #8]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4013      	ands	r3, r2
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	bf0c      	ite	eq
 80086a6:	2301      	moveq	r3, #1
 80086a8:	2300      	movne	r3, #0
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d19b      	bne.n	80085ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000020 	.word	0x20000020

080086c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08a      	sub	sp, #40	; 0x28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80086d6:	f7fb f8eb 	bl	80038b0 <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	1a9b      	subs	r3, r3, r2
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	4413      	add	r3, r2
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80086e6:	f7fb f8e3 	bl	80038b0 <HAL_GetTick>
 80086ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	330c      	adds	r3, #12
 80086f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80086f4:	4b3d      	ldr	r3, [pc, #244]	; (80087ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	00da      	lsls	r2, r3, #3
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	0d1b      	lsrs	r3, r3, #20
 8008704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800870c:	e060      	b.n	80087d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008714:	d107      	bne.n	8008726 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008724:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872c:	d050      	beq.n	80087d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800872e:	f7fb f8bf 	bl	80038b0 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873a:	429a      	cmp	r2, r3
 800873c:	d902      	bls.n	8008744 <SPI_WaitFifoStateUntilTimeout+0x80>
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	2b00      	cmp	r3, #0
 8008742:	d13d      	bne.n	80087c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008752:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800875c:	d111      	bne.n	8008782 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008766:	d004      	beq.n	8008772 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008770:	d107      	bne.n	8008782 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008780:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800878a:	d10f      	bne.n	80087ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e010      	b.n	80087e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	4013      	ands	r3, r2
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d196      	bne.n	800870e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3728      	adds	r7, #40	; 0x28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000020 	.word	0x20000020

080087f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af02      	add	r7, sp, #8
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008804:	d111      	bne.n	800882a <SPI_EndRxTransaction+0x3a>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800880e:	d004      	beq.n	800881a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008818:	d107      	bne.n	800882a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008828:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2200      	movs	r2, #0
 8008832:	2180      	movs	r1, #128	; 0x80
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7ff febd 	bl	80085b4 <SPI_WaitFlagStateUntilTimeout>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d007      	beq.n	8008850 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008844:	f043 0220 	orr.w	r2, r3, #32
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e023      	b.n	8008898 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008858:	d11d      	bne.n	8008896 <SPI_EndRxTransaction+0xa6>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008862:	d004      	beq.n	800886e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800886c:	d113      	bne.n	8008896 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2200      	movs	r2, #0
 8008876:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7ff ff22 	bl	80086c4 <SPI_WaitFifoStateUntilTimeout>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d007      	beq.n	8008896 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800888a:	f043 0220 	orr.w	r2, r3, #32
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e000      	b.n	8008898 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff ff03 	bl	80086c4 <SPI_WaitFifoStateUntilTimeout>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c8:	f043 0220 	orr.w	r2, r3, #32
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e027      	b.n	8008924 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2200      	movs	r2, #0
 80088dc:	2180      	movs	r1, #128	; 0x80
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7ff fe68 	bl	80085b4 <SPI_WaitFlagStateUntilTimeout>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d007      	beq.n	80088fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ee:	f043 0220 	orr.w	r2, r3, #32
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e014      	b.n	8008924 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2200      	movs	r2, #0
 8008902:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff fedc 	bl	80086c4 <SPI_WaitFifoStateUntilTimeout>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008916:	f043 0220 	orr.w	r2, r3, #32
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e000      	b.n	8008924 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008934:	f7fa ffbc 	bl	80038b0 <HAL_GetTick>
 8008938:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0220 	bic.w	r2, r2, #32
 8008948:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	2164      	movs	r1, #100	; 0x64
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff ffa6 	bl	80088a0 <SPI_EndRxTxTransaction>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d005      	beq.n	8008966 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895e:	f043 0220 	orr.w	r2, r3, #32
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800896a:	2b00      	cmp	r3, #0
 800896c:	d115      	bne.n	800899a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b04      	cmp	r3, #4
 8008978:	d107      	bne.n	800898a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7f8 ff16 	bl	80017b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008988:	e00e      	b.n	80089a8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff fc8c 	bl	80082b0 <HAL_SPI_TxRxCpltCallback>
}
 8008998:	e006      	b.n	80089a8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7ff fc8e 	bl	80082c4 <HAL_SPI_ErrorCallback>
}
 80089a8:	bf00      	nop
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80089c6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80089c8:	f7fa ff72 	bl	80038b0 <HAL_GetTick>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461a      	mov	r2, r3
 80089d0:	2164      	movs	r1, #100	; 0x64
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff ff0c 	bl	80087f0 <SPI_EndRxTransaction>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d005      	beq.n	80089ea <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e2:	f043 0220 	orr.w	r2, r3, #32
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d103      	bne.n	8008a02 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7f8 feda 	bl	80017b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008a00:	e002      	b.n	8008a08 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7ff fc5e 	bl	80082c4 <HAL_SPI_ErrorCallback>
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e042      	b.n	8008aa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d106      	bne.n	8008a3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7fa fded 	bl	8003614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2224      	movs	r2, #36	; 0x24
 8008a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0201 	bic.w	r2, r2, #1
 8008a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f8c4 	bl	8008be0 <UART_SetConfig>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e022      	b.n	8008aa8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fbb4 	bl	80091d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fc3b 	bl	800931c <UART_CheckIdleState>
 8008aa6:	4603      	mov	r3, r0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08a      	sub	sp, #40	; 0x28
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	4613      	mov	r3, r2
 8008abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	f040 8084 	bne.w	8008bd4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <HAL_UART_Transmit+0x28>
 8008ad2:	88fb      	ldrh	r3, [r7, #6]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e07c      	b.n	8008bd6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_UART_Transmit+0x3a>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e075      	b.n	8008bd6 <HAL_UART_Transmit+0x126>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2221      	movs	r2, #33	; 0x21
 8008afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b02:	f7fa fed5 	bl	80038b0 <HAL_GetTick>
 8008b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	88fa      	ldrh	r2, [r7, #6]
 8008b14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b20:	d108      	bne.n	8008b34 <HAL_UART_Transmit+0x84>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d104      	bne.n	8008b34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	61bb      	str	r3, [r7, #24]
 8008b32:	e003      	b.n	8008b3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008b44:	e02d      	b.n	8008ba2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2180      	movs	r1, #128	; 0x80
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 fc2e 	bl	80093b2 <UART_WaitOnFlagUntilTimeout>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e03a      	b.n	8008bd6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10b      	bne.n	8008b7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	881a      	ldrh	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b72:	b292      	uxth	r2, r2
 8008b74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	3302      	adds	r3, #2
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	e008      	b.n	8008b90 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	781a      	ldrb	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	b292      	uxth	r2, r2
 8008b88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1cb      	bne.n	8008b46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2140      	movs	r1, #64	; 0x40
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 fbfa 	bl	80093b2 <UART_WaitOnFlagUntilTimeout>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e006      	b.n	8008bd6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e000      	b.n	8008bd6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008bd4:	2302      	movs	r3, #2
  }
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3720      	adds	r7, #32
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008be4:	b08c      	sub	sp, #48	; 0x30
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	4baa      	ldr	r3, [pc, #680]	; (8008eb8 <UART_SetConfig+0x2d8>)
 8008c10:	4013      	ands	r3, r2
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	6812      	ldr	r2, [r2, #0]
 8008c16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a9f      	ldr	r2, [pc, #636]	; (8008ebc <UART_SetConfig+0x2dc>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d004      	beq.n	8008c4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	6812      	ldr	r2, [r2, #0]
 8008c5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	f023 010f 	bic.w	r1, r3, #15
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a90      	ldr	r2, [pc, #576]	; (8008ec0 <UART_SetConfig+0x2e0>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d125      	bne.n	8008cd0 <UART_SetConfig+0xf0>
 8008c84:	4b8f      	ldr	r3, [pc, #572]	; (8008ec4 <UART_SetConfig+0x2e4>)
 8008c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d81a      	bhi.n	8008cc8 <UART_SetConfig+0xe8>
 8008c92:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <UART_SetConfig+0xb8>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008ca9 	.word	0x08008ca9
 8008c9c:	08008cb9 	.word	0x08008cb9
 8008ca0:	08008cb1 	.word	0x08008cb1
 8008ca4:	08008cc1 	.word	0x08008cc1
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cae:	e116      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cb6:	e112      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008cb8:	2304      	movs	r3, #4
 8008cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cbe:	e10e      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cc6:	e10a      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cce:	e106      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a7c      	ldr	r2, [pc, #496]	; (8008ec8 <UART_SetConfig+0x2e8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d138      	bne.n	8008d4c <UART_SetConfig+0x16c>
 8008cda:	4b7a      	ldr	r3, [pc, #488]	; (8008ec4 <UART_SetConfig+0x2e4>)
 8008cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce0:	f003 030c 	and.w	r3, r3, #12
 8008ce4:	2b0c      	cmp	r3, #12
 8008ce6:	d82d      	bhi.n	8008d44 <UART_SetConfig+0x164>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <UART_SetConfig+0x110>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d25 	.word	0x08008d25
 8008cf4:	08008d45 	.word	0x08008d45
 8008cf8:	08008d45 	.word	0x08008d45
 8008cfc:	08008d45 	.word	0x08008d45
 8008d00:	08008d35 	.word	0x08008d35
 8008d04:	08008d45 	.word	0x08008d45
 8008d08:	08008d45 	.word	0x08008d45
 8008d0c:	08008d45 	.word	0x08008d45
 8008d10:	08008d2d 	.word	0x08008d2d
 8008d14:	08008d45 	.word	0x08008d45
 8008d18:	08008d45 	.word	0x08008d45
 8008d1c:	08008d45 	.word	0x08008d45
 8008d20:	08008d3d 	.word	0x08008d3d
 8008d24:	2300      	movs	r3, #0
 8008d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d2a:	e0d8      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d32:	e0d4      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008d34:	2304      	movs	r3, #4
 8008d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d3a:	e0d0      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d42:	e0cc      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4a:	e0c8      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a5e      	ldr	r2, [pc, #376]	; (8008ecc <UART_SetConfig+0x2ec>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d125      	bne.n	8008da2 <UART_SetConfig+0x1c2>
 8008d56:	4b5b      	ldr	r3, [pc, #364]	; (8008ec4 <UART_SetConfig+0x2e4>)
 8008d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d60:	2b30      	cmp	r3, #48	; 0x30
 8008d62:	d016      	beq.n	8008d92 <UART_SetConfig+0x1b2>
 8008d64:	2b30      	cmp	r3, #48	; 0x30
 8008d66:	d818      	bhi.n	8008d9a <UART_SetConfig+0x1ba>
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	d00a      	beq.n	8008d82 <UART_SetConfig+0x1a2>
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	d814      	bhi.n	8008d9a <UART_SetConfig+0x1ba>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <UART_SetConfig+0x19a>
 8008d74:	2b10      	cmp	r3, #16
 8008d76:	d008      	beq.n	8008d8a <UART_SetConfig+0x1aa>
 8008d78:	e00f      	b.n	8008d9a <UART_SetConfig+0x1ba>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d80:	e0ad      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008d82:	2302      	movs	r3, #2
 8008d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d88:	e0a9      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008d8a:	2304      	movs	r3, #4
 8008d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d90:	e0a5      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008d92:	2308      	movs	r3, #8
 8008d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d98:	e0a1      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008d9a:	2310      	movs	r3, #16
 8008d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da0:	e09d      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a4a      	ldr	r2, [pc, #296]	; (8008ed0 <UART_SetConfig+0x2f0>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d125      	bne.n	8008df8 <UART_SetConfig+0x218>
 8008dac:	4b45      	ldr	r3, [pc, #276]	; (8008ec4 <UART_SetConfig+0x2e4>)
 8008dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008db6:	2bc0      	cmp	r3, #192	; 0xc0
 8008db8:	d016      	beq.n	8008de8 <UART_SetConfig+0x208>
 8008dba:	2bc0      	cmp	r3, #192	; 0xc0
 8008dbc:	d818      	bhi.n	8008df0 <UART_SetConfig+0x210>
 8008dbe:	2b80      	cmp	r3, #128	; 0x80
 8008dc0:	d00a      	beq.n	8008dd8 <UART_SetConfig+0x1f8>
 8008dc2:	2b80      	cmp	r3, #128	; 0x80
 8008dc4:	d814      	bhi.n	8008df0 <UART_SetConfig+0x210>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <UART_SetConfig+0x1f0>
 8008dca:	2b40      	cmp	r3, #64	; 0x40
 8008dcc:	d008      	beq.n	8008de0 <UART_SetConfig+0x200>
 8008dce:	e00f      	b.n	8008df0 <UART_SetConfig+0x210>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dd6:	e082      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dde:	e07e      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008de0:	2304      	movs	r3, #4
 8008de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008de6:	e07a      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008de8:	2308      	movs	r3, #8
 8008dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dee:	e076      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008df0:	2310      	movs	r3, #16
 8008df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008df6:	e072      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a35      	ldr	r2, [pc, #212]	; (8008ed4 <UART_SetConfig+0x2f4>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d12a      	bne.n	8008e58 <UART_SetConfig+0x278>
 8008e02:	4b30      	ldr	r3, [pc, #192]	; (8008ec4 <UART_SetConfig+0x2e4>)
 8008e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e10:	d01a      	beq.n	8008e48 <UART_SetConfig+0x268>
 8008e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e16:	d81b      	bhi.n	8008e50 <UART_SetConfig+0x270>
 8008e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e1c:	d00c      	beq.n	8008e38 <UART_SetConfig+0x258>
 8008e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e22:	d815      	bhi.n	8008e50 <UART_SetConfig+0x270>
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <UART_SetConfig+0x250>
 8008e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e2c:	d008      	beq.n	8008e40 <UART_SetConfig+0x260>
 8008e2e:	e00f      	b.n	8008e50 <UART_SetConfig+0x270>
 8008e30:	2300      	movs	r3, #0
 8008e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e36:	e052      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e3e:	e04e      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008e40:	2304      	movs	r3, #4
 8008e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e46:	e04a      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008e48:	2308      	movs	r3, #8
 8008e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e4e:	e046      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008e50:	2310      	movs	r3, #16
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e56:	e042      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a17      	ldr	r2, [pc, #92]	; (8008ebc <UART_SetConfig+0x2dc>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d13a      	bne.n	8008ed8 <UART_SetConfig+0x2f8>
 8008e62:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <UART_SetConfig+0x2e4>)
 8008e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e70:	d01a      	beq.n	8008ea8 <UART_SetConfig+0x2c8>
 8008e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e76:	d81b      	bhi.n	8008eb0 <UART_SetConfig+0x2d0>
 8008e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e7c:	d00c      	beq.n	8008e98 <UART_SetConfig+0x2b8>
 8008e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e82:	d815      	bhi.n	8008eb0 <UART_SetConfig+0x2d0>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <UART_SetConfig+0x2b0>
 8008e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e8c:	d008      	beq.n	8008ea0 <UART_SetConfig+0x2c0>
 8008e8e:	e00f      	b.n	8008eb0 <UART_SetConfig+0x2d0>
 8008e90:	2300      	movs	r3, #0
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e96:	e022      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e9e:	e01e      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008ea0:	2304      	movs	r3, #4
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ea6:	e01a      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eae:	e016      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eb6:	e012      	b.n	8008ede <UART_SetConfig+0x2fe>
 8008eb8:	cfff69f3 	.word	0xcfff69f3
 8008ebc:	40008000 	.word	0x40008000
 8008ec0:	40013800 	.word	0x40013800
 8008ec4:	40021000 	.word	0x40021000
 8008ec8:	40004400 	.word	0x40004400
 8008ecc:	40004800 	.word	0x40004800
 8008ed0:	40004c00 	.word	0x40004c00
 8008ed4:	40005000 	.word	0x40005000
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4aae      	ldr	r2, [pc, #696]	; (800919c <UART_SetConfig+0x5bc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	f040 8097 	bne.w	8009018 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	d823      	bhi.n	8008f3a <UART_SetConfig+0x35a>
 8008ef2:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <UART_SetConfig+0x318>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f1d 	.word	0x08008f1d
 8008efc:	08008f3b 	.word	0x08008f3b
 8008f00:	08008f25 	.word	0x08008f25
 8008f04:	08008f3b 	.word	0x08008f3b
 8008f08:	08008f2b 	.word	0x08008f2b
 8008f0c:	08008f3b 	.word	0x08008f3b
 8008f10:	08008f3b 	.word	0x08008f3b
 8008f14:	08008f3b 	.word	0x08008f3b
 8008f18:	08008f33 	.word	0x08008f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f1c:	f7fd fbb0 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 8008f20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f22:	e010      	b.n	8008f46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f24:	4b9e      	ldr	r3, [pc, #632]	; (80091a0 <UART_SetConfig+0x5c0>)
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f28:	e00d      	b.n	8008f46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f2a:	f7fd fb11 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 8008f2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f30:	e009      	b.n	8008f46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f38:	e005      	b.n	8008f46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8130 	beq.w	80091ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	4a94      	ldr	r2, [pc, #592]	; (80091a4 <UART_SetConfig+0x5c4>)
 8008f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	4413      	add	r3, r2
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d305      	bcc.n	8008f7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d903      	bls.n	8008f86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f84:	e113      	b.n	80091ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	2200      	movs	r2, #0
 8008f8a:	60bb      	str	r3, [r7, #8]
 8008f8c:	60fa      	str	r2, [r7, #12]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	4a84      	ldr	r2, [pc, #528]	; (80091a4 <UART_SetConfig+0x5c4>)
 8008f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fa8:	f7f7 f928 	bl	80001fc <__aeabi_uldivmod>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	f04f 0300 	mov.w	r3, #0
 8008fbc:	020b      	lsls	r3, r1, #8
 8008fbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fc2:	0202      	lsls	r2, r0, #8
 8008fc4:	6979      	ldr	r1, [r7, #20]
 8008fc6:	6849      	ldr	r1, [r1, #4]
 8008fc8:	0849      	lsrs	r1, r1, #1
 8008fca:	2000      	movs	r0, #0
 8008fcc:	460c      	mov	r4, r1
 8008fce:	4605      	mov	r5, r0
 8008fd0:	eb12 0804 	adds.w	r8, r2, r4
 8008fd4:	eb43 0905 	adc.w	r9, r3, r5
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	469a      	mov	sl, r3
 8008fe0:	4693      	mov	fp, r2
 8008fe2:	4652      	mov	r2, sl
 8008fe4:	465b      	mov	r3, fp
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	4649      	mov	r1, r9
 8008fea:	f7f7 f907 	bl	80001fc <__aeabi_uldivmod>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ffc:	d308      	bcc.n	8009010 <UART_SetConfig+0x430>
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009004:	d204      	bcs.n	8009010 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6a3a      	ldr	r2, [r7, #32]
 800900c:	60da      	str	r2, [r3, #12]
 800900e:	e0ce      	b.n	80091ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009016:	e0ca      	b.n	80091ae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009020:	d166      	bne.n	80090f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009022:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009026:	2b08      	cmp	r3, #8
 8009028:	d827      	bhi.n	800907a <UART_SetConfig+0x49a>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <UART_SetConfig+0x450>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	08009055 	.word	0x08009055
 8009034:	0800905d 	.word	0x0800905d
 8009038:	08009065 	.word	0x08009065
 800903c:	0800907b 	.word	0x0800907b
 8009040:	0800906b 	.word	0x0800906b
 8009044:	0800907b 	.word	0x0800907b
 8009048:	0800907b 	.word	0x0800907b
 800904c:	0800907b 	.word	0x0800907b
 8009050:	08009073 	.word	0x08009073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009054:	f7fd fb14 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 8009058:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800905a:	e014      	b.n	8009086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800905c:	f7fd fb26 	bl	80066ac <HAL_RCC_GetPCLK2Freq>
 8009060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009062:	e010      	b.n	8009086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009064:	4b4e      	ldr	r3, [pc, #312]	; (80091a0 <UART_SetConfig+0x5c0>)
 8009066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009068:	e00d      	b.n	8009086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800906a:	f7fd fa71 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 800906e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009070:	e009      	b.n	8009086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009078:	e005      	b.n	8009086 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 8090 	beq.w	80091ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	4a44      	ldr	r2, [pc, #272]	; (80091a4 <UART_SetConfig+0x5c4>)
 8009094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009098:	461a      	mov	r2, r3
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a0:	005a      	lsls	r2, r3, #1
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	085b      	lsrs	r3, r3, #1
 80090a8:	441a      	add	r2, r3
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	2b0f      	cmp	r3, #15
 80090b8:	d916      	bls.n	80090e8 <UART_SetConfig+0x508>
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c0:	d212      	bcs.n	80090e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f023 030f 	bic.w	r3, r3, #15
 80090ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	085b      	lsrs	r3, r3, #1
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	8bfb      	ldrh	r3, [r7, #30]
 80090da:	4313      	orrs	r3, r2
 80090dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	8bfa      	ldrh	r2, [r7, #30]
 80090e4:	60da      	str	r2, [r3, #12]
 80090e6:	e062      	b.n	80091ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090ee:	e05e      	b.n	80091ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090f4:	2b08      	cmp	r3, #8
 80090f6:	d828      	bhi.n	800914a <UART_SetConfig+0x56a>
 80090f8:	a201      	add	r2, pc, #4	; (adr r2, 8009100 <UART_SetConfig+0x520>)
 80090fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fe:	bf00      	nop
 8009100:	08009125 	.word	0x08009125
 8009104:	0800912d 	.word	0x0800912d
 8009108:	08009135 	.word	0x08009135
 800910c:	0800914b 	.word	0x0800914b
 8009110:	0800913b 	.word	0x0800913b
 8009114:	0800914b 	.word	0x0800914b
 8009118:	0800914b 	.word	0x0800914b
 800911c:	0800914b 	.word	0x0800914b
 8009120:	08009143 	.word	0x08009143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009124:	f7fd faac 	bl	8006680 <HAL_RCC_GetPCLK1Freq>
 8009128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800912a:	e014      	b.n	8009156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800912c:	f7fd fabe 	bl	80066ac <HAL_RCC_GetPCLK2Freq>
 8009130:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009132:	e010      	b.n	8009156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009134:	4b1a      	ldr	r3, [pc, #104]	; (80091a0 <UART_SetConfig+0x5c0>)
 8009136:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009138:	e00d      	b.n	8009156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800913a:	f7fd fa09 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 800913e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009140:	e009      	b.n	8009156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009148:	e005      	b.n	8009156 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009154:	bf00      	nop
    }

    if (pclk != 0U)
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	d028      	beq.n	80091ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	4a10      	ldr	r2, [pc, #64]	; (80091a4 <UART_SetConfig+0x5c4>)
 8009162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009166:	461a      	mov	r2, r3
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	fbb3 f2f2 	udiv	r2, r3, r2
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	085b      	lsrs	r3, r3, #1
 8009174:	441a      	add	r2, r3
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	fbb2 f3f3 	udiv	r3, r2, r3
 800917e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	2b0f      	cmp	r3, #15
 8009184:	d910      	bls.n	80091a8 <UART_SetConfig+0x5c8>
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800918c:	d20c      	bcs.n	80091a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	b29a      	uxth	r2, r3
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	60da      	str	r2, [r3, #12]
 8009198:	e009      	b.n	80091ae <UART_SetConfig+0x5ce>
 800919a:	bf00      	nop
 800919c:	40008000 	.word	0x40008000
 80091a0:	00f42400 	.word	0x00f42400
 80091a4:	08009880 	.word	0x08009880
      }
      else
      {
        ret = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2200      	movs	r2, #0
 80091c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2200      	movs	r2, #0
 80091c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80091ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3730      	adds	r7, #48	; 0x30
 80091d2:	46bd      	mov	sp, r7
 80091d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080091d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00a      	beq.n	8009224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00a      	beq.n	8009246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	f003 0308 	and.w	r3, r3, #8
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00a      	beq.n	8009268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00a      	beq.n	800928a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01a      	beq.n	80092ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092d6:	d10a      	bne.n	80092ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	605a      	str	r2, [r3, #4]
  }
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af02      	add	r7, sp, #8
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800932c:	f7fa fac0 	bl	80038b0 <HAL_GetTick>
 8009330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0308 	and.w	r3, r3, #8
 800933c:	2b08      	cmp	r3, #8
 800933e:	d10e      	bne.n	800935e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f82f 	bl	80093b2 <UART_WaitOnFlagUntilTimeout>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e025      	b.n	80093aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b04      	cmp	r3, #4
 800936a:	d10e      	bne.n	800938a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800936c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f819 	bl	80093b2 <UART_WaitOnFlagUntilTimeout>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e00f      	b.n	80093aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2220      	movs	r2, #32
 8009396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b09c      	sub	sp, #112	; 0x70
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	60f8      	str	r0, [r7, #12]
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	603b      	str	r3, [r7, #0]
 80093be:	4613      	mov	r3, r2
 80093c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093c2:	e0a9      	b.n	8009518 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ca:	f000 80a5 	beq.w	8009518 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093ce:	f7fa fa6f 	bl	80038b0 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80093da:	429a      	cmp	r2, r3
 80093dc:	d302      	bcc.n	80093e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80093de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d140      	bne.n	8009466 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093f8:	667b      	str	r3, [r7, #100]	; 0x64
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009404:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e6      	bne.n	80093e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3308      	adds	r3, #8
 800941c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	663b      	str	r3, [r7, #96]	; 0x60
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3308      	adds	r3, #8
 8009434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009436:	64ba      	str	r2, [r7, #72]	; 0x48
 8009438:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800943c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800943e:	e841 2300 	strex	r3, r2, [r1]
 8009442:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1e5      	bne.n	8009416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2220      	movs	r2, #32
 800944e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2220      	movs	r2, #32
 8009456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e069      	b.n	800953a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	d051      	beq.n	8009518 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800947e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009482:	d149      	bne.n	8009518 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800948c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	e853 3f00 	ldrex	r3, [r3]
 800949a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	461a      	mov	r2, r3
 80094aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
 80094ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e6      	bne.n	800948e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3308      	adds	r3, #8
 80094c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	613b      	str	r3, [r7, #16]
   return(result);
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f023 0301 	bic.w	r3, r3, #1
 80094d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3308      	adds	r3, #8
 80094de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094e0:	623a      	str	r2, [r7, #32]
 80094e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	69f9      	ldr	r1, [r7, #28]
 80094e6:	6a3a      	ldr	r2, [r7, #32]
 80094e8:	e841 2300 	strex	r3, r2, [r1]
 80094ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e5      	bne.n	80094c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2220      	movs	r2, #32
 80094f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2220      	movs	r2, #32
 8009500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2220      	movs	r2, #32
 8009508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e010      	b.n	800953a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69da      	ldr	r2, [r3, #28]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	4013      	ands	r3, r2
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	429a      	cmp	r2, r3
 8009526:	bf0c      	ite	eq
 8009528:	2301      	moveq	r3, #1
 800952a:	2300      	movne	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	461a      	mov	r2, r3
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	429a      	cmp	r2, r3
 8009534:	f43f af46 	beq.w	80093c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3770      	adds	r7, #112	; 0x70
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009550:	2b01      	cmp	r3, #1
 8009552:	d101      	bne.n	8009558 <HAL_UARTEx_DisableFifoMode+0x16>
 8009554:	2302      	movs	r3, #2
 8009556:	e027      	b.n	80095a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2224      	movs	r2, #36	; 0x24
 8009564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f022 0201 	bic.w	r2, r2, #1
 800957e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009586:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d101      	bne.n	80095cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095c8:	2302      	movs	r3, #2
 80095ca:	e02d      	b.n	8009628 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2224      	movs	r2, #36	; 0x24
 80095d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0201 	bic.w	r2, r2, #1
 80095f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f84f 	bl	80096ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2220      	movs	r2, #32
 800961a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009644:	2302      	movs	r3, #2
 8009646:	e02d      	b.n	80096a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2224      	movs	r2, #36	; 0x24
 8009654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 0201 	bic.w	r2, r2, #1
 800966e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f811 	bl	80096ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2220      	movs	r2, #32
 8009696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d108      	bne.n	80096ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096cc:	e031      	b.n	8009732 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096ce:	2308      	movs	r3, #8
 80096d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096d2:	2308      	movs	r3, #8
 80096d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	0e5b      	lsrs	r3, r3, #25
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0307 	and.w	r3, r3, #7
 80096e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	0f5b      	lsrs	r3, r3, #29
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	f003 0307 	and.w	r3, r3, #7
 80096f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	7b3a      	ldrb	r2, [r7, #12]
 80096fa:	4911      	ldr	r1, [pc, #68]	; (8009740 <UARTEx_SetNbDataToProcess+0x94>)
 80096fc:	5c8a      	ldrb	r2, [r1, r2]
 80096fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009702:	7b3a      	ldrb	r2, [r7, #12]
 8009704:	490f      	ldr	r1, [pc, #60]	; (8009744 <UARTEx_SetNbDataToProcess+0x98>)
 8009706:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009708:	fb93 f3f2 	sdiv	r3, r3, r2
 800970c:	b29a      	uxth	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	7b7a      	ldrb	r2, [r7, #13]
 8009718:	4909      	ldr	r1, [pc, #36]	; (8009740 <UARTEx_SetNbDataToProcess+0x94>)
 800971a:	5c8a      	ldrb	r2, [r1, r2]
 800971c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009720:	7b7a      	ldrb	r2, [r7, #13]
 8009722:	4908      	ldr	r1, [pc, #32]	; (8009744 <UARTEx_SetNbDataToProcess+0x98>)
 8009724:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009726:	fb93 f3f2 	sdiv	r3, r3, r2
 800972a:	b29a      	uxth	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009732:	bf00      	nop
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	08009898 	.word	0x08009898
 8009744:	080098a0 	.word	0x080098a0

08009748 <__libc_init_array>:
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	4d0d      	ldr	r5, [pc, #52]	; (8009780 <__libc_init_array+0x38>)
 800974c:	4c0d      	ldr	r4, [pc, #52]	; (8009784 <__libc_init_array+0x3c>)
 800974e:	1b64      	subs	r4, r4, r5
 8009750:	10a4      	asrs	r4, r4, #2
 8009752:	2600      	movs	r6, #0
 8009754:	42a6      	cmp	r6, r4
 8009756:	d109      	bne.n	800976c <__libc_init_array+0x24>
 8009758:	4d0b      	ldr	r5, [pc, #44]	; (8009788 <__libc_init_array+0x40>)
 800975a:	4c0c      	ldr	r4, [pc, #48]	; (800978c <__libc_init_array+0x44>)
 800975c:	f000 f820 	bl	80097a0 <_init>
 8009760:	1b64      	subs	r4, r4, r5
 8009762:	10a4      	asrs	r4, r4, #2
 8009764:	2600      	movs	r6, #0
 8009766:	42a6      	cmp	r6, r4
 8009768:	d105      	bne.n	8009776 <__libc_init_array+0x2e>
 800976a:	bd70      	pop	{r4, r5, r6, pc}
 800976c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009770:	4798      	blx	r3
 8009772:	3601      	adds	r6, #1
 8009774:	e7ee      	b.n	8009754 <__libc_init_array+0xc>
 8009776:	f855 3b04 	ldr.w	r3, [r5], #4
 800977a:	4798      	blx	r3
 800977c:	3601      	adds	r6, #1
 800977e:	e7f2      	b.n	8009766 <__libc_init_array+0x1e>
 8009780:	080098b0 	.word	0x080098b0
 8009784:	080098b0 	.word	0x080098b0
 8009788:	080098b0 	.word	0x080098b0
 800978c:	080098b4 	.word	0x080098b4

08009790 <memset>:
 8009790:	4402      	add	r2, r0
 8009792:	4603      	mov	r3, r0
 8009794:	4293      	cmp	r3, r2
 8009796:	d100      	bne.n	800979a <memset+0xa>
 8009798:	4770      	bx	lr
 800979a:	f803 1b01 	strb.w	r1, [r3], #1
 800979e:	e7f9      	b.n	8009794 <memset+0x4>

080097a0 <_init>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr

080097ac <_fini>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr
