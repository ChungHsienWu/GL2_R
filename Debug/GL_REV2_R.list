
GL_REV2_R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009310  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080094cc  080094cc  000194cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095bc  080095bc  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c4  080095c4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080095cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00094d1c  20000030  080095fc  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20094d4c  080095fc  00024d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017001  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e5  00000000  00000000  00037061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00039848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  0003a988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030b0f  00000000  00000000  0003b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001618b  00000000  00000000  0006c507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125ab3  00000000  00000000  00082692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a8145  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004930  00000000  00000000  001a8198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000030 	.word	0x20000030
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080094b4 	.word	0x080094b4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000034 	.word	0x20000034
 80001f8:	080094b4 	.word	0x080094b4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f003 f980 	bl	800380a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 fa5f 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fd17 	bl	8000f40 <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 8000512:	f000 fae7 	bl	8000ae4 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000516:	f000 fbd1 	bl	8000cbc <MX_LTDC_Init>
  MX_SPI2_Init();
 800051a:	f000 fc4f 	bl	8000dbc <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fc8b 	bl	8000e38 <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fcc1 	bl	8000ea8 <MX_UART4_Init>
  MX_DMA2D_Init();
 8000526:	f000 fa9f 	bl	8000a68 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 800052a:	f000 fde9 	bl	8001100 <mipi_config>
  HAL_UART_Transmit(&huart4, "start_s", 7, 1000);
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	2207      	movs	r2, #7
 8000534:	49a4      	ldr	r1, [pc, #656]	; (80007c8 <main+0x2c8>)
 8000536:	48a5      	ldr	r0, [pc, #660]	; (80007cc <main+0x2cc>)
 8000538:	f008 f944 	bl	80087c4 <HAL_UART_Transmit>

  play_mode = 3;
 800053c:	4ba4      	ldr	r3, [pc, #656]	; (80007d0 <main+0x2d0>)
 800053e:	2203      	movs	r2, #3
 8000540:	701a      	strb	r2, [r3, #0]
  play_mode_source = 0;
 8000542:	4ba4      	ldr	r3, [pc, #656]	; (80007d4 <main+0x2d4>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
  mode_init();
 8000548:	f001 fd0e 	bl	8001f68 <mode_init>
  write_flash_config();
 800054c:	f001 fea2 	bl	8002294 <write_flash_config>
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 8000550:	2300      	movs	r3, #0
 8000552:	637b      	str	r3, [r7, #52]	; 0x34
 8000554:	e00d      	b.n	8000572 <main+0x72>
	  Mode_config[i*2]=0;    //picture_id
 8000556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4a9f      	ldr	r2, [pc, #636]	; (80007d8 <main+0x2d8>)
 800055c:	2100      	movs	r1, #0
 800055e:	54d1      	strb	r1, [r2, r3]
	  Mode_config[i*2+1]=0;  //picture_delay_time
 8000560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	3301      	adds	r3, #1
 8000566:	4a9c      	ldr	r2, [pc, #624]	; (80007d8 <main+0x2d8>)
 8000568:	2100      	movs	r1, #0
 800056a:	54d1      	strb	r1, [r2, r3]
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 800056c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800056e:	3301      	adds	r3, #1
 8000570:	637b      	str	r3, [r7, #52]	; 0x34
 8000572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000574:	2b37      	cmp	r3, #55	; 0x37
 8000576:	ddee      	ble.n	8000556 <main+0x56>
  }
  Mode_config[Max_pic_per_mode*2*Max_mode_num-1] = 0; //playing_mode
 8000578:	4b97      	ldr	r3, [pc, #604]	; (80007d8 <main+0x2d8>)
 800057a:	2200      	movs	r2, #0
 800057c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  read_flash_config();
 8000580:	f001 ff56 	bl	8002430 <read_flash_config>
  Playing_mode = Mode_config[100];//playing_mode_store = [Max_pic_per_mode*2*(Max_mode_num-1)]
 8000584:	4b94      	ldr	r3, [pc, #592]	; (80007d8 <main+0x2d8>)
 8000586:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800058a:	4b94      	ldr	r3, [pc, #592]	; (80007dc <main+0x2dc>)
 800058c:	701a      	strb	r2, [r3, #0]
  //fill Current_mode_config from Mode_config by using Playing_mode
  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 800058e:	4b93      	ldr	r3, [pc, #588]	; (80007dc <main+0x2dc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	4613      	mov	r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4413      	add	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	633b      	str	r3, [r7, #48]	; 0x30
 800059e:	2300      	movs	r3, #0
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005a2:	e00e      	b.n	80005c2 <main+0xc2>
	 Current_mode_config[j]=Mode_config[i];
 80005a4:	4a8c      	ldr	r2, [pc, #560]	; (80007d8 <main+0x2d8>)
 80005a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005a8:	4413      	add	r3, r2
 80005aa:	7819      	ldrb	r1, [r3, #0]
 80005ac:	4a8c      	ldr	r2, [pc, #560]	; (80007e0 <main+0x2e0>)
 80005ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b0:	4413      	add	r3, r2
 80005b2:	460a      	mov	r2, r1
 80005b4:	701a      	strb	r2, [r3, #0]
	 j++;
 80005b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b8:	3301      	adds	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 80005bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005be:	3301      	adds	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
 80005c2:	4b86      	ldr	r3, [pc, #536]	; (80007dc <main+0x2dc>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	4613      	mov	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4413      	add	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	461a      	mov	r2, r3
 80005d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d4:	4293      	cmp	r3, r2
 80005d6:	dbe5      	blt.n	80005a4 <main+0xa4>
  }
  //frist_change_mode = 1;
  //check how many pics to display
  //warning don't set Current_mode_config = [255 255 1 2 10 2 255 255 255 255]
  g_Mode_picture_count = 0;
 80005d8:	4b82      	ldr	r3, [pc, #520]	; (80007e4 <main+0x2e4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < 5 ; i++){
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e2:	e00e      	b.n	8000602 <main+0x102>
	 if(Current_mode_config[i*2] != 255)
 80005e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4a7d      	ldr	r2, [pc, #500]	; (80007e0 <main+0x2e0>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	2bff      	cmp	r3, #255	; 0xff
 80005ee:	d005      	beq.n	80005fc <main+0xfc>
		 g_Mode_picture_count++;
 80005f0:	4b7c      	ldr	r3, [pc, #496]	; (80007e4 <main+0x2e4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b7a      	ldr	r3, [pc, #488]	; (80007e4 <main+0x2e4>)
 80005fa:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < 5 ; i++){
 80005fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fe:	3301      	adds	r3, #1
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
 8000602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000604:	2b04      	cmp	r3, #4
 8000606:	dded      	ble.n	80005e4 <main+0xe4>
  }
  for(int i = 0; i < g_Mode_picture_count; i++){
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
 800060c:	e00e      	b.n	800062c <main+0x12c>
	  read_flash_page_DMA2d(&frame_buf_mode[MAX_IMAGE_SIZE*i], Current_mode_config[i*2]);
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	041b      	lsls	r3, r3, #16
 8000612:	4a75      	ldr	r2, [pc, #468]	; (80007e8 <main+0x2e8>)
 8000614:	441a      	add	r2, r3
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4971      	ldr	r1, [pc, #452]	; (80007e0 <main+0x2e0>)
 800061c:	5ccb      	ldrb	r3, [r1, r3]
 800061e:	4619      	mov	r1, r3
 8000620:	4610      	mov	r0, r2
 8000622:	f002 f8f9 	bl	8002818 <read_flash_page_DMA2d>
  for(int i = 0; i < g_Mode_picture_count; i++){
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	3301      	adds	r3, #1
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
 800062c:	4b6d      	ldr	r3, [pc, #436]	; (80007e4 <main+0x2e4>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	4293      	cmp	r3, r2
 8000636:	dbea      	blt.n	800060e <main+0x10e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2102      	movs	r1, #2
 800063c:	486b      	ldr	r0, [pc, #428]	; (80007ec <main+0x2ec>)
 800063e:	f004 fc23 	bl	8004e88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000648:	4869      	ldr	r0, [pc, #420]	; (80007f0 <main+0x2f0>)
 800064a:	f004 fc1d 	bl	8004e88 <HAL_GPIO_WritePin>

  HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 800064e:	2202      	movs	r2, #2
 8000650:	4968      	ldr	r1, [pc, #416]	; (80007f4 <main+0x2f4>)
 8000652:	4869      	ldr	r0, [pc, #420]	; (80007f8 <main+0x2f8>)
 8000654:	f007 fa56 	bl	8007b04 <HAL_SPI_Receive_IT>
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
 800065c:	e007      	b.n	800066e <main+0x16e>
  {
	  image_arr_rgb888[i] = 0xFF;
 800065e:	4a67      	ldr	r2, [pc, #412]	; (80007fc <main+0x2fc>)
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	4413      	add	r3, r2
 8000664:	22ff      	movs	r2, #255	; 0xff
 8000666:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	3301      	adds	r3, #1
 800066c:	623b      	str	r3, [r7, #32]
 800066e:	4b64      	ldr	r3, [pc, #400]	; (8000800 <main+0x300>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a64      	ldr	r2, [pc, #400]	; (8000804 <main+0x304>)
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	fb03 f202 	mul.w	r2, r3, r2
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	441a      	add	r2, r3
 8000680:	6a3b      	ldr	r3, [r7, #32]
 8000682:	429a      	cmp	r2, r3
 8000684:	d8eb      	bhi.n	800065e <main+0x15e>
  }
  HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	205b      	movs	r0, #91	; 0x5b
 800068c:	f003 fa31 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000690:	205b      	movs	r0, #91	; 0x5b
 8000692:	f003 fa4a 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 8000696:	2100      	movs	r1, #0
 8000698:	485b      	ldr	r0, [pc, #364]	; (8000808 <main+0x308>)
 800069a:	f004 fdeb 	bl	8005274 <HAL_LTDC_ProgramLineEvent>
    while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode_source == 0)
 800069e:	4b4d      	ldr	r3, [pc, #308]	; (80007d4 <main+0x2d4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f040 80d5 	bne.w	8000852 <main+0x352>
	  {
		  if (play_mode == 0)
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <main+0x2d0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d109      	bne.n	80006c4 <main+0x1c4>
		  {
			  read_flash_page(&frame_buf_flash, display_image_number);
 80006b0:	4b56      	ldr	r3, [pc, #344]	; (800080c <main+0x30c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4856      	ldr	r0, [pc, #344]	; (8000810 <main+0x310>)
 80006b8:	f002 f818 	bl	80026ec <read_flash_page>
			  display_panel(&frame_buf_flash);
 80006bc:	4854      	ldr	r0, [pc, #336]	; (8000810 <main+0x310>)
 80006be:	f001 fb4d 	bl	8001d5c <display_panel>
 80006c2:	e100      	b.n	80008c6 <main+0x3c6>
		  }
		  else if (play_mode == 1)
 80006c4:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <main+0x2d0>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d139      	bne.n	8000740 <main+0x240>
		  {
			  uint8_t should_break = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	77fb      	strb	r3, [r7, #31]
			  while(1)
			  {
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 80006d0:	4b50      	ldr	r3, [pc, #320]	; (8000814 <main+0x314>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	61bb      	str	r3, [r7, #24]
 80006d6:	e021      	b.n	800071c <main+0x21c>
				  {
					  HAL_Delay(5);
 80006d8:	2005      	movs	r0, #5
 80006da:	f003 f90b 	bl	80038f4 <HAL_Delay>
					  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
					  if (play_mode_source != 0 || play_mode != 1 || setting_changed == 1)
 80006de:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <main+0x2d4>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d107      	bne.n	80006f6 <main+0x1f6>
 80006e6:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <main+0x2d0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d103      	bne.n	80006f6 <main+0x1f6>
 80006ee:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <main+0x318>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d102      	bne.n	80006fc <main+0x1fc>
					  {
						  should_break = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	77fb      	strb	r3, [r7, #31]
						  break;
 80006fa:	e015      	b.n	8000728 <main+0x228>
					  }
					  read_flash_page(&frame_buf_flash, i);
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	4843      	ldr	r0, [pc, #268]	; (8000810 <main+0x310>)
 8000704:	f001 fff2 	bl	80026ec <read_flash_page>
					  display_panel(&frame_buf_flash);
 8000708:	4841      	ldr	r0, [pc, #260]	; (8000810 <main+0x310>)
 800070a:	f001 fb27 	bl	8001d5c <display_panel>
					  display_image_number = i;
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b3e      	ldr	r3, [pc, #248]	; (800080c <main+0x30c>)
 8000714:	701a      	strb	r2, [r3, #0]
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	3301      	adds	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	4b3f      	ldr	r3, [pc, #252]	; (800081c <main+0x31c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	4293      	cmp	r3, r2
 8000726:	ddd7      	ble.n	80006d8 <main+0x1d8>
				  }
				  if (should_break == 0)
 8000728:	7ffb      	ldrb	r3, [r7, #31]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d103      	bne.n	8000736 <main+0x236>
				  {
					  display_image_number = 0;
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <main+0x30c>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	e7cc      	b.n	80006d0 <main+0x1d0>
				  }
				  else if (should_break == 1)
 8000736:	7ffb      	ldrb	r3, [r7, #31]
 8000738:	2b01      	cmp	r3, #1
 800073a:	f000 80c3 	beq.w	80008c4 <main+0x3c4>
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 800073e:	e7c7      	b.n	80006d0 <main+0x1d0>
				  {
				  	  break;
				  }
			  }
		  }
		  else if (play_mode == 3)
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <main+0x2d0>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b03      	cmp	r3, #3
 8000746:	f040 80be 	bne.w	80008c6 <main+0x3c6>
		  {
			  uint8_t should_break = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	72fb      	strb	r3, [r7, #11]
			  while(1){
			  //initial or change mode
				  if( Mode_changed )
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <main+0x320>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0fb      	beq.n	800074e <main+0x24e>
				  {
					  read_flash_config();
 8000756:	f001 fe6b 	bl	8002430 <read_flash_config>
					  Playing_mode = Mode_config[100];//playing_mode_store = [Max_pic_per_mode*2*(Max_mode_num-1)]
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <main+0x2d8>)
 800075c:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <main+0x2dc>)
 8000762:	701a      	strb	r2, [r3, #0]
					  //fill Current_mode_config from Mode_config by using Playing_mode
					  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <main+0x2dc>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4613      	mov	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	e00e      	b.n	8000798 <main+0x298>
						 Current_mode_config[j]=Mode_config[i];
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <main+0x2d8>)
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	4413      	add	r3, r2
 8000780:	7819      	ldrb	r1, [r3, #0]
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <main+0x2e0>)
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	4413      	add	r3, r2
 8000788:	460a      	mov	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
						 j++;
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	3301      	adds	r3, #1
 8000790:	613b      	str	r3, [r7, #16]
					  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <main+0x2dc>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	461a      	mov	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4293      	cmp	r3, r2
 80007ac:	dbe5      	blt.n	800077a <main+0x27a>
					  }
					  Current_Picture = 0;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <main+0x324>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
					  Mode_changed = 0;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <main+0x320>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
					  //check how many pics to display
					  //warning don't set Current_mode_config = [255 255 1 2 10 2 255 255 255 255]
					  Picture_count = 0;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <main+0x328>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
					  for(int i = 0 ; i < 5 ; i++){
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	e041      	b.n	800084a <main+0x34a>
 80007c6:	bf00      	nop
 80007c8:	080094cc 	.word	0x080094cc
 80007cc:	20000238 	.word	0x20000238
 80007d0:	20064cbc 	.word	0x20064cbc
 80007d4:	20064cbd 	.word	0x20064cbd
 80007d8:	20094cc8 	.word	0x20094cc8
 80007dc:	2000001f 	.word	0x2000001f
 80007e0:	20094d38 	.word	0x20094d38
 80007e4:	20094d46 	.word	0x20094d46
 80007e8:	200402cc 	.word	0x200402cc
 80007ec:	48000800 	.word	0x48000800
 80007f0:	48001400 	.word	0x48001400
 80007f4:	20094cc4 	.word	0x20094cc4
 80007f8:	200001d4 	.word	0x200001d4
 80007fc:	20064cc0 	.word	0x20064cc0
 8000800:	20000000 	.word	0x20000000
 8000804:	20000004 	.word	0x20000004
 8000808:	200000c8 	.word	0x200000c8
 800080c:	20094cc0 	.word	0x20094cc0
 8000810:	200302cc 	.word	0x200302cc
 8000814:	200002c8 	.word	0x200002c8
 8000818:	20094cc6 	.word	0x20094cc6
 800081c:	2000000a 	.word	0x2000000a
 8000820:	20000020 	.word	0x20000020
 8000824:	20094d42 	.word	0x20094d42
 8000828:	20094d43 	.word	0x20094d43
						 if(Current_mode_config[i*2] != 255)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	4a54      	ldr	r2, [pc, #336]	; (8000984 <main+0x484>)
 8000832:	5cd3      	ldrb	r3, [r2, r3]
 8000834:	2bff      	cmp	r3, #255	; 0xff
 8000836:	d005      	beq.n	8000844 <main+0x344>
							 Picture_count++;
 8000838:	4b53      	ldr	r3, [pc, #332]	; (8000988 <main+0x488>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b51      	ldr	r3, [pc, #324]	; (8000988 <main+0x488>)
 8000842:	701a      	strb	r2, [r3, #0]
					  for(int i = 0 ; i < 5 ; i++){
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3301      	adds	r3, #1
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b04      	cmp	r3, #4
 800084e:	dded      	ble.n	800082c <main+0x32c>
				  if( Mode_changed )
 8000850:	e77d      	b.n	800074e <main+0x24e>
//					  break;
//				  }
//			  }
		  }
	  }
	  else if (play_mode_source == 1)
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <main+0x48c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d12c      	bne.n	80008b4 <main+0x3b4>
	  {
		  if (play_mode == 2)
 800085a:	4b4d      	ldr	r3, [pc, #308]	; (8000990 <main+0x490>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d124      	bne.n	80008ac <main+0x3ac>
		  {
			  while(1)
			  {
				  HAL_Delay(5);
 8000862:	2005      	movs	r0, #5
 8000864:	f003 f846 	bl	80038f4 <HAL_Delay>
				  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 8000868:	4b48      	ldr	r3, [pc, #288]	; (800098c <main+0x48c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d12a      	bne.n	80008c6 <main+0x3c6>
 8000870:	4b47      	ldr	r3, [pc, #284]	; (8000990 <main+0x490>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d126      	bne.n	80008c6 <main+0x3c6>
 8000878:	4b46      	ldr	r3, [pc, #280]	; (8000994 <main+0x494>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d022      	beq.n	80008c6 <main+0x3c6>
				  {
					  break;
				  }
				  display_panel(&frame_buf_0);
 8000880:	4845      	ldr	r0, [pc, #276]	; (8000998 <main+0x498>)
 8000882:	f001 fa6b 	bl	8001d5c <display_panel>

				  HAL_Delay(5);
 8000886:	2005      	movs	r0, #5
 8000888:	f003 f834 	bl	80038f4 <HAL_Delay>
				  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 800088c:	4b3f      	ldr	r3, [pc, #252]	; (800098c <main+0x48c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d118      	bne.n	80008c6 <main+0x3c6>
 8000894:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <main+0x490>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d114      	bne.n	80008c6 <main+0x3c6>
 800089c:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <main+0x494>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d010      	beq.n	80008c6 <main+0x3c6>
				  {
					  break;
				  }
				  display_panel(&frame_buf_1);
 80008a4:	483d      	ldr	r0, [pc, #244]	; (800099c <main+0x49c>)
 80008a6:	f001 fa59 	bl	8001d5c <display_panel>
				  HAL_Delay(5);
 80008aa:	e7da      	b.n	8000862 <main+0x362>
			  }
		  }
		  else
		  {
			  display_panel(&frame_buf_0);
 80008ac:	483a      	ldr	r0, [pc, #232]	; (8000998 <main+0x498>)
 80008ae:	f001 fa55 	bl	8001d5c <display_panel>
 80008b2:	e008      	b.n	80008c6 <main+0x3c6>
		  }
	  }
	  else if (play_mode_source == 2)
 80008b4:	4b35      	ldr	r3, [pc, #212]	; (800098c <main+0x48c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d104      	bne.n	80008c6 <main+0x3c6>
	  {
		  display_panel(&frame_buf_1);
 80008bc:	4837      	ldr	r0, [pc, #220]	; (800099c <main+0x49c>)
 80008be:	f001 fa4d 	bl	8001d5c <display_panel>
 80008c2:	e000      	b.n	80008c6 <main+0x3c6>
				  	  break;
 80008c4:	bf00      	nop
	  }

	  if(setting_changed == 1)
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <main+0x494>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d155      	bne.n	800097a <main+0x47a>
	  {
		  uint16_t Horizontal_blanking_total = Horizontal_blanking_H*256 + Horizontal_blanking_L;
 80008ce:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <main+0x4a0>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <main+0x4a4>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	4413      	add	r3, r2
 80008e0:	813b      	strh	r3, [r7, #8]
		  HBP = Horizontal_blanking_total / 3;
 80008e2:	893b      	ldrh	r3, [r7, #8]
 80008e4:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <main+0x4a8>)
 80008e6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ea:	085b      	lsrs	r3, r3, #1
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <main+0x4ac>)
 80008f0:	801a      	strh	r2, [r3, #0]
		  HFP = Horizontal_blanking_total / 3;
 80008f2:	893b      	ldrh	r3, [r7, #8]
 80008f4:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <main+0x4a8>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	085b      	lsrs	r3, r3, #1
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <main+0x4b0>)
 8000900:	801a      	strh	r2, [r3, #0]
		  HSA = Horizontal_blanking_total - (HBP + HFP);
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <main+0x4ac>)
 8000904:	881a      	ldrh	r2, [r3, #0]
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <main+0x4b0>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	b29b      	uxth	r3, r3
 800090e:	893a      	ldrh	r2, [r7, #8]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <main+0x4b4>)
 8000916:	801a      	strh	r2, [r3, #0]

		  uint16_t Vertical_blanking_total = Vertical_blanking_H*256 + Vertical_blanking_L;
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <main+0x4b8>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b29b      	uxth	r3, r3
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <main+0x4bc>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	4413      	add	r3, r2
 800092a:	80fb      	strh	r3, [r7, #6]
		  VBP = Vertical_blanking_total / 3;
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <main+0x4a8>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <main+0x4c0>)
 800093a:	801a      	strh	r2, [r3, #0]
		  VFP = Vertical_blanking_total / 3;
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	4a1a      	ldr	r2, [pc, #104]	; (80009a8 <main+0x4a8>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <main+0x4c4>)
 800094a:	801a      	strh	r2, [r3, #0]
		  VSA = Vertical_blanking_total - (VBP + VFP);
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <main+0x4c0>)
 800094e:	881a      	ldrh	r2, [r3, #0]
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <main+0x4c4>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	4413      	add	r3, r2
 8000956:	b29b      	uxth	r3, r3
 8000958:	88fa      	ldrh	r2, [r7, #6]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <main+0x4c8>)
 8000960:	801a      	strh	r2, [r3, #0]

		  my_MX_DSIHOST_DSI_Init();
 8000962:	f002 faab 	bl	8002ebc <my_MX_DSIHOST_DSI_Init>
		  my_MX_LTDC_Init();
 8000966:	f002 fbb7 	bl	80030d8 <my_MX_LTDC_Init>
		  mipi_config();
 800096a:	f000 fbc9 	bl	8001100 <mipi_config>
		  HAL_Delay(10);
 800096e:	200a      	movs	r0, #10
 8000970:	f002 ffc0 	bl	80038f4 <HAL_Delay>

		  setting_changed = 0;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <main+0x494>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(10);
 800097a:	200a      	movs	r0, #10
 800097c:	f002 ffba 	bl	80038f4 <HAL_Delay>
	  if (play_mode_source == 0)
 8000980:	e68d      	b.n	800069e <main+0x19e>
 8000982:	bf00      	nop
 8000984:	20094d38 	.word	0x20094d38
 8000988:	20094d43 	.word	0x20094d43
 800098c:	20064cbd 	.word	0x20064cbd
 8000990:	20064cbc 	.word	0x20064cbc
 8000994:	20094cc6 	.word	0x20094cc6
 8000998:	200102cc 	.word	0x200102cc
 800099c:	200202cc 	.word	0x200202cc
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	2000000d 	.word	0x2000000d
 80009a8:	aaaaaaab 	.word	0xaaaaaaab
 80009ac:	20000012 	.word	0x20000012
 80009b0:	20000014 	.word	0x20000014
 80009b4:	20000010 	.word	0x20000010
 80009b8:	2000000e 	.word	0x2000000e
 80009bc:	2000000f 	.word	0x2000000f
 80009c0:	20000018 	.word	0x20000018
 80009c4:	2000001a 	.word	0x2000001a
 80009c8:	20000016 	.word	0x20000016

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	; 0x58
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2244      	movs	r2, #68	; 0x44
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f008 fd62 	bl	80094a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80009ee:	2000      	movs	r0, #0
 80009f0:	f004 fe30 	bl	8005654 <HAL_PWREx_ControlVoltageScaling>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x32>
  {
    Error_Handler();
 80009fa:	f002 fcb7 	bl	800336c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a14:	231e      	movs	r3, #30
 8000a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 fec7 	bl	80057bc <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000a34:	f002 fc9a 	bl	800336c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	230f      	movs	r3, #15
 8000a3a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2105      	movs	r1, #5
 8000a50:	4618      	mov	r0, r3
 8000a52:	f005 facd 	bl	8005ff0 <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a5c:	f002 fc86 	bl	800336c <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3758      	adds	r7, #88	; 0x58
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_DMA2D_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000ab6:	f003 f8b1 	bl	8003c1c <HAL_DMA2D_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000ac0:	f002 fc54 	bl	800336c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_DMA2D_Init+0x74>)
 8000ac8:	f003 f90a 	bl	8003ce0 <HAL_DMA2D_ConfigLayer>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f002 fc4b 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000004c 	.word	0x2000004c
 8000ae0:	4002b000 	.word	0x4002b000

08000ae4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0ae      	sub	sp, #184	; 0xb8
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000aea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000af6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000afa:	2224      	movs	r2, #36	; 0x24
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f008 fcd0 	bl	80094a4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	226c      	movs	r2, #108	; 0x6c
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f008 fcc1 	bl	80094a4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000b22:	4b64      	ldr	r3, [pc, #400]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b24:	4a64      	ldr	r2, [pc, #400]	; (8000cb8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8000b26:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b28:	4b62      	ldr	r3, [pc, #392]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8000b2e:	4b61      	ldr	r3, [pc, #388]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000b34:	4b5f      	ldr	r3, [pc, #380]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8000b3a:	2332      	movs	r3, #50	; 0x32
 8000b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b50:	4619      	mov	r1, r3
 8000b52:	4858      	ldr	r0, [pc, #352]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b54:	f003 f9aa 	bl	8003eac <HAL_DSI_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000b5e:	f002 fc05 	bl	800336c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000b98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4845      	ldr	r0, [pc, #276]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000ba0:	f003 fdf7 	bl	8004792 <HAL_DSI_ConfigHostTimeouts>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000baa:	f002 fbdf 	bl	800336c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000bae:	2313      	movs	r3, #19
 8000bb0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000bb6:	2309      	movs	r3, #9
 8000bb8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000bba:	230a      	movs	r3, #10
 8000bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000bca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4838      	ldr	r0, [pc, #224]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bd2:	f003 fd74 	bl	80046be <HAL_DSI_ConfigPhyTimer>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000bdc:	f002 fbc6 	bl	800336c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000be0:	f242 7110 	movw	r1, #10000	; 0x2710
 8000be4:	4833      	ldr	r0, [pc, #204]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000be6:	f003 ff90 	bl	8004b0a <HAL_DSI_SetLowPowerRXFilter>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000bf0:	f002 fbbc 	bl	800336c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	482f      	ldr	r0, [pc, #188]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bf8:	f003 fa74 	bl	80040e4 <HAL_DSI_ConfigErrorMonitor>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000c02:	f002 fbb3 	bl	800336c <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000c12:	2301      	movs	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8000c16:	2378      	movs	r3, #120	; 0x78
 8000c18:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 184;
 8000c2e:	23b8      	movs	r3, #184	; 0xb8
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 180;
 8000c32:	23b4      	movs	r3, #180	; 0xb4
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 664;
 8000c36:	f44f 7326 	mov.w	r3, #664	; 0x298
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 9;
 8000c3c:	2309      	movs	r3, #9
 8000c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000c40:	2308      	movs	r3, #8
 8000c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000c44:	2308      	movs	r3, #8
 8000c46:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 156;
 8000c48:	239c      	movs	r3, #156	; 0x9c
 8000c4a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c50:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000c52:	231c      	movs	r3, #28
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000c56:	2350      	movs	r3, #80	; 0x50
 8000c58:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5e:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000c66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c70:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c76:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7c:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000c88:	f003 fb11 	bl	80042ae <HAL_DSI_ConfigVideoMode>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000c92:	f002 fb6b 	bl	800336c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000c9a:	f003 fae0 	bl	800425e <HAL_DSI_SetGenericVCID>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000ca4:	f002 fb62 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
  LCD_PowerOn();
 8000ca8:	f000 fc36 	bl	8001518 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	37b8      	adds	r7, #184	; 0xb8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000ac 	.word	0x200000ac
 8000cb8:	40016c00 	.word	0x40016c00

08000cbc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2234      	movs	r2, #52	; 0x34
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f008 fbeb 	bl	80094a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000cd0:	4a38      	ldr	r2, [pc, #224]	; (8000db4 <MX_LTDC_Init+0xf8>)
 8000cd2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000cd4:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000cd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cda:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000cde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 183;
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000cf2:	22b7      	movs	r2, #183	; 0xb7
 8000cf4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 363;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000cfe:	f240 126b 	movw	r2, #363	; 0x16b
 8000d02:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 16;
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d06:	2210      	movs	r2, #16
 8000d08:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 483;
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d0c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 172;
 8000d12:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d14:	22ac      	movs	r2, #172	; 0xac
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 663;
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d1a:	f240 2297 	movw	r2, #663	; 0x297
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 180;
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d22:	22b4      	movs	r2, #180	; 0xb4
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d28:	22ff      	movs	r2, #255	; 0xff
 8000d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d30:	22ff      	movs	r2, #255	; 0xff
 8000d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d38:	22ff      	movs	r2, #255	; 0xff
 8000d3a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d3e:	481c      	ldr	r0, [pc, #112]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d40:	f004 f8d2 	bl	8004ee8 <HAL_LTDC_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000d4a:	f002 fb0f 	bl	800336c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 120;
 8000d52:	2378      	movs	r3, #120	; 0x78
 8000d54:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 156;
 8000d5a:	239c      	movs	r3, #156	; 0x9c
 8000d5c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d62:	23ff      	movs	r3, #255	; 0xff
 8000d64:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d70:	2305      	movs	r3, #5
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_LTDC_Init+0xfc>)
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 120;
 8000d78:	2378      	movs	r3, #120	; 0x78
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 156;
 8000d7c:	239c      	movs	r3, #156	; 0x9c
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000d80:	23ff      	movs	r3, #255	; 0xff
 8000d82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000d86:	23ff      	movs	r3, #255	; 0xff
 8000d88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000d8c:	23ff      	movs	r3, #255	; 0xff
 8000d8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_LTDC_Init+0xf4>)
 8000d9a:	f004 fa2d 	bl	80051f8 <HAL_LTDC_ConfigLayer>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000da4:	f002 fae2 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3738      	adds	r7, #56	; 0x38
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200000c8 	.word	0x200000c8
 8000db4:	40016800 	.word	0x40016800
 8000db8:	20064cc0 	.word	0x20064cc0

08000dbc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <MX_SPI2_Init+0x78>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dcc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000dd6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dda:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000df2:	2208      	movs	r2, #8
 8000df4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000e16:	2208      	movs	r2, #8
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_SPI2_Init+0x74>)
 8000e1c:	f006 f91e 	bl	800705c <HAL_SPI_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e26:	f002 faa1 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000170 	.word	0x20000170
 8000e34:	40003800 	.word	0x40003800

08000e38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <MX_SPI3_Init+0x6c>)
 8000e40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e54:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_SPI3_Init+0x68>)
 8000e8e:	f006 f8e5 	bl	800705c <HAL_SPI_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000e98:	f002 fa68 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001d4 	.word	0x200001d4
 8000ea4:	40003c00 	.word	0x40003c00

08000ea8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_UART4_Init+0x90>)
 8000eae:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <MX_UART4_Init+0x94>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_UART4_Init+0x90>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_UART4_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_UART4_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_UART4_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_UART4_Init+0x90>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_UART4_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_UART4_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_UART4_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_UART4_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_UART4_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ef0:	4811      	ldr	r0, [pc, #68]	; (8000f38 <MX_UART4_Init+0x90>)
 8000ef2:	f007 fc17 	bl	8008724 <HAL_UART_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000efc:	f002 fa36 	bl	800336c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f00:	2100      	movs	r1, #0
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_UART4_Init+0x90>)
 8000f04:	f008 f9e0 	bl	80092c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f0e:	f002 fa2d 	bl	800336c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_UART4_Init+0x90>)
 8000f16:	f008 fa15 	bl	8009344 <HAL_UARTEx_SetRxFifoThreshold>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f20:	f002 fa24 	bl	800336c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_UART4_Init+0x90>)
 8000f26:	f008 f996 	bl	8009256 <HAL_UARTEx_DisableFifoMode>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f30:	f002 fa1c 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000238 	.word	0x20000238
 8000f3c:	40004c00 	.word	0x40004c00

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f56:	4b65      	ldr	r3, [pc, #404]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a64      	ldr	r2, [pc, #400]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b62      	ldr	r3, [pc, #392]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000f6e:	f004 fc15 	bl	800579c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a5d      	ldr	r2, [pc, #372]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b5b      	ldr	r3, [pc, #364]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b58      	ldr	r3, [pc, #352]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a57      	ldr	r2, [pc, #348]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b55      	ldr	r3, [pc, #340]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	4b52      	ldr	r3, [pc, #328]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a51      	ldr	r2, [pc, #324]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b4f      	ldr	r3, [pc, #316]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b49      	ldr	r3, [pc, #292]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	4b46      	ldr	r3, [pc, #280]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a45      	ldr	r2, [pc, #276]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b43      	ldr	r3, [pc, #268]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <MX_GPIO_Init+0x1ac>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001008:	4839      	ldr	r0, [pc, #228]	; (80010f0 <MX_GPIO_Init+0x1b0>)
 800100a:	f003 ff3d 	bl	8004e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESXP_Pin|flash_cs_Pin, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001014:	4836      	ldr	r0, [pc, #216]	; (80010f0 <MX_GPIO_Init+0x1b0>)
 8001016:	f003 ff37 	bl	8004e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	4835      	ldr	r0, [pc, #212]	; (80010f4 <MX_GPIO_Init+0x1b4>)
 8001020:	f003 ff32 	bl	8004e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4833      	ldr	r0, [pc, #204]	; (80010f8 <MX_GPIO_Init+0x1b8>)
 800102c:	f003 ff2c 	bl	8004e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin RESXP_Pin flash_cs_Pin */
  GPIO_InitStruct.Pin = led_Pin|RESXP_Pin|flash_cs_Pin;
 8001030:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4829      	ldr	r0, [pc, #164]	; (80010f0 <MX_GPIO_Init+0x1b0>)
 800104a:	f003 fd8b 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : sync_Pin */
  GPIO_InitStruct.Pin = sync_Pin;
 800104e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001054:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105a:	2302      	movs	r3, #2
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(sync_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f003 fd7c 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : pic_sw_Pin */
  GPIO_InitStruct.Pin = pic_sw_Pin;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001072:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001078:	2302      	movs	r3, #2
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(pic_sw_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	481e      	ldr	r0, [pc, #120]	; (80010fc <MX_GPIO_Init+0x1bc>)
 8001084:	f003 fd6e 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : bat_en_Pin */
  GPIO_InitStruct.Pin = bat_en_Pin;
 8001088:	2302      	movs	r3, #2
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(bat_en_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <MX_GPIO_Init+0x1b4>)
 80010a0:	f003 fd60 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : en_Pin */
  GPIO_InitStruct.Pin = en_Pin;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(en_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	480e      	ldr	r0, [pc, #56]	; (80010f8 <MX_GPIO_Init+0x1b8>)
 80010be:	f003 fd51 	bl	8004b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2017      	movs	r0, #23
 80010c8:	f002 fd13 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010cc:	2017      	movs	r0, #23
 80010ce:	f002 fd2c 	bl	8003b2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2103      	movs	r1, #3
 80010d6:	2028      	movs	r0, #40	; 0x28
 80010d8:	f002 fd0b 	bl	8003af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010dc:	2028      	movs	r0, #40	; 0x28
 80010de:	f002 fd24 	bl	8003b2a <HAL_NVIC_EnableIRQ>

}
 80010e2:	bf00      	nop
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000400 	.word	0x48000400
 80010f4:	48000800 	.word	0x48000800
 80010f8:	48001400 	.word	0x48001400
 80010fc:	48000c00 	.word	0x48000c00

08001100 <mipi_config>:

/* USER CODE BEGIN 4 */

void mipi_config()
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b0af      	sub	sp, #188	; 0xbc
 8001104:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8001106:	48c4      	ldr	r0, [pc, #784]	; (8001418 <mipi_config+0x318>)
 8001108:	f003 fc09 	bl	800491e <HAL_DSI_Start>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <mipi_config+0x16>
	{
		Error_Handler();
 8001112:	f002 f92b 	bl	800336c <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8001116:	23c3      	movs	r3, #195	; 0xc3
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	23f0      	movs	r3, #240	; 0xf0
 800111c:	2215      	movs	r2, #21
 800111e:	2100      	movs	r1, #0
 8001120:	48bd      	ldr	r0, [pc, #756]	; (8001418 <mipi_config+0x318>)
 8001122:	f003 fc38 	bl	8004996 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8001126:	2396      	movs	r3, #150	; 0x96
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	23f0      	movs	r3, #240	; 0xf0
 800112c:	2215      	movs	r2, #21
 800112e:	2100      	movs	r1, #0
 8001130:	48b9      	ldr	r0, [pc, #740]	; (8001418 <mipi_config+0x318>)
 8001132:	f003 fc30 	bl	8004996 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = {0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33};
 8001136:	4ab9      	ldr	r2, [pc, #740]	; (800141c <mipi_config+0x31c>)
 8001138:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800113c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001140:	6018      	str	r0, [r3, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	8019      	strh	r1, [r3, #0]
 8001146:	3302      	adds	r3, #2
 8001148:	0c0a      	lsrs	r2, r1, #16
 800114a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 800114c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	23e7      	movs	r3, #231	; 0xe7
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2308      	movs	r3, #8
 8001158:	2239      	movs	r2, #57	; 0x39
 800115a:	2100      	movs	r1, #0
 800115c:	48ae      	ldr	r0, [pc, #696]	; (8001418 <mipi_config+0x318>)
 800115e:	f003 fc3c 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = {0xC0, 0x68, 0xE0};
 8001162:	4aaf      	ldr	r2, [pc, #700]	; (8001420 <mipi_config+0x320>)
 8001164:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	4611      	mov	r1, r2
 800116c:	8019      	strh	r1, [r3, #0]
 800116e:	3302      	adds	r3, #2
 8001170:	0c12      	lsrs	r2, r2, #16
 8001172:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8001174:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	23a4      	movs	r3, #164	; 0xa4
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2304      	movs	r3, #4
 8001180:	2239      	movs	r2, #57	; 0x39
 8001182:	2100      	movs	r1, #0
 8001184:	48a4      	ldr	r0, [pc, #656]	; (8001418 <mipi_config+0x318>)
 8001186:	f003 fc28 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = {0x42, 0x05, 0x24, 0x03};
 800118a:	4ba6      	ldr	r3, [pc, #664]	; (8001424 <mipi_config+0x324>)
 800118c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8001190:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	23c3      	movs	r3, #195	; 0xc3
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2305      	movs	r3, #5
 800119c:	2239      	movs	r2, #57	; 0x39
 800119e:	2100      	movs	r1, #0
 80011a0:	489d      	ldr	r0, [pc, #628]	; (8001418 <mipi_config+0x318>)
 80011a2:	f003 fc1a 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = {0x42, 0x05, 0x24, 0x03};
 80011a6:	4b9f      	ldr	r3, [pc, #636]	; (8001424 <mipi_config+0x324>)
 80011a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 80011ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	23c4      	movs	r3, #196	; 0xc4
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2305      	movs	r3, #5
 80011b8:	2239      	movs	r2, #57	; 0x39
 80011ba:	2100      	movs	r1, #0
 80011bc:	4896      	ldr	r0, [pc, #600]	; (8001418 <mipi_config+0x318>)
 80011be:	f003 fc0c 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 80011c2:	4a99      	ldr	r2, [pc, #612]	; (8001428 <mipi_config+0x328>)
 80011c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 80011ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	23e5      	movs	r3, #229	; 0xe5
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	230d      	movs	r3, #13
 80011da:	2239      	movs	r2, #57	; 0x39
 80011dc:	2100      	movs	r1, #0
 80011de:	488e      	ldr	r0, [pc, #568]	; (8001418 <mipi_config+0x318>)
 80011e0:	f003 fbfb 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 80011e4:	4a90      	ldr	r2, [pc, #576]	; (8001428 <mipi_config+0x328>)
 80011e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 80011f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	23e6      	movs	r3, #230	; 0xe6
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	230d      	movs	r3, #13
 80011fc:	2239      	movs	r2, #57	; 0x39
 80011fe:	2100      	movs	r1, #0
 8001200:	4885      	ldr	r0, [pc, #532]	; (8001418 <mipi_config+0x318>)
 8001202:	f003 fbea 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = {0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22};
 8001206:	4a89      	ldr	r2, [pc, #548]	; (800142c <mipi_config+0x32c>)
 8001208:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800120c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001210:	6018      	str	r0, [r3, #0]
 8001212:	3304      	adds	r3, #4
 8001214:	8019      	strh	r1, [r3, #0]
 8001216:	3302      	adds	r3, #2
 8001218:	0c0a      	lsrs	r2, r1, #16
 800121a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 800121c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	23ec      	movs	r3, #236	; 0xec
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2308      	movs	r3, #8
 8001228:	2239      	movs	r2, #57	; 0x39
 800122a:	2100      	movs	r1, #0
 800122c:	487a      	ldr	r0, [pc, #488]	; (8001418 <mipi_config+0x318>)
 800122e:	f003 fbd4 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = {0x88, 0x05, 0x0F, 0x18};
 8001232:	4b7f      	ldr	r3, [pc, #508]	; (8001430 <mipi_config+0x330>)
 8001234:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 8001236:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	23c1      	movs	r3, #193	; 0xc1
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2305      	movs	r3, #5
 8001242:	2239      	movs	r2, #57	; 0x39
 8001244:	2100      	movs	r1, #0
 8001246:	4874      	ldr	r0, [pc, #464]	; (8001418 <mipi_config+0x318>)
 8001248:	f003 fbc7 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = {0x88, 0x05, 0x0F, 0x18};
 800124c:	4b78      	ldr	r3, [pc, #480]	; (8001430 <mipi_config+0x330>)
 800124e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 8001250:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	23c2      	movs	r3, #194	; 0xc2
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2305      	movs	r3, #5
 800125c:	2239      	movs	r2, #57	; 0x39
 800125e:	2100      	movs	r1, #0
 8001260:	486d      	ldr	r0, [pc, #436]	; (8001418 <mipi_config+0x318>)
 8001262:	f003 fbba 	bl	80049da <HAL_DSI_LongWrite>
	//HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x08);
 8001266:	2308      	movs	r3, #8
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2336      	movs	r3, #54	; 0x36
 800126c:	2215      	movs	r2, #21
 800126e:	2100      	movs	r1, #0
 8001270:	4869      	ldr	r0, [pc, #420]	; (8001418 <mipi_config+0x318>)
 8001272:	f003 fb90 	bl	8004996 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 8001276:	2307      	movs	r3, #7
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	233a      	movs	r3, #58	; 0x3a
 800127c:	2215      	movs	r2, #21
 800127e:	2100      	movs	r1, #0
 8001280:	4865      	ldr	r0, [pc, #404]	; (8001418 <mipi_config+0x318>)
 8001282:	f003 fb88 	bl	8004996 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 8001286:	23be      	movs	r3, #190	; 0xbe
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	23c5      	movs	r3, #197	; 0xc5
 800128c:	2215      	movs	r2, #21
 800128e:	2100      	movs	r1, #0
 8001290:	4861      	ldr	r0, [pc, #388]	; (8001418 <mipi_config+0x318>)
 8001292:	f003 fb80 	bl	8004996 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = {0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55, 0x3D, 0x19, 0x18, 0x24, 0x27};
 8001296:	4b67      	ldr	r3, [pc, #412]	; (8001434 <mipi_config+0x334>)
 8001298:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800129c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129e:	c407      	stmia	r4!, {r0, r1, r2}
 80012a0:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 80012a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	23e0      	movs	r3, #224	; 0xe0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	230f      	movs	r3, #15
 80012ae:	2239      	movs	r2, #57	; 0x39
 80012b0:	2100      	movs	r1, #0
 80012b2:	4859      	ldr	r0, [pc, #356]	; (8001418 <mipi_config+0x318>)
 80012b4:	f003 fb91 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = {0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56, 0x3E, 0x1A, 0x18, 0x24, 0x28};
 80012b8:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <mipi_config+0x338>)
 80012ba:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80012be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c0:	c407      	stmia	r4!, {r0, r1, r2}
 80012c2:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 80012c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	23e1      	movs	r3, #225	; 0xe1
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	230f      	movs	r3, #15
 80012d0:	2239      	movs	r2, #57	; 0x39
 80012d2:	2100      	movs	r1, #0
 80012d4:	4850      	ldr	r0, [pc, #320]	; (8001418 <mipi_config+0x318>)
 80012d6:	f003 fb80 	bl	80049da <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 80012da:	2310      	movs	r3, #16
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	23b2      	movs	r3, #178	; 0xb2
 80012e0:	2215      	movs	r2, #21
 80012e2:	2100      	movs	r1, #0
 80012e4:	484c      	ldr	r0, [pc, #304]	; (8001418 <mipi_config+0x318>)
 80012e6:	f003 fb56 	bl	8004996 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 80012ea:	2301      	movs	r3, #1
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	23b3      	movs	r3, #179	; 0xb3
 80012f0:	2215      	movs	r2, #21
 80012f2:	2100      	movs	r1, #0
 80012f4:	4848      	ldr	r0, [pc, #288]	; (8001418 <mipi_config+0x318>)
 80012f6:	f003 fb4e 	bl	8004996 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 80012fa:	2301      	movs	r3, #1
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	23b4      	movs	r3, #180	; 0xb4
 8001300:	2215      	movs	r2, #21
 8001302:	2100      	movs	r1, #0
 8001304:	4844      	ldr	r0, [pc, #272]	; (8001418 <mipi_config+0x318>)
 8001306:	f003 fb46 	bl	8004996 <HAL_DSI_ShortWrite>
	//uint8_t cmd20[2] = {0x27, 0x09};
	uint8_t cmd20[2] = {0x4D, 0x0E};
 800130a:	f640 634d 	movw	r3, #3661	; 0xe4d
 800130e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 8001312:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	23b6      	movs	r3, #182	; 0xb6
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2303      	movs	r3, #3
 800131e:	2239      	movs	r2, #57	; 0x39
 8001320:	2100      	movs	r1, #0
 8001322:	483d      	ldr	r0, [pc, #244]	; (8001418 <mipi_config+0x318>)
 8001324:	f003 fb59 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = {0x00, 0x54, 0x00, 0x54};
 8001328:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 800132c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 800132e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	23b5      	movs	r3, #181	; 0xb5
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2305      	movs	r3, #5
 800133a:	2239      	movs	r2, #57	; 0x39
 800133c:	2100      	movs	r1, #0
 800133e:	4836      	ldr	r0, [pc, #216]	; (8001418 <mipi_config+0x318>)
 8001340:	f003 fb4b 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001344:	4a3d      	ldr	r2, [pc, #244]	; (800143c <mipi_config+0x33c>)
 8001346:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800134a:	ca07      	ldmia	r2, {r0, r1, r2}
 800134c:	c303      	stmia	r3!, {r0, r1}
 800134e:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 8001350:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	23a5      	movs	r3, #165	; 0xa5
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	230a      	movs	r3, #10
 800135c:	2239      	movs	r2, #57	; 0x39
 800135e:	2100      	movs	r1, #0
 8001360:	482d      	ldr	r0, [pc, #180]	; (8001418 <mipi_config+0x318>)
 8001362:	f003 fb3a 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001366:	4a35      	ldr	r2, [pc, #212]	; (800143c <mipi_config+0x33c>)
 8001368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800136c:	ca07      	ldmia	r2, {r0, r1, r2}
 800136e:	c303      	stmia	r3!, {r0, r1}
 8001370:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 8001372:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	23a6      	movs	r3, #166	; 0xa6
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	230a      	movs	r3, #10
 800137e:	2239      	movs	r2, #57	; 0x39
 8001380:	2100      	movs	r1, #0
 8001382:	4825      	ldr	r0, [pc, #148]	; (8001418 <mipi_config+0x318>)
 8001384:	f003 fb29 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = {0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00};
 8001388:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <mipi_config+0x340>)
 800138a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001392:	6018      	str	r0, [r3, #0]
 8001394:	3304      	adds	r3, #4
 8001396:	8019      	strh	r1, [r3, #0]
 8001398:	3302      	adds	r3, #2
 800139a:	0c0a      	lsrs	r2, r1, #16
 800139c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 800139e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	23ba      	movs	r3, #186	; 0xba
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2308      	movs	r3, #8
 80013aa:	2239      	movs	r2, #57	; 0x39
 80013ac:	2100      	movs	r1, #0
 80013ae:	481a      	ldr	r0, [pc, #104]	; (8001418 <mipi_config+0x318>)
 80013b0:	f003 fb13 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 80013b4:	4a23      	ldr	r2, [pc, #140]	; (8001444 <mipi_config+0x344>)
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013be:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	23bb      	movs	r3, #187	; 0xbb
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2309      	movs	r3, #9
 80013ce:	2239      	movs	r2, #57	; 0x39
 80013d0:	2100      	movs	r1, #0
 80013d2:	4811      	ldr	r0, [pc, #68]	; (8001418 <mipi_config+0x318>)
 80013d4:	f003 fb01 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 80013d8:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <mipi_config+0x344>)
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e2:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	23bc      	movs	r3, #188	; 0xbc
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2309      	movs	r3, #9
 80013f2:	2239      	movs	r2, #57	; 0x39
 80013f4:	2100      	movs	r1, #0
 80013f6:	4808      	ldr	r0, [pc, #32]	; (8001418 <mipi_config+0x318>)
 80013f8:	f003 faef 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = {0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF, 0xFF, 0xF9};
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <mipi_config+0x348>)
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	ca07      	ldmia	r2, {r0, r1, r2}
 8001404:	c303      	stmia	r3!, {r0, r1}
 8001406:	801a      	strh	r2, [r3, #0]
 8001408:	3302      	adds	r3, #2
 800140a:	0c12      	lsrs	r2, r2, #16
 800140c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	e01a      	b.n	800144c <mipi_config+0x34c>
 8001416:	bf00      	nop
 8001418:	200000ac 	.word	0x200000ac
 800141c:	080094d4 	.word	0x080094d4
 8001420:	080094dc 	.word	0x080094dc
 8001424:	03240542 	.word	0x03240542
 8001428:	080094e0 	.word	0x080094e0
 800142c:	080094ec 	.word	0x080094ec
 8001430:	180f0588 	.word	0x180f0588
 8001434:	080094f4 	.word	0x080094f4
 8001438:	08009504 	.word	0x08009504
 800143c:	08009514 	.word	0x08009514
 8001440:	08009520 	.word	0x08009520
 8001444:	08009528 	.word	0x08009528
 8001448:	08009530 	.word	0x08009530
 800144c:	23bd      	movs	r3, #189	; 0xbd
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	230c      	movs	r3, #12
 8001452:	2239      	movs	r2, #57	; 0x39
 8001454:	2100      	movs	r1, #0
 8001456:	482d      	ldr	r0, [pc, #180]	; (800150c <mipi_config+0x40c>)
 8001458:	f003 fabf 	bl	80049da <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 800145c:	23c3      	movs	r3, #195	; 0xc3
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	23ed      	movs	r3, #237	; 0xed
 8001462:	2215      	movs	r2, #21
 8001464:	2100      	movs	r1, #0
 8001466:	4829      	ldr	r0, [pc, #164]	; (800150c <mipi_config+0x40c>)
 8001468:	f003 fa95 	bl	8004996 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = {0x40, 0x0F, 0x00};
 800146c:	4a28      	ldr	r2, [pc, #160]	; (8001510 <mipi_config+0x410>)
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	4611      	mov	r1, r2
 8001476:	8019      	strh	r1, [r3, #0]
 8001478:	3302      	adds	r3, #2
 800147a:	0c12      	lsrs	r2, r2, #16
 800147c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	23e4      	movs	r3, #228	; 0xe4
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2304      	movs	r3, #4
 800148a:	2239      	movs	r2, #57	; 0x39
 800148c:	2100      	movs	r1, #0
 800148e:	481f      	ldr	r0, [pc, #124]	; (800150c <mipi_config+0x40c>)
 8001490:	f003 faa3 	bl	80049da <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = {0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25};
 8001494:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <mipi_config+0x414>)
 8001496:	463b      	mov	r3, r7
 8001498:	ca07      	ldmia	r2, {r0, r1, r2}
 800149a:	c303      	stmia	r3!, {r0, r1}
 800149c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 800149e:	463b      	mov	r3, r7
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	23cc      	movs	r3, #204	; 0xcc
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	230a      	movs	r3, #10
 80014a8:	2239      	movs	r2, #57	; 0x39
 80014aa:	2100      	movs	r1, #0
 80014ac:	4817      	ldr	r0, [pc, #92]	; (800150c <mipi_config+0x40c>)
 80014ae:	f003 fa94 	bl	80049da <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80014b2:	2300      	movs	r3, #0
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2335      	movs	r3, #53	; 0x35
 80014b8:	2215      	movs	r2, #21
 80014ba:	2100      	movs	r1, #0
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <mipi_config+0x40c>)
 80014be:	f003 fa6a 	bl	8004996 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f002 fa16 	bl	80038f4 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80014c8:	2300      	movs	r3, #0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2311      	movs	r3, #17
 80014ce:	2205      	movs	r2, #5
 80014d0:	2100      	movs	r1, #0
 80014d2:	480e      	ldr	r0, [pc, #56]	; (800150c <mipi_config+0x40c>)
 80014d4:	f003 fa5f 	bl	8004996 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80014d8:	2078      	movs	r0, #120	; 0x78
 80014da:	f002 fa0b 	bl	80038f4 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 80014de:	2300      	movs	r3, #0
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2329      	movs	r3, #41	; 0x29
 80014e4:	2205      	movs	r2, #5
 80014e6:	2100      	movs	r1, #0
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <mipi_config+0x40c>)
 80014ea:	f003 fa54 	bl	8004996 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80014ee:	2078      	movs	r0, #120	; 0x78
 80014f0:	f002 fa00 	bl	80038f4 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2335      	movs	r3, #53	; 0x35
 80014fa:	2215      	movs	r2, #21
 80014fc:	2100      	movs	r1, #0
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <mipi_config+0x40c>)
 8001500:	f003 fa49 	bl	8004996 <HAL_DSI_ShortWrite>
}
 8001504:	bf00      	nop
 8001506:	37b4      	adds	r7, #180	; 0xb4
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	200000ac 	.word	0x200000ac
 8001510:	0800953c 	.word	0x0800953c
 8001514:	08009540 	.word	0x08009540

08001518 <LCD_PowerOn>:

static void LCD_PowerOn(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2140      	movs	r1, #64	; 0x40
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <LCD_PowerOn+0x28>)
 8001522:	f003 fcb1 	bl	8004e88 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 8001526:	2014      	movs	r0, #20
 8001528:	f002 f9e4 	bl	80038f4 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <LCD_PowerOn+0x28>)
 8001532:	f003 fca9 	bl	8004e88 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 8001536:	2078      	movs	r0, #120	; 0x78
 8001538:	f002 f9dc 	bl	80038f4 <HAL_Delay>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	48000400 	.word	0x48000400

08001544 <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = {0};
 800154e:	2300      	movs	r3, #0
 8001550:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = {0};
 8001552:	2300      	movs	r3, #0
 8001554:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 1000);
 8001556:	f107 010c 	add.w	r1, r7, #12
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	2201      	movs	r2, #1
 8001560:	487b      	ldr	r0, [pc, #492]	; (8001750 <Write_Registers_data+0x20c>)
 8001562:	f005 ff8c 	bl	800747e <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)data, 1, 1000);
 8001566:	f107 0108 	add.w	r1, r7, #8
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	2201      	movs	r2, #1
 8001570:	4877      	ldr	r0, [pc, #476]	; (8001750 <Write_Registers_data+0x20c>)
 8001572:	f005 ff84 	bl	800747e <HAL_SPI_Receive>
	if (do_flag == 1)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b01      	cmp	r3, #1
 800157a:	f040 80df 	bne.w	800173c <Write_Registers_data+0x1f8>
	{
		switch (Register_Address[0])
 800157e:	7b3b      	ldrb	r3, [r7, #12]
 8001580:	2b21      	cmp	r3, #33	; 0x21
 8001582:	f200 80e0 	bhi.w	8001746 <Write_Registers_data+0x202>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <Write_Registers_data+0x48>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	08001615 	.word	0x08001615
 8001590:	08001625 	.word	0x08001625
 8001594:	08001635 	.word	0x08001635
 8001598:	08001643 	.word	0x08001643
 800159c:	08001651 	.word	0x08001651
 80015a0:	0800165f 	.word	0x0800165f
 80015a4:	0800166d 	.word	0x0800166d
 80015a8:	08001675 	.word	0x08001675
 80015ac:	08001741 	.word	0x08001741
 80015b0:	08001741 	.word	0x08001741
 80015b4:	08001741 	.word	0x08001741
 80015b8:	0800167d 	.word	0x0800167d
 80015bc:	08001685 	.word	0x08001685
 80015c0:	0800168d 	.word	0x0800168d
 80015c4:	08001695 	.word	0x08001695
 80015c8:	0800169d 	.word	0x0800169d
 80015cc:	080016a5 	.word	0x080016a5
 80015d0:	08001741 	.word	0x08001741
 80015d4:	08001741 	.word	0x08001741
 80015d8:	08001741 	.word	0x08001741
 80015dc:	08001741 	.word	0x08001741
 80015e0:	08001741 	.word	0x08001741
 80015e4:	08001741 	.word	0x08001741
 80015e8:	08001741 	.word	0x08001741
 80015ec:	08001707 	.word	0x08001707
 80015f0:	0800170f 	.word	0x0800170f
 80015f4:	08001747 	.word	0x08001747
 80015f8:	08001747 	.word	0x08001747
 80015fc:	08001747 	.word	0x08001747
 8001600:	08001747 	.word	0x08001747
 8001604:	08001747 	.word	0x08001747
 8001608:	08001747 	.word	0x08001747
 800160c:	08001747 	.word	0x08001747
 8001610:	0800171d 	.word	0x0800171d
		{
		case 0: //Horizontal Resolution
			IMAGE_H = (uint32_t)data[0];
 8001614:	7a3b      	ldrb	r3, [r7, #8]
 8001616:	461a      	mov	r2, r3
 8001618:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <Write_Registers_data+0x210>)
 800161a:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 800161c:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <Write_Registers_data+0x214>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
			break;
 8001622:	e090      	b.n	8001746 <Write_Registers_data+0x202>
		case 1: //Vertical Resolution
			IMAGE_W = (uint32_t)data[0];
 8001624:	7a3b      	ldrb	r3, [r7, #8]
 8001626:	461a      	mov	r2, r3
 8001628:	4b4c      	ldr	r3, [pc, #304]	; (800175c <Write_Registers_data+0x218>)
 800162a:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 800162c:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <Write_Registers_data+0x214>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
			break;
 8001632:	e088      	b.n	8001746 <Write_Registers_data+0x202>
		case 2: //Horizontal blanking (High byte)
			Horizontal_blanking_H = data[0];
 8001634:	7a3a      	ldrb	r2, [r7, #8]
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <Write_Registers_data+0x21c>)
 8001638:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <Write_Registers_data+0x214>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
			break;
 8001640:	e081      	b.n	8001746 <Write_Registers_data+0x202>
		case 3: //Horizontal blanking (Low byte)
			Horizontal_blanking_L = data[0];
 8001642:	7a3a      	ldrb	r2, [r7, #8]
 8001644:	4b47      	ldr	r3, [pc, #284]	; (8001764 <Write_Registers_data+0x220>)
 8001646:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001648:	4b43      	ldr	r3, [pc, #268]	; (8001758 <Write_Registers_data+0x214>)
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
			break;
 800164e:	e07a      	b.n	8001746 <Write_Registers_data+0x202>
		case 4: //Vertical blanking (High byte)
			Vertical_blanking_H = data[0];
 8001650:	7a3a      	ldrb	r2, [r7, #8]
 8001652:	4b45      	ldr	r3, [pc, #276]	; (8001768 <Write_Registers_data+0x224>)
 8001654:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001656:	4b40      	ldr	r3, [pc, #256]	; (8001758 <Write_Registers_data+0x214>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
			break;
 800165c:	e073      	b.n	8001746 <Write_Registers_data+0x202>
		case 5: //Vertical blanking (Low byte)
			Vertical_blanking_L = data[0];
 800165e:	7a3a      	ldrb	r2, [r7, #8]
 8001660:	4b42      	ldr	r3, [pc, #264]	; (800176c <Write_Registers_data+0x228>)
 8001662:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001664:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <Write_Registers_data+0x214>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
			break;
 800166a:	e06c      	b.n	8001746 <Write_Registers_data+0x202>
		case 6: //Frame rate x 2 (Hz)
			frame_rate_r = data[0];
 800166c:	7a3a      	ldrb	r2, [r7, #8]
 800166e:	4b40      	ldr	r3, [pc, #256]	; (8001770 <Write_Registers_data+0x22c>)
 8001670:	701a      	strb	r2, [r3, #0]
			break;
 8001672:	e068      	b.n	8001746 <Write_Registers_data+0x202>
		case 7: //Show SPI flash content length
			spi_flash_content_length = data[0];
 8001674:	7a3a      	ldrb	r2, [r7, #8]
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <Write_Registers_data+0x230>)
 8001678:	701a      	strb	r2, [r3, #0]
			break;
 800167a:	e064      	b.n	8001746 <Write_Registers_data+0x202>
		case 9: //Clock rate of SPI
			break;
		case 10: //Clock rate of I2C
			break;
		case 11: //Pixel Mapping one_L
			Pixel_Mapping_one_L = data[0];
 800167c:	7a3a      	ldrb	r2, [r7, #8]
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <Write_Registers_data+0x234>)
 8001680:	701a      	strb	r2, [r3, #0]
			break;
 8001682:	e060      	b.n	8001746 <Write_Registers_data+0x202>
		case 12: //Pixel Mapping one_H
			Pixel_Mapping_one_H = data[0];
 8001684:	7a3a      	ldrb	r2, [r7, #8]
 8001686:	4b3d      	ldr	r3, [pc, #244]	; (800177c <Write_Registers_data+0x238>)
 8001688:	701a      	strb	r2, [r3, #0]
			break;
 800168a:	e05c      	b.n	8001746 <Write_Registers_data+0x202>
		case 13: //Auto Run start content of SPI flash
			auto_run_start_content = data[0];
 800168c:	7a3a      	ldrb	r2, [r7, #8]
 800168e:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <Write_Registers_data+0x23c>)
 8001690:	701a      	strb	r2, [r3, #0]
			break;
 8001692:	e058      	b.n	8001746 <Write_Registers_data+0x202>
		case 14: //Show first content number of SPI flash
			display_image_number = data[0];
 8001694:	7a3a      	ldrb	r2, [r7, #8]
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <Write_Registers_data+0x240>)
 8001698:	701a      	strb	r2, [r3, #0]
			break;
 800169a:	e054      	b.n	8001746 <Write_Registers_data+0x202>
		case 15: //Auto Run end content of SPI flash
			auto_run_end_content = data[0];
 800169c:	7a3a      	ldrb	r2, [r7, #8]
 800169e:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <Write_Registers_data+0x244>)
 80016a0:	701a      	strb	r2, [r3, #0]
			break;
 80016a2:	e050      	b.n	8001746 <Write_Registers_data+0x202>
		case 16: //Control A
			switch (data[0] & 0b00000011) //Display Mode
 80016a4:	7a3b      	ldrb	r3, [r7, #8]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d00e      	beq.n	80016cc <Write_Registers_data+0x188>
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	dc10      	bgt.n	80016d4 <Write_Registers_data+0x190>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <Write_Registers_data+0x178>
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d004      	beq.n	80016c4 <Write_Registers_data+0x180>
 80016ba:	e00b      	b.n	80016d4 <Write_Registers_data+0x190>
			{
			case 0b00000000: //Display content of frame buffer (0)
				play_mode_source = 1;
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <Write_Registers_data+0x248>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
				break;
 80016c2:	e007      	b.n	80016d4 <Write_Registers_data+0x190>
			case 0b00000001: //Display content of frame buffer (1)
				play_mode_source = 2;
 80016c4:	4b31      	ldr	r3, [pc, #196]	; (800178c <Write_Registers_data+0x248>)
 80016c6:	2202      	movs	r2, #2
 80016c8:	701a      	strb	r2, [r3, #0]
				break;
 80016ca:	e003      	b.n	80016d4 <Write_Registers_data+0x190>
			case 0b00000011: //Display Flash content
				play_mode_source = 0;
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <Write_Registers_data+0x248>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
				break;
 80016d2:	bf00      	nop
			}
			switch (data[0] & 0b00001100) //Static or Dynamic mode
 80016d4:	7a3b      	ldrb	r3, [r7, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d00e      	beq.n	80016fc <Write_Registers_data+0x1b8>
 80016de:	2b08      	cmp	r3, #8
 80016e0:	dc30      	bgt.n	8001744 <Write_Registers_data+0x200>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <Write_Registers_data+0x1a8>
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d004      	beq.n	80016f4 <Write_Registers_data+0x1b0>
				break;
			case 0b00001000: //Dynamic display flash content
				play_mode = 1;
				break;
			}
			break;
 80016ea:	e02b      	b.n	8001744 <Write_Registers_data+0x200>
				play_mode = 0;
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <Write_Registers_data+0x24c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
				break;
 80016f2:	e007      	b.n	8001704 <Write_Registers_data+0x1c0>
				play_mode = 2;
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <Write_Registers_data+0x24c>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	701a      	strb	r2, [r3, #0]
				break;
 80016fa:	e003      	b.n	8001704 <Write_Registers_data+0x1c0>
				play_mode = 1;
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <Write_Registers_data+0x24c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
				break;
 8001702:	bf00      	nop
			break;
 8001704:	e01e      	b.n	8001744 <Write_Registers_data+0x200>
		case 22: //Power Status
			break;
		case 23: //Serial number
			break;
		case 24: //content size
			content_size = data[0];
 8001706:	7a3a      	ldrb	r2, [r7, #8]
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <Write_Registers_data+0x250>)
 800170a:	701a      	strb	r2, [r3, #0]
			break;
 800170c:	e01b      	b.n	8001746 <Write_Registers_data+0x202>
		case 25:// force play buffer to write flash.
			play_mode_source = 1;
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <Write_Registers_data+0x248>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
			play_mode = 2;
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <Write_Registers_data+0x24c>)
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
			break;
 800171a:	e014      	b.n	8001746 <Write_Registers_data+0x202>
		case 33:// force play buffer to write flash.
			Mode_config[100] = data[0];
 800171c:	7a3a      	ldrb	r2, [r7, #8]
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <Write_Registers_data+0x254>)
 8001720:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			Playing_mode = data[0];
 8001724:	7a3a      	ldrb	r2, [r7, #8]
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <Write_Registers_data+0x258>)
 8001728:	701a      	strb	r2, [r3, #0]

			write_flash_config();
 800172a:	f000 fdb3 	bl	8002294 <write_flash_config>
			play_mode =3;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <Write_Registers_data+0x24c>)
 8001730:	2203      	movs	r2, #3
 8001732:	701a      	strb	r2, [r3, #0]
 			Mode_changed = 1;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <Write_Registers_data+0x25c>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]

			break;
 800173a:	e004      	b.n	8001746 <Write_Registers_data+0x202>
		}
	}
 800173c:	bf00      	nop
 800173e:	e002      	b.n	8001746 <Write_Registers_data+0x202>
			break;
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <Write_Registers_data+0x202>
			break;
 8001744:	bf00      	nop
	//HAL_UART_Transmit(&huart4, &Register_Address, 1, 1000);
	//HAL_UART_Transmit(&huart4, &data, 1, 1000);
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001d4 	.word	0x200001d4
 8001754:	20000000 	.word	0x20000000
 8001758:	20094cc6 	.word	0x20094cc6
 800175c:	20000004 	.word	0x20000004
 8001760:	2000000c 	.word	0x2000000c
 8001764:	2000000d 	.word	0x2000000d
 8001768:	2000000e 	.word	0x2000000e
 800176c:	2000000f 	.word	0x2000000f
 8001770:	20000008 	.word	0x20000008
 8001774:	20000009 	.word	0x20000009
 8001778:	2000001c 	.word	0x2000001c
 800177c:	2000001d 	.word	0x2000001d
 8001780:	200002c8 	.word	0x200002c8
 8001784:	20094cc0 	.word	0x20094cc0
 8001788:	2000000a 	.word	0x2000000a
 800178c:	20064cbd 	.word	0x20064cbd
 8001790:	20064cbc 	.word	0x20064cbc
 8001794:	2000000b 	.word	0x2000000b
 8001798:	20094cc8 	.word	0x20094cc8
 800179c:	2000001f 	.word	0x2000001f
 80017a0:	20000020 	.word	0x20000020

080017a4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, &spi_rev_2byte, 2, 1000);
	// USB command: Type and command
	if(hspi == SPI2){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4aae      	ldr	r2, [pc, #696]	; (8001a68 <HAL_SPI_RxCpltCallback+0x2c4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_SPI_RxCpltCallback+0x14>
		int a=2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	60fb      	str	r3, [r7, #12]
	}
	if(hspi == SPI3){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4aac      	ldr	r2, [pc, #688]	; (8001a6c <HAL_SPI_RxCpltCallback+0x2c8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_SPI_RxCpltCallback+0x20>
		int a=3;
 80017c0:	2303      	movs	r3, #3
 80017c2:	60bb      	str	r3, [r7, #8]
	}
	switch (spi_rev_2byte[0] & 0b11000000)
 80017c4:	4baa      	ldr	r3, [pc, #680]	; (8001a70 <HAL_SPI_RxCpltCallback+0x2cc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017cc:	2bc0      	cmp	r3, #192	; 0xc0
 80017ce:	f000 81e9 	beq.w	8001ba4 <HAL_SPI_RxCpltCallback+0x400>
 80017d2:	2bc0      	cmp	r3, #192	; 0xc0
 80017d4:	f300 82a0 	bgt.w	8001d18 <HAL_SPI_RxCpltCallback+0x574>
 80017d8:	2b80      	cmp	r3, #128	; 0x80
 80017da:	f000 81d7 	beq.w	8001b8c <HAL_SPI_RxCpltCallback+0x3e8>
 80017de:	2b80      	cmp	r3, #128	; 0x80
 80017e0:	f300 829a 	bgt.w	8001d18 <HAL_SPI_RxCpltCallback+0x574>
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_SPI_RxCpltCallback+0x4c>
 80017e8:	2b40      	cmp	r3, #64	; 0x40
 80017ea:	f000 8171 	beq.w	8001ad0 <HAL_SPI_RxCpltCallback+0x32c>
 80017ee:	e293      	b.n	8001d18 <HAL_SPI_RxCpltCallback+0x574>
	{
	case 0b00000000: //Chain SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 80017f0:	4b9f      	ldr	r3, [pc, #636]	; (8001a70 <HAL_SPI_RxCpltCallback+0x2cc>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017f8:	2b38      	cmp	r3, #56	; 0x38
 80017fa:	f200 8286 	bhi.w	8001d0a <HAL_SPI_RxCpltCallback+0x566>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <HAL_SPI_RxCpltCallback+0x60>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	080018e9 	.word	0x080018e9
 8001808:	08001d0b 	.word	0x08001d0b
 800180c:	08001d0b 	.word	0x08001d0b
 8001810:	08001d0b 	.word	0x08001d0b
 8001814:	08001d0b 	.word	0x08001d0b
 8001818:	08001d0b 	.word	0x08001d0b
 800181c:	08001d0b 	.word	0x08001d0b
 8001820:	08001d0b 	.word	0x08001d0b
 8001824:	0800199b 	.word	0x0800199b
 8001828:	08001d0b 	.word	0x08001d0b
 800182c:	08001d0b 	.word	0x08001d0b
 8001830:	08001d0b 	.word	0x08001d0b
 8001834:	08001d0b 	.word	0x08001d0b
 8001838:	08001d0b 	.word	0x08001d0b
 800183c:	08001d0b 	.word	0x08001d0b
 8001840:	08001d0b 	.word	0x08001d0b
 8001844:	08001a4d 	.word	0x08001a4d
 8001848:	08001d0b 	.word	0x08001d0b
 800184c:	08001d0b 	.word	0x08001d0b
 8001850:	08001d0b 	.word	0x08001d0b
 8001854:	08001d0b 	.word	0x08001d0b
 8001858:	08001d0b 	.word	0x08001d0b
 800185c:	08001d0b 	.word	0x08001d0b
 8001860:	08001d0b 	.word	0x08001d0b
 8001864:	08001acd 	.word	0x08001acd
 8001868:	08001d0b 	.word	0x08001d0b
 800186c:	08001d0b 	.word	0x08001d0b
 8001870:	08001d0b 	.word	0x08001d0b
 8001874:	08001d0b 	.word	0x08001d0b
 8001878:	08001d0b 	.word	0x08001d0b
 800187c:	08001d0b 	.word	0x08001d0b
 8001880:	08001d0b 	.word	0x08001d0b
 8001884:	08001acd 	.word	0x08001acd
 8001888:	08001d0b 	.word	0x08001d0b
 800188c:	08001d0b 	.word	0x08001d0b
 8001890:	08001d0b 	.word	0x08001d0b
 8001894:	08001d0b 	.word	0x08001d0b
 8001898:	08001d0b 	.word	0x08001d0b
 800189c:	08001d0b 	.word	0x08001d0b
 80018a0:	08001d0b 	.word	0x08001d0b
 80018a4:	08001acd 	.word	0x08001acd
 80018a8:	08001d0b 	.word	0x08001d0b
 80018ac:	08001d0b 	.word	0x08001d0b
 80018b0:	08001d0b 	.word	0x08001d0b
 80018b4:	08001d0b 	.word	0x08001d0b
 80018b8:	08001d0b 	.word	0x08001d0b
 80018bc:	08001d0b 	.word	0x08001d0b
 80018c0:	08001d0b 	.word	0x08001d0b
 80018c4:	08001acd 	.word	0x08001acd
 80018c8:	08001d0b 	.word	0x08001d0b
 80018cc:	08001d0b 	.word	0x08001d0b
 80018d0:	08001d0b 	.word	0x08001d0b
 80018d4:	08001d0b 	.word	0x08001d0b
 80018d8:	08001d0b 	.word	0x08001d0b
 80018dc:	08001d0b 	.word	0x08001d0b
 80018e0:	08001d0b 	.word	0x08001d0b
 80018e4:	08001acd 	.word	0x08001acd
		{
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi_rev_2byte[0] & 0b00000111)
 80018e8:	4b61      	ldr	r3, [pc, #388]	; (8001a70 <HAL_SPI_RxCpltCallback+0x2cc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d03e      	beq.n	8001972 <HAL_SPI_RxCpltCallback+0x1ce>
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	dc4c      	bgt.n	8001992 <HAL_SPI_RxCpltCallback+0x1ee>
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_SPI_RxCpltCallback+0x15e>
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d014      	beq.n	800192a <HAL_SPI_RxCpltCallback+0x186>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 8001900:	e047      	b.n	8001992 <HAL_SPI_RxCpltCallback+0x1ee>
				if (BOARD_NUMBER == 1)
 8001902:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d145      	bne.n	8001996 <HAL_SPI_RxCpltCallback+0x1f2>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_SPI_RxCpltCallback+0x2d4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	fb12 f303 	smulbb	r3, r2, r3
 800191a:	b29a      	uxth	r2, r3
 800191c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001920:	4957      	ldr	r1, [pc, #348]	; (8001a80 <HAL_SPI_RxCpltCallback+0x2dc>)
 8001922:	4858      	ldr	r0, [pc, #352]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001924:	f005 fdab 	bl	800747e <HAL_SPI_Receive>
				break;
 8001928:	e035      	b.n	8001996 <HAL_SPI_RxCpltCallback+0x1f2>
				if (BOARD_NUMBER == 2)
 800192a:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <HAL_SPI_RxCpltCallback+0x2d0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d10f      	bne.n	8001952 <HAL_SPI_RxCpltCallback+0x1ae>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001932:	4b51      	ldr	r3, [pc, #324]	; (8001a78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_SPI_RxCpltCallback+0x2d8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	fb12 f303 	smulbb	r3, r2, r3
 8001942:	b29a      	uxth	r2, r3
 8001944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001948:	494d      	ldr	r1, [pc, #308]	; (8001a80 <HAL_SPI_RxCpltCallback+0x2dc>)
 800194a:	484e      	ldr	r0, [pc, #312]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2e0>)
 800194c:	f005 fd97 	bl	800747e <HAL_SPI_Receive>
				break;
 8001950:	e022      	b.n	8001998 <HAL_SPI_RxCpltCallback+0x1f4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001952:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <HAL_SPI_RxCpltCallback+0x2d8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	fb12 f303 	smulbb	r3, r2, r3
 8001962:	b29a      	uxth	r2, r3
 8001964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001968:	4947      	ldr	r1, [pc, #284]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2e4>)
 800196a:	4846      	ldr	r0, [pc, #280]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2e0>)
 800196c:	f005 fd87 	bl	800747e <HAL_SPI_Receive>
				break;
 8001970:	e012      	b.n	8001998 <HAL_SPI_RxCpltCallback+0x1f4>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <HAL_SPI_RxCpltCallback+0x2d8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	fb12 f303 	smulbb	r3, r2, r3
 8001982:	b29a      	uxth	r2, r3
 8001984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001988:	493d      	ldr	r1, [pc, #244]	; (8001a80 <HAL_SPI_RxCpltCallback+0x2dc>)
 800198a:	483e      	ldr	r0, [pc, #248]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2e0>)
 800198c:	f005 fd77 	bl	800747e <HAL_SPI_Receive>
				break;
 8001990:	e002      	b.n	8001998 <HAL_SPI_RxCpltCallback+0x1f4>
				break;
 8001992:	bf00      	nop
 8001994:	e09b      	b.n	8001ace <HAL_SPI_RxCpltCallback+0x32a>
				break;
 8001996:	bf00      	nop
			}
			break;
 8001998:	e099      	b.n	8001ace <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi_rev_2byte[0] & 0b00000111)
 800199a:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_SPI_RxCpltCallback+0x2cc>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d03e      	beq.n	8001a24 <HAL_SPI_RxCpltCallback+0x280>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	dc4c      	bgt.n	8001a44 <HAL_SPI_RxCpltCallback+0x2a0>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_SPI_RxCpltCallback+0x210>
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d014      	beq.n	80019dc <HAL_SPI_RxCpltCallback+0x238>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 80019b2:	e047      	b.n	8001a44 <HAL_SPI_RxCpltCallback+0x2a0>
				if (BOARD_NUMBER == 1)
 80019b4:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_SPI_RxCpltCallback+0x2d0>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d145      	bne.n	8001a48 <HAL_SPI_RxCpltCallback+0x2a4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_SPI_RxCpltCallback+0x2d4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <HAL_SPI_RxCpltCallback+0x2d8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	fb12 f303 	smulbb	r3, r2, r3
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	492e      	ldr	r1, [pc, #184]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2e8>)
 80019d4:	482b      	ldr	r0, [pc, #172]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2e0>)
 80019d6:	f005 fd52 	bl	800747e <HAL_SPI_Receive>
				break;
 80019da:	e035      	b.n	8001a48 <HAL_SPI_RxCpltCallback+0x2a4>
				if (BOARD_NUMBER == 2)
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <HAL_SPI_RxCpltCallback+0x2d0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d10f      	bne.n	8001a04 <HAL_SPI_RxCpltCallback+0x260>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_SPI_RxCpltCallback+0x2d4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_SPI_RxCpltCallback+0x2d8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	fb12 f303 	smulbb	r3, r2, r3
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	4924      	ldr	r1, [pc, #144]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2e8>)
 80019fc:	4821      	ldr	r0, [pc, #132]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2e0>)
 80019fe:	f005 fd3e 	bl	800747e <HAL_SPI_Receive>
				break;
 8001a02:	e022      	b.n	8001a4a <HAL_SPI_RxCpltCallback+0x2a6>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	fb12 f303 	smulbb	r3, r2, r3
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	491b      	ldr	r1, [pc, #108]	; (8001a88 <HAL_SPI_RxCpltCallback+0x2e4>)
 8001a1c:	4819      	ldr	r0, [pc, #100]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001a1e:	f005 fd2e 	bl	800747e <HAL_SPI_Receive>
				break;
 8001a22:	e012      	b.n	8001a4a <HAL_SPI_RxCpltCallback+0x2a6>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	fb12 f303 	smulbb	r3, r2, r3
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	4914      	ldr	r1, [pc, #80]	; (8001a8c <HAL_SPI_RxCpltCallback+0x2e8>)
 8001a3c:	4811      	ldr	r0, [pc, #68]	; (8001a84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001a3e:	f005 fd1e 	bl	800747e <HAL_SPI_Receive>
				break;
 8001a42:	e002      	b.n	8001a4a <HAL_SPI_RxCpltCallback+0x2a6>
				break;
 8001a44:	bf00      	nop
 8001a46:	e042      	b.n	8001ace <HAL_SPI_RxCpltCallback+0x32a>
				break;
 8001a48:	bf00      	nop
			}
			break;
 8001a4a:	e040      	b.n	8001ace <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00010000: //Write Registers data
			switch (spi_rev_2byte[0] & 0b00000111)
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d033      	beq.n	8001ac0 <HAL_SPI_RxCpltCallback+0x31c>
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	dc35      	bgt.n	8001ac8 <HAL_SPI_RxCpltCallback+0x324>
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d017      	beq.n	8001a90 <HAL_SPI_RxCpltCallback+0x2ec>
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d021      	beq.n	8001aa8 <HAL_SPI_RxCpltCallback+0x304>
				break;
			case 0b00000100: //Broadcast to every board
				Write_Registers_data(1);
				break;
			default:
				break;
 8001a64:	e030      	b.n	8001ac8 <HAL_SPI_RxCpltCallback+0x324>
 8001a66:	bf00      	nop
 8001a68:	40003800 	.word	0x40003800
 8001a6c:	40003c00 	.word	0x40003c00
 8001a70:	20094cc4 	.word	0x20094cc4
 8001a74:	2000001e 	.word	0x2000001e
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	200102cc 	.word	0x200102cc
 8001a84:	200001d4 	.word	0x200001d4
 8001a88:	200002cc 	.word	0x200002cc
 8001a8c:	200202cc 	.word	0x200202cc
				if (BOARD_NUMBER == 1)
 8001a90:	4bac      	ldr	r3, [pc, #688]	; (8001d44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d103      	bne.n	8001aa0 <HAL_SPI_RxCpltCallback+0x2fc>
					Write_Registers_data(1);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff fd53 	bl	8001544 <Write_Registers_data>
				break;
 8001a9e:	e014      	b.n	8001aca <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fd4f 	bl	8001544 <Write_Registers_data>
				break;
 8001aa6:	e010      	b.n	8001aca <HAL_SPI_RxCpltCallback+0x326>
				if (BOARD_NUMBER == 2)
 8001aa8:	4ba6      	ldr	r3, [pc, #664]	; (8001d44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d103      	bne.n	8001ab8 <HAL_SPI_RxCpltCallback+0x314>
					Write_Registers_data(1);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff fd47 	bl	8001544 <Write_Registers_data>
				break;
 8001ab6:	e008      	b.n	8001aca <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fd43 	bl	8001544 <Write_Registers_data>
				break;
 8001abe:	e004      	b.n	8001aca <HAL_SPI_RxCpltCallback+0x326>
				Write_Registers_data(1);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fd3f 	bl	8001544 <Write_Registers_data>
				break;
 8001ac6:	e000      	b.n	8001aca <HAL_SPI_RxCpltCallback+0x326>
				break;
 8001ac8:	bf00      	nop
			}
			break;
 8001aca:	e000      	b.n	8001ace <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00011000: //Write partial content of frame buffer
			break;
 8001acc:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 8001ace:	e11c      	b.n	8001d0a <HAL_SPI_RxCpltCallback+0x566>
	case 0b01000000: //Master SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001ad0:	4b9d      	ldr	r3, [pc, #628]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ad8:	2b28      	cmp	r3, #40	; 0x28
 8001ada:	f200 8118 	bhi.w	8001d0e <HAL_SPI_RxCpltCallback+0x56a>
 8001ade:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <HAL_SPI_RxCpltCallback+0x340>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001b89 	.word	0x08001b89
 8001ae8:	08001d0f 	.word	0x08001d0f
 8001aec:	08001d0f 	.word	0x08001d0f
 8001af0:	08001d0f 	.word	0x08001d0f
 8001af4:	08001d0f 	.word	0x08001d0f
 8001af8:	08001d0f 	.word	0x08001d0f
 8001afc:	08001d0f 	.word	0x08001d0f
 8001b00:	08001d0f 	.word	0x08001d0f
 8001b04:	08001b89 	.word	0x08001b89
 8001b08:	08001d0f 	.word	0x08001d0f
 8001b0c:	08001d0f 	.word	0x08001d0f
 8001b10:	08001d0f 	.word	0x08001d0f
 8001b14:	08001d0f 	.word	0x08001d0f
 8001b18:	08001d0f 	.word	0x08001d0f
 8001b1c:	08001d0f 	.word	0x08001d0f
 8001b20:	08001d0f 	.word	0x08001d0f
 8001b24:	08001b89 	.word	0x08001b89
 8001b28:	08001d0f 	.word	0x08001d0f
 8001b2c:	08001d0f 	.word	0x08001d0f
 8001b30:	08001d0f 	.word	0x08001d0f
 8001b34:	08001d0f 	.word	0x08001d0f
 8001b38:	08001d0f 	.word	0x08001d0f
 8001b3c:	08001d0f 	.word	0x08001d0f
 8001b40:	08001d0f 	.word	0x08001d0f
 8001b44:	08001b89 	.word	0x08001b89
 8001b48:	08001d0f 	.word	0x08001d0f
 8001b4c:	08001d0f 	.word	0x08001d0f
 8001b50:	08001d0f 	.word	0x08001d0f
 8001b54:	08001d0f 	.word	0x08001d0f
 8001b58:	08001d0f 	.word	0x08001d0f
 8001b5c:	08001d0f 	.word	0x08001d0f
 8001b60:	08001d0f 	.word	0x08001d0f
 8001b64:	08001b89 	.word	0x08001b89
 8001b68:	08001d0f 	.word	0x08001d0f
 8001b6c:	08001d0f 	.word	0x08001d0f
 8001b70:	08001d0f 	.word	0x08001d0f
 8001b74:	08001d0f 	.word	0x08001d0f
 8001b78:	08001d0f 	.word	0x08001d0f
 8001b7c:	08001d0f 	.word	0x08001d0f
 8001b80:	08001d0f 	.word	0x08001d0f
 8001b84:	08001b89 	.word	0x08001b89
		{
		case 0b00000000: //Start SPI write data
			break;
 8001b88:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001b8a:	e0c0      	b.n	8001d0e <HAL_SPI_RxCpltCallback+0x56a>
	case 0b10000000: //I2C command
		switch (spi_rev_2byte[0] & 0b00111000)
 8001b8c:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_SPI_RxCpltCallback+0x3fc>
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	f040 80ba 	bne.w	8001d12 <HAL_SPI_RxCpltCallback+0x56e>
		{
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001b9e:	e000      	b.n	8001ba2 <HAL_SPI_RxCpltCallback+0x3fe>
			break;
 8001ba0:	bf00      	nop
		}
		break;
 8001ba2:	e0b6      	b.n	8001d12 <HAL_SPI_RxCpltCallback+0x56e>
	case 0b11000000: //SPI flash function & Slave SPI
		switch (spi_rev_2byte[0] & 0b00111000)
 8001ba4:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	f000 80aa 	beq.w	8001d06 <HAL_SPI_RxCpltCallback+0x562>
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	f300 80af 	bgt.w	8001d16 <HAL_SPI_RxCpltCallback+0x572>
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_SPI_RxCpltCallback+0x41e>
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d078      	beq.n	8001cb2 <HAL_SPI_RxCpltCallback+0x50e>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001bc0:	e0a9      	b.n	8001d16 <HAL_SPI_RxCpltCallback+0x572>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001bc2:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d04c      	beq.n	8001c68 <HAL_SPI_RxCpltCallback+0x4c4>
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	dc69      	bgt.n	8001ca6 <HAL_SPI_RxCpltCallback+0x502>
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_SPI_RxCpltCallback+0x438>
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d023      	beq.n	8001c22 <HAL_SPI_RxCpltCallback+0x47e>
				break;
 8001bda:	e064      	b.n	8001ca6 <HAL_SPI_RxCpltCallback+0x502>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001bdc:	4b5b      	ldr	r3, [pc, #364]	; (8001d4c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	fb12 f303 	smulbb	r3, r2, r3
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	4958      	ldr	r1, [pc, #352]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001bf4:	4858      	ldr	r0, [pc, #352]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001bf6:	f005 fc42 	bl	800747e <HAL_SPI_Receive>
				if (BOARD_NUMBER == 1)
 8001bfa:	4b52      	ldr	r3, [pc, #328]	; (8001d44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d153      	bne.n	8001caa <HAL_SPI_RxCpltCallback+0x506>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001c02:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 f840 	bl	8002c90 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001c10:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	484e      	ldr	r0, [pc, #312]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c1c:	f000 fc96 	bl	800254c <write_flash_page>
				break;
 8001c20:	e043      	b.n	8001caa <HAL_SPI_RxCpltCallback+0x506>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	fb12 f303 	smulbb	r3, r2, r3
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c38:	4946      	ldr	r1, [pc, #280]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c3a:	4847      	ldr	r0, [pc, #284]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c3c:	f005 fc1f 	bl	800747e <HAL_SPI_Receive>
				if (BOARD_NUMBER == 2)
 8001c40:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d132      	bne.n	8001cae <HAL_SPI_RxCpltCallback+0x50a>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001c48:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c4a:	785b      	ldrb	r3, [r3, #1]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 f81d 	bl	8002c90 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001c56:	4b3c      	ldr	r3, [pc, #240]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c58:	785b      	ldrb	r3, [r3, #1]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	483c      	ldr	r0, [pc, #240]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c62:	f000 fc73 	bl	800254c <write_flash_page>
				break;
 8001c66:	e022      	b.n	8001cae <HAL_SPI_RxCpltCallback+0x50a>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	fb12 f303 	smulbb	r3, r2, r3
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	4935      	ldr	r1, [pc, #212]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c80:	4835      	ldr	r0, [pc, #212]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c82:	f005 fbfc 	bl	800747e <HAL_SPI_Receive>
				erase_flash_sector(spi_rev_2byte[1] - 1);
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c88:	785b      	ldrb	r3, [r3, #1]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fffe 	bl	8002c90 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c96:	785b      	ldrb	r3, [r3, #1]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	482d      	ldr	r0, [pc, #180]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001ca0:	f000 fc54 	bl	800254c <write_flash_page>
				break;
 8001ca4:	e004      	b.n	8001cb0 <HAL_SPI_RxCpltCallback+0x50c>
				break;
 8001ca6:	bf00      	nop
 8001ca8:	e02e      	b.n	8001d08 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001caa:	bf00      	nop
 8001cac:	e02c      	b.n	8001d08 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001cae:	bf00      	nop
			break;
 8001cb0:	e02a      	b.n	8001d08 <HAL_SPI_RxCpltCallback+0x564>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d014      	beq.n	8001ce8 <HAL_SPI_RxCpltCallback+0x544>
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	dc1d      	bgt.n	8001cfe <HAL_SPI_RxCpltCallback+0x55a>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_SPI_RxCpltCallback+0x526>
 8001cc6:	2b01      	cmp	r3, #1
				break;
 8001cc8:	e01c      	b.n	8001d04 <HAL_SPI_RxCpltCallback+0x560>
				if (BOARD_NUMBER == 1)
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d117      	bne.n	8001d02 <HAL_SPI_RxCpltCallback+0x55e>
					reset_flash_software();
 8001cd2:	f001 f8b3 	bl	8002e3c <reset_flash_software>
					read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001cd8:	785b      	ldrb	r3, [r3, #1]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	481c      	ldr	r0, [pc, #112]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001ce2:	f000 fd03 	bl	80026ec <read_flash_page>
				break;
 8001ce6:	e00c      	b.n	8001d02 <HAL_SPI_RxCpltCallback+0x55e>
				reset_flash_software();
 8001ce8:	f001 f8a8 	bl	8002e3c <reset_flash_software>
				read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4817      	ldr	r0, [pc, #92]	; (8001d54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001cf8:	f000 fcf8 	bl	80026ec <read_flash_page>
				break;
 8001cfc:	e002      	b.n	8001d04 <HAL_SPI_RxCpltCallback+0x560>
				break;
 8001cfe:	bf00      	nop
 8001d00:	e002      	b.n	8001d08 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001d02:	bf00      	nop
			break;
 8001d04:	e000      	b.n	8001d08 <HAL_SPI_RxCpltCallback+0x564>
			break;
 8001d06:	bf00      	nop
		break;
 8001d08:	e005      	b.n	8001d16 <HAL_SPI_RxCpltCallback+0x572>
		break;
 8001d0a:	bf00      	nop
 8001d0c:	e004      	b.n	8001d18 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001d0e:	bf00      	nop
 8001d10:	e002      	b.n	8001d18 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001d12:	bf00      	nop
 8001d14:	e000      	b.n	8001d18 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001d16:	bf00      	nop
	}
	// USB command: ID
	switch (spi_rev_2byte[0] & 0b00000111)
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_SPI_RxCpltCallback+0x586>
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d002      	beq.n	8001d2e <HAL_SPI_RxCpltCallback+0x58a>
	case 0b00000000: //Command for DIP switch ID = 00
		break;
	case 0b00000001: //Command for DIP switch ID = 01
		break;
	default: //Broadcast to every board
		break;
 8001d28:	e002      	b.n	8001d30 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001d2a:	bf00      	nop
 8001d2c:	e000      	b.n	8001d30 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001d2e:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8001d30:	2202      	movs	r2, #2
 8001d32:	4905      	ldr	r1, [pc, #20]	; (8001d48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d34:	4808      	ldr	r0, [pc, #32]	; (8001d58 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001d36:	f005 fee5 	bl	8007b04 <HAL_SPI_Receive_IT>
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000001e 	.word	0x2000001e
 8001d48:	20094cc4 	.word	0x20094cc4
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004
 8001d54:	200002cc 	.word	0x200002cc
 8001d58:	200001d4 	.word	0x200001d4

08001d5c <display_panel>:

void display_panel(uint8_t *frame_buf)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b08b      	sub	sp, #44	; 0x2c
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	int num_ones = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <display_panel+0xe4>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <display_panel+0xe8>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 12; i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	e00d      	b.n	8001d9e <display_panel+0x42>
	{
		if (Pixel_Mapping_one & (1 << i))
 8001d82:	897a      	ldrh	r2, [r7, #10]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	fa42 f303 	asr.w	r3, r2, r3
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <display_panel+0x3c>
		{
			num_ones++;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	3301      	adds	r3, #1
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	623b      	str	r3, [r7, #32]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b0b      	cmp	r3, #11
 8001da2:	ddee      	ble.n	8001d82 <display_panel+0x26>
		}
	}

	int frame_buf_count = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
	int Pixel_Mapping_one_count = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
	int c = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e034      	b.n	8001e20 <display_panel+0xc4>
	{
		Pixel_Mapping_one_count = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
		c = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 12; j++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e022      	b.n	8001e0a <display_panel+0xae>
		{
			if (Pixel_Mapping_one & (1 << j))
 8001dc4:	897a      	ldrh	r2, [r7, #10]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	fa42 f303 	asr.w	r3, r2, r3
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d014      	beq.n	8001dfe <display_panel+0xa2>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4413      	add	r3, r2
 8001dda:	61fb      	str	r3, [r7, #28]
				image_arr_rgb888[frame_buf_count] = frame_buf[i + c];
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	4413      	add	r3, r2
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	7819      	ldrb	r1, [r3, #0]
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <display_panel+0xec>)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	4413      	add	r3, r2
 8001df0:	460a      	mov	r2, r1
 8001df2:	701a      	strb	r2, [r3, #0]
				c++;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
				Pixel_Mapping_one_count = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
			}
			Pixel_Mapping_one_count++;
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
		for (int j = 0; j < 12; j++)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b0b      	cmp	r3, #11
 8001e0e:	ddd9      	ble.n	8001dc4 <display_panel+0x68>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4413      	add	r3, r2
 8001e16:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	4413      	add	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <display_panel+0xf0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <display_panel+0xf4>)
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	fb03 f202 	mul.w	r2, r3, r2
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d8c1      	bhi.n	8001db6 <display_panel+0x5a>
	}
}
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	372c      	adds	r7, #44	; 0x2c
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	2000001c 	.word	0x2000001c
 8001e44:	2000001d 	.word	0x2000001d
 8001e48:	20064cc0 	.word	0x20064cc0
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_LTDC_LineEventCallback>:
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef* LTDC_Handler) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

	if(play_mode == 3 || Mode_changed == 0 && g_change_pic == 1){
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <HAL_LTDC_LineEventCallback+0x88>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d007      	beq.n	8001e74 <HAL_LTDC_LineEventCallback+0x20>
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_LTDC_LineEventCallback+0x8c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d12f      	bne.n	8001ecc <HAL_LTDC_LineEventCallback+0x78>
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_LTDC_LineEventCallback+0x90>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d12b      	bne.n	8001ecc <HAL_LTDC_LineEventCallback+0x78>

		if(g_Mode_picture_count > g_current_pic){
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_LTDC_LineEventCallback+0x94>)
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <HAL_LTDC_LineEventCallback+0x98>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d912      	bls.n	8001ea6 <HAL_LTDC_LineEventCallback+0x52>

			if(g_change_pic == 1){
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_LTDC_LineEventCallback+0x90>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10e      	bne.n	8001ea6 <HAL_LTDC_LineEventCallback+0x52>
				//display3
//				if(HAL_LTDC_SetAddress(&hltdc, &frame_buf_mode[MAX_IMAGE_SIZE*g_current_pic], 0) != HAL_OK)
//				{
//					Error_Handler();
//				}
				g_test++;
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_LTDC_LineEventCallback+0x9c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_LTDC_LineEventCallback+0x9c>)
 8001e92:	701a      	strb	r2, [r3, #0]
				g_change_pic = 0;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_LTDC_LineEventCallback+0x90>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
				g_current_pic++;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_LTDC_LineEventCallback+0x98>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_LTDC_LineEventCallback+0x98>)
 8001ea4:	701a      	strb	r2, [r3, #0]
			}
		}
		if(g_Mode_picture_count <= (g_current_pic)){
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_LTDC_LineEventCallback+0x94>)
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_LTDC_LineEventCallback+0x98>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d802      	bhi.n	8001eb8 <HAL_LTDC_LineEventCallback+0x64>
			g_current_pic = 0;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_LTDC_LineEventCallback+0x98>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
		}
		if(g_change_pic){
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_LTDC_LineEventCallback+0x90>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_LTDC_LineEventCallback+0x78>
			g_test++;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_LTDC_LineEventCallback+0x9c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_LTDC_LineEventCallback+0x9c>)
 8001eca:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4809      	ldr	r0, [pc, #36]	; (8001ef4 <HAL_LTDC_LineEventCallback+0xa0>)
 8001ed0:	f003 f9d0 	bl	8005274 <HAL_LTDC_ProgramLineEvent>
  }
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20064cbc 	.word	0x20064cbc
 8001ee0:	20000020 	.word	0x20000020
 8001ee4:	20094d47 	.word	0x20094d47
 8001ee8:	20094d46 	.word	0x20094d46
 8001eec:	20094d45 	.word	0x20094d45
 8001ef0:	20094d44 	.word	0x20094d44
 8001ef4:	200000c8 	.word	0x200000c8

08001ef8 <read_flash_SR>:

/*====================================flash function begin====================================*/
uint8_t read_flash_SR()
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
	uint8_t dat[1] = {0x00};
 8001efe:	2300      	movs	r3, #0
 8001f00:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f08:	480e      	ldr	r0, [pc, #56]	; (8001f44 <read_flash_SR+0x4c>)
 8001f0a:	f002 ffbd 	bl	8004e88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x05}, 1, 1000);
 8001f0e:	2305      	movs	r3, #5
 8001f10:	703b      	strb	r3, [r7, #0]
 8001f12:	4639      	mov	r1, r7
 8001f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f18:	2201      	movs	r2, #1
 8001f1a:	480b      	ldr	r0, [pc, #44]	; (8001f48 <read_flash_SR+0x50>)
 8001f1c:	f005 f941 	bl	80071a2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)dat, 1, 1000);
 8001f20:	1d39      	adds	r1, r7, #4
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	2201      	movs	r2, #1
 8001f28:	4807      	ldr	r0, [pc, #28]	; (8001f48 <read_flash_SR+0x50>)
 8001f2a:	f005 faa8 	bl	800747e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <read_flash_SR+0x4c>)
 8001f36:	f002 ffa7 	bl	8004e88 <HAL_GPIO_WritePin>

	return dat[0];
 8001f3a:	793b      	ldrb	r3, [r7, #4]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	48000400 	.word	0x48000400
 8001f48:	20000170 	.word	0x20000170

08001f4c <flash_wait_nobusy>:

void flash_wait_nobusy(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    while(((read_flash_SR()) & 0x01)==0x01);
 8001f50:	bf00      	nop
 8001f52:	f7ff ffd1 	bl	8001ef8 <read_flash_SR>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d0f8      	beq.n	8001f52 <flash_wait_nobusy+0x6>
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <mode_init>:
		delay_us(10);

		flash_wait_nobusy();
	}
}*/
void mode_init(){
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	e00f      	b.n	8001f94 <mode_init+0x2c>
		Mode_config[i*2]=i;//picture_id
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	b2d1      	uxtb	r1, r2
 8001f7c:	4ac4      	ldr	r2, [pc, #784]	; (8002290 <mode_init+0x328>)
 8001f7e:	54d1      	strb	r1, [r2, r3]
		Mode_config[i*2+1]=i;//picture_delay_time
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	3301      	adds	r3, #1
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	b2d1      	uxtb	r1, r2
 8001f8a:	4ac1      	ldr	r2, [pc, #772]	; (8002290 <mode_init+0x328>)
 8001f8c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3301      	adds	r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b6e      	cmp	r3, #110	; 0x6e
 8001f98:	ddec      	ble.n	8001f74 <mode_init+0xc>
	}
	Mode_config[Max_pic_per_mode*(Max_mode_num-1)*2]=0;
 8001f9a:	4bbd      	ldr	r3, [pc, #756]	; (8002290 <mode_init+0x328>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	//test mode 1
	Mode_config[0]=0;
 8001fa2:	4bbb      	ldr	r3, [pc, #748]	; (8002290 <mode_init+0x328>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
	Mode_config[1]=1;
 8001fa8:	4bb9      	ldr	r3, [pc, #740]	; (8002290 <mode_init+0x328>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	705a      	strb	r2, [r3, #1]
	Mode_config[2]=1;
 8001fae:	4bb8      	ldr	r3, [pc, #736]	; (8002290 <mode_init+0x328>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	709a      	strb	r2, [r3, #2]
	Mode_config[3]=1;
 8001fb4:	4bb6      	ldr	r3, [pc, #728]	; (8002290 <mode_init+0x328>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	70da      	strb	r2, [r3, #3]
	Mode_config[4]=255;
 8001fba:	4bb5      	ldr	r3, [pc, #724]	; (8002290 <mode_init+0x328>)
 8001fbc:	22ff      	movs	r2, #255	; 0xff
 8001fbe:	711a      	strb	r2, [r3, #4]
	Mode_config[5]=1;
 8001fc0:	4bb3      	ldr	r3, [pc, #716]	; (8002290 <mode_init+0x328>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	715a      	strb	r2, [r3, #5]
	Mode_config[6]=255;
 8001fc6:	4bb2      	ldr	r3, [pc, #712]	; (8002290 <mode_init+0x328>)
 8001fc8:	22ff      	movs	r2, #255	; 0xff
 8001fca:	719a      	strb	r2, [r3, #6]
	Mode_config[7]=1;
 8001fcc:	4bb0      	ldr	r3, [pc, #704]	; (8002290 <mode_init+0x328>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	71da      	strb	r2, [r3, #7]
	Mode_config[8]=255;
 8001fd2:	4baf      	ldr	r3, [pc, #700]	; (8002290 <mode_init+0x328>)
 8001fd4:	22ff      	movs	r2, #255	; 0xff
 8001fd6:	721a      	strb	r2, [r3, #8]
	Mode_config[9]=1;
 8001fd8:	4bad      	ldr	r3, [pc, #692]	; (8002290 <mode_init+0x328>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	725a      	strb	r2, [r3, #9]
	//test mode 2
	Mode_config[10]=0;
 8001fde:	4bac      	ldr	r3, [pc, #688]	; (8002290 <mode_init+0x328>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	729a      	strb	r2, [r3, #10]
	Mode_config[11]=4;
 8001fe4:	4baa      	ldr	r3, [pc, #680]	; (8002290 <mode_init+0x328>)
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	72da      	strb	r2, [r3, #11]
	Mode_config[12]=1;
 8001fea:	4ba9      	ldr	r3, [pc, #676]	; (8002290 <mode_init+0x328>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	731a      	strb	r2, [r3, #12]
	Mode_config[13]=4;
 8001ff0:	4ba7      	ldr	r3, [pc, #668]	; (8002290 <mode_init+0x328>)
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	735a      	strb	r2, [r3, #13]
	Mode_config[14]=255;
 8001ff6:	4ba6      	ldr	r3, [pc, #664]	; (8002290 <mode_init+0x328>)
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	739a      	strb	r2, [r3, #14]
	Mode_config[15]=1;
 8001ffc:	4ba4      	ldr	r3, [pc, #656]	; (8002290 <mode_init+0x328>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	73da      	strb	r2, [r3, #15]
	Mode_config[16]=255;
 8002002:	4ba3      	ldr	r3, [pc, #652]	; (8002290 <mode_init+0x328>)
 8002004:	22ff      	movs	r2, #255	; 0xff
 8002006:	741a      	strb	r2, [r3, #16]
	Mode_config[17]=1;
 8002008:	4ba1      	ldr	r3, [pc, #644]	; (8002290 <mode_init+0x328>)
 800200a:	2201      	movs	r2, #1
 800200c:	745a      	strb	r2, [r3, #17]
	Mode_config[18]=255;
 800200e:	4ba0      	ldr	r3, [pc, #640]	; (8002290 <mode_init+0x328>)
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	749a      	strb	r2, [r3, #18]
	Mode_config[19]=1;
 8002014:	4b9e      	ldr	r3, [pc, #632]	; (8002290 <mode_init+0x328>)
 8002016:	2201      	movs	r2, #1
 8002018:	74da      	strb	r2, [r3, #19]
	//test mode 3
	Mode_config[20]=2;
 800201a:	4b9d      	ldr	r3, [pc, #628]	; (8002290 <mode_init+0x328>)
 800201c:	2202      	movs	r2, #2
 800201e:	751a      	strb	r2, [r3, #20]
	Mode_config[21]=1;
 8002020:	4b9b      	ldr	r3, [pc, #620]	; (8002290 <mode_init+0x328>)
 8002022:	2201      	movs	r2, #1
 8002024:	755a      	strb	r2, [r3, #21]
	Mode_config[22]=3;
 8002026:	4b9a      	ldr	r3, [pc, #616]	; (8002290 <mode_init+0x328>)
 8002028:	2203      	movs	r2, #3
 800202a:	759a      	strb	r2, [r3, #22]
	Mode_config[23]=1;
 800202c:	4b98      	ldr	r3, [pc, #608]	; (8002290 <mode_init+0x328>)
 800202e:	2201      	movs	r2, #1
 8002030:	75da      	strb	r2, [r3, #23]
	Mode_config[24]=4;
 8002032:	4b97      	ldr	r3, [pc, #604]	; (8002290 <mode_init+0x328>)
 8002034:	2204      	movs	r2, #4
 8002036:	761a      	strb	r2, [r3, #24]
	Mode_config[25]=1;
 8002038:	4b95      	ldr	r3, [pc, #596]	; (8002290 <mode_init+0x328>)
 800203a:	2201      	movs	r2, #1
 800203c:	765a      	strb	r2, [r3, #25]
	Mode_config[26]=5;
 800203e:	4b94      	ldr	r3, [pc, #592]	; (8002290 <mode_init+0x328>)
 8002040:	2205      	movs	r2, #5
 8002042:	769a      	strb	r2, [r3, #26]
	Mode_config[27]=1;
 8002044:	4b92      	ldr	r3, [pc, #584]	; (8002290 <mode_init+0x328>)
 8002046:	2201      	movs	r2, #1
 8002048:	76da      	strb	r2, [r3, #27]
	Mode_config[28]=255;
 800204a:	4b91      	ldr	r3, [pc, #580]	; (8002290 <mode_init+0x328>)
 800204c:	22ff      	movs	r2, #255	; 0xff
 800204e:	771a      	strb	r2, [r3, #28]
	Mode_config[29]=1;
 8002050:	4b8f      	ldr	r3, [pc, #572]	; (8002290 <mode_init+0x328>)
 8002052:	2201      	movs	r2, #1
 8002054:	775a      	strb	r2, [r3, #29]
	//test mode 3
	Mode_config[30]=2;
 8002056:	4b8e      	ldr	r3, [pc, #568]	; (8002290 <mode_init+0x328>)
 8002058:	2202      	movs	r2, #2
 800205a:	779a      	strb	r2, [r3, #30]
	Mode_config[31]=4;
 800205c:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <mode_init+0x328>)
 800205e:	2204      	movs	r2, #4
 8002060:	77da      	strb	r2, [r3, #31]
	Mode_config[32]=3;
 8002062:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <mode_init+0x328>)
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2020 	strb.w	r2, [r3, #32]
	Mode_config[33]=4;
 800206a:	4b89      	ldr	r3, [pc, #548]	; (8002290 <mode_init+0x328>)
 800206c:	2204      	movs	r2, #4
 800206e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Mode_config[34]=4;
 8002072:	4b87      	ldr	r3, [pc, #540]	; (8002290 <mode_init+0x328>)
 8002074:	2204      	movs	r2, #4
 8002076:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Mode_config[35]=4;
 800207a:	4b85      	ldr	r3, [pc, #532]	; (8002290 <mode_init+0x328>)
 800207c:	2204      	movs	r2, #4
 800207e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Mode_config[36]=5;
 8002082:	4b83      	ldr	r3, [pc, #524]	; (8002290 <mode_init+0x328>)
 8002084:	2205      	movs	r2, #5
 8002086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Mode_config[37]=4;
 800208a:	4b81      	ldr	r3, [pc, #516]	; (8002290 <mode_init+0x328>)
 800208c:	2204      	movs	r2, #4
 800208e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Mode_config[38]=255;
 8002092:	4b7f      	ldr	r3, [pc, #508]	; (8002290 <mode_init+0x328>)
 8002094:	22ff      	movs	r2, #255	; 0xff
 8002096:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Mode_config[39]=1;
 800209a:	4b7d      	ldr	r3, [pc, #500]	; (8002290 <mode_init+0x328>)
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//test mode 4
	Mode_config[40]=6;
 80020a2:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <mode_init+0x328>)
 80020a4:	2206      	movs	r2, #6
 80020a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Mode_config[41]=1;
 80020aa:	4b79      	ldr	r3, [pc, #484]	; (8002290 <mode_init+0x328>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Mode_config[42]=7;
 80020b2:	4b77      	ldr	r3, [pc, #476]	; (8002290 <mode_init+0x328>)
 80020b4:	2207      	movs	r2, #7
 80020b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Mode_config[43]=1;
 80020ba:	4b75      	ldr	r3, [pc, #468]	; (8002290 <mode_init+0x328>)
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Mode_config[44]=8;
 80020c2:	4b73      	ldr	r3, [pc, #460]	; (8002290 <mode_init+0x328>)
 80020c4:	2208      	movs	r2, #8
 80020c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Mode_config[45]=1;
 80020ca:	4b71      	ldr	r3, [pc, #452]	; (8002290 <mode_init+0x328>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Mode_config[46]=9;
 80020d2:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <mode_init+0x328>)
 80020d4:	2209      	movs	r2, #9
 80020d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Mode_config[47]=1;
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <mode_init+0x328>)
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Mode_config[48]=10;
 80020e2:	4b6b      	ldr	r3, [pc, #428]	; (8002290 <mode_init+0x328>)
 80020e4:	220a      	movs	r2, #10
 80020e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Mode_config[49]=1;
 80020ea:	4b69      	ldr	r3, [pc, #420]	; (8002290 <mode_init+0x328>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	//test mode 5
	Mode_config[50]=6;
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <mode_init+0x328>)
 80020f4:	2206      	movs	r2, #6
 80020f6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Mode_config[51]=4;
 80020fa:	4b65      	ldr	r3, [pc, #404]	; (8002290 <mode_init+0x328>)
 80020fc:	2204      	movs	r2, #4
 80020fe:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Mode_config[52]=7;
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <mode_init+0x328>)
 8002104:	2207      	movs	r2, #7
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Mode_config[53]=4;
 800210a:	4b61      	ldr	r3, [pc, #388]	; (8002290 <mode_init+0x328>)
 800210c:	2204      	movs	r2, #4
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	Mode_config[54]=8;
 8002112:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <mode_init+0x328>)
 8002114:	2208      	movs	r2, #8
 8002116:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Mode_config[55]=4;
 800211a:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <mode_init+0x328>)
 800211c:	2204      	movs	r2, #4
 800211e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Mode_config[56]=9;
 8002122:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <mode_init+0x328>)
 8002124:	2209      	movs	r2, #9
 8002126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Mode_config[57]=4;
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <mode_init+0x328>)
 800212c:	2204      	movs	r2, #4
 800212e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Mode_config[58]=10;
 8002132:	4b57      	ldr	r3, [pc, #348]	; (8002290 <mode_init+0x328>)
 8002134:	220a      	movs	r2, #10
 8002136:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Mode_config[59]=4;
 800213a:	4b55      	ldr	r3, [pc, #340]	; (8002290 <mode_init+0x328>)
 800213c:	2204      	movs	r2, #4
 800213e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//test mode 6
	Mode_config[60]=11;
 8002142:	4b53      	ldr	r3, [pc, #332]	; (8002290 <mode_init+0x328>)
 8002144:	220b      	movs	r2, #11
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Mode_config[61]=1;
 800214a:	4b51      	ldr	r3, [pc, #324]	; (8002290 <mode_init+0x328>)
 800214c:	2201      	movs	r2, #1
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Mode_config[62]=12;
 8002152:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <mode_init+0x328>)
 8002154:	220c      	movs	r2, #12
 8002156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Mode_config[63]=1;
 800215a:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <mode_init+0x328>)
 800215c:	2201      	movs	r2, #1
 800215e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Mode_config[64]=255;
 8002162:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <mode_init+0x328>)
 8002164:	22ff      	movs	r2, #255	; 0xff
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Mode_config[65]=1;
 800216a:	4b49      	ldr	r3, [pc, #292]	; (8002290 <mode_init+0x328>)
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Mode_config[66]=255;
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <mode_init+0x328>)
 8002174:	22ff      	movs	r2, #255	; 0xff
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Mode_config[67]=1;
 800217a:	4b45      	ldr	r3, [pc, #276]	; (8002290 <mode_init+0x328>)
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Mode_config[68]=255;
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <mode_init+0x328>)
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Mode_config[69]=1;
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <mode_init+0x328>)
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	//test mode 7
	Mode_config[70]=11;
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <mode_init+0x328>)
 8002194:	220b      	movs	r2, #11
 8002196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Mode_config[71]=4;
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <mode_init+0x328>)
 800219c:	2204      	movs	r2, #4
 800219e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	Mode_config[72]=12;
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <mode_init+0x328>)
 80021a4:	220c      	movs	r2, #12
 80021a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Mode_config[73]=4;
 80021aa:	4b39      	ldr	r3, [pc, #228]	; (8002290 <mode_init+0x328>)
 80021ac:	2204      	movs	r2, #4
 80021ae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Mode_config[74]=255;
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <mode_init+0x328>)
 80021b4:	22ff      	movs	r2, #255	; 0xff
 80021b6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Mode_config[75]=1;
 80021ba:	4b35      	ldr	r3, [pc, #212]	; (8002290 <mode_init+0x328>)
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Mode_config[76]=255;
 80021c2:	4b33      	ldr	r3, [pc, #204]	; (8002290 <mode_init+0x328>)
 80021c4:	22ff      	movs	r2, #255	; 0xff
 80021c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Mode_config[77]=1;
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <mode_init+0x328>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Mode_config[78]=255;
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <mode_init+0x328>)
 80021d4:	22ff      	movs	r2, #255	; 0xff
 80021d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Mode_config[79]=1;
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <mode_init+0x328>)
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	//test mode 8
	Mode_config[80]=13;
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <mode_init+0x328>)
 80021e4:	220d      	movs	r2, #13
 80021e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Mode_config[81]=1;
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <mode_init+0x328>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Mode_config[82]=14;
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <mode_init+0x328>)
 80021f4:	220e      	movs	r2, #14
 80021f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Mode_config[83]=1;
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <mode_init+0x328>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Mode_config[84]=255;
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <mode_init+0x328>)
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Mode_config[85]=1;
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <mode_init+0x328>)
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Mode_config[86]=255;
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <mode_init+0x328>)
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Mode_config[87]=1;
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <mode_init+0x328>)
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Mode_config[88]=255;
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <mode_init+0x328>)
 8002224:	22ff      	movs	r2, #255	; 0xff
 8002226:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	Mode_config[89]=1;
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <mode_init+0x328>)
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//test mode 8
	Mode_config[90]=13;
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <mode_init+0x328>)
 8002234:	220d      	movs	r2, #13
 8002236:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	Mode_config[91]=4;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <mode_init+0x328>)
 800223c:	2204      	movs	r2, #4
 800223e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Mode_config[92]=14;
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <mode_init+0x328>)
 8002244:	220e      	movs	r2, #14
 8002246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	Mode_config[93]=4;
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <mode_init+0x328>)
 800224c:	2204      	movs	r2, #4
 800224e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	Mode_config[94]=255;
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <mode_init+0x328>)
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Mode_config[95]=1;
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <mode_init+0x328>)
 800225c:	2201      	movs	r2, #1
 800225e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	Mode_config[96]=255;
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <mode_init+0x328>)
 8002264:	22ff      	movs	r2, #255	; 0xff
 8002266:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	Mode_config[97]=1;
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <mode_init+0x328>)
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	Mode_config[98]=255;
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <mode_init+0x328>)
 8002274:	22ff      	movs	r2, #255	; 0xff
 8002276:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	Mode_config[99]=1;
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <mode_init+0x328>)
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20094cc8 	.word	0x20094cc8

08002294 <write_flash_config>:
void write_flash_config()
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af00      	add	r7, sp, #0
	//content_size�?????0=16kb, 1=32kb, 2=32kb, 3=64kb
	int divide_value = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64; //divide_value=4
 800229e:	4b60      	ldr	r3, [pc, #384]	; (8002420 <write_flash_config+0x18c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <write_flash_config+0x18>
 80022a6:	2304      	movs	r3, #4
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022aa:	e00c      	b.n	80022c6 <write_flash_config+0x32>
	else if(content_size==1) divide_value=256/128; //divide_value=2
 80022ac:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <write_flash_config+0x18c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d102      	bne.n	80022ba <write_flash_config+0x26>
 80022b4:	2302      	movs	r3, #2
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b8:	e005      	b.n	80022c6 <write_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;//divide_value=1
 80022ba:	4b59      	ldr	r3, [pc, #356]	; (8002420 <write_flash_config+0x18c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d101      	bne.n	80022c6 <write_flash_config+0x32>
 80022c2:	2301      	movs	r3, #1
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int image_id = 31;
 80022c6:	231f      	movs	r3, #31
 80022c8:	623b      	str	r3, [r7, #32]
	erase_flash_sector(image_id);
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fcde 	bl	8002c90 <erase_flash_sector>

	int image_id_H = image_id / divide_value;
 80022d4:	6a3a      	ldr	r2, [r7, #32]
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80022dc:	61fb      	str	r3, [r7, #28]
	int image_id_L = image_id % divide_value;
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e2:	fb93 f2f2 	sdiv	r2, r3, r2
 80022e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022e8:	fb01 f202 	mul.w	r2, r1, r2
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
	int count = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80022f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	e076      	b.n	80023f6 <write_flash_config+0x162>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800230e:	4845      	ldr	r0, [pc, #276]	; (8002424 <write_flash_config+0x190>)
 8002310:	f002 fdba 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002314:	2306      	movs	r3, #6
 8002316:	753b      	strb	r3, [r7, #20]
 8002318:	f107 0114 	add.w	r1, r7, #20
 800231c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002320:	2201      	movs	r2, #1
 8002322:	4841      	ldr	r0, [pc, #260]	; (8002428 <write_flash_config+0x194>)
 8002324:	f004 ff3d 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002328:	2201      	movs	r2, #1
 800232a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232e:	483d      	ldr	r0, [pc, #244]	; (8002424 <write_flash_config+0x190>)
 8002330:	f002 fdaa 	bl	8004e88 <HAL_GPIO_WritePin>
		delay_us(10);
 8002334:	200a      	movs	r0, #10
 8002336:	f000 ffa3 	bl	8003280 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002340:	4838      	ldr	r0, [pc, #224]	; (8002424 <write_flash_config+0x190>)
 8002342:	f002 fda1 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 8002346:	2302      	movs	r3, #2
 8002348:	743b      	strb	r3, [r7, #16]
 800234a:	f107 0110 	add.w	r1, r7, #16
 800234e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002352:	2201      	movs	r2, #1
 8002354:	4834      	ldr	r0, [pc, #208]	; (8002428 <write_flash_config+0x194>)
 8002356:	f004 ff24 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	733b      	strb	r3, [r7, #12]
 8002360:	f107 010c 	add.w	r1, r7, #12
 8002364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002368:	2201      	movs	r2, #1
 800236a:	482f      	ldr	r0, [pc, #188]	; (8002428 <write_flash_config+0x194>)
 800236c:	f004 ff19 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	b2db      	uxtb	r3, r3
 8002374:	723b      	strb	r3, [r7, #8]
 8002376:	f107 0108 	add.w	r1, r7, #8
 800237a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237e:	2201      	movs	r2, #1
 8002380:	4829      	ldr	r0, [pc, #164]	; (8002428 <write_flash_config+0x194>)
 8002382:	f004 ff0e 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002386:	2300      	movs	r3, #0
 8002388:	713b      	strb	r3, [r7, #4]
 800238a:	1d39      	adds	r1, r7, #4
 800238c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002390:	2201      	movs	r2, #1
 8002392:	4825      	ldr	r0, [pc, #148]	; (8002428 <write_flash_config+0x194>)
 8002394:	f004 ff05 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &Mode_config[0], Max_pic_per_mode*Max_mode_num*2, 1000);
 8002398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239c:	226e      	movs	r2, #110	; 0x6e
 800239e:	4923      	ldr	r1, [pc, #140]	; (800242c <write_flash_config+0x198>)
 80023a0:	4821      	ldr	r0, [pc, #132]	; (8002428 <write_flash_config+0x194>)
 80023a2:	f004 fefe 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ac:	481d      	ldr	r0, [pc, #116]	; (8002424 <write_flash_config+0x190>)
 80023ae:	f002 fd6b 	bl	8004e88 <HAL_GPIO_WritePin>
		delay_us(10);
 80023b2:	200a      	movs	r0, #10
 80023b4:	f000 ff64 	bl	8003280 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80023b8:	2200      	movs	r2, #0
 80023ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023be:	4819      	ldr	r0, [pc, #100]	; (8002424 <write_flash_config+0x190>)
 80023c0:	f002 fd62 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 80023c4:	2304      	movs	r3, #4
 80023c6:	703b      	strb	r3, [r7, #0]
 80023c8:	4639      	mov	r1, r7
 80023ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ce:	2201      	movs	r2, #1
 80023d0:	4815      	ldr	r0, [pc, #84]	; (8002428 <write_flash_config+0x194>)
 80023d2:	f004 fee6 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80023d6:	2201      	movs	r2, #1
 80023d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023dc:	4811      	ldr	r0, [pc, #68]	; (8002424 <write_flash_config+0x190>)
 80023de:	f002 fd53 	bl	8004e88 <HAL_GPIO_WritePin>
		delay_us(1000);
 80023e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e6:	f000 ff4b 	bl	8003280 <delay_us>
		count++;
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	3301      	adds	r3, #1
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	3301      	adds	r3, #1
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3301      	adds	r3, #1
 80023fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002400:	fb91 f2f2 	sdiv	r2, r1, r2
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	461a      	mov	r2, r3
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	4293      	cmp	r3, r2
 800240e:	f4ff af7b 	bcc.w	8002308 <write_flash_config+0x74>
	}

	flash_wait_nobusy();
 8002412:	f7ff fd9b 	bl	8001f4c <flash_wait_nobusy>
}
 8002416:	bf00      	nop
 8002418:	3730      	adds	r7, #48	; 0x30
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000000b 	.word	0x2000000b
 8002424:	48000400 	.word	0x48000400
 8002428:	20000170 	.word	0x20000170
 800242c:	20094cc8 	.word	0x20094cc8

08002430 <read_flash_config>:
void read_flash_config()
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
	int divide_value = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
	if(content_size==0) divide_value=256/64;
 800243a:	4b40      	ldr	r3, [pc, #256]	; (800253c <read_flash_config+0x10c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <read_flash_config+0x18>
 8002442:	2304      	movs	r3, #4
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	e00c      	b.n	8002462 <read_flash_config+0x32>
	else if(content_size==1) divide_value=256/128;
 8002448:	4b3c      	ldr	r3, [pc, #240]	; (800253c <read_flash_config+0x10c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d102      	bne.n	8002456 <read_flash_config+0x26>
 8002450:	2302      	movs	r3, #2
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	e005      	b.n	8002462 <read_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;
 8002456:	4b39      	ldr	r3, [pc, #228]	; (800253c <read_flash_config+0x10c>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d101      	bne.n	8002462 <read_flash_config+0x32>
 800245e:	2301      	movs	r3, #1
 8002460:	627b      	str	r3, [r7, #36]	; 0x24

	int image_id= 31;
 8002462:	231f      	movs	r3, #31
 8002464:	61fb      	str	r3, [r7, #28]
	int image_id_H = image_id / divide_value;
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	fb92 f3f3 	sdiv	r3, r2, r3
 800246e:	61bb      	str	r3, [r7, #24]
	int image_id_L = image_id % divide_value;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	fb93 f2f2 	sdiv	r2, r3, r2
 8002478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247a:	fb01 f202 	mul.w	r2, r1, r2
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	617b      	str	r3, [r7, #20]
	int count = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	e03d      	b.n	8002516 <read_flash_config+0xe6>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a0:	4827      	ldr	r0, [pc, #156]	; (8002540 <read_flash_config+0x110>)
 80024a2:	f002 fcf1 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 80024a6:	2303      	movs	r3, #3
 80024a8:	733b      	strb	r3, [r7, #12]
 80024aa:	f107 010c 	add.w	r1, r7, #12
 80024ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b2:	2201      	movs	r2, #1
 80024b4:	4823      	ldr	r0, [pc, #140]	; (8002544 <read_flash_config+0x114>)
 80024b6:	f004 fe74 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	723b      	strb	r3, [r7, #8]
 80024c0:	f107 0108 	add.w	r1, r7, #8
 80024c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c8:	2201      	movs	r2, #1
 80024ca:	481e      	ldr	r0, [pc, #120]	; (8002544 <read_flash_config+0x114>)
 80024cc:	f004 fe69 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	713b      	strb	r3, [r7, #4]
 80024d6:	1d39      	adds	r1, r7, #4
 80024d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024dc:	2201      	movs	r2, #1
 80024de:	4819      	ldr	r0, [pc, #100]	; (8002544 <read_flash_config+0x114>)
 80024e0:	f004 fe5f 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80024e4:	2300      	movs	r3, #0
 80024e6:	703b      	strb	r3, [r7, #0]
 80024e8:	4639      	mov	r1, r7
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	2201      	movs	r2, #1
 80024f0:	4814      	ldr	r0, [pc, #80]	; (8002544 <read_flash_config+0x114>)
 80024f2:	f004 fe56 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &Mode_config[0],  Max_pic_per_mode*Max_mode_num*2, 1000);
 80024f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fa:	226e      	movs	r2, #110	; 0x6e
 80024fc:	4912      	ldr	r1, [pc, #72]	; (8002548 <read_flash_config+0x118>)
 80024fe:	4811      	ldr	r0, [pc, #68]	; (8002544 <read_flash_config+0x114>)
 8002500:	f004 ffbd 	bl	800747e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002504:	2201      	movs	r2, #1
 8002506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <read_flash_config+0x110>)
 800250c:	f002 fcbc 	bl	8004e88 <HAL_GPIO_WritePin>
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	3301      	adds	r3, #1
 8002514:	623b      	str	r3, [r7, #32]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800251e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002520:	fb91 f2f2 	sdiv	r2, r1, r2
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	4293      	cmp	r3, r2
 800252e:	d3b4      	bcc.n	800249a <read_flash_config+0x6a>
	}
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3728      	adds	r7, #40	; 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000000b 	.word	0x2000000b
 8002540:	48000400 	.word	0x48000400
 8002544:	20000170 	.word	0x20000170
 8002548:	20094cc8 	.word	0x20094cc8

0800254c <write_flash_page>:
void write_flash_page(uint8_t *data, uint8_t image_id)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08e      	sub	sp, #56	; 0x38
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
	if(content_size==0) divide_value=256/64;
 800255c:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <write_flash_page+0x194>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <write_flash_page+0x1e>
 8002564:	2304      	movs	r3, #4
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
 8002568:	e00c      	b.n	8002584 <write_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 800256a:	4b5d      	ldr	r3, [pc, #372]	; (80026e0 <write_flash_page+0x194>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <write_flash_page+0x2c>
 8002572:	2302      	movs	r3, #2
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
 8002576:	e005      	b.n	8002584 <write_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <write_flash_page+0x194>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d101      	bne.n	8002584 <write_flash_page+0x38>
 8002580:	2301      	movs	r3, #1
 8002582:	637b      	str	r3, [r7, #52]	; 0x34

	int image_id_H = image_id / divide_value;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	fb92 f3f3 	sdiv	r3, r2, r3
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
	int image_id_L = image_id % divide_value;
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002592:	fb93 f2f2 	sdiv	r2, r3, r2
 8002596:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002598:	fb01 f202 	mul.w	r2, r1, r2
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
	int count = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80025a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80025ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b0:	fb02 f303 	mul.w	r3, r2, r3
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b6:	e07e      	b.n	80026b6 <write_flash_page+0x16a>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80025b8:	2200      	movs	r2, #0
 80025ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025be:	4849      	ldr	r0, [pc, #292]	; (80026e4 <write_flash_page+0x198>)
 80025c0:	f002 fc62 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 80025c4:	2306      	movs	r3, #6
 80025c6:	f887 3020 	strb.w	r3, [r7, #32]
 80025ca:	f107 0120 	add.w	r1, r7, #32
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	2201      	movs	r2, #1
 80025d4:	4844      	ldr	r0, [pc, #272]	; (80026e8 <write_flash_page+0x19c>)
 80025d6:	f004 fde4 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80025da:	2201      	movs	r2, #1
 80025dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e0:	4840      	ldr	r0, [pc, #256]	; (80026e4 <write_flash_page+0x198>)
 80025e2:	f002 fc51 	bl	8004e88 <HAL_GPIO_WritePin>
		delay_us(10);
 80025e6:	200a      	movs	r0, #10
 80025e8:	f000 fe4a 	bl	8003280 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025f2:	483c      	ldr	r0, [pc, #240]	; (80026e4 <write_flash_page+0x198>)
 80025f4:	f002 fc48 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 80025f8:	2302      	movs	r3, #2
 80025fa:	773b      	strb	r3, [r7, #28]
 80025fc:	f107 011c 	add.w	r1, r7, #28
 8002600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002604:	2201      	movs	r2, #1
 8002606:	4838      	ldr	r0, [pc, #224]	; (80026e8 <write_flash_page+0x19c>)
 8002608:	f004 fdcb 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	b2db      	uxtb	r3, r3
 8002610:	763b      	strb	r3, [r7, #24]
 8002612:	f107 0118 	add.w	r1, r7, #24
 8002616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261a:	2201      	movs	r2, #1
 800261c:	4832      	ldr	r0, [pc, #200]	; (80026e8 <write_flash_page+0x19c>)
 800261e:	f004 fdc0 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	b2db      	uxtb	r3, r3
 8002626:	753b      	strb	r3, [r7, #20]
 8002628:	f107 0114 	add.w	r1, r7, #20
 800262c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002630:	2201      	movs	r2, #1
 8002632:	482d      	ldr	r0, [pc, #180]	; (80026e8 <write_flash_page+0x19c>)
 8002634:	f004 fdb5 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002638:	2300      	movs	r3, #0
 800263a:	743b      	strb	r3, [r7, #16]
 800263c:	f107 0110 	add.w	r1, r7, #16
 8002640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002644:	2201      	movs	r2, #1
 8002646:	4828      	ldr	r0, [pc, #160]	; (80026e8 <write_flash_page+0x19c>)
 8002648:	f004 fdab 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &data[count*256], 256, 1000);
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	461a      	mov	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1899      	adds	r1, r3, r2
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265e:	4822      	ldr	r0, [pc, #136]	; (80026e8 <write_flash_page+0x19c>)
 8002660:	f004 fd9f 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800266a:	481e      	ldr	r0, [pc, #120]	; (80026e4 <write_flash_page+0x198>)
 800266c:	f002 fc0c 	bl	8004e88 <HAL_GPIO_WritePin>
		delay_us(10);
 8002670:	200a      	movs	r0, #10
 8002672:	f000 fe05 	bl	8003280 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002676:	2200      	movs	r2, #0
 8002678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800267c:	4819      	ldr	r0, [pc, #100]	; (80026e4 <write_flash_page+0x198>)
 800267e:	f002 fc03 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002682:	2304      	movs	r3, #4
 8002684:	733b      	strb	r3, [r7, #12]
 8002686:	f107 010c 	add.w	r1, r7, #12
 800268a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268e:	2201      	movs	r2, #1
 8002690:	4815      	ldr	r0, [pc, #84]	; (80026e8 <write_flash_page+0x19c>)
 8002692:	f004 fd86 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002696:	2201      	movs	r2, #1
 8002698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800269c:	4811      	ldr	r0, [pc, #68]	; (80026e4 <write_flash_page+0x198>)
 800269e:	f002 fbf3 	bl	8004e88 <HAL_GPIO_WritePin>
		delay_us(1000);
 80026a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026a6:	f000 fdeb 	bl	8003280 <delay_us>
		count++;
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	3301      	adds	r3, #1
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	3301      	adds	r3, #1
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	3301      	adds	r3, #1
 80026ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c0:	fb91 f2f2 	sdiv	r2, r1, r2
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	4293      	cmp	r3, r2
 80026ce:	f4ff af73 	bcc.w	80025b8 <write_flash_page+0x6c>
	}

	flash_wait_nobusy();
 80026d2:	f7ff fc3b 	bl	8001f4c <flash_wait_nobusy>
}
 80026d6:	bf00      	nop
 80026d8:	3738      	adds	r7, #56	; 0x38
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000000b 	.word	0x2000000b
 80026e4:	48000400 	.word	0x48000400
 80026e8:	20000170 	.word	0x20000170

080026ec <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 80026fc:	4b43      	ldr	r3, [pc, #268]	; (800280c <read_flash_page+0x120>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <read_flash_page+0x1e>
 8002704:	2304      	movs	r3, #4
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002708:	e00c      	b.n	8002724 <read_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 800270a:	4b40      	ldr	r3, [pc, #256]	; (800280c <read_flash_page+0x120>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <read_flash_page+0x2c>
 8002712:	2302      	movs	r3, #2
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002716:	e005      	b.n	8002724 <read_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8002718:	4b3c      	ldr	r3, [pc, #240]	; (800280c <read_flash_page+0x120>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d101      	bne.n	8002724 <read_flash_page+0x38>
 8002720:	2301      	movs	r3, #1
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c

	int image_id_H = image_id / divide_value;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	fb92 f3f3 	sdiv	r3, r2, r3
 800272c:	623b      	str	r3, [r7, #32]
	int image_id_L = image_id % divide_value;
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002732:	fb93 f2f2 	sdiv	r2, r3, r2
 8002736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002738:	fb01 f202 	mul.w	r2, r1, r2
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	61fb      	str	r3, [r7, #28]
	int count = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	fb92 f3f3 	sdiv	r3, r2, r3
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e047      	b.n	80027e8 <read_flash_page+0xfc>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002758:	2200      	movs	r2, #0
 800275a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800275e:	482c      	ldr	r0, [pc, #176]	; (8002810 <read_flash_page+0x124>)
 8002760:	f002 fb92 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 8002764:	2303      	movs	r3, #3
 8002766:	763b      	strb	r3, [r7, #24]
 8002768:	f107 0118 	add.w	r1, r7, #24
 800276c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002770:	2201      	movs	r2, #1
 8002772:	4828      	ldr	r0, [pc, #160]	; (8002814 <read_flash_page+0x128>)
 8002774:	f004 fd15 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	753b      	strb	r3, [r7, #20]
 800277e:	f107 0114 	add.w	r1, r7, #20
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	2201      	movs	r2, #1
 8002788:	4822      	ldr	r0, [pc, #136]	; (8002814 <read_flash_page+0x128>)
 800278a:	f004 fd0a 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	b2db      	uxtb	r3, r3
 8002792:	743b      	strb	r3, [r7, #16]
 8002794:	f107 0110 	add.w	r1, r7, #16
 8002798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279c:	2201      	movs	r2, #1
 800279e:	481d      	ldr	r0, [pc, #116]	; (8002814 <read_flash_page+0x128>)
 80027a0:	f004 fcff 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80027a4:	2300      	movs	r3, #0
 80027a6:	733b      	strb	r3, [r7, #12]
 80027a8:	f107 010c 	add.w	r1, r7, #12
 80027ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b0:	2201      	movs	r2, #1
 80027b2:	4818      	ldr	r0, [pc, #96]	; (8002814 <read_flash_page+0x128>)
 80027b4:	f004 fcf5 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &data[count*256], 256, 1000);
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	1899      	adds	r1, r3, r2
 80027c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ca:	4812      	ldr	r0, [pc, #72]	; (8002814 <read_flash_page+0x128>)
 80027cc:	f004 fe57 	bl	800747e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027d6:	480e      	ldr	r0, [pc, #56]	; (8002810 <read_flash_page+0x124>)
 80027d8:	f002 fb56 	bl	8004e88 <HAL_GPIO_WritePin>
		count++;
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	3301      	adds	r3, #1
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	3301      	adds	r3, #1
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3301      	adds	r3, #1
 80027ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	fb91 f2f2 	sdiv	r2, r1, r2
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	4293      	cmp	r3, r2
 8002800:	d3aa      	bcc.n	8002758 <read_flash_page+0x6c>
	}
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	3730      	adds	r7, #48	; 0x30
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000000b 	.word	0x2000000b
 8002810:	48000400 	.word	0x48000400
 8002814:	20000170 	.word	0x20000170

08002818 <read_flash_page_DMA2d>:

void read_flash_page_DMA2d(uint8_t *data, uint8_t image_id)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 800281e:	b094      	sub	sp, #80	; 0x50
 8002820:	af00      	add	r7, sp, #0
 8002822:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002826:	f843 0c4c 	str.w	r0, [r3, #-76]
 800282a:	460a      	mov	r2, r1
 800282c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002830:	f803 2c4d 	strb.w	r2, [r3, #-77]
	int divide_value = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800283a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800283e:	6013      	str	r3, [r2, #0]
	if(content_size==0) divide_value=256/64;
 8002840:	4bbd      	ldr	r3, [pc, #756]	; (8002b38 <read_flash_page_DMA2d+0x320>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d106      	bne.n	8002856 <read_flash_page_DMA2d+0x3e>
 8002848:	2304      	movs	r3, #4
 800284a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800284e:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	e014      	b.n	8002880 <read_flash_page_DMA2d+0x68>
	else if(content_size==1) divide_value=256/128;
 8002856:	4bb8      	ldr	r3, [pc, #736]	; (8002b38 <read_flash_page_DMA2d+0x320>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d106      	bne.n	800286c <read_flash_page_DMA2d+0x54>
 800285e:	2302      	movs	r3, #2
 8002860:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002864:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e009      	b.n	8002880 <read_flash_page_DMA2d+0x68>
	else if(content_size==2) divide_value=256/256;
 800286c:	4bb2      	ldr	r3, [pc, #712]	; (8002b38 <read_flash_page_DMA2d+0x320>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d105      	bne.n	8002880 <read_flash_page_DMA2d+0x68>
 8002874:	2301      	movs	r3, #1
 8002876:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800287a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800287e:	6013      	str	r3, [r2, #0]
	uint8_t frame_buf[MAX_IMAGE_SIZE] = {0};
 8002880:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002884:	2200      	movs	r2, #0
 8002886:	f843 2c34 	str.w	r2, [r3, #-52]
 800288a:	3b30      	subs	r3, #48	; 0x30
 800288c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f006 fe06 	bl	80094a4 <memset>
	memset(frame_buf, 0, sizeof(frame_buf));
 8002898:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800289c:	3b34      	subs	r3, #52	; 0x34
 800289e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f006 fdfd 	bl	80094a4 <memset>

	int image_id_H = image_id / divide_value;
 80028aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028ae:	f813 2c4d 	ldrb.w	r2, [r3, #-77]
 80028b2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80028b6:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80028c0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80028c4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80028c8:	6013      	str	r3, [r2, #0]
	int image_id_L = image_id % divide_value;
 80028ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028ce:	f813 3c4d 	ldrb.w	r3, [r3, #-77]
 80028d2:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80028d6:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	fb93 f2f2 	sdiv	r2, r3, r2
 80028e0:	f507 3180 	add.w	r1, r7, #65536	; 0x10000
 80028e4:	f101 014c 	add.w	r1, r1, #76	; 0x4c
 80028e8:	6809      	ldr	r1, [r1, #0]
 80028ea:	fb01 f202 	mul.w	r2, r1, r2
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 80028f4:	f102 0220 	add.w	r2, r2, #32
 80028f8:	6013      	str	r3, [r2, #0]
	int count = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002900:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8002904:	6013      	str	r3, [r2, #0]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800290e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	fb92 f3f3 	sdiv	r3, r2, r3
 8002918:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800291c:	f102 0220 	add.w	r2, r2, #32
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 800292a:	f102 0244 	add.w	r2, r2, #68	; 0x44
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	e074      	b.n	8002a1c <read_flash_page_DMA2d+0x204>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002938:	4880      	ldr	r0, [pc, #512]	; (8002b3c <read_flash_page_DMA2d+0x324>)
 800293a:	f002 faa5 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 800293e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002942:	2203      	movs	r2, #3
 8002944:	f803 2c38 	strb.w	r2, [r3, #-56]
 8002948:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800294c:	3938      	subs	r1, #56	; 0x38
 800294e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002952:	2201      	movs	r2, #1
 8002954:	487a      	ldr	r0, [pc, #488]	; (8002b40 <read_flash_page_DMA2d+0x328>)
 8002956:	f004 fc24 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 800295a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 800295e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800296a:	f803 2c3c 	strb.w	r2, [r3, #-60]
 800296e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002972:	393c      	subs	r1, #60	; 0x3c
 8002974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002978:	2201      	movs	r2, #1
 800297a:	4871      	ldr	r0, [pc, #452]	; (8002b40 <read_flash_page_DMA2d+0x328>)
 800297c:	f004 fc11 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 8002980:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002984:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002990:	f803 2c40 	strb.w	r2, [r3, #-64]
 8002994:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002998:	3940      	subs	r1, #64	; 0x40
 800299a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800299e:	2201      	movs	r2, #1
 80029a0:	4867      	ldr	r0, [pc, #412]	; (8002b40 <read_flash_page_DMA2d+0x328>)
 80029a2:	f004 fbfe 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80029a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029aa:	2200      	movs	r2, #0
 80029ac:	f803 2c44 	strb.w	r2, [r3, #-68]
 80029b0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80029b4:	3944      	subs	r1, #68	; 0x44
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	2201      	movs	r2, #1
 80029bc:	4860      	ldr	r0, [pc, #384]	; (8002b40 <read_flash_page_DMA2d+0x328>)
 80029be:	f004 fbf0 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &frame_buf[count*256], 256, 1000);
 80029c2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80029c6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029d2:	3b34      	subs	r3, #52	; 0x34
 80029d4:	1899      	adds	r1, r3, r2
 80029d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029de:	4858      	ldr	r0, [pc, #352]	; (8002b40 <read_flash_page_DMA2d+0x328>)
 80029e0:	f004 fd4d 	bl	800747e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80029e4:	2201      	movs	r2, #1
 80029e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ea:	4854      	ldr	r0, [pc, #336]	; (8002b3c <read_flash_page_DMA2d+0x324>)
 80029ec:	f002 fa4c 	bl	8004e88 <HAL_GPIO_WritePin>
		count++;
 80029f0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 80029f4:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002a00:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8002a04:	6013      	str	r3, [r2, #0]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002a06:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002a0a:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002a16:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002a20:	f103 0320 	add.w	r3, r3, #32
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a2c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002a30:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	fb91 f2f2 	sdiv	r2, r1, r2
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002a44:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	f4ff af71 	bcc.w	8002932 <read_flash_page_DMA2d+0x11a>
	}

	int num_ones = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002a56:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8002a5a:	6013      	str	r3, [r2, #0]
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 8002a5c:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <read_flash_page_DMA2d+0x32c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <read_flash_page_DMA2d+0x330>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b21b      	sxth	r3, r3
 8002a6e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002a72:	f102 021e 	add.w	r2, r2, #30
 8002a76:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < 12; i++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002a7e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e025      	b.n	8002ad2 <read_flash_page_DMA2d+0x2ba>
	{
		if (Pixel_Mapping_one & (1 << i))
 8002a86:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002a8a:	f103 031e 	add.w	r3, r3, #30
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002a94:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa42 f303 	asr.w	r3, r2, r3
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <read_flash_page_DMA2d+0x2a4>
		{
			num_ones++;
 8002aa6:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002aaa:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002ab6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8002aba:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 12; i++)
 8002abc:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002ac0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002acc:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002ad6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b0b      	cmp	r3, #11
 8002ade:	ddd2      	ble.n	8002a86 <read_flash_page_DMA2d+0x26e>
		}
	}

	int frame_buf_count = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002ae6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002aea:	6013      	str	r3, [r2, #0]
	int Pixel_Mapping_one_count = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002af2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002af6:	6013      	str	r3, [r2, #0]
	int c = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002afe:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002b02:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8002b04:	2300      	movs	r3, #0
 8002b06:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002b0a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	e0a5      	b.n	8002c5e <read_flash_page_DMA2d+0x446>
	{
		Pixel_Mapping_one_count = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002b18:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002b1c:	6013      	str	r3, [r2, #0]
		c = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002b24:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002b28:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < 12; j++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002b30:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e06b      	b.n	8002c10 <read_flash_page_DMA2d+0x3f8>
 8002b38:	2000000b 	.word	0x2000000b
 8002b3c:	48000400 	.word	0x48000400
 8002b40:	20000170 	.word	0x20000170
 8002b44:	2000001c 	.word	0x2000001c
 8002b48:	2000001d 	.word	0x2000001d
		{
			if (Pixel_Mapping_one & (1 << j))
 8002b4c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b50:	f103 031e 	add.w	r3, r3, #30
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b5a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fa42 f303 	asr.w	r3, r2, r3
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d03b      	beq.n	8002be4 <read_flash_page_DMA2d+0x3cc>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8002b6c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b70:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b7a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002b86:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002b8a:	6013      	str	r3, [r2, #0]
				data[frame_buf_count] = frame_buf[i + c];
 8002b8c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b90:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002b9a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	441a      	add	r2, r3
 8002ba2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002ba6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002bb0:	f851 1c4c 	ldr.w	r1, [r1, #-76]
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002bba:	440a      	add	r2, r1
 8002bbc:	f812 2c34 	ldrb.w	r2, [r2, #-52]
 8002bc0:	701a      	strb	r2, [r3, #0]
				c++;
 8002bc2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002bc6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002bd2:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002bd6:	6013      	str	r3, [r2, #0]
				Pixel_Mapping_one_count = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002bde:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002be2:	6013      	str	r3, [r2, #0]
			}
			Pixel_Mapping_one_count++;
 8002be4:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002be8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002bf4:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002bf8:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < 12; j++)
 8002bfa:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002bfe:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002c0a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c14:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b0b      	cmp	r3, #11
 8002c1c:	dd96      	ble.n	8002b4c <read_flash_page_DMA2d+0x334>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8002c1e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c22:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c2c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002c38:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002c3c:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8002c3e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c42:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c4c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8002c58:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <read_flash_page_DMA2d+0x470>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <read_flash_page_DMA2d+0x474>)
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	fb03 f202 	mul.w	r2, r3, r2
 8002c6a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8002c6e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f63f af4c 	bhi.w	8002b12 <read_flash_page_DMA2d+0x2fa>
	}
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002c82:	3750      	adds	r7, #80	; 0x50
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000004 	.word	0x20000004

08002c90 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08c      	sub	sp, #48	; 0x30
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
	int divide_value = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8002c9e:	4b64      	ldr	r3, [pc, #400]	; (8002e30 <erase_flash_sector+0x1a0>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <erase_flash_sector+0x1c>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002caa:	e00c      	b.n	8002cc6 <erase_flash_sector+0x36>
	else if(content_size==1) divide_value=256/128;
 8002cac:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <erase_flash_sector+0x1a0>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d102      	bne.n	8002cba <erase_flash_sector+0x2a>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb8:	e005      	b.n	8002cc6 <erase_flash_sector+0x36>
	else if(content_size==2) divide_value=256/256;
 8002cba:	4b5d      	ldr	r3, [pc, #372]	; (8002e30 <erase_flash_sector+0x1a0>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d101      	bne.n	8002cc6 <erase_flash_sector+0x36>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t page_count = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(content_size==0) page_count=16/4;
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <erase_flash_sector+0x1a0>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <erase_flash_sector+0x4c>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cda:	e00e      	b.n	8002cfa <erase_flash_sector+0x6a>
	else if(content_size==1) page_count=32/4;
 8002cdc:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <erase_flash_sector+0x1a0>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d103      	bne.n	8002cec <erase_flash_sector+0x5c>
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cea:	e006      	b.n	8002cfa <erase_flash_sector+0x6a>
	else if(content_size==2) page_count=64/4;
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <erase_flash_sector+0x1a0>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d102      	bne.n	8002cfa <erase_flash_sector+0x6a>
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	int image_id_H = image_id / divide_value;
 8002cfa:	79fa      	ldrb	r2, [r7, #7]
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
	int image_id_L = image_id % divide_value;
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d08:	fb93 f2f2 	sdiv	r2, r3, r2
 8002d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d0e:	fb01 f202 	mul.w	r2, r1, r2
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	623b      	str	r3, [r7, #32]

	reset_flash_software();
 8002d16:	f000 f891 	bl	8002e3c <reset_flash_software>

	for(uint8_t i = 0; i < page_count; i++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d20:	e07a      	b.n	8002e18 <erase_flash_sector+0x188>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002d22:	2200      	movs	r2, #0
 8002d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d28:	4842      	ldr	r0, [pc, #264]	; (8002e34 <erase_flash_sector+0x1a4>)
 8002d2a:	f002 f8ad 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002d2e:	2306      	movs	r3, #6
 8002d30:	773b      	strb	r3, [r7, #28]
 8002d32:	f107 011c 	add.w	r1, r7, #28
 8002d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	483e      	ldr	r0, [pc, #248]	; (8002e38 <erase_flash_sector+0x1a8>)
 8002d3e:	f004 fa30 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002d42:	2201      	movs	r2, #1
 8002d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d48:	483a      	ldr	r0, [pc, #232]	; (8002e34 <erase_flash_sector+0x1a4>)
 8002d4a:	f002 f89d 	bl	8004e88 <HAL_GPIO_WritePin>
		delay_us(10);
 8002d4e:	200a      	movs	r0, #10
 8002d50:	f000 fa96 	bl	8003280 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002d54:	2200      	movs	r2, #0
 8002d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d5a:	4836      	ldr	r0, [pc, #216]	; (8002e34 <erase_flash_sector+0x1a4>)
 8002d5c:	f002 f894 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x20}, 1, 1000);
 8002d60:	2320      	movs	r3, #32
 8002d62:	763b      	strb	r3, [r7, #24]
 8002d64:	f107 0118 	add.w	r1, r7, #24
 8002d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4832      	ldr	r0, [pc, #200]	; (8002e38 <erase_flash_sector+0x1a8>)
 8002d70:	f004 fa17 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	753b      	strb	r3, [r7, #20]
 8002d7a:	f107 0114 	add.w	r1, r7, #20
 8002d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d82:	2201      	movs	r2, #1
 8002d84:	482c      	ldr	r0, [pc, #176]	; (8002e38 <erase_flash_sector+0x1a8>)
 8002d86:	f004 fa0c 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){(image_id_L*(0x10*page_count)) + (0x10*i)}, 1, 1000);
 8002d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d8e:	6a3a      	ldr	r2, [r7, #32]
 8002d90:	fb03 f202 	mul.w	r2, r3, r2
 8002d94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002d98:	4413      	add	r3, r2
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	743b      	strb	r3, [r7, #16]
 8002da2:	f107 0110 	add.w	r1, r7, #16
 8002da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002daa:	2201      	movs	r2, #1
 8002dac:	4822      	ldr	r0, [pc, #136]	; (8002e38 <erase_flash_sector+0x1a8>)
 8002dae:	f004 f9f8 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002db2:	2300      	movs	r3, #0
 8002db4:	733b      	strb	r3, [r7, #12]
 8002db6:	f107 010c 	add.w	r1, r7, #12
 8002dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	481d      	ldr	r0, [pc, #116]	; (8002e38 <erase_flash_sector+0x1a8>)
 8002dc2:	f004 f9ee 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dcc:	4819      	ldr	r0, [pc, #100]	; (8002e34 <erase_flash_sector+0x1a4>)
 8002dce:	f002 f85b 	bl	8004e88 <HAL_GPIO_WritePin>
		delay_us(10);
 8002dd2:	200a      	movs	r0, #10
 8002dd4:	f000 fa54 	bl	8003280 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dde:	4815      	ldr	r0, [pc, #84]	; (8002e34 <erase_flash_sector+0x1a4>)
 8002de0:	f002 f852 	bl	8004e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002de4:	2304      	movs	r3, #4
 8002de6:	723b      	strb	r3, [r7, #8]
 8002de8:	f107 0108 	add.w	r1, r7, #8
 8002dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df0:	2201      	movs	r2, #1
 8002df2:	4811      	ldr	r0, [pc, #68]	; (8002e38 <erase_flash_sector+0x1a8>)
 8002df4:	f004 f9d5 	bl	80071a2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dfe:	480d      	ldr	r0, [pc, #52]	; (8002e34 <erase_flash_sector+0x1a4>)
 8002e00:	f002 f842 	bl	8004e88 <HAL_GPIO_WritePin>
		delay_us(10);
 8002e04:	200a      	movs	r0, #10
 8002e06:	f000 fa3b 	bl	8003280 <delay_us>

		flash_wait_nobusy();
 8002e0a:	f7ff f89f 	bl	8001f4c <flash_wait_nobusy>
	for(uint8_t i = 0; i < page_count; i++)
 8002e0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002e12:	3301      	adds	r3, #1
 8002e14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e18:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002e1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f4ff af7e 	bcc.w	8002d22 <erase_flash_sector+0x92>
	}
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	3730      	adds	r7, #48	; 0x30
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	2000000b 	.word	0x2000000b
 8002e34:	48000400 	.word	0x48000400
 8002e38:	20000170 	.word	0x20000170

08002e3c <reset_flash_software>:

void reset_flash_software()
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002e42:	2200      	movs	r2, #0
 8002e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e48:	481a      	ldr	r0, [pc, #104]	; (8002eb4 <reset_flash_software+0x78>)
 8002e4a:	f002 f81d 	bl	8004e88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x66}, 1, 1000);
 8002e4e:	2366      	movs	r3, #102	; 0x66
 8002e50:	713b      	strb	r3, [r7, #4]
 8002e52:	1d39      	adds	r1, r7, #4
 8002e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4817      	ldr	r0, [pc, #92]	; (8002eb8 <reset_flash_software+0x7c>)
 8002e5c:	f004 f9a1 	bl	80071a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002e60:	2201      	movs	r2, #1
 8002e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e66:	4813      	ldr	r0, [pc, #76]	; (8002eb4 <reset_flash_software+0x78>)
 8002e68:	f002 f80e 	bl	8004e88 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f000 fa22 	bl	80032b6 <delay_100ns>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002e72:	2200      	movs	r2, #0
 8002e74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e78:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <reset_flash_software+0x78>)
 8002e7a:	f002 f805 	bl	8004e88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x99}, 1, 1000);
 8002e7e:	2399      	movs	r3, #153	; 0x99
 8002e80:	703b      	strb	r3, [r7, #0]
 8002e82:	4639      	mov	r1, r7
 8002e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e88:	2201      	movs	r2, #1
 8002e8a:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <reset_flash_software+0x7c>)
 8002e8c:	f004 f989 	bl	80071a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002e90:	2201      	movs	r2, #1
 8002e92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e96:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <reset_flash_software+0x78>)
 8002e98:	f001 fff6 	bl	8004e88 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f000 fa0a 	bl	80032b6 <delay_100ns>
	delay_us(1000);
 8002ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ea6:	f000 f9eb 	bl	8003280 <delay_us>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	48000400 	.word	0x48000400
 8002eb8:	20000170 	.word	0x20000170

08002ebc <my_MX_DSIHOST_DSI_Init>:
/*====================================flash function end====================================*/

/*====================================customized function start====================================*/
static void my_MX_DSIHOST_DSI_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b0ae      	sub	sp, #184	; 0xb8
 8002ec0:	af00      	add	r7, sp, #0
  DSI_PLLInitTypeDef PLLInit = {0};
 8002ec2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8002ece:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f006 fae4 	bl	80094a4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8002edc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
 8002eec:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	226c      	movs	r2, #108	; 0x6c
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f006 fad5 	bl	80094a4 <memset>
  hdsi.Instance = DSI;
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002efc:	4a6d      	ldr	r2, [pc, #436]	; (80030b4 <my_MX_DSIHOST_DSI_Init+0x1f8>)
 8002efe:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002f00:	4b6b      	ldr	r3, [pc, #428]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8002f06:	4b6a      	ldr	r3, [pc, #424]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f08:	2202      	movs	r2, #2
 8002f0a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8002f0c:	4b68      	ldr	r3, [pc, #416]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8002f12:	2332      	movs	r3, #50	; 0x32
 8002f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002f24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4861      	ldr	r0, [pc, #388]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f2c:	f000 ffbe 	bl	8003eac <HAL_DSI_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <my_MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8002f36:	f000 fa19 	bl	800336c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002f70:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002f74:	4619      	mov	r1, r3
 8002f76:	484e      	ldr	r0, [pc, #312]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f78:	f001 fc0b 	bl	8004792 <HAL_DSI_ConfigHostTimeouts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <my_MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8002f82:	f000 f9f3 	bl	800336c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8002f86:	2313      	movs	r3, #19
 8002f88:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8002f8e:	2309      	movs	r3, #9
 8002f90:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8002f92:	230a      	movs	r3, #10
 8002f94:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8002fa2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4841      	ldr	r0, [pc, #260]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002faa:	f001 fb88 	bl	80046be <HAL_DSI_ConfigPhyTimer>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <my_MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8002fb4:	f000 f9da 	bl	800336c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8002fb8:	f242 7110 	movw	r1, #10000	; 0x2710
 8002fbc:	483c      	ldr	r0, [pc, #240]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002fbe:	f001 fda4 	bl	8004b0a <HAL_DSI_SetLowPowerRXFilter>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <my_MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8002fc8:	f000 f9d0 	bl	800336c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4838      	ldr	r0, [pc, #224]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002fd0:	f001 f888 	bl	80040e4 <HAL_DSI_ConfigErrorMonitor>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <my_MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8002fda:	f000 f9c7 	bl	800336c <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8002fe2:	2305      	movs	r3, #5
 8002fe4:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8002fea:	2301      	movs	r3, #1
 8002fec:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8002fee:	2378      	movs	r3, #120	; 0x78
 8002ff0:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8003002:	2300      	movs	r3, #0
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = HSA;
 8003006:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = HBP;
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <my_MX_DSIHOST_DSI_Init+0x200>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = HSA+HBP+IMAGE_H+HFP;
 8003012:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <my_MX_DSIHOST_DSI_Init+0x200>)
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	4413      	add	r3, r2
 800301e:	461a      	mov	r2, r3
 8003020:	4b27      	ldr	r3, [pc, #156]	; (80030c0 <my_MX_DSIHOST_DSI_Init+0x204>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4413      	add	r3, r2
 8003026:	4a27      	ldr	r2, [pc, #156]	; (80030c4 <my_MX_DSIHOST_DSI_Init+0x208>)
 8003028:	8812      	ldrh	r2, [r2, #0]
 800302a:	4413      	add	r3, r2
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = VSA;
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <my_MX_DSIHOST_DSI_Init+0x20c>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = VBP;
 8003034:	4b25      	ldr	r3, [pc, #148]	; (80030cc <my_MX_DSIHOST_DSI_Init+0x210>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = VFP;
 800303a:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <my_MX_DSIHOST_DSI_Init+0x214>)
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = IMAGE_W;
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <my_MX_DSIHOST_DSI_Init+0x218>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8003046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 800304c:	231c      	movs	r3, #28
 800304e:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8003050:	2350      	movs	r3, #80	; 0x50
 8003052:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8003054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003058:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 800305a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800305e:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8003060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003064:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8003066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306a:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 800306c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003070:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8003072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003076:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	4619      	mov	r1, r3
 8003080:	480b      	ldr	r0, [pc, #44]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8003082:	f001 f914 	bl	80042ae <HAL_DSI_ConfigVideoMode>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <my_MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 800308c:	f000 f96e 	bl	800336c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8003090:	2100      	movs	r1, #0
 8003092:	4807      	ldr	r0, [pc, #28]	; (80030b0 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8003094:	f001 f8e3 	bl	800425e <HAL_DSI_SetGenericVCID>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <my_MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 800309e:	f000 f965 	bl	800336c <Error_Handler>
  }
  LCD_PowerOn();
 80030a2:	f7fe fa39 	bl	8001518 <LCD_PowerOn>
}
 80030a6:	bf00      	nop
 80030a8:	37b8      	adds	r7, #184	; 0xb8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200000ac 	.word	0x200000ac
 80030b4:	40016c00 	.word	0x40016c00
 80030b8:	20000010 	.word	0x20000010
 80030bc:	20000012 	.word	0x20000012
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000014 	.word	0x20000014
 80030c8:	20000016 	.word	0x20000016
 80030cc:	20000018 	.word	0x20000018
 80030d0:	2000001a 	.word	0x2000001a
 80030d4:	20000004 	.word	0x20000004

080030d8 <my_MX_LTDC_Init>:
static void my_MX_LTDC_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08e      	sub	sp, #56	; 0x38
 80030dc:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	2234      	movs	r2, #52	; 0x34
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f006 f9dd 	bl	80094a4 <memset>
  hltdc.Instance = LTDC;
 80030ea:	4b5a      	ldr	r3, [pc, #360]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 80030ec:	4a5a      	ldr	r2, [pc, #360]	; (8003258 <my_MX_LTDC_Init+0x180>)
 80030ee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 80030f0:	4b58      	ldr	r3, [pc, #352]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 80030f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030f6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 80030f8:	4b56      	ldr	r3, [pc, #344]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 80030fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003100:	4b54      	ldr	r3, [pc, #336]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003106:	4b53      	ldr	r3, [pc, #332]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = HSA-1;
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <my_MX_LTDC_Init+0x184>)
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	3b01      	subs	r3, #1
 8003112:	461a      	mov	r2, r3
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 8003116:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = VSA-1;
 8003118:	4b51      	ldr	r3, [pc, #324]	; (8003260 <my_MX_LTDC_Init+0x188>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	3b01      	subs	r3, #1
 800311e:	461a      	mov	r2, r3
 8003120:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 8003122:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = HSA+HBP-1;
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <my_MX_LTDC_Init+0x184>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	4b4e      	ldr	r3, [pc, #312]	; (8003264 <my_MX_LTDC_Init+0x18c>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	4413      	add	r3, r2
 8003130:	3b01      	subs	r3, #1
 8003132:	461a      	mov	r2, r3
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 8003136:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = VSA+VBP-1;
 8003138:	4b49      	ldr	r3, [pc, #292]	; (8003260 <my_MX_LTDC_Init+0x188>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <my_MX_LTDC_Init+0x190>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	4413      	add	r3, r2
 8003144:	3b01      	subs	r3, #1
 8003146:	461a      	mov	r2, r3
 8003148:	4b42      	ldr	r3, [pc, #264]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 800314a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = HSA+HBP+IMAGE_H-1;
 800314c:	4b43      	ldr	r3, [pc, #268]	; (800325c <my_MX_LTDC_Init+0x184>)
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b44      	ldr	r3, [pc, #272]	; (8003264 <my_MX_LTDC_Init+0x18c>)
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	4413      	add	r3, r2
 8003158:	461a      	mov	r2, r3
 800315a:	4b44      	ldr	r3, [pc, #272]	; (800326c <my_MX_LTDC_Init+0x194>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4413      	add	r3, r2
 8003160:	3b01      	subs	r3, #1
 8003162:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 8003164:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = VSA+VBP+IMAGE_W-1;
 8003166:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <my_MX_LTDC_Init+0x188>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <my_MX_LTDC_Init+0x190>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	4413      	add	r3, r2
 8003172:	461a      	mov	r2, r3
 8003174:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <my_MX_LTDC_Init+0x198>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4413      	add	r3, r2
 800317a:	3b01      	subs	r3, #1
 800317c:	4a35      	ldr	r2, [pc, #212]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 800317e:	6293      	str	r3, [r2, #40]	; 0x28
  hltdc.Init.TotalWidth = HSA+HBP+IMAGE_H+HFP-1;
 8003180:	4b36      	ldr	r3, [pc, #216]	; (800325c <my_MX_LTDC_Init+0x184>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4b37      	ldr	r3, [pc, #220]	; (8003264 <my_MX_LTDC_Init+0x18c>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	4413      	add	r3, r2
 800318c:	461a      	mov	r2, r3
 800318e:	4b37      	ldr	r3, [pc, #220]	; (800326c <my_MX_LTDC_Init+0x194>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4413      	add	r3, r2
 8003194:	4a37      	ldr	r2, [pc, #220]	; (8003274 <my_MX_LTDC_Init+0x19c>)
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	4413      	add	r3, r2
 800319a:	3b01      	subs	r3, #1
 800319c:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 800319e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hltdc.Init.TotalHeigh = VSA+VBP+IMAGE_W+VFP-1;
 80031a0:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <my_MX_LTDC_Init+0x188>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b30      	ldr	r3, [pc, #192]	; (8003268 <my_MX_LTDC_Init+0x190>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b30      	ldr	r3, [pc, #192]	; (8003270 <my_MX_LTDC_Init+0x198>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	4a30      	ldr	r2, [pc, #192]	; (8003278 <my_MX_LTDC_Init+0x1a0>)
 80031b6:	8812      	ldrh	r2, [r2, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	3b01      	subs	r3, #1
 80031bc:	4a25      	ldr	r2, [pc, #148]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 80031be:	6313      	str	r3, [r2, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 80031c2:	22ff      	movs	r2, #255	; 0xff
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 80031c8:	4b22      	ldr	r3, [pc, #136]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 80031ca:	22ff      	movs	r2, #255	; 0xff
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 80031d2:	22ff      	movs	r2, #255	; 0xff
 80031d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80031d8:	481e      	ldr	r0, [pc, #120]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 80031da:	f001 fe85 	bl	8004ee8 <HAL_LTDC_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <my_MX_LTDC_Init+0x110>
  {
    Error_Handler();
 80031e4:	f000 f8c2 	bl	800336c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = IMAGE_H;
 80031ec:	4b1f      	ldr	r3, [pc, #124]	; (800326c <my_MX_LTDC_Init+0x194>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = IMAGE_W;
 80031f6:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <my_MX_LTDC_Init+0x198>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80031fc:	2301      	movs	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003200:	23ff      	movs	r3, #255	; 0xff
 8003202:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800320e:	2305      	movs	r3, #5
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <my_MX_LTDC_Init+0x1a4>)
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = IMAGE_H;
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <my_MX_LTDC_Init+0x194>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = IMAGE_W;
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <my_MX_LTDC_Init+0x198>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8003222:	23ff      	movs	r3, #255	; 0xff
 8003224:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8003228:	23ff      	movs	r3, #255	; 0xff
 800322a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 800322e:	23ff      	movs	r3, #255	; 0xff
 8003230:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	2200      	movs	r2, #0
 8003238:	4619      	mov	r1, r3
 800323a:	4806      	ldr	r0, [pc, #24]	; (8003254 <my_MX_LTDC_Init+0x17c>)
 800323c:	f001 ffdc 	bl	80051f8 <HAL_LTDC_ConfigLayer>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <my_MX_LTDC_Init+0x172>
  {
    Error_Handler();
 8003246:	f000 f891 	bl	800336c <Error_Handler>
  }
}
 800324a:	bf00      	nop
 800324c:	3738      	adds	r7, #56	; 0x38
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	200000c8 	.word	0x200000c8
 8003258:	40016800 	.word	0x40016800
 800325c:	20000010 	.word	0x20000010
 8003260:	20000016 	.word	0x20000016
 8003264:	20000012 	.word	0x20000012
 8003268:	20000018 	.word	0x20000018
 800326c:	20000000 	.word	0x20000000
 8003270:	20000004 	.word	0x20000004
 8003274:	20000014 	.word	0x20000014
 8003278:	2000001a 	.word	0x2000001a
 800327c:	20064cc0 	.word	0x20064cc0

08003280 <delay_us>:
/*====================================customized function end====================================*/

void delay_us(int time)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	int i = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
	while (time--)
 800328c:	e007      	b.n	800329e <delay_us+0x1e>
	{
		i = 13;
 800328e:	230d      	movs	r3, #13
 8003290:	60fb      	str	r3, [r7, #12]
		while (i--);
 8003292:	bf00      	nop
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e5a      	subs	r2, r3, #1
 8003298:	60fa      	str	r2, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1fa      	bne.n	8003294 <delay_us+0x14>
	while (time--)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f2      	bne.n	800328e <delay_us+0xe>
	}
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <delay_100ns>:

void delay_100ns(int time)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
	int i = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
	while (time--)
 80032c2:	e007      	b.n	80032d4 <delay_100ns+0x1e>
	{
		i = 1;
 80032c4:	2301      	movs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
		while (i--);
 80032c8:	bf00      	nop
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	60fa      	str	r2, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1fa      	bne.n	80032ca <delay_100ns+0x14>
	while (time--)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f2      	bne.n	80032c4 <delay_100ns+0xe>
	}
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_GPIO_EXTI_Callback>:

int button_count = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fc:	d103      	bne.n	8003306 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		if(play_mode = 3){
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_GPIO_EXTI_Callback+0x68>)
 8003300:	2203      	movs	r2, #3
 8003302:	701a      	strb	r2, [r3, #0]
		}
		read_flash_page(&frame_buf_flash, Current_mode_config[Current_Picture*2]);//Current_mode_config[pic1 ,pic1 delay time ,pic2 ,pic2 delay time...]
		display_panel(&frame_buf_flash);
		Current_Picture++;
	}
}
 8003304:	e022      	b.n	800334c <HAL_GPIO_EXTI_Callback+0x60>
	else if(GPIO_Pin == GPIO_PIN_8 && Mode_changed == 0){
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330c:	d11e      	bne.n	800334c <HAL_GPIO_EXTI_Callback+0x60>
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11a      	bne.n	800334c <HAL_GPIO_EXTI_Callback+0x60>
		if(Picture_count <= Current_Picture ){
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_GPIO_EXTI_Callback+0x70>)
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_GPIO_EXTI_Callback+0x74>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d802      	bhi.n	8003328 <HAL_GPIO_EXTI_Callback+0x3c>
			Current_Picture = 0;
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_GPIO_EXTI_Callback+0x74>)
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
		read_flash_page(&frame_buf_flash, Current_mode_config[Current_Picture*2]);//Current_mode_config[pic1 ,pic1 delay time ,pic2 ,pic2 delay time...]
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_GPIO_EXTI_Callback+0x74>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <HAL_GPIO_EXTI_Callback+0x78>)
 8003330:	5cd3      	ldrb	r3, [r2, r3]
 8003332:	4619      	mov	r1, r3
 8003334:	480c      	ldr	r0, [pc, #48]	; (8003368 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003336:	f7ff f9d9 	bl	80026ec <read_flash_page>
		display_panel(&frame_buf_flash);
 800333a:	480b      	ldr	r0, [pc, #44]	; (8003368 <HAL_GPIO_EXTI_Callback+0x7c>)
 800333c:	f7fe fd0e 	bl	8001d5c <display_panel>
		Current_Picture++;
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <HAL_GPIO_EXTI_Callback+0x74>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_GPIO_EXTI_Callback+0x74>)
 800334a:	701a      	strb	r2, [r3, #0]
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20064cbc 	.word	0x20064cbc
 8003358:	20000020 	.word	0x20000020
 800335c:	20094d43 	.word	0x20094d43
 8003360:	20094d42 	.word	0x20094d42
 8003364:	20094d38 	.word	0x20094d38
 8003368:	200302cc 	.word	0x200302cc

0800336c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
}
 8003372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003374:	e7fe      	b.n	8003374 <Error_Handler+0x8>
	...

08003378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <HAL_MspInit+0x44>)
 8003380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003382:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <HAL_MspInit+0x44>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6613      	str	r3, [r2, #96]	; 0x60
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <HAL_MspInit+0x44>)
 800338c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_MspInit+0x44>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <HAL_MspInit+0x44>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6593      	str	r3, [r2, #88]	; 0x58
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_MspInit+0x44>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000

080033c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_DMA2D_MspInit+0x38>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10b      	bne.n	80033ea <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_DMA2D_MspInit+0x3c>)
 80033d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_DMA2D_MspInit+0x3c>)
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	6493      	str	r3, [r2, #72]	; 0x48
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_DMA2D_MspInit+0x3c>)
 80033e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	4002b000 	.word	0x4002b000
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b0aa      	sub	sp, #168	; 0xa8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	229c      	movs	r2, #156	; 0x9c
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f006 f847 	bl	80094a4 <memset>
  if(hdsi->Instance==DSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_DSI_MspInit+0x60>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d11b      	bne.n	8003458 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8003420:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003424:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8003426:	2300      	movs	r3, #0
 8003428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	4618      	mov	r0, r3
 8003432:	f003 f89b 	bl	800656c <HAL_RCCEx_PeriphCLKConfig>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 800343c:	f7ff ff96 	bl	800336c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_DSI_MspInit+0x64>)
 8003442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003444:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_DSI_MspInit+0x64>)
 8003446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800344a:	6613      	str	r3, [r2, #96]	; 0x60
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_DSI_MspInit+0x64>)
 800344e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8003458:	bf00      	nop
 800345a:	37a8      	adds	r7, #168	; 0xa8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40016c00 	.word	0x40016c00
 8003464:	40021000 	.word	0x40021000

08003468 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b0aa      	sub	sp, #168	; 0xa8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	229c      	movs	r2, #156	; 0x9c
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f006 f813 	bl	80094a4 <memset>
  if(hltdc->Instance==LTDC)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_LTDC_MspInit+0x90>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d133      	bne.n	80034f0 <HAL_LTDC_MspInit+0x88>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003488:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800348c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 800348e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003492:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8003496:	2303      	movs	r3, #3
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 800349a:	2301      	movs	r3, #1
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 800349e:	2308      	movs	r3, #8
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 80034a2:	2302      	movs	r3, #2
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 80034a6:	2302      	movs	r3, #2
 80034a8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 80034aa:	2302      	movs	r3, #2
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 80034ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034b2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 f857 	bl	800656c <HAL_RCCEx_PeriphCLKConfig>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 80034c4:	f7ff ff52 	bl	800336c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <HAL_LTDC_MspInit+0x94>)
 80034ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034cc:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <HAL_LTDC_MspInit+0x94>)
 80034ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034d2:	6613      	str	r3, [r2, #96]	; 0x60
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_LTDC_MspInit+0x94>)
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2100      	movs	r1, #0
 80034e4:	205b      	movs	r0, #91	; 0x5b
 80034e6:	f000 fb04 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80034ea:	205b      	movs	r0, #91	; 0x5b
 80034ec:	f000 fb1d 	bl	8003b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80034f0:	bf00      	nop
 80034f2:	37a8      	adds	r7, #168	; 0xa8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40016800 	.word	0x40016800
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	; 0x30
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	f107 031c 	add.w	r3, r7, #28
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a42      	ldr	r2, [pc, #264]	; (8003628 <HAL_SPI_MspInit+0x128>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d128      	bne.n	8003574 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003522:	4b42      	ldr	r3, [pc, #264]	; (800362c <HAL_SPI_MspInit+0x12c>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	4a41      	ldr	r2, [pc, #260]	; (800362c <HAL_SPI_MspInit+0x12c>)
 8003528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352c:	6593      	str	r3, [r2, #88]	; 0x58
 800352e:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_SPI_MspInit+0x12c>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <HAL_SPI_MspInit+0x12c>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <HAL_SPI_MspInit+0x12c>)
 8003540:	f043 0308 	orr.w	r3, r3, #8
 8003544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003546:	4b39      	ldr	r3, [pc, #228]	; (800362c <HAL_SPI_MspInit+0x12c>)
 8003548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3;
 8003552:	231a      	movs	r3, #26
 8003554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355e:	2303      	movs	r3, #3
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003562:	2305      	movs	r3, #5
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003566:	f107 031c 	add.w	r3, r7, #28
 800356a:	4619      	mov	r1, r3
 800356c:	4830      	ldr	r0, [pc, #192]	; (8003630 <HAL_SPI_MspInit+0x130>)
 800356e:	f001 faf9 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003572:	e054      	b.n	800361e <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_SPI_MspInit+0x134>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d14f      	bne.n	800361e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800357e:	4b2b      	ldr	r3, [pc, #172]	; (800362c <HAL_SPI_MspInit+0x12c>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	4a2a      	ldr	r2, [pc, #168]	; (800362c <HAL_SPI_MspInit+0x12c>)
 8003584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003588:	6593      	str	r3, [r2, #88]	; 0x58
 800358a:	4b28      	ldr	r3, [pc, #160]	; (800362c <HAL_SPI_MspInit+0x12c>)
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003596:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_SPI_MspInit+0x12c>)
 8003598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359a:	4a24      	ldr	r2, [pc, #144]	; (800362c <HAL_SPI_MspInit+0x12c>)
 800359c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035a2:	4b22      	ldr	r3, [pc, #136]	; (800362c <HAL_SPI_MspInit+0x12c>)
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80035ae:	f002 f8f5 	bl	800579c <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b2:	4b1e      	ldr	r3, [pc, #120]	; (800362c <HAL_SPI_MspInit+0x12c>)
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_SPI_MspInit+0x12c>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_SPI_MspInit+0x12c>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80035ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	2302      	movs	r3, #2
 80035d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	2303      	movs	r3, #3
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035dc:	2306      	movs	r3, #6
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035e0:	f107 031c 	add.w	r3, r7, #28
 80035e4:	4619      	mov	r1, r3
 80035e6:	4814      	ldr	r0, [pc, #80]	; (8003638 <HAL_SPI_MspInit+0x138>)
 80035e8:	f001 fabc 	bl	8004b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80035ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fa:	2303      	movs	r3, #3
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035fe:	2306      	movs	r3, #6
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003602:	f107 031c 	add.w	r3, r7, #28
 8003606:	4619      	mov	r1, r3
 8003608:	480c      	ldr	r0, [pc, #48]	; (800363c <HAL_SPI_MspInit+0x13c>)
 800360a:	f001 faab 	bl	8004b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2100      	movs	r1, #0
 8003612:	2033      	movs	r0, #51	; 0x33
 8003614:	f000 fa6d 	bl	8003af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003618:	2033      	movs	r0, #51	; 0x33
 800361a:	f000 fa86 	bl	8003b2a <HAL_NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3730      	adds	r7, #48	; 0x30
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40003800 	.word	0x40003800
 800362c:	40021000 	.word	0x40021000
 8003630:	48000c00 	.word	0x48000c00
 8003634:	40003c00 	.word	0x40003c00
 8003638:	48001800 	.word	0x48001800
 800363c:	48000800 	.word	0x48000800

08003640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b0b0      	sub	sp, #192	; 0xc0
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003658:	f107 0310 	add.w	r3, r7, #16
 800365c:	229c      	movs	r2, #156	; 0x9c
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f005 ff1f 	bl	80094a4 <memset>
  if(huart->Instance==UART4)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <HAL_UART_MspInit+0xb0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d13b      	bne.n	80036e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003670:	2308      	movs	r3, #8
 8003672:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003674:	2300      	movs	r3, #0
 8003676:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003678:	f107 0310 	add.w	r3, r7, #16
 800367c:	4618      	mov	r0, r3
 800367e:	f002 ff75 	bl	800656c <HAL_RCCEx_PeriphCLKConfig>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003688:	f7ff fe70 	bl	800336c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_UART_MspInit+0xb4>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	4a18      	ldr	r2, [pc, #96]	; (80036f4 <HAL_UART_MspInit+0xb4>)
 8003692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003696:	6593      	str	r3, [r2, #88]	; 0x58
 8003698:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <HAL_UART_MspInit+0xb4>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <HAL_UART_MspInit+0xb4>)
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <HAL_UART_MspInit+0xb4>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <HAL_UART_MspInit+0xb4>)
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036bc:	2303      	movs	r3, #3
 80036be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036d4:	2308      	movs	r3, #8
 80036d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036de:	4619      	mov	r1, r3
 80036e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036e4:	f001 fa3e 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80036e8:	bf00      	nop
 80036ea:	37c0      	adds	r7, #192	; 0xc0
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40004c00 	.word	0x40004c00
 80036f4:	40021000 	.word	0x40021000

080036f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036fc:	e7fe      	b.n	80036fc <NMI_Handler+0x4>

080036fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003702:	e7fe      	b.n	8003702 <HardFault_Handler+0x4>

08003704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003708:	e7fe      	b.n	8003708 <MemManage_Handler+0x4>

0800370a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800370e:	e7fe      	b.n	800370e <BusFault_Handler+0x4>

08003710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003714:	e7fe      	b.n	8003714 <UsageFault_Handler+0x4>

08003716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003744:	f000 f8b6 	bl	80038b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	bd80      	pop	{r7, pc}

0800374c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sync_Pin);
 8003750:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003754:	f001 fbb0 	bl	8004eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}

0800375c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pic_sw_Pin);
 8003760:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003764:	f001 fba8 	bl	8004eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003768:	bf00      	nop
 800376a:	bd80      	pop	{r7, pc}

0800376c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <SPI3_IRQHandler+0x10>)
 8003772:	f004 fb27 	bl	8007dc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	200001d4 	.word	0x200001d4

08003780 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <LTDC_IRQHandler+0x10>)
 8003786:	f001 fc7f 	bl	8005088 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	200000c8 	.word	0x200000c8

08003794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <SystemInit+0x20>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	4a05      	ldr	r2, [pc, #20]	; (80037b4 <SystemInit+0x20>)
 80037a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80037b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037bc:	f7ff ffea 	bl	8003794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037c0:	480c      	ldr	r0, [pc, #48]	; (80037f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80037c2:	490d      	ldr	r1, [pc, #52]	; (80037f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037c4:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <LoopForever+0xe>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037c8:	e002      	b.n	80037d0 <LoopCopyDataInit>

080037ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ce:	3304      	adds	r3, #4

080037d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037d4:	d3f9      	bcc.n	80037ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037d8:	4c0a      	ldr	r4, [pc, #40]	; (8003804 <LoopForever+0x16>)
  movs r3, #0
 80037da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037dc:	e001      	b.n	80037e2 <LoopFillZerobss>

080037de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e0:	3204      	adds	r2, #4

080037e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037e4:	d3fb      	bcc.n	80037de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037e6:	f005 fe39 	bl	800945c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037ea:	f7fc fe89 	bl	8000500 <main>

080037ee <LoopForever>:

LoopForever:
    b LoopForever
 80037ee:	e7fe      	b.n	80037ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80037f0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80037f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037f8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80037fc:	080095cc 	.word	0x080095cc
  ldr r2, =_sbss
 8003800:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8003804:	20094d4c 	.word	0x20094d4c

08003808 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003808:	e7fe      	b.n	8003808 <ADC1_IRQHandler>

0800380a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003814:	2003      	movs	r0, #3
 8003816:	f000 f961 	bl	8003adc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800381a:	2002      	movs	r0, #2
 800381c:	f000 f80e 	bl	800383c <HAL_InitTick>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	71fb      	strb	r3, [r7, #7]
 800382a:	e001      	b.n	8003830 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800382c:	f7ff fda4 	bl	8003378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003830:	79fb      	ldrb	r3, [r7, #7]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <HAL_InitTick+0x6c>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d023      	beq.n	8003898 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003850:	4b16      	ldr	r3, [pc, #88]	; (80038ac <HAL_InitTick+0x70>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <HAL_InitTick+0x6c>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800385e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f96d 	bl	8003b46 <HAL_SYSTICK_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b0f      	cmp	r3, #15
 8003876:	d809      	bhi.n	800388c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003878:	2200      	movs	r2, #0
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	f000 f937 	bl	8003af2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003884:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <HAL_InitTick+0x74>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	e007      	b.n	800389c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e004      	b.n	800389c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e001      	b.n	800389c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	2000002c 	.word	0x2000002c
 80038ac:	20000024 	.word	0x20000024
 80038b0:	20000028 	.word	0x20000028

080038b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_IncTick+0x20>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_IncTick+0x24>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4413      	add	r3, r2
 80038c4:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <HAL_IncTick+0x24>)
 80038c6:	6013      	str	r3, [r2, #0]
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	2000002c 	.word	0x2000002c
 80038d8:	20094d48 	.word	0x20094d48

080038dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return uwTick;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_GetTick+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20094d48 	.word	0x20094d48

080038f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038fc:	f7ff ffee 	bl	80038dc <HAL_GetTick>
 8003900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d005      	beq.n	800391a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_Delay+0x44>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800391a:	bf00      	nop
 800391c:	f7ff ffde 	bl	80038dc <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	429a      	cmp	r2, r3
 800392a:	d8f7      	bhi.n	800391c <HAL_Delay+0x28>
  {
  }
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	2000002c 	.word	0x2000002c

0800393c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	60d3      	str	r3, [r2, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__NVIC_GetPriorityGrouping+0x18>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f003 0307 	and.w	r3, r3, #7
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db0b      	blt.n	80039ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4907      	ldr	r1, [pc, #28]	; (80039d8 <__NVIC_EnableIRQ+0x38>)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2001      	movs	r0, #1
 80039c2:	fa00 f202 	lsl.w	r2, r0, r2
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100

080039dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	; (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f1c3 0307 	rsb	r3, r3, #7
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf28      	it	cs
 8003a4e:	2304      	movcs	r3, #4
 8003a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d902      	bls.n	8003a60 <NVIC_EncodePriority+0x30>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3b03      	subs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <NVIC_EncodePriority+0x32>
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	401a      	ands	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43d9      	mvns	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	4313      	orrs	r3, r2
         );
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa8:	d301      	bcc.n	8003aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e00f      	b.n	8003ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <SysTick_Config+0x40>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ab6:	210f      	movs	r1, #15
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	f7ff ff8e 	bl	80039dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <SysTick_Config+0x40>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac6:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <SysTick_Config+0x40>)
 8003ac8:	2207      	movs	r2, #7
 8003aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	e000e010 	.word	0xe000e010

08003adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff29 	bl	800393c <__NVIC_SetPriorityGrouping>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b04:	f7ff ff3e 	bl	8003984 <__NVIC_GetPriorityGrouping>
 8003b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f7ff ff8e 	bl	8003a30 <NVIC_EncodePriority>
 8003b14:	4602      	mov	r2, r0
 8003b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff5d 	bl	80039dc <__NVIC_SetPriority>
}
 8003b22:	bf00      	nop
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	4603      	mov	r3, r0
 8003b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff31 	bl	80039a0 <__NVIC_EnableIRQ>
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff ffa2 	bl	8003a98 <SysTick_Config>
 8003b54:	4603      	mov	r3, r0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d005      	beq.n	8003b82 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	e047      	b.n	8003c12 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 020e 	bic.w	r2, r2, #14
 8003b90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f003 021c 	and.w	r2, r3, #28
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bce:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bf0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
    }
  }
  return status;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e053      	b.n	8003cd6 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fbbc 	bl	80033c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
#if defined(DMA2D_LINE_OFFSET_MODE_SUPPORT)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6851      	ldr	r1, [r2, #4]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	69d2      	ldr	r2, [r2, #28]
 8003c66:	4311      	orrs	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
#endif /* DMA2D_LINE_OFFSET_MODE_SUPPORT */

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
#if defined(DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c76:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6891      	ldr	r1, [r2, #8]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6992      	ldr	r2, [r2, #24]
 8003c86:	4311      	orrs	r1, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6353      	str	r3, [r2, #52]	; 0x34
#else
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
#endif /* DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT */

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68d1      	ldr	r1, [r2, #12]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	051a      	lsls	r2, r3, #20
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	055b      	lsls	r3, r3, #21
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_DMA2D_ConfigLayer+0x20>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e084      	b.n	8003e0a <HAL_DMA2D_ConfigLayer+0x12a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	3328      	adds	r3, #40	; 0x28
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	4413      	add	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d34:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003d40:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <HAL_DMA2D_ConfigLayer+0x138>)
 8003d42:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b0a      	cmp	r3, #10
 8003d4a:	d003      	beq.n	8003d54 <HAL_DMA2D_ConfigLayer+0x74>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b09      	cmp	r3, #9
 8003d52:	d107      	bne.n	8003d64 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e005      	b.n	8003d70 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d120      	bne.n	8003db8 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	ea02 0103 	and.w	r1, r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b0a      	cmp	r3, #10
 8003d9e:	d003      	beq.n	8003da8 <HAL_DMA2D_ConfigLayer+0xc8>
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b09      	cmp	r3, #9
 8003da6:	d127      	bne.n	8003df8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003db4:	629a      	str	r2, [r3, #40]	; 0x28
 8003db6:	e01f      	b.n	8003df8 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	ea02 0103 	and.w	r1, r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b0a      	cmp	r3, #10
 8003de0:	d003      	beq.n	8003dea <HAL_DMA2D_ConfigLayer+0x10a>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b09      	cmp	r3, #9
 8003de8:	d106      	bne.n	8003df8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003df6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	ff33000f 	.word	0xff33000f

08003e1c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	019a      	lsls	r2, r3, #6
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	431a      	orrs	r2, r3
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	041b      	lsls	r3, r3, #16
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e5c:	f7ff fd3e 	bl	80038dc <HAL_GetTick>
 8003e60:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003e62:	e009      	b.n	8003e78 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003e64:	f7ff fd3a 	bl	80038dc <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e72:	d901      	bls.n	8003e78 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e015      	b.n	8003ea4 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0ee      	beq.n	8003e64 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	019a      	lsls	r2, r3, #6
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	ea42 0103 	orr.w	r1, r2, r3
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	041a      	lsls	r2, r3, #16
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e10b      	b.n	80040d8 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	7c5b      	ldrb	r3, [r3, #17]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff fa98 	bl	8003400 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003eea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003efe:	f7ff fced 	bl	80038dc <HAL_GetTick>
 8003f02:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f04:	e009      	b.n	8003f1a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f06:	f7ff fce9 	bl	80038dc <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f14:	d901      	bls.n	8003f1a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0de      	b.n	80040d8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ed      	beq.n	8003f06 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003f3a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003f3e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003f56:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003f5e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003f92:	2001      	movs	r0, #1
 8003f94:	f7ff fcae 	bl	80038f4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f98:	f7ff fca0 	bl	80038dc <HAL_GetTick>
 8003f9c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003f9e:	e009      	b.n	8003fb4 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003fa0:	f7ff fc9c 	bl	80038dc <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fae:	d901      	bls.n	8003fb4 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e091      	b.n	80040d8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ed      	beq.n	8003fa0 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0206 	orr.w	r2, r2, #6
 8003fd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0203 	bic.w	r2, r2, #3
 8003fe8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0203 	bic.w	r2, r2, #3
 8004016:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800403e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_DSI_Init+0x1b4>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	e000      	b.n	8004062 <HAL_DSI_Init+0x1b6>
 8004060:	2301      	movs	r3, #1
 8004062:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <HAL_DSI_Init+0x234>)
 8004068:	fb03 f202 	mul.w	r2, r3, r2
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	409a      	lsls	r2, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004098:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	003d0900 	.word	0x003d0900

080040e4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7c1b      	ldrb	r3, [r3, #16]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_DSI_ConfigErrorMonitor+0x16>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0ab      	b.n	8004252 <HAL_DSI_ConfigErrorMonitor+0x16e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2200      	movs	r2, #0
 8004110:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004134:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004138:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004156:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0202 	orr.w	r2, r2, #2
 8004192:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 020c 	orr.w	r2, r2, #12
 80041b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0210 	orr.w	r2, r2, #16
 80041ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0220 	orr.w	r2, r2, #32
 80041ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004228:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004246:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7c1b      	ldrb	r3, [r3, #16]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_DSI_SetGenericVCID+0x16>
 8004270:	2302      	movs	r3, #2
 8004272:	e016      	b.n	80042a2 <HAL_DSI_SetGenericVCID+0x44>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0203 	bic.w	r2, r2, #3
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7c1b      	ldrb	r3, [r3, #16]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_DSI_ConfigVideoMode+0x16>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e1f6      	b.n	80046b2 <HAL_DSI_ConfigVideoMode+0x404>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0203 	bic.w	r2, r2, #3
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800431e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004322:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004344:	f023 031f 	bic.w	r3, r3, #31
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800436a:	f023 031f 	bic.w	r3, r3, #31
 800436e:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0203 	bic.w	r2, r2, #3
 8004390:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68d9      	ldr	r1, [r3, #12]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0207 	bic.w	r2, r2, #7
 80043b2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6959      	ldr	r1, [r3, #20]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 020f 	bic.w	r2, r2, #15
 80043e0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6919      	ldr	r1, [r3, #16]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 020e 	bic.w	r2, r2, #14
 8004404:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	005a      	lsls	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d110      	bne.n	800444a <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004436:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6919      	ldr	r1, [r3, #16]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004458:	f023 030f 	bic.w	r3, r3, #15
 800445c:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800447e:	f023 030f 	bic.w	r3, r3, #15
 8004482:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044a8:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044f0:	f023 0303 	bic.w	r3, r3, #3
 80044f4:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800453c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004540:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004562:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004584:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6999      	ldr	r1, [r3, #24]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004590:	041a      	lsls	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045a8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6999      	ldr	r1, [r3, #24]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800460e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7c1b      	ldrb	r3, [r3, #16]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_DSI_ConfigPhyTimer+0x16>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e058      	b.n	8004786 <HAL_DSI_ConfigPhyTimer+0xc8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4293      	cmp	r3, r2
 80046e4:	bf38      	it	cc
 80046e6:	4613      	movcc	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80046fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	041a      	lsls	r2, r3, #16
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004728:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004762:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	7c1b      	ldrb	r3, [r3, #16]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_DSI_ConfigHostTimeouts+0x16>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e0b4      	b.n	8004912 <HAL_DSI_ConfigHostTimeouts+0x180>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80047bc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6899      	ldr	r1, [r3, #8]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	021a      	lsls	r2, r3, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b292      	uxth	r2, r2
 80047de:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	041a      	lsls	r2, r3, #16
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	041b      	lsls	r3, r3, #16
 8004802:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	041b      	lsls	r3, r3, #16
 8004872:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	0c1b      	lsrs	r3, r3, #16
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	0c1b      	lsrs	r3, r3, #16
 80048ee:	041b      	lsls	r3, r3, #16
 80048f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	7c1b      	ldrb	r3, [r3, #16]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_DSI_Start+0x14>
 800492e:	2302      	movs	r3, #2
 8004930:	e02b      	b.n	800498a <HAL_DSI_Start+0x6c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	605a      	str	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0208 	orr.w	r2, r2, #8
 800496e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b088      	sub	sp, #32
 800499a:	af02      	add	r7, sp, #8
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	7c1b      	ldrb	r3, [r3, #16]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_DSI_ShortWrite+0x1a>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e010      	b.n	80049d2 <HAL_DSI_ShortWrite+0x3c>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff fa44 	bl	8003e4e <DSI_ShortWrite>
 80049c6:	4603      	mov	r3, r0
 80049c8:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	741a      	strb	r2, [r3, #16]

  return status;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b08c      	sub	sp, #48	; 0x30
 80049de:	af02      	add	r7, sp, #8
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80049e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ea:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	7c1b      	ldrb	r3, [r3, #16]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_DSI_LongWrite+0x1e>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e084      	b.n	8004b02 <HAL_DSI_LongWrite+0x128>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80049fe:	f7fe ff6d 	bl	80038dc <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004a04:	e00c      	b.n	8004a20 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004a06:	f7fe ff69 	bl	80038dc <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a14:	d904      	bls.n	8004a20 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e070      	b.n	8004b02 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0eb      	beq.n	8004a06 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	bf28      	it	cs
 8004a38:	2303      	movcs	r3, #3
 8004a3a:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	e00f      	b.n	8004a62 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	4413      	add	r3, r2
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	623b      	str	r3, [r7, #32]
 8004a62:	6a3a      	ldr	r2, [r7, #32]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3eb      	bcc.n	8004a42 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004a82:	e028      	b.n	8004ad6 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	bf28      	it	cs
 8004a8a:	2304      	movcs	r3, #4
 8004a8c:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	e00e      	b.n	8004ab6 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	623b      	str	r3, [r7, #32]
 8004ab6:	6a3a      	ldr	r2, [r7, #32]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3ec      	bcc.n	8004a98 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1d3      	bne.n	8004a84 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004ae4:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	f7ff f991 	bl	8003e1c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3728      	adds	r7, #40	; 0x28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7c1b      	ldrb	r3, [r3, #16]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e01b      	b.n	8004b58 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004b36:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	065a      	lsls	r2, r3, #25
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b72:	e166      	b.n	8004e42 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8158 	beq.w	8004e3c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d005      	beq.n	8004ba4 <HAL_GPIO_Init+0x40>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d130      	bne.n	8004c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	2203      	movs	r2, #3
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bda:	2201      	movs	r2, #1
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	091b      	lsrs	r3, r3, #4
 8004bf0:	f003 0201 	and.w	r2, r3, #1
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d017      	beq.n	8004c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d123      	bne.n	8004c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	08da      	lsrs	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3208      	adds	r2, #8
 8004c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	220f      	movs	r2, #15
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	08da      	lsrs	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3208      	adds	r2, #8
 8004c90:	6939      	ldr	r1, [r7, #16]
 8004c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4013      	ands	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0203 	and.w	r2, r3, #3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80b2 	beq.w	8004e3c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd8:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_GPIO_Init+0x2fc>)
 8004cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cdc:	4a60      	ldr	r2, [pc, #384]	; (8004e60 <HAL_GPIO_Init+0x2fc>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8004ce4:	4b5e      	ldr	r3, [pc, #376]	; (8004e60 <HAL_GPIO_Init+0x2fc>)
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cf0:	4a5c      	ldr	r2, [pc, #368]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	089b      	lsrs	r3, r3, #2
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	220f      	movs	r2, #15
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d1a:	d02b      	beq.n	8004d74 <HAL_GPIO_Init+0x210>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a52      	ldr	r2, [pc, #328]	; (8004e68 <HAL_GPIO_Init+0x304>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d025      	beq.n	8004d70 <HAL_GPIO_Init+0x20c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a51      	ldr	r2, [pc, #324]	; (8004e6c <HAL_GPIO_Init+0x308>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d01f      	beq.n	8004d6c <HAL_GPIO_Init+0x208>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a50      	ldr	r2, [pc, #320]	; (8004e70 <HAL_GPIO_Init+0x30c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d019      	beq.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a4f      	ldr	r2, [pc, #316]	; (8004e74 <HAL_GPIO_Init+0x310>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <HAL_GPIO_Init+0x200>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a4e      	ldr	r2, [pc, #312]	; (8004e78 <HAL_GPIO_Init+0x314>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00d      	beq.n	8004d60 <HAL_GPIO_Init+0x1fc>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a4d      	ldr	r2, [pc, #308]	; (8004e7c <HAL_GPIO_Init+0x318>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <HAL_GPIO_Init+0x1f8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a4c      	ldr	r2, [pc, #304]	; (8004e80 <HAL_GPIO_Init+0x31c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d101      	bne.n	8004d58 <HAL_GPIO_Init+0x1f4>
 8004d54:	2307      	movs	r3, #7
 8004d56:	e00e      	b.n	8004d76 <HAL_GPIO_Init+0x212>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	e00c      	b.n	8004d76 <HAL_GPIO_Init+0x212>
 8004d5c:	2306      	movs	r3, #6
 8004d5e:	e00a      	b.n	8004d76 <HAL_GPIO_Init+0x212>
 8004d60:	2305      	movs	r3, #5
 8004d62:	e008      	b.n	8004d76 <HAL_GPIO_Init+0x212>
 8004d64:	2304      	movs	r3, #4
 8004d66:	e006      	b.n	8004d76 <HAL_GPIO_Init+0x212>
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e004      	b.n	8004d76 <HAL_GPIO_Init+0x212>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e002      	b.n	8004d76 <HAL_GPIO_Init+0x212>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <HAL_GPIO_Init+0x212>
 8004d74:	2300      	movs	r3, #0
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	f002 0203 	and.w	r2, r2, #3
 8004d7c:	0092      	lsls	r2, r2, #2
 8004d7e:	4093      	lsls	r3, r2
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d86:	4937      	ldr	r1, [pc, #220]	; (8004e64 <HAL_GPIO_Init+0x300>)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d94:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <HAL_GPIO_Init+0x320>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4013      	ands	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004db8:	4a32      	ldr	r2, [pc, #200]	; (8004e84 <HAL_GPIO_Init+0x320>)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004dbe:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <HAL_GPIO_Init+0x320>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004de2:	4a28      	ldr	r2, [pc, #160]	; (8004e84 <HAL_GPIO_Init+0x320>)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004de8:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <HAL_GPIO_Init+0x320>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <HAL_GPIO_Init+0x320>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <HAL_GPIO_Init+0x320>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e36:	4a13      	ldr	r2, [pc, #76]	; (8004e84 <HAL_GPIO_Init+0x320>)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f47f ae91 	bne.w	8004b74 <HAL_GPIO_Init+0x10>
  }
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40010000 	.word	0x40010000
 8004e68:	48000400 	.word	0x48000400
 8004e6c:	48000800 	.word	0x48000800
 8004e70:	48000c00 	.word	0x48000c00
 8004e74:	48001000 	.word	0x48001000
 8004e78:	48001400 	.word	0x48001400
 8004e7c:	48001800 	.word	0x48001800
 8004e80:	48001c00 	.word	0x48001c00
 8004e84:	40010400 	.word	0x40010400

08004e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	807b      	strh	r3, [r7, #2]
 8004e94:	4613      	mov	r3, r2
 8004e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e98:	787b      	ldrb	r3, [r7, #1]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e9e:	887a      	ldrh	r2, [r7, #2]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ea4:	e002      	b.n	8004eac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ea6:	887a      	ldrh	r2, [r7, #2]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ec2:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d006      	beq.n	8004edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ece:	4a05      	ldr	r2, [pc, #20]	; (8004ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ed4:	88fb      	ldrh	r3, [r7, #6]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fa08 	bl	80032ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40010400 	.word	0x40010400

08004ee8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e0bf      	b.n	800507a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fe faaa 	bl	8003468 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004f2a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6999      	ldr	r1, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f40:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b4a      	ldr	r3, [pc, #296]	; (8005084 <HAL_LTDC_Init+0x19c>)
 8004f5c:	400b      	ands	r3, r1
 8004f5e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6899      	ldr	r1, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68d9      	ldr	r1, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4b3e      	ldr	r3, [pc, #248]	; (8005084 <HAL_LTDC_Init+0x19c>)
 8004f8a:	400b      	ands	r3, r1
 8004f8c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68d9      	ldr	r1, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6919      	ldr	r1, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b33      	ldr	r3, [pc, #204]	; (8005084 <HAL_LTDC_Init+0x19c>)
 8004fb8:	400b      	ands	r3, r1
 8004fba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6919      	ldr	r1, [r3, #16]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6959      	ldr	r1, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b27      	ldr	r3, [pc, #156]	; (8005084 <HAL_LTDC_Init+0x19c>)
 8004fe6:	400b      	ands	r3, r1
 8004fe8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6959      	ldr	r1, [r3, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0206 	orr.w	r2, r2, #6
 8005056:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	f000f800 	.word	0xf000f800

08005088 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d023      	beq.n	80050f2 <HAL_LTDC_IRQHandler+0x6a>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01e      	beq.n	80050f2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0204 	bic.w	r2, r2, #4
 80050c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2204      	movs	r2, #4
 80050ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050d2:	f043 0201 	orr.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2204      	movs	r2, #4
 80050e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f86f 	bl	80051d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d023      	beq.n	8005144 <HAL_LTDC_IRQHandler+0xbc>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01e      	beq.n	8005144 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0202 	bic.w	r2, r2, #2
 8005114:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2202      	movs	r2, #2
 800511c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005124:	f043 0202 	orr.w	r2, r3, #2
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2204      	movs	r2, #4
 8005132:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f846 	bl	80051d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01b      	beq.n	8005186 <HAL_LTDC_IRQHandler+0xfe>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d016      	beq.n	8005186 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2201      	movs	r2, #1
 800516e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7fc fe67 	bl	8001e54 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <HAL_LTDC_IRQHandler+0x140>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d016      	beq.n	80051c8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0208 	bic.w	r2, r2, #8
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2208      	movs	r2, #8
 80051b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f80e 	bl	80051e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051f8:	b5b0      	push	{r4, r5, r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_LTDC_ConfigLayer+0x1a>
 800520e:	2302      	movs	r3, #2
 8005210:	e02c      	b.n	800526c <HAL_LTDC_ConfigLayer+0x74>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2134      	movs	r1, #52	; 0x34
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	4413      	add	r3, r2
 800522e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4614      	mov	r4, r2
 8005236:	461d      	mov	r5, r3
 8005238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800523a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800523c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800523e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f849 	bl	80052e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2201      	movs	r2, #1
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bdb0      	pop	{r4, r5, r7, pc}

08005274 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_LTDC_ProgramLineEvent+0x18>
 8005288:	2302      	movs	r3, #2
 800528a:	e023      	b.n	80052d4 <HAL_LTDC_ProgramLineEvent+0x60>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80052ac:	4a0c      	ldr	r2, [pc, #48]	; (80052e0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40016800 	.word	0x40016800

080052e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b089      	sub	sp, #36	; 0x24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005300:	4413      	add	r3, r2
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	01db      	lsls	r3, r3, #7
 8005310:	4413      	add	r3, r2
 8005312:	3384      	adds	r3, #132	; 0x84
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	4611      	mov	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	01d2      	lsls	r2, r2, #7
 8005320:	440a      	add	r2, r1
 8005322:	3284      	adds	r2, #132	; 0x84
 8005324:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005328:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800533a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800533c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	01db      	lsls	r3, r3, #7
 8005348:	440b      	add	r3, r1
 800534a:	3384      	adds	r3, #132	; 0x84
 800534c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005352:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005362:	4413      	add	r3, r2
 8005364:	041b      	lsls	r3, r3, #16
 8005366:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	01db      	lsls	r3, r3, #7
 8005372:	4413      	add	r3, r2
 8005374:	3384      	adds	r3, #132	; 0x84
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	4611      	mov	r1, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	01d2      	lsls	r2, r2, #7
 8005382:	440a      	add	r2, r1
 8005384:	3284      	adds	r2, #132	; 0x84
 8005386:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800538a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800539a:	4413      	add	r3, r2
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4619      	mov	r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	01db      	lsls	r3, r3, #7
 80053a8:	440b      	add	r3, r1
 80053aa:	3384      	adds	r3, #132	; 0x84
 80053ac:	4619      	mov	r1, r3
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	01db      	lsls	r3, r3, #7
 80053be:	4413      	add	r3, r2
 80053c0:	3384      	adds	r3, #132	; 0x84
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	4611      	mov	r1, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	01d2      	lsls	r2, r2, #7
 80053ce:	440a      	add	r2, r1
 80053d0:	3284      	adds	r2, #132	; 0x84
 80053d2:	f023 0307 	bic.w	r3, r3, #7
 80053d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	01db      	lsls	r3, r3, #7
 80053e2:	4413      	add	r3, r2
 80053e4:	3384      	adds	r3, #132	; 0x84
 80053e6:	461a      	mov	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	01db      	lsls	r3, r3, #7
 8005414:	4413      	add	r3, r2
 8005416:	3384      	adds	r3, #132	; 0x84
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	01db      	lsls	r3, r3, #7
 8005424:	4413      	add	r3, r2
 8005426:	3384      	adds	r3, #132	; 0x84
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005434:	461a      	mov	r2, r3
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	431a      	orrs	r2, r3
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4619      	mov	r1, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	01db      	lsls	r3, r3, #7
 8005448:	440b      	add	r3, r1
 800544a:	3384      	adds	r3, #132	; 0x84
 800544c:	4619      	mov	r1, r3
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	01db      	lsls	r3, r3, #7
 800545e:	4413      	add	r3, r2
 8005460:	3384      	adds	r3, #132	; 0x84
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	4611      	mov	r1, r2
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	01d2      	lsls	r2, r2, #7
 800546e:	440a      	add	r2, r1
 8005470:	3284      	adds	r2, #132	; 0x84
 8005472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005476:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	4413      	add	r3, r2
 8005484:	3384      	adds	r3, #132	; 0x84
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	01db      	lsls	r3, r3, #7
 8005498:	4413      	add	r3, r2
 800549a:	3384      	adds	r3, #132	; 0x84
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	4611      	mov	r1, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	01d2      	lsls	r2, r2, #7
 80054a8:	440a      	add	r2, r1
 80054aa:	3284      	adds	r2, #132	; 0x84
 80054ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054b0:	f023 0307 	bic.w	r3, r3, #7
 80054b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	69da      	ldr	r2, [r3, #28]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	6809      	ldr	r1, [r1, #0]
 80054c2:	4608      	mov	r0, r1
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	01c9      	lsls	r1, r1, #7
 80054c8:	4401      	add	r1, r0
 80054ca:	3184      	adds	r1, #132	; 0x84
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	01db      	lsls	r3, r3, #7
 80054da:	4413      	add	r3, r2
 80054dc:	3384      	adds	r3, #132	; 0x84
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	01db      	lsls	r3, r3, #7
 80054ea:	4413      	add	r3, r2
 80054ec:	3384      	adds	r3, #132	; 0x84
 80054ee:	461a      	mov	r2, r3
 80054f0:	2300      	movs	r3, #0
 80054f2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	01db      	lsls	r3, r3, #7
 80054fe:	4413      	add	r3, r2
 8005500:	3384      	adds	r3, #132	; 0x84
 8005502:	461a      	mov	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005512:	2304      	movs	r3, #4
 8005514:	61fb      	str	r3, [r7, #28]
 8005516:	e01b      	b.n	8005550 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d102      	bne.n	8005526 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005520:	2303      	movs	r3, #3
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	e014      	b.n	8005550 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b04      	cmp	r3, #4
 800552c:	d00b      	beq.n	8005546 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005532:	2b02      	cmp	r3, #2
 8005534:	d007      	beq.n	8005546 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800553a:	2b03      	cmp	r3, #3
 800553c:	d003      	beq.n	8005546 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005542:	2b07      	cmp	r3, #7
 8005544:	d102      	bne.n	800554c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005546:	2302      	movs	r3, #2
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	e001      	b.n	8005550 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800554c:	2301      	movs	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	01db      	lsls	r3, r3, #7
 800555a:	4413      	add	r3, r2
 800555c:	3384      	adds	r3, #132	; 0x84
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	4611      	mov	r1, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	01d2      	lsls	r2, r2, #7
 800556a:	440a      	add	r2, r1
 800556c:	3284      	adds	r2, #132	; 0x84
 800556e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005572:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	fb02 f303 	mul.w	r3, r2, r3
 800557e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6859      	ldr	r1, [r3, #4]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	1acb      	subs	r3, r1, r3
 800558a:	69f9      	ldr	r1, [r7, #28]
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	6809      	ldr	r1, [r1, #0]
 8005596:	4608      	mov	r0, r1
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	01c9      	lsls	r1, r1, #7
 800559c:	4401      	add	r1, r0
 800559e:	3184      	adds	r1, #132	; 0x84
 80055a0:	4313      	orrs	r3, r2
 80055a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	01db      	lsls	r3, r3, #7
 80055ae:	4413      	add	r3, r2
 80055b0:	3384      	adds	r3, #132	; 0x84
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4611      	mov	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	01d2      	lsls	r2, r2, #7
 80055be:	440a      	add	r2, r1
 80055c0:	3284      	adds	r2, #132	; 0x84
 80055c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055c6:	f023 0307 	bic.w	r3, r3, #7
 80055ca:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	01db      	lsls	r3, r3, #7
 80055d6:	4413      	add	r3, r2
 80055d8:	3384      	adds	r3, #132	; 0x84
 80055da:	461a      	mov	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	01db      	lsls	r3, r3, #7
 80055ec:	4413      	add	r3, r2
 80055ee:	3384      	adds	r3, #132	; 0x84
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	4611      	mov	r1, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	01d2      	lsls	r2, r2, #7
 80055fc:	440a      	add	r2, r1
 80055fe:	3284      	adds	r2, #132	; 0x84
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	6013      	str	r3, [r2, #0]
}
 8005606:	bf00      	nop
 8005608:	3724      	adds	r7, #36	; 0x24
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005618:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <HAL_PWREx_GetVoltageRange+0x3c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005624:	d102      	bne.n	800562c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800562a:	e00b      	b.n	8005644 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800562c:	4b08      	ldr	r3, [pc, #32]	; (8005650 <HAL_PWREx_GetVoltageRange+0x3c>)
 800562e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563a:	d102      	bne.n	8005642 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800563c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005640:	e000      	b.n	8005644 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005642:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40007000 	.word	0x40007000

08005654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d141      	bne.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005662:	4b4b      	ldr	r3, [pc, #300]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800566a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566e:	d131      	bne.n	80056d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005670:	4b47      	ldr	r3, [pc, #284]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005676:	4a46      	ldr	r2, [pc, #280]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800567c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005680:	4b43      	ldr	r3, [pc, #268]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005688:	4a41      	ldr	r2, [pc, #260]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800568a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800568e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005690:	4b40      	ldr	r3, [pc, #256]	; (8005794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2232      	movs	r2, #50	; 0x32
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	4a3f      	ldr	r2, [pc, #252]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	0c9b      	lsrs	r3, r3, #18
 80056a2:	3301      	adds	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056a6:	e002      	b.n	80056ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ae:	4b38      	ldr	r3, [pc, #224]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ba:	d102      	bne.n	80056c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f2      	bne.n	80056a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056c2:	4b33      	ldr	r3, [pc, #204]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ce:	d158      	bne.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e057      	b.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056d4:	4b2e      	ldr	r3, [pc, #184]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056da:	4a2d      	ldr	r2, [pc, #180]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80056e4:	e04d      	b.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ec:	d141      	bne.n	8005772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056ee:	4b28      	ldr	r3, [pc, #160]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fa:	d131      	bne.n	8005760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056fc:	4b24      	ldr	r3, [pc, #144]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005702:	4a23      	ldr	r2, [pc, #140]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800570c:	4b20      	ldr	r3, [pc, #128]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005714:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800571a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800571c:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2232      	movs	r2, #50	; 0x32
 8005722:	fb02 f303 	mul.w	r3, r2, r3
 8005726:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	0c9b      	lsrs	r3, r3, #18
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005732:	e002      	b.n	800573a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3b01      	subs	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800573a:	4b15      	ldr	r3, [pc, #84]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005746:	d102      	bne.n	800574e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f2      	bne.n	8005734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800574e:	4b10      	ldr	r3, [pc, #64]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575a:	d112      	bne.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e011      	b.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005770:	e007      	b.n	8005782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800577a:	4a05      	ldr	r2, [pc, #20]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005780:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	40007000 	.word	0x40007000
 8005794:	20000024 	.word	0x20000024
 8005798:	431bde83 	.word	0x431bde83

0800579c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80057a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057aa:	6053      	str	r3, [r2, #4]
}
 80057ac:	bf00      	nop
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40007000 	.word	0x40007000

080057bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f000 bc08 	b.w	8005fe0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057d0:	4b96      	ldr	r3, [pc, #600]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 030c 	and.w	r3, r3, #12
 80057d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057da:	4b94      	ldr	r3, [pc, #592]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80e4 	beq.w	80059ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_RCC_OscConfig+0x4c>
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b0c      	cmp	r3, #12
 80057fc:	f040 808b 	bne.w	8005916 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b01      	cmp	r3, #1
 8005804:	f040 8087 	bne.w	8005916 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005808:	4b88      	ldr	r3, [pc, #544]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <HAL_RCC_OscConfig+0x64>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e3df      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1a      	ldr	r2, [r3, #32]
 8005824:	4b81      	ldr	r3, [pc, #516]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <HAL_RCC_OscConfig+0x7e>
 8005830:	4b7e      	ldr	r3, [pc, #504]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005838:	e005      	b.n	8005846 <HAL_RCC_OscConfig+0x8a>
 800583a:	4b7c      	ldr	r3, [pc, #496]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 800583c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005846:	4293      	cmp	r3, r2
 8005848:	d223      	bcs.n	8005892 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fdcc 	bl	80063ec <RCC_SetFlashLatencyFromMSIRange>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e3c0      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800585e:	4b73      	ldr	r3, [pc, #460]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a72      	ldr	r2, [pc, #456]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005864:	f043 0308 	orr.w	r3, r3, #8
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	4b70      	ldr	r3, [pc, #448]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	496d      	ldr	r1, [pc, #436]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005878:	4313      	orrs	r3, r2
 800587a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800587c:	4b6b      	ldr	r3, [pc, #428]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	4968      	ldr	r1, [pc, #416]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 800588c:	4313      	orrs	r3, r2
 800588e:	604b      	str	r3, [r1, #4]
 8005890:	e025      	b.n	80058de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005892:	4b66      	ldr	r3, [pc, #408]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a65      	ldr	r2, [pc, #404]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005898:	f043 0308 	orr.w	r3, r3, #8
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	4b63      	ldr	r3, [pc, #396]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	4960      	ldr	r1, [pc, #384]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058b0:	4b5e      	ldr	r3, [pc, #376]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	495b      	ldr	r1, [pc, #364]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fd8c 	bl	80063ec <RCC_SetFlashLatencyFromMSIRange>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e380      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058de:	f000 fcc1 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 80058e2:	4602      	mov	r2, r0
 80058e4:	4b51      	ldr	r3, [pc, #324]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	4950      	ldr	r1, [pc, #320]	; (8005a30 <HAL_RCC_OscConfig+0x274>)
 80058f0:	5ccb      	ldrb	r3, [r1, r3]
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	fa22 f303 	lsr.w	r3, r2, r3
 80058fa:	4a4e      	ldr	r2, [pc, #312]	; (8005a34 <HAL_RCC_OscConfig+0x278>)
 80058fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058fe:	4b4e      	ldr	r3, [pc, #312]	; (8005a38 <HAL_RCC_OscConfig+0x27c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd ff9a 	bl	800383c <HAL_InitTick>
 8005908:	4603      	mov	r3, r0
 800590a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d052      	beq.n	80059b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	e364      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d032      	beq.n	8005984 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800591e:	4b43      	ldr	r3, [pc, #268]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a42      	ldr	r2, [pc, #264]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800592a:	f7fd ffd7 	bl	80038dc <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005930:	e008      	b.n	8005944 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005932:	f7fd ffd3 	bl	80038dc <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e34d      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005944:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0f0      	beq.n	8005932 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005950:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a35      	ldr	r2, [pc, #212]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005956:	f043 0308 	orr.w	r3, r3, #8
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	4b33      	ldr	r3, [pc, #204]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	4930      	ldr	r1, [pc, #192]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800596e:	4b2f      	ldr	r3, [pc, #188]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	492b      	ldr	r1, [pc, #172]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 800597e:	4313      	orrs	r3, r2
 8005980:	604b      	str	r3, [r1, #4]
 8005982:	e01a      	b.n	80059ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005984:	4b29      	ldr	r3, [pc, #164]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a28      	ldr	r2, [pc, #160]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005990:	f7fd ffa4 	bl	80038dc <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005998:	f7fd ffa0 	bl	80038dc <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e31a      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059aa:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x1dc>
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d073      	beq.n	8005aae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d005      	beq.n	80059d8 <HAL_RCC_OscConfig+0x21c>
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	d10e      	bne.n	80059f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d10b      	bne.n	80059f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d8:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d063      	beq.n	8005aac <HAL_RCC_OscConfig+0x2f0>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d15f      	bne.n	8005aac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e2f7      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f8:	d106      	bne.n	8005a08 <HAL_RCC_OscConfig+0x24c>
 80059fa:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a0b      	ldr	r2, [pc, #44]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	e025      	b.n	8005a54 <HAL_RCC_OscConfig+0x298>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a10:	d114      	bne.n	8005a3c <HAL_RCC_OscConfig+0x280>
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a02      	ldr	r2, [pc, #8]	; (8005a2c <HAL_RCC_OscConfig+0x270>)
 8005a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	e013      	b.n	8005a54 <HAL_RCC_OscConfig+0x298>
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	0800954c 	.word	0x0800954c
 8005a34:	20000024 	.word	0x20000024
 8005a38:	20000028 	.word	0x20000028
 8005a3c:	4ba0      	ldr	r3, [pc, #640]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a9f      	ldr	r2, [pc, #636]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	4b9d      	ldr	r3, [pc, #628]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a9c      	ldr	r2, [pc, #624]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d013      	beq.n	8005a84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7fd ff3e 	bl	80038dc <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a64:	f7fd ff3a 	bl	80038dc <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b64      	cmp	r3, #100	; 0x64
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e2b4      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a76:	4b92      	ldr	r3, [pc, #584]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f0      	beq.n	8005a64 <HAL_RCC_OscConfig+0x2a8>
 8005a82:	e014      	b.n	8005aae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd ff2a 	bl	80038dc <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a8c:	f7fd ff26 	bl	80038dc <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	; 0x64
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e2a0      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a9e:	4b88      	ldr	r3, [pc, #544]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0x2d0>
 8005aaa:	e000      	b.n	8005aae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d060      	beq.n	8005b7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d005      	beq.n	8005acc <HAL_RCC_OscConfig+0x310>
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b0c      	cmp	r3, #12
 8005ac4:	d119      	bne.n	8005afa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d116      	bne.n	8005afa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005acc:	4b7c      	ldr	r3, [pc, #496]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x328>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e27d      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae4:	4b76      	ldr	r3, [pc, #472]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	061b      	lsls	r3, r3, #24
 8005af2:	4973      	ldr	r1, [pc, #460]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005af8:	e040      	b.n	8005b7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d023      	beq.n	8005b4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b02:	4b6f      	ldr	r3, [pc, #444]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a6e      	ldr	r2, [pc, #440]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0e:	f7fd fee5 	bl	80038dc <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b16:	f7fd fee1 	bl	80038dc <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e25b      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b28:	4b65      	ldr	r3, [pc, #404]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0f0      	beq.n	8005b16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b34:	4b62      	ldr	r3, [pc, #392]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	495f      	ldr	r1, [pc, #380]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	604b      	str	r3, [r1, #4]
 8005b48:	e018      	b.n	8005b7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b4a:	4b5d      	ldr	r3, [pc, #372]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a5c      	ldr	r2, [pc, #368]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fd fec1 	bl	80038dc <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b5e:	f7fd febd 	bl	80038dc <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e237      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b70:	4b53      	ldr	r3, [pc, #332]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d03c      	beq.n	8005c02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01c      	beq.n	8005bca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b90:	4b4b      	ldr	r3, [pc, #300]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b96:	4a4a      	ldr	r2, [pc, #296]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7fd fe9c 	bl	80038dc <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba8:	f7fd fe98 	bl	80038dc <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e212      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bba:	4b41      	ldr	r3, [pc, #260]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0ef      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x3ec>
 8005bc8:	e01b      	b.n	8005c02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bca:	4b3d      	ldr	r3, [pc, #244]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd0:	4a3b      	ldr	r2, [pc, #236]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bda:	f7fd fe7f 	bl	80038dc <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005be2:	f7fd fe7b 	bl	80038dc <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e1f5      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bf4:	4b32      	ldr	r3, [pc, #200]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1ef      	bne.n	8005be2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 80a6 	beq.w	8005d5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c10:	2300      	movs	r3, #0
 8005c12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c14:	4b2a      	ldr	r3, [pc, #168]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10d      	bne.n	8005c3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c20:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c2c:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c34:	60bb      	str	r3, [r7, #8]
 8005c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c3c:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <HAL_RCC_OscConfig+0x508>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d118      	bne.n	8005c7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c48:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <HAL_RCC_OscConfig+0x508>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <HAL_RCC_OscConfig+0x508>)
 8005c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c54:	f7fd fe42 	bl	80038dc <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5c:	f7fd fe3e 	bl	80038dc <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e1b8      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c6e:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <HAL_RCC_OscConfig+0x508>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f0      	beq.n	8005c5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d108      	bne.n	8005c94 <HAL_RCC_OscConfig+0x4d8>
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c88:	4a0d      	ldr	r2, [pc, #52]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c92:	e029      	b.n	8005ce8 <HAL_RCC_OscConfig+0x52c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2b05      	cmp	r3, #5
 8005c9a:	d115      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x50c>
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005ca4:	f043 0304 	orr.w	r3, r3, #4
 8005ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb2:	4a03      	ldr	r2, [pc, #12]	; (8005cc0 <HAL_RCC_OscConfig+0x504>)
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cbc:	e014      	b.n	8005ce8 <HAL_RCC_OscConfig+0x52c>
 8005cbe:	bf00      	nop
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40007000 	.word	0x40007000
 8005cc8:	4b9d      	ldr	r3, [pc, #628]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	4a9c      	ldr	r2, [pc, #624]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005cd0:	f023 0301 	bic.w	r3, r3, #1
 8005cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cd8:	4b99      	ldr	r3, [pc, #612]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cde:	4a98      	ldr	r2, [pc, #608]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005ce0:	f023 0304 	bic.w	r3, r3, #4
 8005ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d016      	beq.n	8005d1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf0:	f7fd fdf4 	bl	80038dc <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf8:	f7fd fdf0 	bl	80038dc <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e168      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d0e:	4b8c      	ldr	r3, [pc, #560]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0ed      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x53c>
 8005d1c:	e015      	b.n	8005d4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fd fddd 	bl	80038dc <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d26:	f7fd fdd9 	bl	80038dc <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e151      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d3c:	4b80      	ldr	r3, [pc, #512]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ed      	bne.n	8005d26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d4a:	7ffb      	ldrb	r3, [r7, #31]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d105      	bne.n	8005d5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d50:	4b7b      	ldr	r3, [pc, #492]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	4a7a      	ldr	r2, [pc, #488]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d03c      	beq.n	8005de2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01c      	beq.n	8005daa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d70:	4b73      	ldr	r3, [pc, #460]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d76:	4a72      	ldr	r2, [pc, #456]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d80:	f7fd fdac 	bl	80038dc <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d88:	f7fd fda8 	bl	80038dc <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e122      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d9a:	4b69      	ldr	r3, [pc, #420]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0ef      	beq.n	8005d88 <HAL_RCC_OscConfig+0x5cc>
 8005da8:	e01b      	b.n	8005de2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005daa:	4b65      	ldr	r3, [pc, #404]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005db0:	4a63      	ldr	r2, [pc, #396]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dba:	f7fd fd8f 	bl	80038dc <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dc2:	f7fd fd8b 	bl	80038dc <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e105      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dd4:	4b5a      	ldr	r3, [pc, #360]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1ef      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80f9 	beq.w	8005fde <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	f040 80cf 	bne.w	8005f94 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005df6:	4b52      	ldr	r3, [pc, #328]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f003 0203 	and.w	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d12c      	bne.n	8005e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	3b01      	subs	r3, #1
 8005e16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d123      	bne.n	8005e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d11b      	bne.n	8005e64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d113      	bne.n	8005e64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d109      	bne.n	8005e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d071      	beq.n	8005f48 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d068      	beq.n	8005f3c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e6a:	4b35      	ldr	r3, [pc, #212]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d105      	bne.n	8005e82 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e76:	4b32      	ldr	r3, [pc, #200]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e0ac      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e86:	4b2e      	ldr	r3, [pc, #184]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2d      	ldr	r2, [pc, #180]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e92:	f7fd fd23 	bl	80038dc <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9a:	f7fd fd1f 	bl	80038dc <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e099      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eac:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f0      	bne.n	8005e9a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eb8:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <HAL_RCC_OscConfig+0x788>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	0112      	lsls	r2, r2, #4
 8005ecc:	4311      	orrs	r1, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ed2:	0212      	lsls	r2, r2, #8
 8005ed4:	4311      	orrs	r1, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005eda:	0852      	lsrs	r2, r2, #1
 8005edc:	3a01      	subs	r2, #1
 8005ede:	0552      	lsls	r2, r2, #21
 8005ee0:	4311      	orrs	r1, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ee6:	0852      	lsrs	r2, r2, #1
 8005ee8:	3a01      	subs	r2, #1
 8005eea:	0652      	lsls	r2, r2, #25
 8005eec:	4311      	orrs	r1, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ef2:	06d2      	lsls	r2, r2, #27
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	4912      	ldr	r1, [pc, #72]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005efc:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a0f      	ldr	r2, [pc, #60]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f08:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f14:	f7fd fce2 	bl	80038dc <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1c:	f7fd fcde 	bl	80038dc <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e058      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f2e:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <HAL_RCC_OscConfig+0x784>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f3a:	e050      	b.n	8005fde <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e04f      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
 8005f40:	40021000 	.word	0x40021000
 8005f44:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f48:	4b27      	ldr	r3, [pc, #156]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d144      	bne.n	8005fde <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f54:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f60:	4b21      	ldr	r3, [pc, #132]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f6c:	f7fd fcb6 	bl	80038dc <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f74:	f7fd fcb2 	bl	80038dc <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e02c      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f86:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0f0      	beq.n	8005f74 <HAL_RCC_OscConfig+0x7b8>
 8005f92:	e024      	b.n	8005fde <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b0c      	cmp	r3, #12
 8005f98:	d01f      	beq.n	8005fda <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f9a:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005fa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa6:	f7fd fc99 	bl	80038dc <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fae:	f7fd fc95 	bl	80038dc <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e00f      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fc0:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f0      	bne.n	8005fae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	4905      	ldr	r1, [pc, #20]	; (8005fe8 <HAL_RCC_OscConfig+0x82c>)
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_RCC_OscConfig+0x830>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60cb      	str	r3, [r1, #12]
 8005fd8:	e001      	b.n	8005fde <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3720      	adds	r7, #32
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	feeefffc 	.word	0xfeeefffc

08005ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e11d      	b.n	8006244 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006008:	4b90      	ldr	r3, [pc, #576]	; (800624c <HAL_RCC_ClockConfig+0x25c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d910      	bls.n	8006038 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006016:	4b8d      	ldr	r3, [pc, #564]	; (800624c <HAL_RCC_ClockConfig+0x25c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 020f 	bic.w	r2, r3, #15
 800601e:	498b      	ldr	r1, [pc, #556]	; (800624c <HAL_RCC_ClockConfig+0x25c>)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	4313      	orrs	r3, r2
 8006024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006026:	4b89      	ldr	r3, [pc, #548]	; (800624c <HAL_RCC_ClockConfig+0x25c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d001      	beq.n	8006038 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e105      	b.n	8006244 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d010      	beq.n	8006066 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	4b81      	ldr	r3, [pc, #516]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006050:	429a      	cmp	r2, r3
 8006052:	d908      	bls.n	8006066 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006054:	4b7e      	ldr	r3, [pc, #504]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	497b      	ldr	r1, [pc, #492]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006062:	4313      	orrs	r3, r2
 8006064:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d079      	beq.n	8006166 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d11e      	bne.n	80060b8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800607a:	4b75      	ldr	r3, [pc, #468]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e0dc      	b.n	8006244 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800608a:	f000 fa09 	bl	80064a0 <RCC_GetSysClockFreqFromPLLSource>
 800608e:	4603      	mov	r3, r0
 8006090:	4a70      	ldr	r2, [pc, #448]	; (8006254 <HAL_RCC_ClockConfig+0x264>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d946      	bls.n	8006124 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006096:	4b6e      	ldr	r3, [pc, #440]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d140      	bne.n	8006124 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060a2:	4b6b      	ldr	r3, [pc, #428]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060aa:	4a69      	ldr	r2, [pc, #420]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 80060ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e035      	b.n	8006124 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d107      	bne.n	80060d0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060c0:	4b63      	ldr	r3, [pc, #396]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d115      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0b9      	b.n	8006244 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d107      	bne.n	80060e8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060d8:	4b5d      	ldr	r3, [pc, #372]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e0ad      	b.n	8006244 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060e8:	4b59      	ldr	r3, [pc, #356]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0a5      	b.n	8006244 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80060f8:	f000 f8b4 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 80060fc:	4603      	mov	r3, r0
 80060fe:	4a55      	ldr	r2, [pc, #340]	; (8006254 <HAL_RCC_ClockConfig+0x264>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d90f      	bls.n	8006124 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006104:	4b52      	ldr	r3, [pc, #328]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006110:	4b4f      	ldr	r3, [pc, #316]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006118:	4a4d      	ldr	r2, [pc, #308]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006124:	4b4a      	ldr	r3, [pc, #296]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 0203 	bic.w	r2, r3, #3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4947      	ldr	r1, [pc, #284]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006136:	f7fd fbd1 	bl	80038dc <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613c:	e00a      	b.n	8006154 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800613e:	f7fd fbcd 	bl	80038dc <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f241 3288 	movw	r2, #5000	; 0x1388
 800614c:	4293      	cmp	r3, r2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e077      	b.n	8006244 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006154:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 020c 	and.w	r2, r3, #12
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	429a      	cmp	r2, r3
 8006164:	d1eb      	bne.n	800613e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b80      	cmp	r3, #128	; 0x80
 800616a:	d105      	bne.n	8006178 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800616c:	4b38      	ldr	r3, [pc, #224]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	4a37      	ldr	r2, [pc, #220]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006176:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d010      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	4b31      	ldr	r3, [pc, #196]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006190:	429a      	cmp	r2, r3
 8006192:	d208      	bcs.n	80061a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006194:	4b2e      	ldr	r3, [pc, #184]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	492b      	ldr	r1, [pc, #172]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061a6:	4b29      	ldr	r3, [pc, #164]	; (800624c <HAL_RCC_ClockConfig+0x25c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d210      	bcs.n	80061d6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b4:	4b25      	ldr	r3, [pc, #148]	; (800624c <HAL_RCC_ClockConfig+0x25c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f023 020f 	bic.w	r2, r3, #15
 80061bc:	4923      	ldr	r1, [pc, #140]	; (800624c <HAL_RCC_ClockConfig+0x25c>)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c4:	4b21      	ldr	r3, [pc, #132]	; (800624c <HAL_RCC_ClockConfig+0x25c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d001      	beq.n	80061d6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e036      	b.n	8006244 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d008      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061e2:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	4918      	ldr	r1, [pc, #96]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d009      	beq.n	8006214 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006200:	4b13      	ldr	r3, [pc, #76]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4910      	ldr	r1, [pc, #64]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 8006210:	4313      	orrs	r3, r2
 8006212:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006214:	f000 f826 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 8006218:	4602      	mov	r2, r0
 800621a:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <HAL_RCC_ClockConfig+0x260>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	091b      	lsrs	r3, r3, #4
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	490c      	ldr	r1, [pc, #48]	; (8006258 <HAL_RCC_ClockConfig+0x268>)
 8006226:	5ccb      	ldrb	r3, [r1, r3]
 8006228:	f003 031f 	and.w	r3, r3, #31
 800622c:	fa22 f303 	lsr.w	r3, r2, r3
 8006230:	4a0a      	ldr	r2, [pc, #40]	; (800625c <HAL_RCC_ClockConfig+0x26c>)
 8006232:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <HAL_RCC_ClockConfig+0x270>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4618      	mov	r0, r3
 800623a:	f7fd faff 	bl	800383c <HAL_InitTick>
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]

  return status;
 8006242:	7bfb      	ldrb	r3, [r7, #15]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40022000 	.word	0x40022000
 8006250:	40021000 	.word	0x40021000
 8006254:	04c4b400 	.word	0x04c4b400
 8006258:	0800954c 	.word	0x0800954c
 800625c:	20000024 	.word	0x20000024
 8006260:	20000028 	.word	0x20000028

08006264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006264:	b480      	push	{r7}
 8006266:	b089      	sub	sp, #36	; 0x24
 8006268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006272:	4b3e      	ldr	r3, [pc, #248]	; (800636c <HAL_RCC_GetSysClockFreq+0x108>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 030c 	and.w	r3, r3, #12
 800627a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800627c:	4b3b      	ldr	r3, [pc, #236]	; (800636c <HAL_RCC_GetSysClockFreq+0x108>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_RCC_GetSysClockFreq+0x34>
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b0c      	cmp	r3, #12
 8006290:	d121      	bne.n	80062d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d11e      	bne.n	80062d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006298:	4b34      	ldr	r3, [pc, #208]	; (800636c <HAL_RCC_GetSysClockFreq+0x108>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d107      	bne.n	80062b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062a4:	4b31      	ldr	r3, [pc, #196]	; (800636c <HAL_RCC_GetSysClockFreq+0x108>)
 80062a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	e005      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80062b4:	4b2d      	ldr	r3, [pc, #180]	; (800636c <HAL_RCC_GetSysClockFreq+0x108>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80062c0:	4a2b      	ldr	r2, [pc, #172]	; (8006370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10d      	bne.n	80062ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062d4:	e00a      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d102      	bne.n	80062e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062dc:	4b25      	ldr	r3, [pc, #148]	; (8006374 <HAL_RCC_GetSysClockFreq+0x110>)
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	e004      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062e8:	4b23      	ldr	r3, [pc, #140]	; (8006378 <HAL_RCC_GetSysClockFreq+0x114>)
 80062ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b0c      	cmp	r3, #12
 80062f0:	d134      	bne.n	800635c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062f2:	4b1e      	ldr	r3, [pc, #120]	; (800636c <HAL_RCC_GetSysClockFreq+0x108>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d003      	beq.n	800630a <HAL_RCC_GetSysClockFreq+0xa6>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b03      	cmp	r3, #3
 8006306:	d003      	beq.n	8006310 <HAL_RCC_GetSysClockFreq+0xac>
 8006308:	e005      	b.n	8006316 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800630a:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <HAL_RCC_GetSysClockFreq+0x110>)
 800630c:	617b      	str	r3, [r7, #20]
      break;
 800630e:	e005      	b.n	800631c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006310:	4b19      	ldr	r3, [pc, #100]	; (8006378 <HAL_RCC_GetSysClockFreq+0x114>)
 8006312:	617b      	str	r3, [r7, #20]
      break;
 8006314:	e002      	b.n	800631c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	617b      	str	r3, [r7, #20]
      break;
 800631a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800631c:	4b13      	ldr	r3, [pc, #76]	; (800636c <HAL_RCC_GetSysClockFreq+0x108>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	091b      	lsrs	r3, r3, #4
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	3301      	adds	r3, #1
 8006328:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800632a:	4b10      	ldr	r3, [pc, #64]	; (800636c <HAL_RCC_GetSysClockFreq+0x108>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	fb03 f202 	mul.w	r2, r3, r2
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006342:	4b0a      	ldr	r3, [pc, #40]	; (800636c <HAL_RCC_GetSysClockFreq+0x108>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	0e5b      	lsrs	r3, r3, #25
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	3301      	adds	r3, #1
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800635c:	69bb      	ldr	r3, [r7, #24]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3724      	adds	r7, #36	; 0x24
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40021000 	.word	0x40021000
 8006370:	08009564 	.word	0x08009564
 8006374:	00f42400 	.word	0x00f42400
 8006378:	007a1200 	.word	0x007a1200

0800637c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006380:	4b03      	ldr	r3, [pc, #12]	; (8006390 <HAL_RCC_GetHCLKFreq+0x14>)
 8006382:	681b      	ldr	r3, [r3, #0]
}
 8006384:	4618      	mov	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000024 	.word	0x20000024

08006394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006398:	f7ff fff0 	bl	800637c <HAL_RCC_GetHCLKFreq>
 800639c:	4602      	mov	r2, r0
 800639e:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4904      	ldr	r1, [pc, #16]	; (80063bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80063aa:	5ccb      	ldrb	r3, [r1, r3]
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40021000 	.word	0x40021000
 80063bc:	0800955c 	.word	0x0800955c

080063c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063c4:	f7ff ffda 	bl	800637c <HAL_RCC_GetHCLKFreq>
 80063c8:	4602      	mov	r2, r0
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	0adb      	lsrs	r3, r3, #11
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	4904      	ldr	r1, [pc, #16]	; (80063e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063d6:	5ccb      	ldrb	r3, [r1, r3]
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40021000 	.word	0x40021000
 80063e8:	0800955c 	.word	0x0800955c

080063ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063f8:	4b27      	ldr	r3, [pc, #156]	; (8006498 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006404:	f7ff f906 	bl	8005614 <HAL_PWREx_GetVoltageRange>
 8006408:	6178      	str	r0, [r7, #20]
 800640a:	e014      	b.n	8006436 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800640c:	4b22      	ldr	r3, [pc, #136]	; (8006498 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	4a21      	ldr	r2, [pc, #132]	; (8006498 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006416:	6593      	str	r3, [r2, #88]	; 0x58
 8006418:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800641a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006424:	f7ff f8f6 	bl	8005614 <HAL_PWREx_GetVoltageRange>
 8006428:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800642a:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800642c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642e:	4a1a      	ldr	r2, [pc, #104]	; (8006498 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006434:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643c:	d10b      	bne.n	8006456 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d913      	bls.n	800646c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2ba0      	cmp	r3, #160	; 0xa0
 8006448:	d902      	bls.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800644a:	2302      	movs	r3, #2
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	e00d      	b.n	800646c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006450:	2301      	movs	r3, #1
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	e00a      	b.n	800646c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b7f      	cmp	r3, #127	; 0x7f
 800645a:	d902      	bls.n	8006462 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800645c:	2302      	movs	r3, #2
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	e004      	b.n	800646c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b70      	cmp	r3, #112	; 0x70
 8006466:	d101      	bne.n	800646c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006468:	2301      	movs	r3, #1
 800646a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800646c:	4b0b      	ldr	r3, [pc, #44]	; (800649c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f023 020f 	bic.w	r2, r3, #15
 8006474:	4909      	ldr	r1, [pc, #36]	; (800649c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800647c:	4b07      	ldr	r3, [pc, #28]	; (800649c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	429a      	cmp	r2, r3
 8006488:	d001      	beq.n	800648e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40021000 	.word	0x40021000
 800649c:	40022000 	.word	0x40022000

080064a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064a6:	4b2d      	ldr	r3, [pc, #180]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d00b      	beq.n	80064ce <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d825      	bhi.n	8006508 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d008      	beq.n	80064d4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d11f      	bne.n	8006508 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80064c8:	4b25      	ldr	r3, [pc, #148]	; (8006560 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80064ca:	613b      	str	r3, [r7, #16]
    break;
 80064cc:	e01f      	b.n	800650e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80064ce:	4b25      	ldr	r3, [pc, #148]	; (8006564 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80064d0:	613b      	str	r3, [r7, #16]
    break;
 80064d2:	e01c      	b.n	800650e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80064d4:	4b21      	ldr	r3, [pc, #132]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d107      	bne.n	80064f0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80064e0:	4b1e      	ldr	r3, [pc, #120]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e005      	b.n	80064fc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80064f0:	4b1a      	ldr	r3, [pc, #104]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	091b      	lsrs	r3, r3, #4
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80064fc:	4a1a      	ldr	r2, [pc, #104]	; (8006568 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006504:	613b      	str	r3, [r7, #16]
    break;
 8006506:	e002      	b.n	800650e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
    break;
 800650c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	3301      	adds	r3, #1
 800651a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	0a1b      	lsrs	r3, r3, #8
 8006522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	fb03 f202 	mul.w	r2, r3, r2
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006532:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006534:	4b09      	ldr	r3, [pc, #36]	; (800655c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	0e5b      	lsrs	r3, r3, #25
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	3301      	adds	r3, #1
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800654e:	683b      	ldr	r3, [r7, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	40021000 	.word	0x40021000
 8006560:	00f42400 	.word	0x00f42400
 8006564:	007a1200 	.word	0x007a1200
 8006568:	08009564 	.word	0x08009564

0800656c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006574:	2300      	movs	r3, #0
 8006576:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006578:	2300      	movs	r3, #0
 800657a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006584:	2b00      	cmp	r3, #0
 8006586:	d040      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658c:	2b80      	cmp	r3, #128	; 0x80
 800658e:	d02a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006590:	2b80      	cmp	r3, #128	; 0x80
 8006592:	d825      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006594:	2b60      	cmp	r3, #96	; 0x60
 8006596:	d026      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006598:	2b60      	cmp	r3, #96	; 0x60
 800659a:	d821      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d006      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x42>
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d81d      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d009      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d010      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 80065ac:	e018      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065ae:	4b89      	ldr	r3, [pc, #548]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4a88      	ldr	r2, [pc, #544]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065ba:	e015      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fb62 	bl	8006c8c <RCCEx_PLLSAI1_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065cc:	e00c      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3320      	adds	r3, #32
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fc4d 	bl	8006e74 <RCCEx_PLLSAI2_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	74fb      	strb	r3, [r7, #19]
      break;
 80065e4:	e000      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80065e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065ee:	4b79      	ldr	r3, [pc, #484]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fc:	4975      	ldr	r1, [pc, #468]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006604:	e001      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006606:	7cfb      	ldrb	r3, [r7, #19]
 8006608:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d047      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d030      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006624:	d82a      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800662a:	d02a      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800662c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006630:	d824      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006636:	d008      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800663c:	d81e      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006646:	d010      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006648:	e018      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800664a:	4b62      	ldr	r3, [pc, #392]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	4a61      	ldr	r2, [pc, #388]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006654:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006656:	e015      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	2100      	movs	r1, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fb14 	bl	8006c8c <RCCEx_PLLSAI1_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006668:	e00c      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3320      	adds	r3, #32
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fbff 	bl	8006e74 <RCCEx_PLLSAI2_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800667a:	e003      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	74fb      	strb	r3, [r7, #19]
      break;
 8006680:	e000      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006684:	7cfb      	ldrb	r3, [r7, #19]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800668a:	4b52      	ldr	r3, [pc, #328]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800668c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006698:	494e      	ldr	r1, [pc, #312]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80066a0:	e001      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	7cfb      	ldrb	r3, [r7, #19]
 80066a4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 809f 	beq.w	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066b4:	2300      	movs	r3, #0
 80066b6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066b8:	4b46      	ldr	r3, [pc, #280]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ce:	4b41      	ldr	r3, [pc, #260]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	4a40      	ldr	r2, [pc, #256]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d8:	6593      	str	r3, [r2, #88]	; 0x58
 80066da:	4b3e      	ldr	r3, [pc, #248]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e2:	60bb      	str	r3, [r7, #8]
 80066e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066e6:	2301      	movs	r3, #1
 80066e8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066ea:	4b3b      	ldr	r3, [pc, #236]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a3a      	ldr	r2, [pc, #232]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80066f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066f6:	f7fd f8f1 	bl	80038dc <HAL_GetTick>
 80066fa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066fc:	e009      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066fe:	f7fd f8ed 	bl	80038dc <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d902      	bls.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	74fb      	strb	r3, [r7, #19]
        break;
 8006710:	e005      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006712:	4b31      	ldr	r3, [pc, #196]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0ef      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800671e:	7cfb      	ldrb	r3, [r7, #19]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d15b      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006724:	4b2b      	ldr	r3, [pc, #172]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01f      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	429a      	cmp	r2, r3
 8006740:	d019      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006742:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800674e:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006754:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800675e:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800676e:	4a19      	ldr	r2, [pc, #100]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d016      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006780:	f7fd f8ac 	bl	80038dc <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006786:	e00b      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006788:	f7fd f8a8 	bl	80038dc <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f241 3288 	movw	r2, #5000	; 0x1388
 8006796:	4293      	cmp	r3, r2
 8006798:	d902      	bls.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	74fb      	strb	r3, [r7, #19]
            break;
 800679e:	e006      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067a0:	4b0c      	ldr	r3, [pc, #48]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0ec      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80067ae:	7cfb      	ldrb	r3, [r7, #19]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10c      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067b4:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067c4:	4903      	ldr	r1, [pc, #12]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067cc:	e008      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067ce:	7cfb      	ldrb	r3, [r7, #19]
 80067d0:	74bb      	strb	r3, [r7, #18]
 80067d2:	e005      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80067d4:	40021000 	.word	0x40021000
 80067d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	7cfb      	ldrb	r3, [r7, #19]
 80067de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067e0:	7c7b      	ldrb	r3, [r7, #17]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d105      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067e6:	4ba0      	ldr	r3, [pc, #640]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ea:	4a9f      	ldr	r2, [pc, #636]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067fe:	4b9a      	ldr	r3, [pc, #616]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006804:	f023 0203 	bic.w	r2, r3, #3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	4996      	ldr	r1, [pc, #600]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006820:	4b91      	ldr	r3, [pc, #580]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	f023 020c 	bic.w	r2, r3, #12
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	498e      	ldr	r1, [pc, #568]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006842:	4b89      	ldr	r3, [pc, #548]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006850:	4985      	ldr	r1, [pc, #532]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006864:	4b80      	ldr	r3, [pc, #512]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006872:	497d      	ldr	r1, [pc, #500]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0310 	and.w	r3, r3, #16
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006886:	4b78      	ldr	r3, [pc, #480]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006894:	4974      	ldr	r1, [pc, #464]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068a8:	4b6f      	ldr	r3, [pc, #444]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b6:	496c      	ldr	r1, [pc, #432]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068ca:	4b67      	ldr	r3, [pc, #412]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d8:	4963      	ldr	r1, [pc, #396]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068ec:	4b5e      	ldr	r3, [pc, #376]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068fa:	495b      	ldr	r1, [pc, #364]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800690e:	4b56      	ldr	r3, [pc, #344]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006914:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691c:	4952      	ldr	r1, [pc, #328]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800691e:	4313      	orrs	r3, r2
 8006920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006930:	4b4d      	ldr	r3, [pc, #308]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006936:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	494a      	ldr	r1, [pc, #296]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006940:	4313      	orrs	r3, r2
 8006942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006952:	4b45      	ldr	r3, [pc, #276]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006960:	4941      	ldr	r1, [pc, #260]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006974:	4b3c      	ldr	r3, [pc, #240]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800697a:	f023 0203 	bic.w	r2, r3, #3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006982:	4939      	ldr	r1, [pc, #228]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d028      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006996:	4b34      	ldr	r3, [pc, #208]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a4:	4930      	ldr	r1, [pc, #192]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b4:	d106      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b6:	4b2c      	ldr	r3, [pc, #176]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	4a2b      	ldr	r2, [pc, #172]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c0:	60d3      	str	r3, [r2, #12]
 80069c2:	e011      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	2101      	movs	r1, #1
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f959 	bl	8006c8c <RCCEx_PLLSAI1_Config>
 80069da:	4603      	mov	r3, r0
 80069dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80069de:	7cfb      	ldrb	r3, [r7, #19]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80069e4:	7cfb      	ldrb	r3, [r7, #19]
 80069e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d04d      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069fc:	d108      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80069fe:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a04:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006a0e:	e012      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a10:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a16:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a2e:	490e      	ldr	r1, [pc, #56]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	4a08      	ldr	r2, [pc, #32]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a4a:	60d3      	str	r3, [r2, #12]
 8006a4c:	e020      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a56:	d109      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a58:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4a02      	ldr	r2, [pc, #8]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a62:	60d3      	str	r3, [r2, #12]
 8006a64:	e014      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006a66:	bf00      	nop
 8006a68:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a74:	d10c      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 f905 	bl	8006c8c <RCCEx_PLLSAI1_Config>
 8006a82:	4603      	mov	r3, r0
 8006a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a86:	7cfb      	ldrb	r3, [r7, #19]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006a8c:	7cfb      	ldrb	r3, [r7, #19]
 8006a8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d028      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a9c:	4b7a      	ldr	r3, [pc, #488]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aaa:	4977      	ldr	r1, [pc, #476]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aba:	d106      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006abc:	4b72      	ldr	r3, [pc, #456]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	4a71      	ldr	r2, [pc, #452]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ac6:	60d3      	str	r3, [r2, #12]
 8006ac8:	e011      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ad2:	d10c      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f8d6 	bl	8006c8c <RCCEx_PLLSAI1_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ae4:	7cfb      	ldrb	r3, [r7, #19]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006aea:	7cfb      	ldrb	r3, [r7, #19]
 8006aec:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01e      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006afa:	4b63      	ldr	r3, [pc, #396]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0a:	495f      	ldr	r1, [pc, #380]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b1c:	d10c      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3304      	adds	r3, #4
 8006b22:	2102      	movs	r1, #2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 f8b1 	bl	8006c8c <RCCEx_PLLSAI1_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b2e:	7cfb      	ldrb	r3, [r7, #19]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006b34:	7cfb      	ldrb	r3, [r7, #19]
 8006b36:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b44:	4b50      	ldr	r3, [pc, #320]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b4a:	f023 0204 	bic.w	r2, r3, #4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b54:	494c      	ldr	r1, [pc, #304]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006b68:	4b47      	ldr	r3, [pc, #284]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b6e:	f023 0218 	bic.w	r2, r3, #24
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b78:	4943      	ldr	r1, [pc, #268]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d035      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b8c:	4b3e      	ldr	r3, [pc, #248]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a3d      	ldr	r2, [pc, #244]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b98:	f7fc fea0 	bl	80038dc <HAL_GetTick>
 8006b9c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b9e:	e009      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ba0:	f7fc fe9c 	bl	80038dc <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d902      	bls.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	74fb      	strb	r3, [r7, #19]
        break;
 8006bb2:	e005      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bb4:	4b34      	ldr	r3, [pc, #208]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1ef      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006bc0:	7cfb      	ldrb	r3, [r7, #19]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d113      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006bc6:	4b30      	ldr	r3, [pc, #192]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd6:	492c      	ldr	r1, [pc, #176]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3320      	adds	r3, #32
 8006be2:	2102      	movs	r1, #2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 f945 	bl	8006e74 <RCCEx_PLLSAI2_Config>
 8006bea:	4603      	mov	r3, r0
 8006bec:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006bee:	7cfb      	ldrb	r3, [r7, #19]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006bf4:	7cfb      	ldrb	r3, [r7, #19]
 8006bf6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01e      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006c04:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c14:	491c      	ldr	r1, [pc, #112]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c26:	d10c      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3320      	adds	r3, #32
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f920 	bl	8006e74 <RCCEx_PLLSAI2_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c38:	7cfb      	ldrb	r3, [r7, #19]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006c3e:	7cfb      	ldrb	r3, [r7, #19]
 8006c40:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d017      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c5e:	490a      	ldr	r1, [pc, #40]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c70:	d105      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	4a04      	ldr	r2, [pc, #16]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c7c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40021000 	.word	0x40021000

08006c8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c9a:	4b72      	ldr	r3, [pc, #456]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006ca6:	4b6f      	ldr	r3, [pc, #444]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0203 	and.w	r2, r3, #3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d103      	bne.n	8006cbe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d142      	bne.n	8006d44 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e03f      	b.n	8006d44 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d018      	beq.n	8006cfe <RCCEx_PLLSAI1_Config+0x72>
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d825      	bhi.n	8006d1c <RCCEx_PLLSAI1_Config+0x90>
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d002      	beq.n	8006cda <RCCEx_PLLSAI1_Config+0x4e>
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d009      	beq.n	8006cec <RCCEx_PLLSAI1_Config+0x60>
 8006cd8:	e020      	b.n	8006d1c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cda:	4b62      	ldr	r3, [pc, #392]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d11d      	bne.n	8006d22 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cea:	e01a      	b.n	8006d22 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cec:	4b5d      	ldr	r3, [pc, #372]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d116      	bne.n	8006d26 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cfc:	e013      	b.n	8006d26 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cfe:	4b59      	ldr	r3, [pc, #356]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10f      	bne.n	8006d2a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d0a:	4b56      	ldr	r3, [pc, #344]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d1a:	e006      	b.n	8006d2a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d20:	e004      	b.n	8006d2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d108      	bne.n	8006d44 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006d32:	4b4c      	ldr	r3, [pc, #304]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f023 0203 	bic.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4949      	ldr	r1, [pc, #292]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f040 8086 	bne.w	8006e58 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d4c:	4b45      	ldr	r3, [pc, #276]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a44      	ldr	r2, [pc, #272]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d58:	f7fc fdc0 	bl	80038dc <HAL_GetTick>
 8006d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d5e:	e009      	b.n	8006d74 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d60:	f7fc fdbc 	bl	80038dc <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d902      	bls.n	8006d74 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	73fb      	strb	r3, [r7, #15]
        break;
 8006d72:	e005      	b.n	8006d80 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d74:	4b3b      	ldr	r3, [pc, #236]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1ef      	bne.n	8006d60 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d168      	bne.n	8006e58 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d113      	bne.n	8006db4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d8c:	4b35      	ldr	r3, [pc, #212]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	4b35      	ldr	r3, [pc, #212]	; (8006e68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6892      	ldr	r2, [r2, #8]
 8006d98:	0211      	lsls	r1, r2, #8
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68d2      	ldr	r2, [r2, #12]
 8006d9e:	06d2      	lsls	r2, r2, #27
 8006da0:	4311      	orrs	r1, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6852      	ldr	r2, [r2, #4]
 8006da6:	3a01      	subs	r2, #1
 8006da8:	0112      	lsls	r2, r2, #4
 8006daa:	430a      	orrs	r2, r1
 8006dac:	492d      	ldr	r1, [pc, #180]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	610b      	str	r3, [r1, #16]
 8006db2:	e02d      	b.n	8006e10 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d115      	bne.n	8006de6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dba:	4b2a      	ldr	r3, [pc, #168]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	4b2b      	ldr	r3, [pc, #172]	; (8006e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6892      	ldr	r2, [r2, #8]
 8006dc6:	0211      	lsls	r1, r2, #8
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6912      	ldr	r2, [r2, #16]
 8006dcc:	0852      	lsrs	r2, r2, #1
 8006dce:	3a01      	subs	r2, #1
 8006dd0:	0552      	lsls	r2, r2, #21
 8006dd2:	4311      	orrs	r1, r2
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6852      	ldr	r2, [r2, #4]
 8006dd8:	3a01      	subs	r2, #1
 8006dda:	0112      	lsls	r2, r2, #4
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	4921      	ldr	r1, [pc, #132]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	610b      	str	r3, [r1, #16]
 8006de4:	e014      	b.n	8006e10 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006de6:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	4b21      	ldr	r3, [pc, #132]	; (8006e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	6892      	ldr	r2, [r2, #8]
 8006df2:	0211      	lsls	r1, r2, #8
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6952      	ldr	r2, [r2, #20]
 8006df8:	0852      	lsrs	r2, r2, #1
 8006dfa:	3a01      	subs	r2, #1
 8006dfc:	0652      	lsls	r2, r2, #25
 8006dfe:	4311      	orrs	r1, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6852      	ldr	r2, [r2, #4]
 8006e04:	3a01      	subs	r2, #1
 8006e06:	0112      	lsls	r2, r2, #4
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	4916      	ldr	r1, [pc, #88]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e10:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a13      	ldr	r2, [pc, #76]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1c:	f7fc fd5e 	bl	80038dc <HAL_GetTick>
 8006e20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e22:	e009      	b.n	8006e38 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e24:	f7fc fd5a 	bl	80038dc <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d902      	bls.n	8006e38 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	73fb      	strb	r3, [r7, #15]
          break;
 8006e36:	e005      	b.n	8006e44 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0ef      	beq.n	8006e24 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e4a:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	4904      	ldr	r1, [pc, #16]	; (8006e64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40021000 	.word	0x40021000
 8006e68:	07ff800f 	.word	0x07ff800f
 8006e6c:	ff9f800f 	.word	0xff9f800f
 8006e70:	f9ff800f 	.word	0xf9ff800f

08006e74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e82:	4b72      	ldr	r3, [pc, #456]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00e      	beq.n	8006eac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e8e:	4b6f      	ldr	r3, [pc, #444]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0203 	and.w	r2, r3, #3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d103      	bne.n	8006ea6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
       ||
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d142      	bne.n	8006f2c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
 8006eaa:	e03f      	b.n	8006f2c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d018      	beq.n	8006ee6 <RCCEx_PLLSAI2_Config+0x72>
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d825      	bhi.n	8006f04 <RCCEx_PLLSAI2_Config+0x90>
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d002      	beq.n	8006ec2 <RCCEx_PLLSAI2_Config+0x4e>
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d009      	beq.n	8006ed4 <RCCEx_PLLSAI2_Config+0x60>
 8006ec0:	e020      	b.n	8006f04 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ec2:	4b62      	ldr	r3, [pc, #392]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11d      	bne.n	8006f0a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ed2:	e01a      	b.n	8006f0a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ed4:	4b5d      	ldr	r3, [pc, #372]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d116      	bne.n	8006f0e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ee4:	e013      	b.n	8006f0e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ee6:	4b59      	ldr	r3, [pc, #356]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10f      	bne.n	8006f12 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ef2:	4b56      	ldr	r3, [pc, #344]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f02:	e006      	b.n	8006f12 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
      break;
 8006f08:	e004      	b.n	8006f14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006f0a:	bf00      	nop
 8006f0c:	e002      	b.n	8006f14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006f0e:	bf00      	nop
 8006f10:	e000      	b.n	8006f14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006f12:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d108      	bne.n	8006f2c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006f1a:	4b4c      	ldr	r3, [pc, #304]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f023 0203 	bic.w	r2, r3, #3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4949      	ldr	r1, [pc, #292]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 8086 	bne.w	8007040 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f34:	4b45      	ldr	r3, [pc, #276]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a44      	ldr	r2, [pc, #272]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f40:	f7fc fccc 	bl	80038dc <HAL_GetTick>
 8006f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f46:	e009      	b.n	8006f5c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f48:	f7fc fcc8 	bl	80038dc <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d902      	bls.n	8006f5c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	73fb      	strb	r3, [r7, #15]
        break;
 8006f5a:	e005      	b.n	8006f68 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f5c:	4b3b      	ldr	r3, [pc, #236]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1ef      	bne.n	8006f48 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d168      	bne.n	8007040 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d113      	bne.n	8006f9c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f74:	4b35      	ldr	r3, [pc, #212]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f76:	695a      	ldr	r2, [r3, #20]
 8006f78:	4b35      	ldr	r3, [pc, #212]	; (8007050 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6892      	ldr	r2, [r2, #8]
 8006f80:	0211      	lsls	r1, r2, #8
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68d2      	ldr	r2, [r2, #12]
 8006f86:	06d2      	lsls	r2, r2, #27
 8006f88:	4311      	orrs	r1, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6852      	ldr	r2, [r2, #4]
 8006f8e:	3a01      	subs	r2, #1
 8006f90:	0112      	lsls	r2, r2, #4
 8006f92:	430a      	orrs	r2, r1
 8006f94:	492d      	ldr	r1, [pc, #180]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	614b      	str	r3, [r1, #20]
 8006f9a:	e02d      	b.n	8006ff8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d115      	bne.n	8006fce <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fa2:	4b2a      	ldr	r3, [pc, #168]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fa4:	695a      	ldr	r2, [r3, #20]
 8006fa6:	4b2b      	ldr	r3, [pc, #172]	; (8007054 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6892      	ldr	r2, [r2, #8]
 8006fae:	0211      	lsls	r1, r2, #8
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6912      	ldr	r2, [r2, #16]
 8006fb4:	0852      	lsrs	r2, r2, #1
 8006fb6:	3a01      	subs	r2, #1
 8006fb8:	0552      	lsls	r2, r2, #21
 8006fba:	4311      	orrs	r1, r2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6852      	ldr	r2, [r2, #4]
 8006fc0:	3a01      	subs	r2, #1
 8006fc2:	0112      	lsls	r2, r2, #4
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	4921      	ldr	r1, [pc, #132]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	614b      	str	r3, [r1, #20]
 8006fcc:	e014      	b.n	8006ff8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fce:	4b1f      	ldr	r3, [pc, #124]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	4b21      	ldr	r3, [pc, #132]	; (8007058 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6892      	ldr	r2, [r2, #8]
 8006fda:	0211      	lsls	r1, r2, #8
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6952      	ldr	r2, [r2, #20]
 8006fe0:	0852      	lsrs	r2, r2, #1
 8006fe2:	3a01      	subs	r2, #1
 8006fe4:	0652      	lsls	r2, r2, #25
 8006fe6:	4311      	orrs	r1, r2
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6852      	ldr	r2, [r2, #4]
 8006fec:	3a01      	subs	r2, #1
 8006fee:	0112      	lsls	r2, r2, #4
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	4916      	ldr	r1, [pc, #88]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006ff8:	4b14      	ldr	r3, [pc, #80]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a13      	ldr	r2, [pc, #76]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007002:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007004:	f7fc fc6a 	bl	80038dc <HAL_GetTick>
 8007008:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800700a:	e009      	b.n	8007020 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800700c:	f7fc fc66 	bl	80038dc <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d902      	bls.n	8007020 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	73fb      	strb	r3, [r7, #15]
          break;
 800701e:	e005      	b.n	800702c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0ef      	beq.n	800700c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007032:	4b06      	ldr	r3, [pc, #24]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	4904      	ldr	r1, [pc, #16]	; (800704c <RCCEx_PLLSAI2_Config+0x1d8>)
 800703c:	4313      	orrs	r3, r2
 800703e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40021000 	.word	0x40021000
 8007050:	07ff800f 	.word	0x07ff800f
 8007054:	ff9f800f 	.word	0xff9f800f
 8007058:	f9ff800f 	.word	0xf9ff800f

0800705c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e095      	b.n	800719a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b00      	cmp	r3, #0
 8007074:	d108      	bne.n	8007088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707e:	d009      	beq.n	8007094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	61da      	str	r2, [r3, #28]
 8007086:	e005      	b.n	8007094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fc fa26 	bl	8003500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070d4:	d902      	bls.n	80070dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e002      	b.n	80070e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80070ea:	d007      	beq.n	80070fc <HAL_SPI_Init+0xa0>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070f4:	d002      	beq.n	80070fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	431a      	orrs	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713e:	ea42 0103 	orr.w	r1, r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	0c1b      	lsrs	r3, r3, #16
 8007158:	f003 0204 	and.w	r2, r3, #4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007178:	ea42 0103 	orr.w	r1, r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b088      	sub	sp, #32
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_SPI_Transmit+0x22>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e158      	b.n	8007476 <HAL_SPI_Transmit+0x2d4>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071cc:	f7fc fb86 	bl	80038dc <HAL_GetTick>
 80071d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d002      	beq.n	80071e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80071e2:	2302      	movs	r3, #2
 80071e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071e6:	e13d      	b.n	8007464 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <HAL_SPI_Transmit+0x52>
 80071ee:	88fb      	ldrh	r3, [r7, #6]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071f8:	e134      	b.n	8007464 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2203      	movs	r2, #3
 80071fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	88fa      	ldrh	r2, [r7, #6]
 8007212:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007244:	d10f      	bne.n	8007266 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b40      	cmp	r3, #64	; 0x40
 8007272:	d007      	beq.n	8007284 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800728c:	d94b      	bls.n	8007326 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SPI_Transmit+0xfa>
 8007296:	8afb      	ldrh	r3, [r7, #22]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d13e      	bne.n	800731a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	881a      	ldrh	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	1c9a      	adds	r2, r3, #2
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072c0:	e02b      	b.n	800731a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d112      	bne.n	80072f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	881a      	ldrh	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	1c9a      	adds	r2, r3, #2
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072f4:	e011      	b.n	800731a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f6:	f7fc faf1 	bl	80038dc <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d803      	bhi.n	800730e <HAL_SPI_Transmit+0x16c>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d102      	bne.n	8007314 <HAL_SPI_Transmit+0x172>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007318:	e0a4      	b.n	8007464 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1ce      	bne.n	80072c2 <HAL_SPI_Transmit+0x120>
 8007324:	e07c      	b.n	8007420 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_SPI_Transmit+0x192>
 800732e:	8afb      	ldrh	r3, [r7, #22]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d170      	bne.n	8007416 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b01      	cmp	r3, #1
 800733c:	d912      	bls.n	8007364 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	881a      	ldrh	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	1c9a      	adds	r2, r3, #2
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b02      	subs	r3, #2
 800735c:	b29a      	uxth	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007362:	e058      	b.n	8007416 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	330c      	adds	r3, #12
 800736e:	7812      	ldrb	r2, [r2, #0]
 8007370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800738a:	e044      	b.n	8007416 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b02      	cmp	r3, #2
 8007398:	d12b      	bne.n	80073f2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d912      	bls.n	80073ca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	881a      	ldrh	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	1c9a      	adds	r2, r3, #2
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b02      	subs	r3, #2
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073c8:	e025      	b.n	8007416 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	330c      	adds	r3, #12
 80073d4:	7812      	ldrb	r2, [r2, #0]
 80073d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073f0:	e011      	b.n	8007416 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073f2:	f7fc fa73 	bl	80038dc <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d803      	bhi.n	800740a <HAL_SPI_Transmit+0x268>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007408:	d102      	bne.n	8007410 <HAL_SPI_Transmit+0x26e>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d102      	bne.n	8007416 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007414:	e026      	b.n	8007464 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1b5      	bne.n	800738c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f001 f8c5 	bl	80085b4 <SPI_EndRxTxTransaction>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2220      	movs	r2, #32
 8007434:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10a      	bne.n	8007454 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800743e:	2300      	movs	r3, #0
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	77fb      	strb	r3, [r7, #31]
 8007460:	e000      	b.n	8007464 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007462:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007474:	7ffb      	ldrb	r3, [r7, #31]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3720      	adds	r7, #32
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b088      	sub	sp, #32
 8007482:	af02      	add	r7, sp, #8
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	4613      	mov	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800749a:	d112      	bne.n	80074c2 <HAL_SPI_Receive+0x44>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10e      	bne.n	80074c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2204      	movs	r2, #4
 80074a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074ac:	88fa      	ldrh	r2, [r7, #6]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	4613      	mov	r3, r2
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 f910 	bl	80076de <HAL_SPI_TransmitReceive>
 80074be:	4603      	mov	r3, r0
 80074c0:	e109      	b.n	80076d6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <HAL_SPI_Receive+0x52>
 80074cc:	2302      	movs	r3, #2
 80074ce:	e102      	b.n	80076d6 <HAL_SPI_Receive+0x258>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074d8:	f7fc fa00 	bl	80038dc <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d002      	beq.n	80074f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074ea:	2302      	movs	r3, #2
 80074ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ee:	e0e9      	b.n	80076c4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_SPI_Receive+0x7e>
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d102      	bne.n	8007502 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007500:	e0e0      	b.n	80076c4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2204      	movs	r2, #4
 8007506:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	88fa      	ldrh	r2, [r7, #6]
 8007522:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800754c:	d908      	bls.n	8007560 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	e007      	b.n	8007570 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800756e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007578:	d10f      	bne.n	800759a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007588:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007598:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d007      	beq.n	80075b8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075c0:	d867      	bhi.n	8007692 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075c2:	e030      	b.n	8007626 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d117      	bne.n	8007602 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f103 020c 	add.w	r2, r3, #12
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007600:	e011      	b.n	8007626 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007602:	f7fc f96b 	bl	80038dc <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d803      	bhi.n	800761a <HAL_SPI_Receive+0x19c>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007618:	d102      	bne.n	8007620 <HAL_SPI_Receive+0x1a2>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d102      	bne.n	8007626 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007624:	e04e      	b.n	80076c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1c8      	bne.n	80075c4 <HAL_SPI_Receive+0x146>
 8007632:	e034      	b.n	800769e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b01      	cmp	r3, #1
 8007640:	d115      	bne.n	800766e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	b292      	uxth	r2, r2
 800764e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007654:	1c9a      	adds	r2, r3, #2
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007660:	b29b      	uxth	r3, r3
 8007662:	3b01      	subs	r3, #1
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800766c:	e011      	b.n	8007692 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800766e:	f7fc f935 	bl	80038dc <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d803      	bhi.n	8007686 <HAL_SPI_Receive+0x208>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d102      	bne.n	800768c <HAL_SPI_Receive+0x20e>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007690:	e018      	b.n	80076c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1ca      	bne.n	8007634 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 ff2e 	bl	8008504 <SPI_EndRxTransaction>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2220      	movs	r2, #32
 80076b2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	75fb      	strb	r3, [r7, #23]
 80076c0:	e000      	b.n	80076c4 <HAL_SPI_Receive+0x246>
  }

error :
 80076c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b08a      	sub	sp, #40	; 0x28
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076ec:	2301      	movs	r3, #1
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <HAL_SPI_TransmitReceive+0x26>
 8007700:	2302      	movs	r3, #2
 8007702:	e1fb      	b.n	8007afc <HAL_SPI_TransmitReceive+0x41e>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800770c:	f7fc f8e6 	bl	80038dc <HAL_GetTick>
 8007710:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007718:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007720:	887b      	ldrh	r3, [r7, #2]
 8007722:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007724:	887b      	ldrh	r3, [r7, #2]
 8007726:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007728:	7efb      	ldrb	r3, [r7, #27]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d00e      	beq.n	800774c <HAL_SPI_TransmitReceive+0x6e>
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007734:	d106      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x66>
 800773e:	7efb      	ldrb	r3, [r7, #27]
 8007740:	2b04      	cmp	r3, #4
 8007742:	d003      	beq.n	800774c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007744:	2302      	movs	r3, #2
 8007746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800774a:	e1cd      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <HAL_SPI_TransmitReceive+0x80>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <HAL_SPI_TransmitReceive+0x80>
 8007758:	887b      	ldrh	r3, [r7, #2]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007764:	e1c0      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b04      	cmp	r3, #4
 8007770:	d003      	beq.n	800777a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2205      	movs	r2, #5
 8007776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	887a      	ldrh	r2, [r7, #2]
 800778a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	887a      	ldrh	r2, [r7, #2]
 8007792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	887a      	ldrh	r2, [r7, #2]
 80077a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	887a      	ldrh	r2, [r7, #2]
 80077a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077bc:	d802      	bhi.n	80077c4 <HAL_SPI_TransmitReceive+0xe6>
 80077be:	8a3b      	ldrh	r3, [r7, #16]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d908      	bls.n	80077d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077d2:	605a      	str	r2, [r3, #4]
 80077d4:	e007      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	d007      	beq.n	8007804 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800780c:	d97c      	bls.n	8007908 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <HAL_SPI_TransmitReceive+0x13e>
 8007816:	8a7b      	ldrh	r3, [r7, #18]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d169      	bne.n	80078f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	881a      	ldrh	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	1c9a      	adds	r2, r3, #2
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007840:	e056      	b.n	80078f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b02      	cmp	r3, #2
 800784e:	d11b      	bne.n	8007888 <HAL_SPI_TransmitReceive+0x1aa>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d016      	beq.n	8007888 <HAL_SPI_TransmitReceive+0x1aa>
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	2b01      	cmp	r3, #1
 800785e:	d113      	bne.n	8007888 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	881a      	ldrh	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	1c9a      	adds	r2, r3, #2
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b01      	cmp	r3, #1
 8007894:	d11c      	bne.n	80078d0 <HAL_SPI_TransmitReceive+0x1f2>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d016      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	b292      	uxth	r2, r2
 80078ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	1c9a      	adds	r2, r3, #2
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078cc:	2301      	movs	r3, #1
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078d0:	f7fc f804 	bl	80038dc <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078dc:	429a      	cmp	r2, r3
 80078de:	d807      	bhi.n	80078f0 <HAL_SPI_TransmitReceive+0x212>
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d003      	beq.n	80078f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80078ee:	e0fb      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1a3      	bne.n	8007842 <HAL_SPI_TransmitReceive+0x164>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d19d      	bne.n	8007842 <HAL_SPI_TransmitReceive+0x164>
 8007906:	e0df      	b.n	8007ac8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_SPI_TransmitReceive+0x23a>
 8007910:	8a7b      	ldrh	r3, [r7, #18]
 8007912:	2b01      	cmp	r3, #1
 8007914:	f040 80cb 	bne.w	8007aae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b01      	cmp	r3, #1
 8007920:	d912      	bls.n	8007948 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	881a      	ldrh	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	1c9a      	adds	r2, r3, #2
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b02      	subs	r3, #2
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007946:	e0b2      	b.n	8007aae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	330c      	adds	r3, #12
 8007952:	7812      	ldrb	r2, [r2, #0]
 8007954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800796e:	e09e      	b.n	8007aae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b02      	cmp	r3, #2
 800797c:	d134      	bne.n	80079e8 <HAL_SPI_TransmitReceive+0x30a>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d02f      	beq.n	80079e8 <HAL_SPI_TransmitReceive+0x30a>
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	2b01      	cmp	r3, #1
 800798c:	d12c      	bne.n	80079e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d912      	bls.n	80079be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	881a      	ldrh	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	1c9a      	adds	r2, r3, #2
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b02      	subs	r3, #2
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079bc:	e012      	b.n	80079e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d148      	bne.n	8007a88 <HAL_SPI_TransmitReceive+0x3aa>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d042      	beq.n	8007a88 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d923      	bls.n	8007a56 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	b292      	uxth	r2, r2
 8007a1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	1c9a      	adds	r2, r3, #2
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b02      	subs	r3, #2
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d81f      	bhi.n	8007a84 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a52:	605a      	str	r2, [r3, #4]
 8007a54:	e016      	b.n	8007a84 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f103 020c 	add.w	r2, r3, #12
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	7812      	ldrb	r2, [r2, #0]
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a84:	2301      	movs	r3, #1
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a88:	f7fb ff28 	bl	80038dc <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d803      	bhi.n	8007aa0 <HAL_SPI_TransmitReceive+0x3c2>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d102      	bne.n	8007aa6 <HAL_SPI_TransmitReceive+0x3c8>
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007aac:	e01c      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f47f af5b 	bne.w	8007970 <HAL_SPI_TransmitReceive+0x292>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f47f af54 	bne.w	8007970 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ac8:	69fa      	ldr	r2, [r7, #28]
 8007aca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fd71 	bl	80085b4 <SPI_EndRxTxTransaction>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d006      	beq.n	8007ae6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	661a      	str	r2, [r3, #96]	; 0x60
 8007ae4:	e000      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007ae6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3728      	adds	r7, #40	; 0x28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d110      	bne.n	8007b40 <HAL_SPI_Receive_IT+0x3c>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b26:	d10b      	bne.n	8007b40 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2204      	movs	r2, #4
 8007b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 f894 	bl	8007c64 <HAL_SPI_TransmitReceive_IT>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	e089      	b.n	8007c54 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_SPI_Receive_IT+0x4a>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e082      	b.n	8007c54 <HAL_SPI_Receive_IT+0x150>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d002      	beq.n	8007b68 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007b62:	2302      	movs	r3, #2
 8007b64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b66:	e070      	b.n	8007c4a <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_SPI_Receive_IT+0x70>
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b78:	e067      	b.n	8007c4a <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	88fa      	ldrh	r2, [r7, #6]
 8007b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	88fa      	ldrh	r2, [r7, #6]
 8007b9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bbe:	d90b      	bls.n	8007bd8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bce:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <HAL_SPI_Receive_IT+0x158>)
 8007bd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8007bd6:	e00a      	b.n	8007bee <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007be6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a1d      	ldr	r2, [pc, #116]	; (8007c60 <HAL_SPI_Receive_IT+0x15c>)
 8007bec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bf6:	d10f      	bne.n	8007c18 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c16:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007c26:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c32:	2b40      	cmp	r3, #64	; 0x40
 8007c34:	d008      	beq.n	8007c48 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e000      	b.n	8007c4a <HAL_SPI_Receive_IT+0x146>
  }

error :
 8007c48:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	0800827d 	.word	0x0800827d
 8007c60:	0800822d 	.word	0x0800822d

08007c64 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_SPI_TransmitReceive_IT+0x20>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e091      	b.n	8007da8 <HAL_SPI_TransmitReceive_IT+0x144>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c92:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c9a:	7dbb      	ldrb	r3, [r7, #22]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d00d      	beq.n	8007cbc <HAL_SPI_TransmitReceive_IT+0x58>
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ca6:	d106      	bne.n	8007cb6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <HAL_SPI_TransmitReceive_IT+0x52>
 8007cb0:	7dbb      	ldrb	r3, [r7, #22]
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d002      	beq.n	8007cbc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cba:	e070      	b.n	8007d9e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <HAL_SPI_TransmitReceive_IT+0x6a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <HAL_SPI_TransmitReceive_IT+0x6a>
 8007cc8:	887b      	ldrh	r3, [r7, #2]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d102      	bne.n	8007cd4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cd2:	e064      	b.n	8007d9e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b04      	cmp	r3, #4
 8007cde:	d003      	beq.n	8007ce8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2205      	movs	r2, #5
 8007ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	887a      	ldrh	r2, [r7, #2]
 8007cf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	887a      	ldrh	r2, [r7, #2]
 8007cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	887a      	ldrh	r2, [r7, #2]
 8007d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	887a      	ldrh	r2, [r7, #2]
 8007d12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d1e:	d906      	bls.n	8007d2e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4a24      	ldr	r2, [pc, #144]	; (8007db4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007d24:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4a23      	ldr	r2, [pc, #140]	; (8007db8 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007d2a:	651a      	str	r2, [r3, #80]	; 0x50
 8007d2c:	e005      	b.n	8007d3a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4a22      	ldr	r2, [pc, #136]	; (8007dbc <HAL_SPI_TransmitReceive_IT+0x158>)
 8007d32:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4a22      	ldr	r2, [pc, #136]	; (8007dc0 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007d38:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d42:	d802      	bhi.n	8007d4a <HAL_SPI_TransmitReceive_IT+0xe6>
 8007d44:	887b      	ldrh	r3, [r7, #2]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d908      	bls.n	8007d5c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d58:	605a      	str	r2, [r3, #4]
 8007d5a:	e007      	b.n	8007d6c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d6a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007d7a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	d008      	beq.n	8007d9c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	e000      	b.n	8007d9e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007d9c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	08008167 	.word	0x08008167
 8007db8:	080081cd 	.word	0x080081cd
 8007dbc:	08008017 	.word	0x08008017
 8007dc0:	080080d5 	.word	0x080080d5

08007dc4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	099b      	lsrs	r3, r3, #6
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10f      	bne.n	8007e08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	099b      	lsrs	r3, r3, #6
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
    return;
 8007e06:	e0d7      	b.n	8007fb8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	085b      	lsrs	r3, r3, #1
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <HAL_SPI_IRQHandler+0x66>
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	09db      	lsrs	r3, r3, #7
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	4798      	blx	r3
    return;
 8007e28:	e0c6      	b.n	8007fb8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10c      	bne.n	8007e50 <HAL_SPI_IRQHandler+0x8c>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	099b      	lsrs	r3, r3, #6
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	0a1b      	lsrs	r3, r3, #8
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 80b4 	beq.w	8007fb8 <HAL_SPI_IRQHandler+0x1f4>
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	095b      	lsrs	r3, r3, #5
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 80ad 	beq.w	8007fb8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	099b      	lsrs	r3, r3, #6
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d023      	beq.n	8007eb2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d011      	beq.n	8007e9a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7a:	f043 0204 	orr.w	r2, r3, #4
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e82:	2300      	movs	r3, #0
 8007e84:	617b      	str	r3, [r7, #20]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	617b      	str	r3, [r7, #20]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	e00b      	b.n	8007eb2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	613b      	str	r3, [r7, #16]
 8007eae:	693b      	ldr	r3, [r7, #16]
        return;
 8007eb0:	e082      	b.n	8007fb8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d014      	beq.n	8007ee8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec2:	f043 0201 	orr.w	r2, r3, #1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	0a1b      	lsrs	r3, r3, #8
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00c      	beq.n	8007f0e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef8:	f043 0208 	orr.w	r2, r3, #8
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f00:	2300      	movs	r3, #0
 8007f02:	60bb      	str	r3, [r7, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	60bb      	str	r3, [r7, #8]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d04f      	beq.n	8007fb6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f24:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d104      	bne.n	8007f42 <HAL_SPI_IRQHandler+0x17e>
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d034      	beq.n	8007fac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0203 	bic.w	r2, r2, #3
 8007f50:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d011      	beq.n	8007f7e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5e:	4a18      	ldr	r2, [pc, #96]	; (8007fc0 <HAL_SPI_IRQHandler+0x1fc>)
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fb fdf9 	bl	8003b5e <HAL_DMA_Abort_IT>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d005      	beq.n	8007f7e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d016      	beq.n	8007fb4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8a:	4a0d      	ldr	r2, [pc, #52]	; (8007fc0 <HAL_SPI_IRQHandler+0x1fc>)
 8007f8c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fb fde3 	bl	8003b5e <HAL_DMA_Abort_IT>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007faa:	e003      	b.n	8007fb4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f813 	bl	8007fd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007fb2:	e000      	b.n	8007fb6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007fb4:	bf00      	nop
    return;
 8007fb6:	bf00      	nop
  }
}
 8007fb8:	3720      	adds	r7, #32
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	08007fed 	.word	0x08007fed

08007fc4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7ff ffe5 	bl	8007fd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008024:	b29b      	uxth	r3, r3
 8008026:	2b01      	cmp	r3, #1
 8008028:	d923      	bls.n	8008072 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	b292      	uxth	r2, r2
 8008036:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	1c9a      	adds	r2, r3, #2
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b02      	subs	r3, #2
 800804c:	b29a      	uxth	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b01      	cmp	r3, #1
 800805e:	d11f      	bne.n	80080a0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800806e:	605a      	str	r2, [r3, #4]
 8008070:	e016      	b.n	80080a0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f103 020c 	add.w	r2, r3, #12
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	b2d2      	uxtb	r2, r2
 8008082:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10f      	bne.n	80080cc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80080ba:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d102      	bne.n	80080cc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 faba 	bl	8008640 <SPI_CloseRxTx_ISR>
    }
  }
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d912      	bls.n	800810c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	881a      	ldrh	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f6:	1c9a      	adds	r2, r3, #2
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b02      	subs	r3, #2
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	87da      	strh	r2, [r3, #62]	; 0x3e
 800810a:	e012      	b.n	8008132 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	330c      	adds	r3, #12
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008136:	b29b      	uxth	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	d110      	bne.n	800815e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800814a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008152:	b29b      	uxth	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d102      	bne.n	800815e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fa71 	bl	8008640 <SPI_CloseRxTx_ISR>
    }
  }
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008178:	b292      	uxth	r2, r2
 800817a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	1c9a      	adds	r2, r3, #2
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800819e:	b29b      	uxth	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10f      	bne.n	80081c4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa3e 	bl	8008640 <SPI_CloseRxTx_ISR>
    }
  }
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	881a      	ldrh	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	1c9a      	adds	r2, r3, #2
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d110      	bne.n	8008224 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008210:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa0e 	bl	8008640 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f103 020c 	add.w	r2, r3, #12
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	7812      	ldrb	r2, [r2, #0]
 8008242:	b2d2      	uxtb	r2, r2
 8008244:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa28 	bl	80086c4 <SPI_CloseRx_ISR>
  }
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	b292      	uxth	r2, r2
 8008290:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	1c9a      	adds	r2, r3, #2
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa02 	bl	80086c4 <SPI_CloseRx_ISR>
  }
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	4613      	mov	r3, r2
 80082d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082d8:	f7fb fb00 	bl	80038dc <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	4413      	add	r3, r2
 80082e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082e8:	f7fb faf8 	bl	80038dc <HAL_GetTick>
 80082ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082ee:	4b39      	ldr	r3, [pc, #228]	; (80083d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	015b      	lsls	r3, r3, #5
 80082f4:	0d1b      	lsrs	r3, r3, #20
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	fb02 f303 	mul.w	r3, r2, r3
 80082fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082fe:	e054      	b.n	80083aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008306:	d050      	beq.n	80083aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008308:	f7fb fae8 	bl	80038dc <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	429a      	cmp	r2, r3
 8008316:	d902      	bls.n	800831e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d13d      	bne.n	800839a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800832c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008336:	d111      	bne.n	800835c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008340:	d004      	beq.n	800834c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800834a:	d107      	bne.n	800835c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800835a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008364:	d10f      	bne.n	8008386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e017      	b.n	80083ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4013      	ands	r3, r2
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	bf0c      	ite	eq
 80083ba:	2301      	moveq	r3, #1
 80083bc:	2300      	movne	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d19b      	bne.n	8008300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000024 	.word	0x20000024

080083d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083ea:	f7fb fa77 	bl	80038dc <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	1a9b      	subs	r3, r3, r2
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	4413      	add	r3, r2
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80083fa:	f7fb fa6f 	bl	80038dc <HAL_GetTick>
 80083fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	330c      	adds	r3, #12
 8008406:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008408:	4b3d      	ldr	r3, [pc, #244]	; (8008500 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	00da      	lsls	r2, r3, #3
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	0d1b      	lsrs	r3, r3, #20
 8008418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841a:	fb02 f303 	mul.w	r3, r2, r3
 800841e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008420:	e060      	b.n	80084e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008428:	d107      	bne.n	800843a <SPI_WaitFifoStateUntilTimeout+0x62>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008438:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008440:	d050      	beq.n	80084e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008442:	f7fb fa4b 	bl	80038dc <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844e:	429a      	cmp	r2, r3
 8008450:	d902      	bls.n	8008458 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	d13d      	bne.n	80084d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008466:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008470:	d111      	bne.n	8008496 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800847a:	d004      	beq.n	8008486 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008484:	d107      	bne.n	8008496 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008494:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849e:	d10f      	bne.n	80084c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e010      	b.n	80084f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084da:	2300      	movs	r3, #0
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689a      	ldr	r2, [r3, #8]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	4013      	ands	r3, r2
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d196      	bne.n	8008422 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3728      	adds	r7, #40	; 0x28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000024 	.word	0x20000024

08008504 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af02      	add	r7, sp, #8
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008518:	d111      	bne.n	800853e <SPI_EndRxTransaction+0x3a>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008522:	d004      	beq.n	800852e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800852c:	d107      	bne.n	800853e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800853c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2200      	movs	r2, #0
 8008546:	2180      	movs	r1, #128	; 0x80
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f7ff febd 	bl	80082c8 <SPI_WaitFlagStateUntilTimeout>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008558:	f043 0220 	orr.w	r2, r3, #32
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e023      	b.n	80085ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800856c:	d11d      	bne.n	80085aa <SPI_EndRxTransaction+0xa6>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008576:	d004      	beq.n	8008582 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008580:	d113      	bne.n	80085aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2200      	movs	r2, #0
 800858a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff ff22 	bl	80083d8 <SPI_WaitFifoStateUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859e:	f043 0220 	orr.w	r2, r3, #32
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e000      	b.n	80085ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f7ff ff03 	bl	80083d8 <SPI_WaitFifoStateUntilTimeout>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d007      	beq.n	80085e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085dc:	f043 0220 	orr.w	r2, r3, #32
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e027      	b.n	8008638 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2200      	movs	r2, #0
 80085f0:	2180      	movs	r1, #128	; 0x80
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f7ff fe68 	bl	80082c8 <SPI_WaitFlagStateUntilTimeout>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008602:	f043 0220 	orr.w	r2, r3, #32
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e014      	b.n	8008638 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2200      	movs	r2, #0
 8008616:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f7ff fedc 	bl	80083d8 <SPI_WaitFifoStateUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d007      	beq.n	8008636 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800862a:	f043 0220 	orr.w	r2, r3, #32
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e000      	b.n	8008638 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008648:	f7fb f948 	bl	80038dc <HAL_GetTick>
 800864c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f022 0220 	bic.w	r2, r2, #32
 800865c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	2164      	movs	r1, #100	; 0x64
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff ffa6 	bl	80085b4 <SPI_EndRxTxTransaction>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008672:	f043 0220 	orr.w	r2, r3, #32
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867e:	2b00      	cmp	r3, #0
 8008680:	d115      	bne.n	80086ae <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b04      	cmp	r3, #4
 800868c:	d107      	bne.n	800869e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7f9 f884 	bl	80017a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800869c:	e00e      	b.n	80086bc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fc8c 	bl	8007fc4 <HAL_SPI_TxRxCpltCallback>
}
 80086ac:	e006      	b.n	80086bc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fc8e 	bl	8007fd8 <HAL_SPI_ErrorCallback>
}
 80086bc:	bf00      	nop
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80086da:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80086dc:	f7fb f8fe 	bl	80038dc <HAL_GetTick>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461a      	mov	r2, r3
 80086e4:	2164      	movs	r1, #100	; 0x64
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff ff0c 	bl	8008504 <SPI_EndRxTransaction>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f6:	f043 0220 	orr.w	r2, r3, #32
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7f9 f848 	bl	80017a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008714:	e002      	b.n	800871c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff fc5e 	bl	8007fd8 <HAL_SPI_ErrorCallback>
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e042      	b.n	80087bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800873c:	2b00      	cmp	r3, #0
 800873e:	d106      	bne.n	800874e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7fa ff79 	bl	8003640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2224      	movs	r2, #36	; 0x24
 8008752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0201 	bic.w	r2, r2, #1
 8008764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8c4 	bl	80088f4 <UART_SetConfig>
 800876c:	4603      	mov	r3, r0
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e022      	b.n	80087bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fbb4 	bl	8008eec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689a      	ldr	r2, [r3, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fc3b 	bl	8009030 <UART_CheckIdleState>
 80087ba:	4603      	mov	r3, r0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08a      	sub	sp, #40	; 0x28
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	4613      	mov	r3, r2
 80087d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087da:	2b20      	cmp	r3, #32
 80087dc:	f040 8084 	bne.w	80088e8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <HAL_UART_Transmit+0x28>
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e07c      	b.n	80088ea <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d101      	bne.n	80087fe <HAL_UART_Transmit+0x3a>
 80087fa:	2302      	movs	r3, #2
 80087fc:	e075      	b.n	80088ea <HAL_UART_Transmit+0x126>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2221      	movs	r2, #33	; 0x21
 8008812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008816:	f7fb f861 	bl	80038dc <HAL_GetTick>
 800881a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	88fa      	ldrh	r2, [r7, #6]
 8008820:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	88fa      	ldrh	r2, [r7, #6]
 8008828:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008834:	d108      	bne.n	8008848 <HAL_UART_Transmit+0x84>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d104      	bne.n	8008848 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	e003      	b.n	8008850 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800884c:	2300      	movs	r3, #0
 800884e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008858:	e02d      	b.n	80088b6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2200      	movs	r2, #0
 8008862:	2180      	movs	r1, #128	; 0x80
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fc2e 	bl	80090c6 <UART_WaitOnFlagUntilTimeout>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e03a      	b.n	80088ea <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	881a      	ldrh	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008886:	b292      	uxth	r2, r2
 8008888:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	3302      	adds	r3, #2
 800888e:	61bb      	str	r3, [r7, #24]
 8008890:	e008      	b.n	80088a4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	781a      	ldrb	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	b292      	uxth	r2, r2
 800889c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	3301      	adds	r3, #1
 80088a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1cb      	bne.n	800885a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2140      	movs	r1, #64	; 0x40
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fbfa 	bl	80090c6 <UART_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e006      	b.n	80088ea <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2220      	movs	r2, #32
 80088e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	e000      	b.n	80088ea <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80088e8:	2302      	movs	r3, #2
  }
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3720      	adds	r7, #32
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088f8:	b08c      	sub	sp, #48	; 0x30
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	431a      	orrs	r2, r3
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	431a      	orrs	r2, r3
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	4313      	orrs	r3, r2
 800891a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	4baa      	ldr	r3, [pc, #680]	; (8008bcc <UART_SetConfig+0x2d8>)
 8008924:	4013      	ands	r3, r2
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	6812      	ldr	r2, [r2, #0]
 800892a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800892c:	430b      	orrs	r3, r1
 800892e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a9f      	ldr	r2, [pc, #636]	; (8008bd0 <UART_SetConfig+0x2dc>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d004      	beq.n	8008960 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800895c:	4313      	orrs	r3, r2
 800895e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800896a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	6812      	ldr	r2, [r2, #0]
 8008972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008974:	430b      	orrs	r3, r1
 8008976:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897e:	f023 010f 	bic.w	r1, r3, #15
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a90      	ldr	r2, [pc, #576]	; (8008bd4 <UART_SetConfig+0x2e0>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d125      	bne.n	80089e4 <UART_SetConfig+0xf0>
 8008998:	4b8f      	ldr	r3, [pc, #572]	; (8008bd8 <UART_SetConfig+0x2e4>)
 800899a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d81a      	bhi.n	80089dc <UART_SetConfig+0xe8>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <UART_SetConfig+0xb8>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089bd 	.word	0x080089bd
 80089b0:	080089cd 	.word	0x080089cd
 80089b4:	080089c5 	.word	0x080089c5
 80089b8:	080089d5 	.word	0x080089d5
 80089bc:	2301      	movs	r3, #1
 80089be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c2:	e116      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 80089c4:	2302      	movs	r3, #2
 80089c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ca:	e112      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 80089cc:	2304      	movs	r3, #4
 80089ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d2:	e10e      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 80089d4:	2308      	movs	r3, #8
 80089d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089da:	e10a      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 80089dc:	2310      	movs	r3, #16
 80089de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089e2:	e106      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a7c      	ldr	r2, [pc, #496]	; (8008bdc <UART_SetConfig+0x2e8>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d138      	bne.n	8008a60 <UART_SetConfig+0x16c>
 80089ee:	4b7a      	ldr	r3, [pc, #488]	; (8008bd8 <UART_SetConfig+0x2e4>)
 80089f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f4:	f003 030c 	and.w	r3, r3, #12
 80089f8:	2b0c      	cmp	r3, #12
 80089fa:	d82d      	bhi.n	8008a58 <UART_SetConfig+0x164>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0x110>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a39 	.word	0x08008a39
 8008a08:	08008a59 	.word	0x08008a59
 8008a0c:	08008a59 	.word	0x08008a59
 8008a10:	08008a59 	.word	0x08008a59
 8008a14:	08008a49 	.word	0x08008a49
 8008a18:	08008a59 	.word	0x08008a59
 8008a1c:	08008a59 	.word	0x08008a59
 8008a20:	08008a59 	.word	0x08008a59
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a59 	.word	0x08008a59
 8008a2c:	08008a59 	.word	0x08008a59
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a3e:	e0d8      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008a40:	2302      	movs	r3, #2
 8008a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a46:	e0d4      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008a48:	2304      	movs	r3, #4
 8008a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a4e:	e0d0      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008a50:	2308      	movs	r3, #8
 8008a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a56:	e0cc      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008a58:	2310      	movs	r3, #16
 8008a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a5e:	e0c8      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a5e      	ldr	r2, [pc, #376]	; (8008be0 <UART_SetConfig+0x2ec>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d125      	bne.n	8008ab6 <UART_SetConfig+0x1c2>
 8008a6a:	4b5b      	ldr	r3, [pc, #364]	; (8008bd8 <UART_SetConfig+0x2e4>)
 8008a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008a74:	2b30      	cmp	r3, #48	; 0x30
 8008a76:	d016      	beq.n	8008aa6 <UART_SetConfig+0x1b2>
 8008a78:	2b30      	cmp	r3, #48	; 0x30
 8008a7a:	d818      	bhi.n	8008aae <UART_SetConfig+0x1ba>
 8008a7c:	2b20      	cmp	r3, #32
 8008a7e:	d00a      	beq.n	8008a96 <UART_SetConfig+0x1a2>
 8008a80:	2b20      	cmp	r3, #32
 8008a82:	d814      	bhi.n	8008aae <UART_SetConfig+0x1ba>
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <UART_SetConfig+0x19a>
 8008a88:	2b10      	cmp	r3, #16
 8008a8a:	d008      	beq.n	8008a9e <UART_SetConfig+0x1aa>
 8008a8c:	e00f      	b.n	8008aae <UART_SetConfig+0x1ba>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a94:	e0ad      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008a96:	2302      	movs	r3, #2
 8008a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a9c:	e0a9      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008a9e:	2304      	movs	r3, #4
 8008aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aa4:	e0a5      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aac:	e0a1      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008aae:	2310      	movs	r3, #16
 8008ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ab4:	e09d      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a4a      	ldr	r2, [pc, #296]	; (8008be4 <UART_SetConfig+0x2f0>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d125      	bne.n	8008b0c <UART_SetConfig+0x218>
 8008ac0:	4b45      	ldr	r3, [pc, #276]	; (8008bd8 <UART_SetConfig+0x2e4>)
 8008ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008aca:	2bc0      	cmp	r3, #192	; 0xc0
 8008acc:	d016      	beq.n	8008afc <UART_SetConfig+0x208>
 8008ace:	2bc0      	cmp	r3, #192	; 0xc0
 8008ad0:	d818      	bhi.n	8008b04 <UART_SetConfig+0x210>
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d00a      	beq.n	8008aec <UART_SetConfig+0x1f8>
 8008ad6:	2b80      	cmp	r3, #128	; 0x80
 8008ad8:	d814      	bhi.n	8008b04 <UART_SetConfig+0x210>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <UART_SetConfig+0x1f0>
 8008ade:	2b40      	cmp	r3, #64	; 0x40
 8008ae0:	d008      	beq.n	8008af4 <UART_SetConfig+0x200>
 8008ae2:	e00f      	b.n	8008b04 <UART_SetConfig+0x210>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aea:	e082      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008aec:	2302      	movs	r3, #2
 8008aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008af2:	e07e      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008af4:	2304      	movs	r3, #4
 8008af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008afa:	e07a      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008afc:	2308      	movs	r3, #8
 8008afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b02:	e076      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008b04:	2310      	movs	r3, #16
 8008b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b0a:	e072      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a35      	ldr	r2, [pc, #212]	; (8008be8 <UART_SetConfig+0x2f4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d12a      	bne.n	8008b6c <UART_SetConfig+0x278>
 8008b16:	4b30      	ldr	r3, [pc, #192]	; (8008bd8 <UART_SetConfig+0x2e4>)
 8008b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b24:	d01a      	beq.n	8008b5c <UART_SetConfig+0x268>
 8008b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b2a:	d81b      	bhi.n	8008b64 <UART_SetConfig+0x270>
 8008b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b30:	d00c      	beq.n	8008b4c <UART_SetConfig+0x258>
 8008b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b36:	d815      	bhi.n	8008b64 <UART_SetConfig+0x270>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <UART_SetConfig+0x250>
 8008b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b40:	d008      	beq.n	8008b54 <UART_SetConfig+0x260>
 8008b42:	e00f      	b.n	8008b64 <UART_SetConfig+0x270>
 8008b44:	2300      	movs	r3, #0
 8008b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b4a:	e052      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b52:	e04e      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008b54:	2304      	movs	r3, #4
 8008b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b5a:	e04a      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008b5c:	2308      	movs	r3, #8
 8008b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b62:	e046      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008b64:	2310      	movs	r3, #16
 8008b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b6a:	e042      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a17      	ldr	r2, [pc, #92]	; (8008bd0 <UART_SetConfig+0x2dc>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d13a      	bne.n	8008bec <UART_SetConfig+0x2f8>
 8008b76:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <UART_SetConfig+0x2e4>)
 8008b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008b80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b84:	d01a      	beq.n	8008bbc <UART_SetConfig+0x2c8>
 8008b86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b8a:	d81b      	bhi.n	8008bc4 <UART_SetConfig+0x2d0>
 8008b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b90:	d00c      	beq.n	8008bac <UART_SetConfig+0x2b8>
 8008b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b96:	d815      	bhi.n	8008bc4 <UART_SetConfig+0x2d0>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <UART_SetConfig+0x2b0>
 8008b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ba0:	d008      	beq.n	8008bb4 <UART_SetConfig+0x2c0>
 8008ba2:	e00f      	b.n	8008bc4 <UART_SetConfig+0x2d0>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008baa:	e022      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008bac:	2302      	movs	r3, #2
 8008bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb2:	e01e      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bba:	e01a      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bc2:	e016      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bca:	e012      	b.n	8008bf2 <UART_SetConfig+0x2fe>
 8008bcc:	cfff69f3 	.word	0xcfff69f3
 8008bd0:	40008000 	.word	0x40008000
 8008bd4:	40013800 	.word	0x40013800
 8008bd8:	40021000 	.word	0x40021000
 8008bdc:	40004400 	.word	0x40004400
 8008be0:	40004800 	.word	0x40004800
 8008be4:	40004c00 	.word	0x40004c00
 8008be8:	40005000 	.word	0x40005000
 8008bec:	2310      	movs	r3, #16
 8008bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4aae      	ldr	r2, [pc, #696]	; (8008eb0 <UART_SetConfig+0x5bc>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	f040 8097 	bne.w	8008d2c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	d823      	bhi.n	8008c4e <UART_SetConfig+0x35a>
 8008c06:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <UART_SetConfig+0x318>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c31 	.word	0x08008c31
 8008c10:	08008c4f 	.word	0x08008c4f
 8008c14:	08008c39 	.word	0x08008c39
 8008c18:	08008c4f 	.word	0x08008c4f
 8008c1c:	08008c3f 	.word	0x08008c3f
 8008c20:	08008c4f 	.word	0x08008c4f
 8008c24:	08008c4f 	.word	0x08008c4f
 8008c28:	08008c4f 	.word	0x08008c4f
 8008c2c:	08008c47 	.word	0x08008c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c30:	f7fd fbb0 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8008c34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c36:	e010      	b.n	8008c5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c38:	4b9e      	ldr	r3, [pc, #632]	; (8008eb4 <UART_SetConfig+0x5c0>)
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c3c:	e00d      	b.n	8008c5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c3e:	f7fd fb11 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 8008c42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c44:	e009      	b.n	8008c5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c4c:	e005      	b.n	8008c5a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 8130 	beq.w	8008ec2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	4a94      	ldr	r2, [pc, #592]	; (8008eb8 <UART_SetConfig+0x5c4>)
 8008c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	4413      	add	r3, r2
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d305      	bcc.n	8008c92 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d903      	bls.n	8008c9a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c98:	e113      	b.n	8008ec2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	60bb      	str	r3, [r7, #8]
 8008ca0:	60fa      	str	r2, [r7, #12]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	4a84      	ldr	r2, [pc, #528]	; (8008eb8 <UART_SetConfig+0x5c4>)
 8008ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	2200      	movs	r2, #0
 8008cb0:	603b      	str	r3, [r7, #0]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cbc:	f7f7 fa9e 	bl	80001fc <__aeabi_uldivmod>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	f04f 0300 	mov.w	r3, #0
 8008cd0:	020b      	lsls	r3, r1, #8
 8008cd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cd6:	0202      	lsls	r2, r0, #8
 8008cd8:	6979      	ldr	r1, [r7, #20]
 8008cda:	6849      	ldr	r1, [r1, #4]
 8008cdc:	0849      	lsrs	r1, r1, #1
 8008cde:	2000      	movs	r0, #0
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	eb12 0804 	adds.w	r8, r2, r4
 8008ce8:	eb43 0905 	adc.w	r9, r3, r5
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	469a      	mov	sl, r3
 8008cf4:	4693      	mov	fp, r2
 8008cf6:	4652      	mov	r2, sl
 8008cf8:	465b      	mov	r3, fp
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	f7f7 fa7d 	bl	80001fc <__aeabi_uldivmod>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4613      	mov	r3, r2
 8008d08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d10:	d308      	bcc.n	8008d24 <UART_SetConfig+0x430>
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d18:	d204      	bcs.n	8008d24 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	6a3a      	ldr	r2, [r7, #32]
 8008d20:	60da      	str	r2, [r3, #12]
 8008d22:	e0ce      	b.n	8008ec2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d2a:	e0ca      	b.n	8008ec2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d34:	d166      	bne.n	8008e04 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008d36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d827      	bhi.n	8008d8e <UART_SetConfig+0x49a>
 8008d3e:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <UART_SetConfig+0x450>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d69 	.word	0x08008d69
 8008d48:	08008d71 	.word	0x08008d71
 8008d4c:	08008d79 	.word	0x08008d79
 8008d50:	08008d8f 	.word	0x08008d8f
 8008d54:	08008d7f 	.word	0x08008d7f
 8008d58:	08008d8f 	.word	0x08008d8f
 8008d5c:	08008d8f 	.word	0x08008d8f
 8008d60:	08008d8f 	.word	0x08008d8f
 8008d64:	08008d87 	.word	0x08008d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d68:	f7fd fb14 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8008d6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d6e:	e014      	b.n	8008d9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d70:	f7fd fb26 	bl	80063c0 <HAL_RCC_GetPCLK2Freq>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d76:	e010      	b.n	8008d9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d78:	4b4e      	ldr	r3, [pc, #312]	; (8008eb4 <UART_SetConfig+0x5c0>)
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d7c:	e00d      	b.n	8008d9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d7e:	f7fd fa71 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 8008d82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d84:	e009      	b.n	8008d9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d8c:	e005      	b.n	8008d9a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8090 	beq.w	8008ec2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	4a44      	ldr	r2, [pc, #272]	; (8008eb8 <UART_SetConfig+0x5c4>)
 8008da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dac:	461a      	mov	r2, r3
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008db4:	005a      	lsls	r2, r3, #1
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	085b      	lsrs	r3, r3, #1
 8008dbc:	441a      	add	r2, r3
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	2b0f      	cmp	r3, #15
 8008dcc:	d916      	bls.n	8008dfc <UART_SetConfig+0x508>
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd4:	d212      	bcs.n	8008dfc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	f023 030f 	bic.w	r3, r3, #15
 8008dde:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	085b      	lsrs	r3, r3, #1
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	8bfb      	ldrh	r3, [r7, #30]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	8bfa      	ldrh	r2, [r7, #30]
 8008df8:	60da      	str	r2, [r3, #12]
 8008dfa:	e062      	b.n	8008ec2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e02:	e05e      	b.n	8008ec2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d828      	bhi.n	8008e5e <UART_SetConfig+0x56a>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <UART_SetConfig+0x520>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e39 	.word	0x08008e39
 8008e18:	08008e41 	.word	0x08008e41
 8008e1c:	08008e49 	.word	0x08008e49
 8008e20:	08008e5f 	.word	0x08008e5f
 8008e24:	08008e4f 	.word	0x08008e4f
 8008e28:	08008e5f 	.word	0x08008e5f
 8008e2c:	08008e5f 	.word	0x08008e5f
 8008e30:	08008e5f 	.word	0x08008e5f
 8008e34:	08008e57 	.word	0x08008e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e38:	f7fd faac 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8008e3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e3e:	e014      	b.n	8008e6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e40:	f7fd fabe 	bl	80063c0 <HAL_RCC_GetPCLK2Freq>
 8008e44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e46:	e010      	b.n	8008e6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e48:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <UART_SetConfig+0x5c0>)
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e4c:	e00d      	b.n	8008e6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e4e:	f7fd fa09 	bl	8006264 <HAL_RCC_GetSysClockFreq>
 8008e52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e54:	e009      	b.n	8008e6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e5c:	e005      	b.n	8008e6a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e68:	bf00      	nop
    }

    if (pclk != 0U)
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d028      	beq.n	8008ec2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	4a10      	ldr	r2, [pc, #64]	; (8008eb8 <UART_SetConfig+0x5c4>)
 8008e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	085b      	lsrs	r3, r3, #1
 8008e88:	441a      	add	r2, r3
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e92:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	2b0f      	cmp	r3, #15
 8008e98:	d910      	bls.n	8008ebc <UART_SetConfig+0x5c8>
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea0:	d20c      	bcs.n	8008ebc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60da      	str	r2, [r3, #12]
 8008eac:	e009      	b.n	8008ec2 <UART_SetConfig+0x5ce>
 8008eae:	bf00      	nop
 8008eb0:	40008000 	.word	0x40008000
 8008eb4:	00f42400 	.word	0x00f42400
 8008eb8:	08009594 	.word	0x08009594
      }
      else
      {
        ret = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2200      	movs	r2, #0
 8008edc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ede:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3730      	adds	r7, #48	; 0x30
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00a      	beq.n	8008f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	430a      	orrs	r2, r1
 8008f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00a      	beq.n	8008f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	430a      	orrs	r2, r1
 8008f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f80:	f003 0310 	and.w	r3, r3, #16
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00a      	beq.n	8008f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa2:	f003 0320 	and.w	r3, r3, #32
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01a      	beq.n	8009002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fea:	d10a      	bne.n	8009002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	605a      	str	r2, [r3, #4]
  }
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af02      	add	r7, sp, #8
 8009036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009040:	f7fa fc4c 	bl	80038dc <HAL_GetTick>
 8009044:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0308 	and.w	r3, r3, #8
 8009050:	2b08      	cmp	r3, #8
 8009052:	d10e      	bne.n	8009072 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f82f 	bl	80090c6 <UART_WaitOnFlagUntilTimeout>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e025      	b.n	80090be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b04      	cmp	r3, #4
 800907e:	d10e      	bne.n	800909e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009080:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f819 	bl	80090c6 <UART_WaitOnFlagUntilTimeout>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e00f      	b.n	80090be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2220      	movs	r2, #32
 80090aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b09c      	sub	sp, #112	; 0x70
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	603b      	str	r3, [r7, #0]
 80090d2:	4613      	mov	r3, r2
 80090d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090d6:	e0a9      	b.n	800922c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090de:	f000 80a5 	beq.w	800922c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090e2:	f7fa fbfb 	bl	80038dc <HAL_GetTick>
 80090e6:	4602      	mov	r2, r0
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d302      	bcc.n	80090f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80090f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d140      	bne.n	800917a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009108:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800910c:	667b      	str	r3, [r7, #100]	; 0x64
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009118:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800911c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e6      	bne.n	80090f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3308      	adds	r3, #8
 8009130:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	f023 0301 	bic.w	r3, r3, #1
 8009140:	663b      	str	r3, [r7, #96]	; 0x60
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800914a:	64ba      	str	r2, [r7, #72]	; 0x48
 800914c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e5      	bne.n	800912a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2220      	movs	r2, #32
 8009162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e069      	b.n	800924e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d051      	beq.n	800922c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009196:	d149      	bne.n	800922c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	e853 3f00 	ldrex	r3, [r3]
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	461a      	mov	r2, r3
 80091be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
 80091c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091c8:	e841 2300 	strex	r3, r2, [r1]
 80091cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e6      	bne.n	80091a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3308      	adds	r3, #8
 80091da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	613b      	str	r3, [r7, #16]
   return(result);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f023 0301 	bic.w	r3, r3, #1
 80091ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3308      	adds	r3, #8
 80091f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091f4:	623a      	str	r2, [r7, #32]
 80091f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	69f9      	ldr	r1, [r7, #28]
 80091fa:	6a3a      	ldr	r2, [r7, #32]
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	61bb      	str	r3, [r7, #24]
   return(result);
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e5      	bne.n	80091d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2220      	movs	r2, #32
 800920c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2220      	movs	r2, #32
 8009214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2220      	movs	r2, #32
 800921c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e010      	b.n	800924e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	69da      	ldr	r2, [r3, #28]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	4013      	ands	r3, r2
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	429a      	cmp	r2, r3
 800923a:	bf0c      	ite	eq
 800923c:	2301      	moveq	r3, #1
 800923e:	2300      	movne	r3, #0
 8009240:	b2db      	uxtb	r3, r3
 8009242:	461a      	mov	r2, r3
 8009244:	79fb      	ldrb	r3, [r7, #7]
 8009246:	429a      	cmp	r2, r3
 8009248:	f43f af46 	beq.w	80090d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3770      	adds	r7, #112	; 0x70
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009256:	b480      	push	{r7}
 8009258:	b085      	sub	sp, #20
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009264:	2b01      	cmp	r3, #1
 8009266:	d101      	bne.n	800926c <HAL_UARTEx_DisableFifoMode+0x16>
 8009268:	2302      	movs	r3, #2
 800926a:	e027      	b.n	80092bc <HAL_UARTEx_DisableFifoMode+0x66>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2224      	movs	r2, #36	; 0x24
 8009278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0201 	bic.w	r2, r2, #1
 8009292:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800929a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092dc:	2302      	movs	r3, #2
 80092de:	e02d      	b.n	800933c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2224      	movs	r2, #36	; 0x24
 80092ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f022 0201 	bic.w	r2, r2, #1
 8009306:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	430a      	orrs	r2, r1
 800931a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f84f 	bl	80093c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009358:	2302      	movs	r3, #2
 800935a:	e02d      	b.n	80093b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2224      	movs	r2, #36	; 0x24
 8009368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 0201 	bic.w	r2, r2, #1
 8009382:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f811 	bl	80093c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d108      	bne.n	80093e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093e0:	e031      	b.n	8009446 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093e2:	2308      	movs	r3, #8
 80093e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093e6:	2308      	movs	r3, #8
 80093e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	0e5b      	lsrs	r3, r3, #25
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	0f5b      	lsrs	r3, r3, #29
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 0307 	and.w	r3, r3, #7
 8009408:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	7b3a      	ldrb	r2, [r7, #12]
 800940e:	4911      	ldr	r1, [pc, #68]	; (8009454 <UARTEx_SetNbDataToProcess+0x94>)
 8009410:	5c8a      	ldrb	r2, [r1, r2]
 8009412:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009416:	7b3a      	ldrb	r2, [r7, #12]
 8009418:	490f      	ldr	r1, [pc, #60]	; (8009458 <UARTEx_SetNbDataToProcess+0x98>)
 800941a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800941c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009420:	b29a      	uxth	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	7b7a      	ldrb	r2, [r7, #13]
 800942c:	4909      	ldr	r1, [pc, #36]	; (8009454 <UARTEx_SetNbDataToProcess+0x94>)
 800942e:	5c8a      	ldrb	r2, [r1, r2]
 8009430:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009434:	7b7a      	ldrb	r2, [r7, #13]
 8009436:	4908      	ldr	r1, [pc, #32]	; (8009458 <UARTEx_SetNbDataToProcess+0x98>)
 8009438:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800943a:	fb93 f3f2 	sdiv	r3, r3, r2
 800943e:	b29a      	uxth	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009446:	bf00      	nop
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	080095ac 	.word	0x080095ac
 8009458:	080095b4 	.word	0x080095b4

0800945c <__libc_init_array>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	4d0d      	ldr	r5, [pc, #52]	; (8009494 <__libc_init_array+0x38>)
 8009460:	4c0d      	ldr	r4, [pc, #52]	; (8009498 <__libc_init_array+0x3c>)
 8009462:	1b64      	subs	r4, r4, r5
 8009464:	10a4      	asrs	r4, r4, #2
 8009466:	2600      	movs	r6, #0
 8009468:	42a6      	cmp	r6, r4
 800946a:	d109      	bne.n	8009480 <__libc_init_array+0x24>
 800946c:	4d0b      	ldr	r5, [pc, #44]	; (800949c <__libc_init_array+0x40>)
 800946e:	4c0c      	ldr	r4, [pc, #48]	; (80094a0 <__libc_init_array+0x44>)
 8009470:	f000 f820 	bl	80094b4 <_init>
 8009474:	1b64      	subs	r4, r4, r5
 8009476:	10a4      	asrs	r4, r4, #2
 8009478:	2600      	movs	r6, #0
 800947a:	42a6      	cmp	r6, r4
 800947c:	d105      	bne.n	800948a <__libc_init_array+0x2e>
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	f855 3b04 	ldr.w	r3, [r5], #4
 8009484:	4798      	blx	r3
 8009486:	3601      	adds	r6, #1
 8009488:	e7ee      	b.n	8009468 <__libc_init_array+0xc>
 800948a:	f855 3b04 	ldr.w	r3, [r5], #4
 800948e:	4798      	blx	r3
 8009490:	3601      	adds	r6, #1
 8009492:	e7f2      	b.n	800947a <__libc_init_array+0x1e>
 8009494:	080095c4 	.word	0x080095c4
 8009498:	080095c4 	.word	0x080095c4
 800949c:	080095c4 	.word	0x080095c4
 80094a0:	080095c8 	.word	0x080095c8

080094a4 <memset>:
 80094a4:	4402      	add	r2, r0
 80094a6:	4603      	mov	r3, r0
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d100      	bne.n	80094ae <memset+0xa>
 80094ac:	4770      	bx	lr
 80094ae:	f803 1b01 	strb.w	r1, [r3], #1
 80094b2:	e7f9      	b.n	80094a8 <memset+0x4>

080094b4 <_init>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	bf00      	nop
 80094b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ba:	bc08      	pop	{r3}
 80094bc:	469e      	mov	lr, r3
 80094be:	4770      	bx	lr

080094c0 <_fini>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	bf00      	nop
 80094c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c6:	bc08      	pop	{r3}
 80094c8:	469e      	mov	lr, r3
 80094ca:	4770      	bx	lr
