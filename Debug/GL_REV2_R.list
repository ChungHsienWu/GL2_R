
GL_REV2_R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a750  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800a90c  0800a90c  0001a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9fc  0800a9fc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9fc  0800a9fc  0001a9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa04  0800aa04  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa04  0800aa04  0001aa04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa08  0800aa08  0001aa08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800aa0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0008bdf4  2000002c  0800aa38  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2008be20  0800aa38  0002be20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194e7  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa5  00000000  00000000  00039543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003d348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032630  00000000  00000000  0003e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183b6  00000000  00000000  00070bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001363bb  00000000  00000000  00088fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bf369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005338  00000000  00000000  001bf3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000002c 	.word	0x2000002c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800a8f4 	.word	0x0800a8f4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000030 	.word	0x20000030
 80001f8:	0800a8f4 	.word	0x0800a8f4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f003 fa2e 	bl	8003966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 fa81 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fd9f 	bl	8001050 <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 8000512:	f000 fb6f 	bl	8000bf4 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000516:	f000 fc59 	bl	8000dcc <MX_LTDC_Init>
  MX_SPI2_Init();
 800051a:	f000 fcd7 	bl	8000ecc <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fd13 	bl	8000f48 <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fd49 	bl	8000fb8 <MX_UART4_Init>
  MX_ADC1_Init();
 8000526:	f000 fac1 	bl	8000aac <MX_ADC1_Init>
  MX_DMA2D_Init();
 800052a:	f000 fb25 	bl	8000b78 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 800052e:	f000 fe6f 	bl	8001210 <mipi_config>
  HAL_UART_Transmit(&huart4, "start_s", 7, 1000);
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	2207      	movs	r2, #7
 8000538:	499b      	ldr	r1, [pc, #620]	; (80007a8 <main+0x2a8>)
 800053a:	489c      	ldr	r0, [pc, #624]	; (80007ac <main+0x2ac>)
 800053c:	f009 fb62 	bl	8009c04 <HAL_UART_Transmit>

  play_mode = 3;
 8000540:	4b9b      	ldr	r3, [pc, #620]	; (80007b0 <main+0x2b0>)
 8000542:	2203      	movs	r2, #3
 8000544:	701a      	strb	r2, [r3, #0]
  play_mode_source = 0;
 8000546:	4b9b      	ldr	r3, [pc, #620]	; (80007b4 <main+0x2b4>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
  mode_init();
 800054c:	f001 fd3a 	bl	8001fc4 <mode_init>
  write_flash_config();
 8000550:	f001 fece 	bl	80022f0 <write_flash_config>
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 8000554:	2300      	movs	r3, #0
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
 8000558:	e00d      	b.n	8000576 <main+0x76>
	  Mode_config[i*2]=0;    //picture_id
 800055a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4a96      	ldr	r2, [pc, #600]	; (80007b8 <main+0x2b8>)
 8000560:	2100      	movs	r1, #0
 8000562:	54d1      	strb	r1, [r2, r3]
	  Mode_config[i*2+1]=0;  //picture_delay_time
 8000564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	3301      	adds	r3, #1
 800056a:	4a93      	ldr	r2, [pc, #588]	; (80007b8 <main+0x2b8>)
 800056c:	2100      	movs	r1, #0
 800056e:	54d1      	strb	r1, [r2, r3]
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 8000570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000572:	3301      	adds	r3, #1
 8000574:	637b      	str	r3, [r7, #52]	; 0x34
 8000576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000578:	2b37      	cmp	r3, #55	; 0x37
 800057a:	ddee      	ble.n	800055a <main+0x5a>
  }
  Mode_config[Max_pic_per_mode*2*Max_mode_num-1] = 0; //playing_mode
 800057c:	4b8e      	ldr	r3, [pc, #568]	; (80007b8 <main+0x2b8>)
 800057e:	2200      	movs	r2, #0
 8000580:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  read_flash_config();
 8000584:	f001 ff82 	bl	800248c <read_flash_config>
  Playing_mode = Mode_config[100];//playing_mode_store = [Max_pic_per_mode*2*(Max_mode_num-1)]
 8000588:	4b8b      	ldr	r3, [pc, #556]	; (80007b8 <main+0x2b8>)
 800058a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800058e:	4b8b      	ldr	r3, [pc, #556]	; (80007bc <main+0x2bc>)
 8000590:	701a      	strb	r2, [r3, #0]
  //fill Current_mode_config from Mode_config by using Playing_mode
  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 8000592:	4b8a      	ldr	r3, [pc, #552]	; (80007bc <main+0x2bc>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	633b      	str	r3, [r7, #48]	; 0x30
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005a6:	e00e      	b.n	80005c6 <main+0xc6>
	 Current_mode_config[j]=Mode_config[i];
 80005a8:	4a83      	ldr	r2, [pc, #524]	; (80007b8 <main+0x2b8>)
 80005aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ac:	4413      	add	r3, r2
 80005ae:	7819      	ldrb	r1, [r3, #0]
 80005b0:	4a83      	ldr	r2, [pc, #524]	; (80007c0 <main+0x2c0>)
 80005b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b4:	4413      	add	r3, r2
 80005b6:	460a      	mov	r2, r1
 80005b8:	701a      	strb	r2, [r3, #0]
	 j++;
 80005ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005bc:	3301      	adds	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 80005c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005c2:	3301      	adds	r3, #1
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
 80005c6:	4b7d      	ldr	r3, [pc, #500]	; (80007bc <main+0x2bc>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	4613      	mov	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	461a      	mov	r2, r3
 80005d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d8:	4293      	cmp	r3, r2
 80005da:	dbe5      	blt.n	80005a8 <main+0xa8>
  }
  //frist_change_mode = 1;
  //check how many pics to display
  //warning don't set Current_mode_config = [255 255 1 2 10 2 255 255 255 255]
  g_Mode_picture_count = 0;
 80005dc:	4b79      	ldr	r3, [pc, #484]	; (80007c4 <main+0x2c4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < 5 ; i++){
 80005e2:	2300      	movs	r3, #0
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e6:	e00e      	b.n	8000606 <main+0x106>
	 if(Current_mode_config[i*2] != 255)
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4a74      	ldr	r2, [pc, #464]	; (80007c0 <main+0x2c0>)
 80005ee:	5cd3      	ldrb	r3, [r2, r3]
 80005f0:	2bff      	cmp	r3, #255	; 0xff
 80005f2:	d005      	beq.n	8000600 <main+0x100>
		 g_Mode_picture_count++;
 80005f4:	4b73      	ldr	r3, [pc, #460]	; (80007c4 <main+0x2c4>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b71      	ldr	r3, [pc, #452]	; (80007c4 <main+0x2c4>)
 80005fe:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ; i < 5 ; i++){
 8000600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000602:	3301      	adds	r3, #1
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
 8000606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000608:	2b04      	cmp	r3, #4
 800060a:	dded      	ble.n	80005e8 <main+0xe8>
  }
  for(int i = 0; i < g_Mode_picture_count; i++){
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
 8000610:	e011      	b.n	8000636 <main+0x136>
	  read_flash_page_DMA2d(&frame_buf_mode[MAX_IMAGE_SIZE*i], Current_mode_config[i*2]);
 8000612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000614:	f64d 62a8 	movw	r2, #57000	; 0xdea8
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	4a6a      	ldr	r2, [pc, #424]	; (80007c8 <main+0x2c8>)
 800061e:	441a      	add	r2, r3
 8000620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	4966      	ldr	r1, [pc, #408]	; (80007c0 <main+0x2c0>)
 8000626:	5ccb      	ldrb	r3, [r1, r3]
 8000628:	4619      	mov	r1, r3
 800062a:	4610      	mov	r0, r2
 800062c:	f002 f922 	bl	8002874 <read_flash_page_DMA2d>
  for(int i = 0; i < g_Mode_picture_count; i++){
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	3301      	adds	r3, #1
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
 8000636:	4b63      	ldr	r3, [pc, #396]	; (80007c4 <main+0x2c4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	4293      	cmp	r3, r2
 8000640:	dbe7      	blt.n	8000612 <main+0x112>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_SET);
  //HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_SET);

  HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8000642:	2202      	movs	r2, #2
 8000644:	4961      	ldr	r1, [pc, #388]	; (80007cc <main+0x2cc>)
 8000646:	4862      	ldr	r0, [pc, #392]	; (80007d0 <main+0x2d0>)
 8000648:	f008 fc7c 	bl	8008f44 <HAL_SPI_Receive_IT>
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
 8000650:	e007      	b.n	8000662 <main+0x162>
  {
	  image_arr_rgb888[i] = 0xFF;
 8000652:	4a60      	ldr	r2, [pc, #384]	; (80007d4 <main+0x2d4>)
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	4413      	add	r3, r2
 8000658:	22ff      	movs	r2, #255	; 0xff
 800065a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	3301      	adds	r3, #1
 8000660:	623b      	str	r3, [r7, #32]
 8000662:	4b5d      	ldr	r3, [pc, #372]	; (80007d8 <main+0x2d8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a5d      	ldr	r2, [pc, #372]	; (80007dc <main+0x2dc>)
 8000668:	6812      	ldr	r2, [r2, #0]
 800066a:	fb03 f202 	mul.w	r2, r3, r2
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	441a      	add	r2, r3
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	429a      	cmp	r2, r3
 8000678:	d8eb      	bhi.n	8000652 <main+0x152>
    while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode_source == 0)
 800067a:	4b4e      	ldr	r3, [pc, #312]	; (80007b4 <main+0x2b4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	f040 8104 	bne.w	800088c <main+0x38c>
	  {
		  if (play_mode == 0)
 8000684:	4b4a      	ldr	r3, [pc, #296]	; (80007b0 <main+0x2b0>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d109      	bne.n	80006a0 <main+0x1a0>
		  {
			  read_flash_page(&frame_buf_flash, display_image_number);
 800068c:	4b54      	ldr	r3, [pc, #336]	; (80007e0 <main+0x2e0>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	4854      	ldr	r0, [pc, #336]	; (80007e4 <main+0x2e4>)
 8000694:	f002 f858 	bl	8002748 <read_flash_page>
			  display_panel(&frame_buf_flash);
 8000698:	4852      	ldr	r0, [pc, #328]	; (80007e4 <main+0x2e4>)
 800069a:	f001 fbdf 	bl	8001e5c <display_panel>
 800069e:	e12f      	b.n	8000900 <main+0x400>
		  }
		  else if (play_mode == 1)
 80006a0:	4b43      	ldr	r3, [pc, #268]	; (80007b0 <main+0x2b0>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d139      	bne.n	800071c <main+0x21c>
		  {
			  uint8_t should_break = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	77fb      	strb	r3, [r7, #31]
			  while(1)
			  {
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 80006ac:	4b4e      	ldr	r3, [pc, #312]	; (80007e8 <main+0x2e8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	e021      	b.n	80006f8 <main+0x1f8>
				  {
					  HAL_Delay(5);
 80006b4:	2005      	movs	r0, #5
 80006b6:	f003 f9cb 	bl	8003a50 <HAL_Delay>
					  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
					  if (play_mode_source != 0 || play_mode != 1 || setting_changed == 1)
 80006ba:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <main+0x2b4>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d107      	bne.n	80006d2 <main+0x1d2>
 80006c2:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <main+0x2b0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d103      	bne.n	80006d2 <main+0x1d2>
 80006ca:	4b48      	ldr	r3, [pc, #288]	; (80007ec <main+0x2ec>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d102      	bne.n	80006d8 <main+0x1d8>
					  {
						  should_break = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	77fb      	strb	r3, [r7, #31]
						  break;
 80006d6:	e015      	b.n	8000704 <main+0x204>
					  }
					  read_flash_page(&frame_buf_flash, i);
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	4841      	ldr	r0, [pc, #260]	; (80007e4 <main+0x2e4>)
 80006e0:	f002 f832 	bl	8002748 <read_flash_page>
					  display_panel(&frame_buf_flash);
 80006e4:	483f      	ldr	r0, [pc, #252]	; (80007e4 <main+0x2e4>)
 80006e6:	f001 fbb9 	bl	8001e5c <display_panel>
					  display_image_number = i;
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <main+0x2e0>)
 80006f0:	701a      	strb	r2, [r3, #0]
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	3301      	adds	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	4b3d      	ldr	r3, [pc, #244]	; (80007f0 <main+0x2f0>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	4293      	cmp	r3, r2
 8000702:	ddd7      	ble.n	80006b4 <main+0x1b4>
				  }
				  if (should_break == 0)
 8000704:	7ffb      	ldrb	r3, [r7, #31]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d103      	bne.n	8000712 <main+0x212>
				  {
					  display_image_number = 0;
 800070a:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <main+0x2e0>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	e7cc      	b.n	80006ac <main+0x1ac>
				  }
				  else if (should_break == 1)
 8000712:	7ffb      	ldrb	r3, [r7, #31]
 8000714:	2b01      	cmp	r3, #1
 8000716:	f000 80f2 	beq.w	80008fe <main+0x3fe>
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 800071a:	e7c7      	b.n	80006ac <main+0x1ac>
				  {
				  	  break;
				  }
			  }
		  }
		  else if (play_mode == 3)
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <main+0x2b0>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b03      	cmp	r3, #3
 8000722:	f040 80ed 	bne.w	8000900 <main+0x400>
		  {
			  uint8_t should_break = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	71fb      	strb	r3, [r7, #7]
			  while(1){
			  //initial or change mode
				  if( Mode_changed )
 800072a:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <main+0x2f4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	f000 8091 	beq.w	8000856 <main+0x356>
				  {
					  write_flash_config();
 8000734:	f001 fddc 	bl	80022f0 <write_flash_config>
					  read_flash_config();
 8000738:	f001 fea8 	bl	800248c <read_flash_config>
					  Playing_mode = Mode_config[100];//playing_mode_store = [Max_pic_per_mode*2*(Max_mode_num-1)]
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <main+0x2b8>)
 800073e:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <main+0x2bc>)
 8000744:	701a      	strb	r2, [r3, #0]
					  //fill Current_mode_config from Mode_config by using Playing_mode
					  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <main+0x2bc>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	e00e      	b.n	800077a <main+0x27a>
						 Current_mode_config[j]=Mode_config[i];
 800075c:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <main+0x2b8>)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	4413      	add	r3, r2
 8000762:	7819      	ldrb	r1, [r3, #0]
 8000764:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <main+0x2c0>)
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	4413      	add	r3, r2
 800076a:	460a      	mov	r2, r1
 800076c:	701a      	strb	r2, [r3, #0]
						 j++;
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	3301      	adds	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
					  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	3301      	adds	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <main+0x2bc>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	461a      	mov	r2, r3
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	4293      	cmp	r3, r2
 800078e:	dbe5      	blt.n	800075c <main+0x25c>
					  }
					  g_current_pic = 0;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <main+0x2f8>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
					  Mode_changed = 0;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <main+0x2f4>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
					  //check how many pics to display
					  //warning don't set Current_mode_config = [255 255 1 2 10 2 255 255 255 255]
					  g_Mode_picture_count = 0;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <main+0x2c4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
					  for(int i = 0 ; i < 5 ; i++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	e038      	b.n	800081a <main+0x31a>
 80007a8:	0800a90c 	.word	0x0800a90c
 80007ac:	2000029c 	.word	0x2000029c
 80007b0:	2007dee8 	.word	0x2007dee8
 80007b4:	2007dee9 	.word	0x2007dee9
 80007b8:	2008bda0 	.word	0x2008bda0
 80007bc:	2008bd9b 	.word	0x2008bd9b
 80007c0:	2008be10 	.word	0x2008be10
 80007c4:	2008be1b 	.word	0x2008be1b
 80007c8:	20037dd0 	.word	0x20037dd0
 80007cc:	2008bd98 	.word	0x2008bd98
 80007d0:	20000238 	.word	0x20000238
 80007d4:	2007deec 	.word	0x2007deec
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000004 	.word	0x20000004
 80007e0:	2008bd94 	.word	0x2008bd94
 80007e4:	20029f28 	.word	0x20029f28
 80007e8:	2000032c 	.word	0x2000032c
 80007ec:	2008bd9a 	.word	0x2008bd9a
 80007f0:	2000000a 	.word	0x2000000a
 80007f4:	2008bd9c 	.word	0x2008bd9c
 80007f8:	2008be1a 	.word	0x2008be1a
						 if(Current_mode_config[i*2] != 255)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4a6e      	ldr	r2, [pc, #440]	; (80009bc <main+0x4bc>)
 8000802:	5cd3      	ldrb	r3, [r2, r3]
 8000804:	2bff      	cmp	r3, #255	; 0xff
 8000806:	d005      	beq.n	8000814 <main+0x314>
							 g_Mode_picture_count++;
 8000808:	4b6d      	ldr	r3, [pc, #436]	; (80009c0 <main+0x4c0>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b6b      	ldr	r3, [pc, #428]	; (80009c0 <main+0x4c0>)
 8000812:	701a      	strb	r2, [r3, #0]
					  for(int i = 0 ; i < 5 ; i++){
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b04      	cmp	r3, #4
 800081e:	dded      	ble.n	80007fc <main+0x2fc>
					  }
					  for(int i = 0; i < g_Mode_picture_count; i++){
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	e011      	b.n	800084a <main+0x34a>
						  read_flash_page_DMA2d(&frame_buf_mode[MAX_IMAGE_SIZE*i], Current_mode_config[i*2]);
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	f64d 62a8 	movw	r2, #57000	; 0xdea8
 800082c:	fb02 f303 	mul.w	r3, r2, r3
 8000830:	4a64      	ldr	r2, [pc, #400]	; (80009c4 <main+0x4c4>)
 8000832:	441a      	add	r2, r3
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4960      	ldr	r1, [pc, #384]	; (80009bc <main+0x4bc>)
 800083a:	5ccb      	ldrb	r3, [r1, r3]
 800083c:	4619      	mov	r1, r3
 800083e:	4610      	mov	r0, r2
 8000840:	f002 f818 	bl	8002874 <read_flash_page_DMA2d>
					  for(int i = 0; i < g_Mode_picture_count; i++){
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	3301      	adds	r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b5d      	ldr	r3, [pc, #372]	; (80009c0 <main+0x4c0>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	461a      	mov	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4293      	cmp	r3, r2
 8000854:	dbe7      	blt.n	8000826 <main+0x326>
					  }
				  }

				    HAL_GPIO_WritePin(adc_en_GPIO_Port, adc_en_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2108      	movs	r1, #8
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f005 fe23 	bl	80064a8 <HAL_GPIO_WritePin>
					//HAL_GPIO_WritePin(adc_en_GPIO_Port, adc_en_Pin, GPIO_PIN_RESET);
					//HAL_GPIO_WritePin(adc_en_GPIO_Port, adc_en_Pin, GPIO_PIN_SET);
					HAL_ADC_Start(&hadc1);
 8000862:	4859      	ldr	r0, [pc, #356]	; (80009c8 <main+0x4c8>)
 8000864:	f003 fc3e 	bl	80040e4 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, 50);
 8000868:	2132      	movs	r1, #50	; 0x32
 800086a:	4857      	ldr	r0, [pc, #348]	; (80009c8 <main+0x4c8>)
 800086c:	f003 fc9d 	bl	80041aa <HAL_ADC_PollForConversion>
					Power_Status = HAL_ADC_GetValue(&hadc1);
 8000870:	4855      	ldr	r0, [pc, #340]	; (80009c8 <main+0x4c8>)
 8000872:	f003 fd29 	bl	80042c8 <HAL_ADC_GetValue>
 8000876:	4603      	mov	r3, r0
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b54      	ldr	r3, [pc, #336]	; (80009cc <main+0x4cc>)
 800087c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(adc_en_GPIO_Port, adc_en_Pin, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2108      	movs	r1, #8
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f005 fe0f 	bl	80064a8 <HAL_GPIO_WritePin>
				  if( Mode_changed )
 800088a:	e74e      	b.n	800072a <main+0x22a>
//					  break;
//				  }
//			  }
		  }
	  }
	  else if (play_mode_source == 1)
 800088c:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <main+0x4d0>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d12c      	bne.n	80008ee <main+0x3ee>
	  {
		  if (play_mode == 2)
 8000894:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <main+0x4d4>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d124      	bne.n	80008e6 <main+0x3e6>
		  {
			  while(1)
			  {
				  HAL_Delay(5);
 800089c:	2005      	movs	r0, #5
 800089e:	f003 f8d7 	bl	8003a50 <HAL_Delay>
				  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 80008a2:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <main+0x4d0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d12a      	bne.n	8000900 <main+0x400>
 80008aa:	4b4a      	ldr	r3, [pc, #296]	; (80009d4 <main+0x4d4>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d126      	bne.n	8000900 <main+0x400>
 80008b2:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <main+0x4d8>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d022      	beq.n	8000900 <main+0x400>
				  {
					  break;
				  }
				  display_panel(&frame_buf_0);
 80008ba:	4848      	ldr	r0, [pc, #288]	; (80009dc <main+0x4dc>)
 80008bc:	f001 face 	bl	8001e5c <display_panel>

				  HAL_Delay(5);
 80008c0:	2005      	movs	r0, #5
 80008c2:	f003 f8c5 	bl	8003a50 <HAL_Delay>
				  //while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 80008c6:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <main+0x4d0>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d118      	bne.n	8000900 <main+0x400>
 80008ce:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <main+0x4d4>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d114      	bne.n	8000900 <main+0x400>
 80008d6:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <main+0x4d8>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d010      	beq.n	8000900 <main+0x400>
				  {
					  break;
				  }
				  display_panel(&frame_buf_1);
 80008de:	4840      	ldr	r0, [pc, #256]	; (80009e0 <main+0x4e0>)
 80008e0:	f001 fabc 	bl	8001e5c <display_panel>
				  HAL_Delay(5);
 80008e4:	e7da      	b.n	800089c <main+0x39c>
			  }
		  }
		  else
		  {
			  display_panel(&frame_buf_0);
 80008e6:	483d      	ldr	r0, [pc, #244]	; (80009dc <main+0x4dc>)
 80008e8:	f001 fab8 	bl	8001e5c <display_panel>
 80008ec:	e008      	b.n	8000900 <main+0x400>
		  }
	  }
	  else if (play_mode_source == 2)
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <main+0x4d0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d104      	bne.n	8000900 <main+0x400>
	  {
		  display_panel(&frame_buf_1);
 80008f6:	483a      	ldr	r0, [pc, #232]	; (80009e0 <main+0x4e0>)
 80008f8:	f001 fab0 	bl	8001e5c <display_panel>
 80008fc:	e000      	b.n	8000900 <main+0x400>
				  	  break;
 80008fe:	bf00      	nop
	  }

	  if(setting_changed == 1)
 8000900:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <main+0x4d8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d155      	bne.n	80009b4 <main+0x4b4>
	  {
		  uint16_t Horizontal_blanking_total = Horizontal_blanking_H*256 + Horizontal_blanking_L;
 8000908:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <main+0x4e4>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b29b      	uxth	r3, r3
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	b29a      	uxth	r2, r3
 8000912:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <main+0x4e8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b29b      	uxth	r3, r3
 8000918:	4413      	add	r3, r2
 800091a:	80bb      	strh	r3, [r7, #4]
		  HBP = Horizontal_blanking_total / 3;
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	4a33      	ldr	r2, [pc, #204]	; (80009ec <main+0x4ec>)
 8000920:	fba2 2303 	umull	r2, r3, r2, r3
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <main+0x4f0>)
 800092a:	801a      	strh	r2, [r3, #0]
		  HFP = Horizontal_blanking_total / 3;
 800092c:	88bb      	ldrh	r3, [r7, #4]
 800092e:	4a2f      	ldr	r2, [pc, #188]	; (80009ec <main+0x4ec>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <main+0x4f4>)
 800093a:	801a      	strh	r2, [r3, #0]
		  HSA = Horizontal_blanking_total - (HBP + HFP);
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <main+0x4f0>)
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <main+0x4f4>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	88ba      	ldrh	r2, [r7, #4]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <main+0x4f8>)
 8000950:	801a      	strh	r2, [r3, #0]

		  uint16_t Vertical_blanking_total = Vertical_blanking_H*256 + Vertical_blanking_L;
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <main+0x4fc>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b29b      	uxth	r3, r3
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <main+0x500>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b29b      	uxth	r3, r3
 8000962:	4413      	add	r3, r2
 8000964:	807b      	strh	r3, [r7, #2]
		  VBP = Vertical_blanking_total / 3;
 8000966:	887b      	ldrh	r3, [r7, #2]
 8000968:	4a20      	ldr	r2, [pc, #128]	; (80009ec <main+0x4ec>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	085b      	lsrs	r3, r3, #1
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <main+0x504>)
 8000974:	801a      	strh	r2, [r3, #0]
		  VFP = Vertical_blanking_total / 3;
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <main+0x4ec>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	085b      	lsrs	r3, r3, #1
 8000980:	b29a      	uxth	r2, r3
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <main+0x508>)
 8000984:	801a      	strh	r2, [r3, #0]
		  VSA = Vertical_blanking_total - (VBP + VFP);
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <main+0x504>)
 8000988:	881a      	ldrh	r2, [r3, #0]
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <main+0x508>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	b29b      	uxth	r3, r3
 8000992:	887a      	ldrh	r2, [r7, #2]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <main+0x50c>)
 800099a:	801a      	strh	r2, [r3, #0]

		  my_MX_DSIHOST_DSI_Init();
 800099c:	f002 fac8 	bl	8002f30 <my_MX_DSIHOST_DSI_Init>
		  my_MX_LTDC_Init();
 80009a0:	f002 fbd4 	bl	800314c <my_MX_LTDC_Init>
		  mipi_config();
 80009a4:	f000 fc34 	bl	8001210 <mipi_config>
		  HAL_Delay(10);
 80009a8:	200a      	movs	r0, #10
 80009aa:	f003 f851 	bl	8003a50 <HAL_Delay>

		  setting_changed = 0;
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <main+0x4d8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f003 f84b 	bl	8003a50 <HAL_Delay>
	  if (play_mode_source == 0)
 80009ba:	e65e      	b.n	800067a <main+0x17a>
 80009bc:	2008be10 	.word	0x2008be10
 80009c0:	2008be1b 	.word	0x2008be1b
 80009c4:	20037dd0 	.word	0x20037dd0
 80009c8:	20000048 	.word	0x20000048
 80009cc:	2000001e 	.word	0x2000001e
 80009d0:	2007dee9 	.word	0x2007dee9
 80009d4:	2007dee8 	.word	0x2007dee8
 80009d8:	2008bd9a 	.word	0x2008bd9a
 80009dc:	2000e1d8 	.word	0x2000e1d8
 80009e0:	2001c080 	.word	0x2001c080
 80009e4:	2000000c 	.word	0x2000000c
 80009e8:	2000000d 	.word	0x2000000d
 80009ec:	aaaaaaab 	.word	0xaaaaaaab
 80009f0:	20000012 	.word	0x20000012
 80009f4:	20000014 	.word	0x20000014
 80009f8:	20000010 	.word	0x20000010
 80009fc:	2000000e 	.word	0x2000000e
 8000a00:	2000000f 	.word	0x2000000f
 8000a04:	20000018 	.word	0x20000018
 8000a08:	2000001a 	.word	0x2000001a
 8000a0c:	20000016 	.word	0x20000016

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b096      	sub	sp, #88	; 0x58
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2244      	movs	r2, #68	; 0x44
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f009 ff60 	bl	800a8e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f006 f82e 	bl	8006a94 <HAL_PWREx_ControlVoltageScaling>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a3e:	f002 fceb 	bl	8003418 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a42:	2301      	movs	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a50:	2303      	movs	r3, #3
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a58:	231e      	movs	r3, #30
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 f8c5 	bl	8006bfc <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000a78:	f002 fcce 	bl	8003418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2303      	movs	r3, #3
 8000a82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	2105      	movs	r1, #5
 8000a94:	4618      	mov	r0, r3
 8000a96:	f006 fccb 	bl	8007430 <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa0:	f002 fcba 	bl	8003418 <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3758      	adds	r7, #88	; 0x58
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000ac4:	4a2a      	ldr	r2, [pc, #168]	; (8000b70 <MX_ADC1_Init+0xc4>)
 8000ac6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b28:	4810      	ldr	r0, [pc, #64]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000b2a:	f003 f98f 	bl	8003e4c <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f002 fc70 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_ADC1_Init+0xc8>)
 8000b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b44:	237f      	movs	r3, #127	; 0x7f
 8000b46:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_ADC1_Init+0xc0>)
 8000b56:	f003 fbc5 	bl	80042e4 <HAL_ADC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000b60:	f002 fc5a 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000048 	.word	0x20000048
 8000b70:	50040000 	.word	0x50040000
 8000b74:	08600004 	.word	0x08600004

08000b78 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <MX_DMA2D_Init+0x78>)
 8000b80:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000bc6:	f004 f97f 	bl	8004ec8 <HAL_DMA2D_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000bd0:	f002 fc22 	bl	8003418 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_DMA2D_Init+0x74>)
 8000bd8:	f004 faec 	bl	80051b4 <HAL_DMA2D_ConfigLayer>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f002 fc19 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000b0 	.word	0x200000b0
 8000bf0:	4002b000 	.word	0x4002b000

08000bf4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0ae      	sub	sp, #184	; 0xb8
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000bfa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000c06:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c0a:	2224      	movs	r2, #36	; 0x24
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f009 fe68 	bl	800a8e4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000c14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	226c      	movs	r2, #108	; 0x6c
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f009 fe59 	bl	800a8e4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000c32:	4b64      	ldr	r3, [pc, #400]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000c34:	4a64      	ldr	r2, [pc, #400]	; (8000dc8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8000c36:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000c38:	4b62      	ldr	r3, [pc, #392]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8000c3e:	4b61      	ldr	r3, [pc, #388]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000c40:	2202      	movs	r2, #2
 8000c42:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000c44:	4b5f      	ldr	r3, [pc, #380]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8000c4a:	2332      	movs	r3, #50	; 0x32
 8000c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000c5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c60:	4619      	mov	r1, r3
 8000c62:	4858      	ldr	r0, [pc, #352]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000c64:	f004 fc32 	bl	80054cc <HAL_DSI_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000c6e:	f002 fbd3 	bl	8003418 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ca8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cac:	4619      	mov	r1, r3
 8000cae:	4845      	ldr	r0, [pc, #276]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000cb0:	f005 f87f 	bl	8005db2 <HAL_DSI_ConfigHostTimeouts>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000cba:	f002 fbad 	bl	8003418 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000cbe:	2313      	movs	r3, #19
 8000cc0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000cc6:	2309      	movs	r3, #9
 8000cc8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000cca:	230a      	movs	r3, #10
 8000ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000cda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4838      	ldr	r0, [pc, #224]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000ce2:	f004 fffc 	bl	8005cde <HAL_DSI_ConfigPhyTimer>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000cec:	f002 fb94 	bl	8003418 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000cf0:	f242 7110 	movw	r1, #10000	; 0x2710
 8000cf4:	4833      	ldr	r0, [pc, #204]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000cf6:	f005 fa18 	bl	800612a <HAL_DSI_SetLowPowerRXFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000d00:	f002 fb8a 	bl	8003418 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	482f      	ldr	r0, [pc, #188]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000d08:	f004 fcfc 	bl	8005704 <HAL_DSI_ConfigErrorMonitor>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000d12:	f002 fb81 	bl	8003418 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000d22:	2301      	movs	r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8000d26:	2378      	movs	r3, #120	; 0x78
 8000d28:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 184;
 8000d3e:	23b8      	movs	r3, #184	; 0xb8
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 180;
 8000d42:	23b4      	movs	r3, #180	; 0xb4
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 664;
 8000d46:	f44f 7326 	mov.w	r3, #664	; 0x298
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 9;
 8000d4c:	2309      	movs	r3, #9
 8000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000d50:	2308      	movs	r3, #8
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000d54:	2308      	movs	r3, #8
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 156;
 8000d58:	239c      	movs	r3, #156	; 0x9c
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d60:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000d62:	231c      	movs	r3, #28
 8000d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000d66:	2350      	movs	r3, #80	; 0x50
 8000d68:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6e:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d80:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d86:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8c:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000d98:	f004 fd99 	bl	80058ce <HAL_DSI_ConfigVideoMode>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000da2:	f002 fb39 	bl	8003418 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000daa:	f004 fd68 	bl	800587e <HAL_DSI_SetGenericVCID>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000db4:	f002 fb30 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
  LCD_PowerOn();
 8000db8:	f000 fc36 	bl	8001628 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	37b8      	adds	r7, #184	; 0xb8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000110 	.word	0x20000110
 8000dc8:	40016c00 	.word	0x40016c00

08000dcc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2234      	movs	r2, #52	; 0x34
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f009 fd83 	bl	800a8e4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000de0:	4a38      	ldr	r2, [pc, #224]	; (8000ec4 <MX_LTDC_Init+0xf8>)
 8000de2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000de4:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000de6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dea:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000dec:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000df4:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 183;
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e02:	22b7      	movs	r2, #183	; 0xb7
 8000e04:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e08:	2208      	movs	r2, #8
 8000e0a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 363;
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e0e:	f240 126b 	movw	r2, #363	; 0x16b
 8000e12:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 16;
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e16:	2210      	movs	r2, #16
 8000e18:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 483;
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e1c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 172;
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e24:	22ac      	movs	r2, #172	; 0xac
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 663;
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e2a:	f240 2297 	movw	r2, #663	; 0x297
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 180;
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e32:	22b4      	movs	r2, #180	; 0xb4
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e38:	22ff      	movs	r2, #255	; 0xff
 8000e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e40:	22ff      	movs	r2, #255	; 0xff
 8000e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e48:	22ff      	movs	r2, #255	; 0xff
 8000e4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e4e:	481c      	ldr	r0, [pc, #112]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000e50:	f005 fb5a 	bl	8006508 <HAL_LTDC_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000e5a:	f002 fadd 	bl	8003418 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 120;
 8000e62:	2378      	movs	r3, #120	; 0x78
 8000e64:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 156;
 8000e6a:	239c      	movs	r3, #156	; 0x9c
 8000e6c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e72:	23ff      	movs	r3, #255	; 0xff
 8000e74:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e80:	2305      	movs	r3, #5
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_LTDC_Init+0xfc>)
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 120;
 8000e88:	2378      	movs	r3, #120	; 0x78
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 156;
 8000e8c:	239c      	movs	r3, #156	; 0x9c
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000e90:	23ff      	movs	r3, #255	; 0xff
 8000e92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000e96:	23ff      	movs	r3, #255	; 0xff
 8000e98:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000e9c:	23ff      	movs	r3, #255	; 0xff
 8000e9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_LTDC_Init+0xf4>)
 8000eaa:	f005 fbfd 	bl	80066a8 <HAL_LTDC_ConfigLayer>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000eb4:	f002 fab0 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3738      	adds	r7, #56	; 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000012c 	.word	0x2000012c
 8000ec4:	40016800 	.word	0x40016800
 8000ec8:	2007deec 	.word	0x2007deec

08000ecc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <MX_SPI2_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000ed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000edc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000ee6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000f02:	2208      	movs	r2, #8
 8000f04:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000f26:	2208      	movs	r2, #8
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_SPI2_Init+0x74>)
 8000f2c:	f007 fab6 	bl	800849c <HAL_SPI_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f002 fa6f 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001d4 	.word	0x200001d4
 8000f44:	40003800 	.word	0x40003800

08000f48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f4e:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <MX_SPI3_Init+0x6c>)
 8000f50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f64:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_SPI3_Init+0x68>)
 8000f9e:	f007 fa7d 	bl	800849c <HAL_SPI_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000fa8:	f002 fa36 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000238 	.word	0x20000238
 8000fb4:	40003c00 	.word	0x40003c00

08000fb8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_UART4_Init+0x90>)
 8000fbe:	4a23      	ldr	r2, [pc, #140]	; (800104c <MX_UART4_Init+0x94>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_UART4_Init+0x90>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <MX_UART4_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_UART4_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_UART4_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_UART4_Init+0x90>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_UART4_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_UART4_Init+0x90>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_UART4_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_UART4_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_UART4_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001000:	4811      	ldr	r0, [pc, #68]	; (8001048 <MX_UART4_Init+0x90>)
 8001002:	f008 fdaf 	bl	8009b64 <HAL_UART_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800100c:	f002 fa04 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001010:	2100      	movs	r1, #0
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_UART4_Init+0x90>)
 8001014:	f009 fb78 	bl	800a708 <HAL_UARTEx_SetTxFifoThreshold>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800101e:	f002 f9fb 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <MX_UART4_Init+0x90>)
 8001026:	f009 fbad 	bl	800a784 <HAL_UARTEx_SetRxFifoThreshold>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001030:	f002 f9f2 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_UART4_Init+0x90>)
 8001036:	f009 fb2e 	bl	800a696 <HAL_UARTEx_DisableFifoMode>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001040:	f002 f9ea 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000029c 	.word	0x2000029c
 800104c:	40004c00 	.word	0x40004c00

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001066:	4b66      	ldr	r3, [pc, #408]	; (8001200 <MX_GPIO_Init+0x1b0>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a65      	ldr	r2, [pc, #404]	; (8001200 <MX_GPIO_Init+0x1b0>)
 800106c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b63      	ldr	r3, [pc, #396]	; (8001200 <MX_GPIO_Init+0x1b0>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 800107e:	f005 fdad 	bl	8006bdc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4b5f      	ldr	r3, [pc, #380]	; (8001200 <MX_GPIO_Init+0x1b0>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4a5e      	ldr	r2, [pc, #376]	; (8001200 <MX_GPIO_Init+0x1b0>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4b5c      	ldr	r3, [pc, #368]	; (8001200 <MX_GPIO_Init+0x1b0>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b59      	ldr	r3, [pc, #356]	; (8001200 <MX_GPIO_Init+0x1b0>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a58      	ldr	r2, [pc, #352]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b56      	ldr	r3, [pc, #344]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a52      	ldr	r2, [pc, #328]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b50      	ldr	r3, [pc, #320]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b4a      	ldr	r3, [pc, #296]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a46      	ldr	r2, [pc, #280]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b44      	ldr	r3, [pc, #272]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <MX_GPIO_Init+0x1b0>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a40      	ldr	r2, [pc, #256]	; (8001200 <MX_GPIO_Init+0x1b0>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <MX_GPIO_Init+0x1b0>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001118:	483a      	ldr	r0, [pc, #232]	; (8001204 <MX_GPIO_Init+0x1b4>)
 800111a:	f005 f9c5 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESXP_Pin|flash_cs_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001124:	4837      	ldr	r0, [pc, #220]	; (8001204 <MX_GPIO_Init+0x1b4>)
 8001126:	f005 f9bf 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001130:	4835      	ldr	r0, [pc, #212]	; (8001208 <MX_GPIO_Init+0x1b8>)
 8001132:	f005 f9b9 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adc_en_GPIO_Port, adc_en_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2108      	movs	r1, #8
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f005 f9b3 	bl	80064a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin RESXP_Pin flash_cs_Pin */
  GPIO_InitStruct.Pin = led_Pin|RESXP_Pin|flash_cs_Pin;
 8001142:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	482a      	ldr	r0, [pc, #168]	; (8001204 <MX_GPIO_Init+0x1b4>)
 800115c:	f005 f812 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : sync_Pin */
  GPIO_InitStruct.Pin = sync_Pin;
 8001160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116c:	2302      	movs	r3, #2
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(sync_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f005 f803 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : pic_sw_Pin */
  GPIO_InitStruct.Pin = pic_sw_Pin;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001184:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800118a:	2302      	movs	r3, #2
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(pic_sw_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	481d      	ldr	r0, [pc, #116]	; (800120c <MX_GPIO_Init+0x1bc>)
 8001196:	f004 fff5 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : en_Pin */
  GPIO_InitStruct.Pin = en_Pin;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(en_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <MX_GPIO_Init+0x1b8>)
 80011b4:	f004 ffe6 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : adc_en_Pin */
  GPIO_InitStruct.Pin = adc_en_Pin;
 80011b8:	2308      	movs	r3, #8
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(adc_en_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f004 ffd7 	bl	8006184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2017      	movs	r0, #23
 80011dc:	f003 fddf 	bl	8004d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011e0:	2017      	movs	r0, #23
 80011e2:	f003 fdf8 	bl	8004dd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2103      	movs	r1, #3
 80011ea:	2028      	movs	r0, #40	; 0x28
 80011ec:	f003 fdd7 	bl	8004d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011f0:	2028      	movs	r0, #40	; 0x28
 80011f2:	f003 fdf0 	bl	8004dd6 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3730      	adds	r7, #48	; 0x30
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400
 8001208:	48001400 	.word	0x48001400
 800120c:	48000c00 	.word	0x48000c00

08001210 <mipi_config>:

/* USER CODE BEGIN 4 */

void mipi_config()
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b0af      	sub	sp, #188	; 0xbc
 8001214:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8001216:	48c4      	ldr	r0, [pc, #784]	; (8001528 <mipi_config+0x318>)
 8001218:	f004 fe91 	bl	8005f3e <HAL_DSI_Start>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <mipi_config+0x16>
	{
		Error_Handler();
 8001222:	f002 f8f9 	bl	8003418 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8001226:	23c3      	movs	r3, #195	; 0xc3
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	23f0      	movs	r3, #240	; 0xf0
 800122c:	2215      	movs	r2, #21
 800122e:	2100      	movs	r1, #0
 8001230:	48bd      	ldr	r0, [pc, #756]	; (8001528 <mipi_config+0x318>)
 8001232:	f004 fec0 	bl	8005fb6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8001236:	2396      	movs	r3, #150	; 0x96
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	23f0      	movs	r3, #240	; 0xf0
 800123c:	2215      	movs	r2, #21
 800123e:	2100      	movs	r1, #0
 8001240:	48b9      	ldr	r0, [pc, #740]	; (8001528 <mipi_config+0x318>)
 8001242:	f004 feb8 	bl	8005fb6 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = {0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33};
 8001246:	4ab9      	ldr	r2, [pc, #740]	; (800152c <mipi_config+0x31c>)
 8001248:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800124c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001250:	6018      	str	r0, [r3, #0]
 8001252:	3304      	adds	r3, #4
 8001254:	8019      	strh	r1, [r3, #0]
 8001256:	3302      	adds	r3, #2
 8001258:	0c0a      	lsrs	r2, r1, #16
 800125a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 800125c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	23e7      	movs	r3, #231	; 0xe7
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2308      	movs	r3, #8
 8001268:	2239      	movs	r2, #57	; 0x39
 800126a:	2100      	movs	r1, #0
 800126c:	48ae      	ldr	r0, [pc, #696]	; (8001528 <mipi_config+0x318>)
 800126e:	f004 fec4 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = {0xC0, 0x68, 0xE0};
 8001272:	4aaf      	ldr	r2, [pc, #700]	; (8001530 <mipi_config+0x320>)
 8001274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	4611      	mov	r1, r2
 800127c:	8019      	strh	r1, [r3, #0]
 800127e:	3302      	adds	r3, #2
 8001280:	0c12      	lsrs	r2, r2, #16
 8001282:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8001284:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	23a4      	movs	r3, #164	; 0xa4
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2304      	movs	r3, #4
 8001290:	2239      	movs	r2, #57	; 0x39
 8001292:	2100      	movs	r1, #0
 8001294:	48a4      	ldr	r0, [pc, #656]	; (8001528 <mipi_config+0x318>)
 8001296:	f004 feb0 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = {0x42, 0x05, 0x24, 0x03};
 800129a:	4ba6      	ldr	r3, [pc, #664]	; (8001534 <mipi_config+0x324>)
 800129c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 80012a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	23c3      	movs	r3, #195	; 0xc3
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2305      	movs	r3, #5
 80012ac:	2239      	movs	r2, #57	; 0x39
 80012ae:	2100      	movs	r1, #0
 80012b0:	489d      	ldr	r0, [pc, #628]	; (8001528 <mipi_config+0x318>)
 80012b2:	f004 fea2 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = {0x42, 0x05, 0x24, 0x03};
 80012b6:	4b9f      	ldr	r3, [pc, #636]	; (8001534 <mipi_config+0x324>)
 80012b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 80012bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	23c4      	movs	r3, #196	; 0xc4
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2305      	movs	r3, #5
 80012c8:	2239      	movs	r2, #57	; 0x39
 80012ca:	2100      	movs	r1, #0
 80012cc:	4896      	ldr	r0, [pc, #600]	; (8001528 <mipi_config+0x318>)
 80012ce:	f004 fe94 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 80012d2:	4a99      	ldr	r2, [pc, #612]	; (8001538 <mipi_config+0x328>)
 80012d4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80012da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 80012de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	23e5      	movs	r3, #229	; 0xe5
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	230d      	movs	r3, #13
 80012ea:	2239      	movs	r2, #57	; 0x39
 80012ec:	2100      	movs	r1, #0
 80012ee:	488e      	ldr	r0, [pc, #568]	; (8001528 <mipi_config+0x318>)
 80012f0:	f004 fe83 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 80012f4:	4a90      	ldr	r2, [pc, #576]	; (8001538 <mipi_config+0x328>)
 80012f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80012fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001300:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	23e6      	movs	r3, #230	; 0xe6
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	230d      	movs	r3, #13
 800130c:	2239      	movs	r2, #57	; 0x39
 800130e:	2100      	movs	r1, #0
 8001310:	4885      	ldr	r0, [pc, #532]	; (8001528 <mipi_config+0x318>)
 8001312:	f004 fe72 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = {0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22};
 8001316:	4a89      	ldr	r2, [pc, #548]	; (800153c <mipi_config+0x32c>)
 8001318:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800131c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001320:	6018      	str	r0, [r3, #0]
 8001322:	3304      	adds	r3, #4
 8001324:	8019      	strh	r1, [r3, #0]
 8001326:	3302      	adds	r3, #2
 8001328:	0c0a      	lsrs	r2, r1, #16
 800132a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 800132c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	23ec      	movs	r3, #236	; 0xec
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2308      	movs	r3, #8
 8001338:	2239      	movs	r2, #57	; 0x39
 800133a:	2100      	movs	r1, #0
 800133c:	487a      	ldr	r0, [pc, #488]	; (8001528 <mipi_config+0x318>)
 800133e:	f004 fe5c 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = {0x88, 0x05, 0x0F, 0x18};
 8001342:	4b7f      	ldr	r3, [pc, #508]	; (8001540 <mipi_config+0x330>)
 8001344:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 8001346:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	23c1      	movs	r3, #193	; 0xc1
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2305      	movs	r3, #5
 8001352:	2239      	movs	r2, #57	; 0x39
 8001354:	2100      	movs	r1, #0
 8001356:	4874      	ldr	r0, [pc, #464]	; (8001528 <mipi_config+0x318>)
 8001358:	f004 fe4f 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = {0x88, 0x05, 0x0F, 0x18};
 800135c:	4b78      	ldr	r3, [pc, #480]	; (8001540 <mipi_config+0x330>)
 800135e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 8001360:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	23c2      	movs	r3, #194	; 0xc2
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2305      	movs	r3, #5
 800136c:	2239      	movs	r2, #57	; 0x39
 800136e:	2100      	movs	r1, #0
 8001370:	486d      	ldr	r0, [pc, #436]	; (8001528 <mipi_config+0x318>)
 8001372:	f004 fe42 	bl	8005ffa <HAL_DSI_LongWrite>
	//HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x08);
 8001376:	2308      	movs	r3, #8
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2336      	movs	r3, #54	; 0x36
 800137c:	2215      	movs	r2, #21
 800137e:	2100      	movs	r1, #0
 8001380:	4869      	ldr	r0, [pc, #420]	; (8001528 <mipi_config+0x318>)
 8001382:	f004 fe18 	bl	8005fb6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 8001386:	2307      	movs	r3, #7
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	233a      	movs	r3, #58	; 0x3a
 800138c:	2215      	movs	r2, #21
 800138e:	2100      	movs	r1, #0
 8001390:	4865      	ldr	r0, [pc, #404]	; (8001528 <mipi_config+0x318>)
 8001392:	f004 fe10 	bl	8005fb6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 8001396:	23be      	movs	r3, #190	; 0xbe
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	23c5      	movs	r3, #197	; 0xc5
 800139c:	2215      	movs	r2, #21
 800139e:	2100      	movs	r1, #0
 80013a0:	4861      	ldr	r0, [pc, #388]	; (8001528 <mipi_config+0x318>)
 80013a2:	f004 fe08 	bl	8005fb6 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = {0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55, 0x3D, 0x19, 0x18, 0x24, 0x27};
 80013a6:	4b67      	ldr	r3, [pc, #412]	; (8001544 <mipi_config+0x334>)
 80013a8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80013ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ae:	c407      	stmia	r4!, {r0, r1, r2}
 80013b0:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 80013b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	23e0      	movs	r3, #224	; 0xe0
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	230f      	movs	r3, #15
 80013be:	2239      	movs	r2, #57	; 0x39
 80013c0:	2100      	movs	r1, #0
 80013c2:	4859      	ldr	r0, [pc, #356]	; (8001528 <mipi_config+0x318>)
 80013c4:	f004 fe19 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = {0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56, 0x3E, 0x1A, 0x18, 0x24, 0x28};
 80013c8:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <mipi_config+0x338>)
 80013ca:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80013ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d0:	c407      	stmia	r4!, {r0, r1, r2}
 80013d2:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 80013d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	23e1      	movs	r3, #225	; 0xe1
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	230f      	movs	r3, #15
 80013e0:	2239      	movs	r2, #57	; 0x39
 80013e2:	2100      	movs	r1, #0
 80013e4:	4850      	ldr	r0, [pc, #320]	; (8001528 <mipi_config+0x318>)
 80013e6:	f004 fe08 	bl	8005ffa <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 80013ea:	2310      	movs	r3, #16
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	23b2      	movs	r3, #178	; 0xb2
 80013f0:	2215      	movs	r2, #21
 80013f2:	2100      	movs	r1, #0
 80013f4:	484c      	ldr	r0, [pc, #304]	; (8001528 <mipi_config+0x318>)
 80013f6:	f004 fdde 	bl	8005fb6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 80013fa:	2301      	movs	r3, #1
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	23b3      	movs	r3, #179	; 0xb3
 8001400:	2215      	movs	r2, #21
 8001402:	2100      	movs	r1, #0
 8001404:	4848      	ldr	r0, [pc, #288]	; (8001528 <mipi_config+0x318>)
 8001406:	f004 fdd6 	bl	8005fb6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 800140a:	2301      	movs	r3, #1
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	23b4      	movs	r3, #180	; 0xb4
 8001410:	2215      	movs	r2, #21
 8001412:	2100      	movs	r1, #0
 8001414:	4844      	ldr	r0, [pc, #272]	; (8001528 <mipi_config+0x318>)
 8001416:	f004 fdce 	bl	8005fb6 <HAL_DSI_ShortWrite>
	//uint8_t cmd20[2] = {0x27, 0x09};
	uint8_t cmd20[2] = {0x4D, 0x0E};
 800141a:	f640 634d 	movw	r3, #3661	; 0xe4d
 800141e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 8001422:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	23b6      	movs	r3, #182	; 0xb6
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2303      	movs	r3, #3
 800142e:	2239      	movs	r2, #57	; 0x39
 8001430:	2100      	movs	r1, #0
 8001432:	483d      	ldr	r0, [pc, #244]	; (8001528 <mipi_config+0x318>)
 8001434:	f004 fde1 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = {0x00, 0x54, 0x00, 0x54};
 8001438:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 800143c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 800143e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	23b5      	movs	r3, #181	; 0xb5
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2305      	movs	r3, #5
 800144a:	2239      	movs	r2, #57	; 0x39
 800144c:	2100      	movs	r1, #0
 800144e:	4836      	ldr	r0, [pc, #216]	; (8001528 <mipi_config+0x318>)
 8001450:	f004 fdd3 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001454:	4a3d      	ldr	r2, [pc, #244]	; (800154c <mipi_config+0x33c>)
 8001456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800145a:	ca07      	ldmia	r2, {r0, r1, r2}
 800145c:	c303      	stmia	r3!, {r0, r1}
 800145e:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 8001460:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	23a5      	movs	r3, #165	; 0xa5
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	230a      	movs	r3, #10
 800146c:	2239      	movs	r2, #57	; 0x39
 800146e:	2100      	movs	r1, #0
 8001470:	482d      	ldr	r0, [pc, #180]	; (8001528 <mipi_config+0x318>)
 8001472:	f004 fdc2 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001476:	4a35      	ldr	r2, [pc, #212]	; (800154c <mipi_config+0x33c>)
 8001478:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800147c:	ca07      	ldmia	r2, {r0, r1, r2}
 800147e:	c303      	stmia	r3!, {r0, r1}
 8001480:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 8001482:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	23a6      	movs	r3, #166	; 0xa6
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	230a      	movs	r3, #10
 800148e:	2239      	movs	r2, #57	; 0x39
 8001490:	2100      	movs	r1, #0
 8001492:	4825      	ldr	r0, [pc, #148]	; (8001528 <mipi_config+0x318>)
 8001494:	f004 fdb1 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = {0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00};
 8001498:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <mipi_config+0x340>)
 800149a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a2:	6018      	str	r0, [r3, #0]
 80014a4:	3304      	adds	r3, #4
 80014a6:	8019      	strh	r1, [r3, #0]
 80014a8:	3302      	adds	r3, #2
 80014aa:	0c0a      	lsrs	r2, r1, #16
 80014ac:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 80014ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	23ba      	movs	r3, #186	; 0xba
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2308      	movs	r3, #8
 80014ba:	2239      	movs	r2, #57	; 0x39
 80014bc:	2100      	movs	r1, #0
 80014be:	481a      	ldr	r0, [pc, #104]	; (8001528 <mipi_config+0x318>)
 80014c0:	f004 fd9b 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 80014c4:	4a23      	ldr	r2, [pc, #140]	; (8001554 <mipi_config+0x344>)
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ce:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	23bb      	movs	r3, #187	; 0xbb
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2309      	movs	r3, #9
 80014de:	2239      	movs	r2, #57	; 0x39
 80014e0:	2100      	movs	r1, #0
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <mipi_config+0x318>)
 80014e4:	f004 fd89 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 80014e8:	4a1a      	ldr	r2, [pc, #104]	; (8001554 <mipi_config+0x344>)
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014f2:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	23bc      	movs	r3, #188	; 0xbc
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2309      	movs	r3, #9
 8001502:	2239      	movs	r2, #57	; 0x39
 8001504:	2100      	movs	r1, #0
 8001506:	4808      	ldr	r0, [pc, #32]	; (8001528 <mipi_config+0x318>)
 8001508:	f004 fd77 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = {0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF, 0xFF, 0xF9};
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <mipi_config+0x348>)
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	ca07      	ldmia	r2, {r0, r1, r2}
 8001514:	c303      	stmia	r3!, {r0, r1}
 8001516:	801a      	strh	r2, [r3, #0]
 8001518:	3302      	adds	r3, #2
 800151a:	0c12      	lsrs	r2, r2, #16
 800151c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	e01a      	b.n	800155c <mipi_config+0x34c>
 8001526:	bf00      	nop
 8001528:	20000110 	.word	0x20000110
 800152c:	0800a914 	.word	0x0800a914
 8001530:	0800a91c 	.word	0x0800a91c
 8001534:	03240542 	.word	0x03240542
 8001538:	0800a920 	.word	0x0800a920
 800153c:	0800a92c 	.word	0x0800a92c
 8001540:	180f0588 	.word	0x180f0588
 8001544:	0800a934 	.word	0x0800a934
 8001548:	0800a944 	.word	0x0800a944
 800154c:	0800a954 	.word	0x0800a954
 8001550:	0800a960 	.word	0x0800a960
 8001554:	0800a968 	.word	0x0800a968
 8001558:	0800a970 	.word	0x0800a970
 800155c:	23bd      	movs	r3, #189	; 0xbd
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	230c      	movs	r3, #12
 8001562:	2239      	movs	r2, #57	; 0x39
 8001564:	2100      	movs	r1, #0
 8001566:	482d      	ldr	r0, [pc, #180]	; (800161c <mipi_config+0x40c>)
 8001568:	f004 fd47 	bl	8005ffa <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 800156c:	23c3      	movs	r3, #195	; 0xc3
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	23ed      	movs	r3, #237	; 0xed
 8001572:	2215      	movs	r2, #21
 8001574:	2100      	movs	r1, #0
 8001576:	4829      	ldr	r0, [pc, #164]	; (800161c <mipi_config+0x40c>)
 8001578:	f004 fd1d 	bl	8005fb6 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = {0x40, 0x0F, 0x00};
 800157c:	4a28      	ldr	r2, [pc, #160]	; (8001620 <mipi_config+0x410>)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	4611      	mov	r1, r2
 8001586:	8019      	strh	r1, [r3, #0]
 8001588:	3302      	adds	r3, #2
 800158a:	0c12      	lsrs	r2, r2, #16
 800158c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	23e4      	movs	r3, #228	; 0xe4
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2304      	movs	r3, #4
 800159a:	2239      	movs	r2, #57	; 0x39
 800159c:	2100      	movs	r1, #0
 800159e:	481f      	ldr	r0, [pc, #124]	; (800161c <mipi_config+0x40c>)
 80015a0:	f004 fd2b 	bl	8005ffa <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = {0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25};
 80015a4:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <mipi_config+0x414>)
 80015a6:	463b      	mov	r3, r7
 80015a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80015aa:	c303      	stmia	r3!, {r0, r1}
 80015ac:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 80015ae:	463b      	mov	r3, r7
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	23cc      	movs	r3, #204	; 0xcc
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	230a      	movs	r3, #10
 80015b8:	2239      	movs	r2, #57	; 0x39
 80015ba:	2100      	movs	r1, #0
 80015bc:	4817      	ldr	r0, [pc, #92]	; (800161c <mipi_config+0x40c>)
 80015be:	f004 fd1c 	bl	8005ffa <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80015c2:	2300      	movs	r3, #0
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2335      	movs	r3, #53	; 0x35
 80015c8:	2215      	movs	r2, #21
 80015ca:	2100      	movs	r1, #0
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <mipi_config+0x40c>)
 80015ce:	f004 fcf2 	bl	8005fb6 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f002 fa3c 	bl	8003a50 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2311      	movs	r3, #17
 80015de:	2205      	movs	r2, #5
 80015e0:	2100      	movs	r1, #0
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <mipi_config+0x40c>)
 80015e4:	f004 fce7 	bl	8005fb6 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80015e8:	2078      	movs	r0, #120	; 0x78
 80015ea:	f002 fa31 	bl	8003a50 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 80015ee:	2300      	movs	r3, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2329      	movs	r3, #41	; 0x29
 80015f4:	2205      	movs	r2, #5
 80015f6:	2100      	movs	r1, #0
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <mipi_config+0x40c>)
 80015fa:	f004 fcdc 	bl	8005fb6 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80015fe:	2078      	movs	r0, #120	; 0x78
 8001600:	f002 fa26 	bl	8003a50 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001604:	2300      	movs	r3, #0
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2335      	movs	r3, #53	; 0x35
 800160a:	2215      	movs	r2, #21
 800160c:	2100      	movs	r1, #0
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <mipi_config+0x40c>)
 8001610:	f004 fcd1 	bl	8005fb6 <HAL_DSI_ShortWrite>
}
 8001614:	bf00      	nop
 8001616:	37b4      	adds	r7, #180	; 0xb4
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	20000110 	.word	0x20000110
 8001620:	0800a97c 	.word	0x0800a97c
 8001624:	0800a980 	.word	0x0800a980

08001628 <LCD_PowerOn>:

static void LCD_PowerOn(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2140      	movs	r1, #64	; 0x40
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <LCD_PowerOn+0x28>)
 8001632:	f004 ff39 	bl	80064a8 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 8001636:	2014      	movs	r0, #20
 8001638:	f002 fa0a 	bl	8003a50 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2140      	movs	r1, #64	; 0x40
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <LCD_PowerOn+0x28>)
 8001642:	f004 ff31 	bl	80064a8 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 8001646:	2078      	movs	r0, #120	; 0x78
 8001648:	f002 fa02 	bl	8003a50 <HAL_Delay>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	48000400 	.word	0x48000400

08001654 <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = {0};
 800165e:	2300      	movs	r3, #0
 8001660:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = {0};
 8001662:	2300      	movs	r3, #0
 8001664:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 1000);
 8001666:	f107 010c 	add.w	r1, r7, #12
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	2201      	movs	r2, #1
 8001670:	4878      	ldr	r0, [pc, #480]	; (8001854 <Write_Registers_data+0x200>)
 8001672:	f007 f924 	bl	80088be <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)data, 1, 1000);
 8001676:	f107 0108 	add.w	r1, r7, #8
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	2201      	movs	r2, #1
 8001680:	4874      	ldr	r0, [pc, #464]	; (8001854 <Write_Registers_data+0x200>)
 8001682:	f007 f91c 	bl	80088be <HAL_SPI_Receive>
	if (do_flag == 1)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b01      	cmp	r3, #1
 800168a:	f040 80da 	bne.w	8001842 <Write_Registers_data+0x1ee>
	{
		switch (Register_Address[0])
 800168e:	7b3b      	ldrb	r3, [r7, #12]
 8001690:	2b21      	cmp	r3, #33	; 0x21
 8001692:	f200 80db 	bhi.w	800184c <Write_Registers_data+0x1f8>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <Write_Registers_data+0x48>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	08001725 	.word	0x08001725
 80016a0:	08001735 	.word	0x08001735
 80016a4:	08001745 	.word	0x08001745
 80016a8:	08001753 	.word	0x08001753
 80016ac:	08001761 	.word	0x08001761
 80016b0:	0800176f 	.word	0x0800176f
 80016b4:	0800177d 	.word	0x0800177d
 80016b8:	08001785 	.word	0x08001785
 80016bc:	08001847 	.word	0x08001847
 80016c0:	08001847 	.word	0x08001847
 80016c4:	08001847 	.word	0x08001847
 80016c8:	0800178d 	.word	0x0800178d
 80016cc:	08001795 	.word	0x08001795
 80016d0:	0800179d 	.word	0x0800179d
 80016d4:	080017a5 	.word	0x080017a5
 80016d8:	080017ad 	.word	0x080017ad
 80016dc:	080017b5 	.word	0x080017b5
 80016e0:	08001847 	.word	0x08001847
 80016e4:	08001847 	.word	0x08001847
 80016e8:	08001847 	.word	0x08001847
 80016ec:	08001847 	.word	0x08001847
 80016f0:	08001847 	.word	0x08001847
 80016f4:	08001847 	.word	0x08001847
 80016f8:	08001847 	.word	0x08001847
 80016fc:	08001817 	.word	0x08001817
 8001700:	0800181f 	.word	0x0800181f
 8001704:	0800184d 	.word	0x0800184d
 8001708:	0800184d 	.word	0x0800184d
 800170c:	0800184d 	.word	0x0800184d
 8001710:	0800184d 	.word	0x0800184d
 8001714:	0800184d 	.word	0x0800184d
 8001718:	0800184d 	.word	0x0800184d
 800171c:	0800184d 	.word	0x0800184d
 8001720:	0800182d 	.word	0x0800182d
		{
		case 0: //Horizontal Resolution
			IMAGE_H = (uint32_t)data[0];
 8001724:	7a3b      	ldrb	r3, [r7, #8]
 8001726:	461a      	mov	r2, r3
 8001728:	4b4b      	ldr	r3, [pc, #300]	; (8001858 <Write_Registers_data+0x204>)
 800172a:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 800172c:	4b4b      	ldr	r3, [pc, #300]	; (800185c <Write_Registers_data+0x208>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
			break;
 8001732:	e08b      	b.n	800184c <Write_Registers_data+0x1f8>
		case 1: //Vertical Resolution
			IMAGE_W = (uint32_t)data[0];
 8001734:	7a3b      	ldrb	r3, [r7, #8]
 8001736:	461a      	mov	r2, r3
 8001738:	4b49      	ldr	r3, [pc, #292]	; (8001860 <Write_Registers_data+0x20c>)
 800173a:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <Write_Registers_data+0x208>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
			break;
 8001742:	e083      	b.n	800184c <Write_Registers_data+0x1f8>
		case 2: //Horizontal blanking (High byte)
			Horizontal_blanking_H = data[0];
 8001744:	7a3a      	ldrb	r2, [r7, #8]
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <Write_Registers_data+0x210>)
 8001748:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 800174a:	4b44      	ldr	r3, [pc, #272]	; (800185c <Write_Registers_data+0x208>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
			break;
 8001750:	e07c      	b.n	800184c <Write_Registers_data+0x1f8>
		case 3: //Horizontal blanking (Low byte)
			Horizontal_blanking_L = data[0];
 8001752:	7a3a      	ldrb	r2, [r7, #8]
 8001754:	4b44      	ldr	r3, [pc, #272]	; (8001868 <Write_Registers_data+0x214>)
 8001756:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001758:	4b40      	ldr	r3, [pc, #256]	; (800185c <Write_Registers_data+0x208>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
			break;
 800175e:	e075      	b.n	800184c <Write_Registers_data+0x1f8>
		case 4: //Vertical blanking (High byte)
			Vertical_blanking_H = data[0];
 8001760:	7a3a      	ldrb	r2, [r7, #8]
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <Write_Registers_data+0x218>)
 8001764:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <Write_Registers_data+0x208>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
			break;
 800176c:	e06e      	b.n	800184c <Write_Registers_data+0x1f8>
		case 5: //Vertical blanking (Low byte)
			Vertical_blanking_L = data[0];
 800176e:	7a3a      	ldrb	r2, [r7, #8]
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <Write_Registers_data+0x21c>)
 8001772:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <Write_Registers_data+0x208>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
			break;
 800177a:	e067      	b.n	800184c <Write_Registers_data+0x1f8>
		case 6: //Frame rate x 2 (Hz)
			frame_rate_r = data[0];
 800177c:	7a3a      	ldrb	r2, [r7, #8]
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <Write_Registers_data+0x220>)
 8001780:	701a      	strb	r2, [r3, #0]
			break;
 8001782:	e063      	b.n	800184c <Write_Registers_data+0x1f8>
		case 7: //Show SPI flash content length
			spi_flash_content_length = data[0];
 8001784:	7a3a      	ldrb	r2, [r7, #8]
 8001786:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <Write_Registers_data+0x224>)
 8001788:	701a      	strb	r2, [r3, #0]
			break;
 800178a:	e05f      	b.n	800184c <Write_Registers_data+0x1f8>
		case 9: //Clock rate of SPI
			break;
		case 10: //Clock rate of I2C
			break;
		case 11: //Pixel Mapping one_L
			Pixel_Mapping_one_L = data[0];
 800178c:	7a3a      	ldrb	r2, [r7, #8]
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <Write_Registers_data+0x228>)
 8001790:	701a      	strb	r2, [r3, #0]
			break;
 8001792:	e05b      	b.n	800184c <Write_Registers_data+0x1f8>
		case 12: //Pixel Mapping one_H
			Pixel_Mapping_one_H = data[0];
 8001794:	7a3a      	ldrb	r2, [r7, #8]
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <Write_Registers_data+0x22c>)
 8001798:	701a      	strb	r2, [r3, #0]
			break;
 800179a:	e057      	b.n	800184c <Write_Registers_data+0x1f8>
		case 13: //Auto Run start content of SPI flash
			auto_run_start_content = data[0];
 800179c:	7a3a      	ldrb	r2, [r7, #8]
 800179e:	4b39      	ldr	r3, [pc, #228]	; (8001884 <Write_Registers_data+0x230>)
 80017a0:	701a      	strb	r2, [r3, #0]
			break;
 80017a2:	e053      	b.n	800184c <Write_Registers_data+0x1f8>
		case 14: //Show first content number of SPI flash
			display_image_number = data[0];
 80017a4:	7a3a      	ldrb	r2, [r7, #8]
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <Write_Registers_data+0x234>)
 80017a8:	701a      	strb	r2, [r3, #0]
			break;
 80017aa:	e04f      	b.n	800184c <Write_Registers_data+0x1f8>
		case 15: //Auto Run end content of SPI flash
			auto_run_end_content = data[0];
 80017ac:	7a3a      	ldrb	r2, [r7, #8]
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <Write_Registers_data+0x238>)
 80017b0:	701a      	strb	r2, [r3, #0]
			break;
 80017b2:	e04b      	b.n	800184c <Write_Registers_data+0x1f8>
		case 16: //Control A
			switch (data[0] & 0b00000011) //Display Mode
 80017b4:	7a3b      	ldrb	r3, [r7, #8]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d00e      	beq.n	80017dc <Write_Registers_data+0x188>
 80017be:	2b03      	cmp	r3, #3
 80017c0:	dc10      	bgt.n	80017e4 <Write_Registers_data+0x190>
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <Write_Registers_data+0x178>
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d004      	beq.n	80017d4 <Write_Registers_data+0x180>
 80017ca:	e00b      	b.n	80017e4 <Write_Registers_data+0x190>
			{
			case 0b00000000: //Display content of frame buffer (0)
				play_mode_source = 1;
 80017cc:	4b30      	ldr	r3, [pc, #192]	; (8001890 <Write_Registers_data+0x23c>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
				break;
 80017d2:	e007      	b.n	80017e4 <Write_Registers_data+0x190>
			case 0b00000001: //Display content of frame buffer (1)
				play_mode_source = 2;
 80017d4:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <Write_Registers_data+0x23c>)
 80017d6:	2202      	movs	r2, #2
 80017d8:	701a      	strb	r2, [r3, #0]
				break;
 80017da:	e003      	b.n	80017e4 <Write_Registers_data+0x190>
			case 0b00000011: //Display Flash content
				play_mode_source = 0;
 80017dc:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <Write_Registers_data+0x23c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
				break;
 80017e2:	bf00      	nop
			}
			switch (data[0] & 0b00001100) //Static or Dynamic mode
 80017e4:	7a3b      	ldrb	r3, [r7, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d00e      	beq.n	800180c <Write_Registers_data+0x1b8>
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	dc2b      	bgt.n	800184a <Write_Registers_data+0x1f6>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <Write_Registers_data+0x1a8>
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d004      	beq.n	8001804 <Write_Registers_data+0x1b0>
				break;
			case 0b00001000: //Dynamic display flash content
				play_mode = 1;
				break;
			}
			break;
 80017fa:	e026      	b.n	800184a <Write_Registers_data+0x1f6>
				play_mode = 0;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <Write_Registers_data+0x240>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
				break;
 8001802:	e007      	b.n	8001814 <Write_Registers_data+0x1c0>
				play_mode = 2;
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <Write_Registers_data+0x240>)
 8001806:	2202      	movs	r2, #2
 8001808:	701a      	strb	r2, [r3, #0]
				break;
 800180a:	e003      	b.n	8001814 <Write_Registers_data+0x1c0>
				play_mode = 1;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <Write_Registers_data+0x240>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
				break;
 8001812:	bf00      	nop
			break;
 8001814:	e019      	b.n	800184a <Write_Registers_data+0x1f6>
		case 22: //Power Status
			break;
		case 23: //Serial number
			break;
		case 24: //content size
			content_size = data[0];
 8001816:	7a3a      	ldrb	r2, [r7, #8]
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <Write_Registers_data+0x244>)
 800181a:	701a      	strb	r2, [r3, #0]
			break;
 800181c:	e016      	b.n	800184c <Write_Registers_data+0x1f8>
		case 25:// force play buffer to write flash.
			play_mode_source = 1;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <Write_Registers_data+0x23c>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
			play_mode = 2;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <Write_Registers_data+0x240>)
 8001826:	2202      	movs	r2, #2
 8001828:	701a      	strb	r2, [r3, #0]
			break;
 800182a:	e00f      	b.n	800184c <Write_Registers_data+0x1f8>
		case 33:// force play buffer to write flash.
			Mode_config[100] = data[0];
 800182c:	7a3a      	ldrb	r2, [r7, #8]
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <Write_Registers_data+0x248>)
 8001830:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			//Playing_mode = data[0];
			play_mode =3;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <Write_Registers_data+0x240>)
 8001836:	2203      	movs	r2, #3
 8001838:	701a      	strb	r2, [r3, #0]
 			Mode_changed = 1;
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <Write_Registers_data+0x24c>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]

			break;
 8001840:	e004      	b.n	800184c <Write_Registers_data+0x1f8>
		}
	}
 8001842:	bf00      	nop
 8001844:	e002      	b.n	800184c <Write_Registers_data+0x1f8>
			break;
 8001846:	bf00      	nop
 8001848:	e000      	b.n	800184c <Write_Registers_data+0x1f8>
			break;
 800184a:	bf00      	nop
	//HAL_UART_Transmit(&huart4, &Register_Address, 1, 1000);
	//HAL_UART_Transmit(&huart4, &data, 1, 1000);
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000238 	.word	0x20000238
 8001858:	20000000 	.word	0x20000000
 800185c:	2008bd9a 	.word	0x2008bd9a
 8001860:	20000004 	.word	0x20000004
 8001864:	2000000c 	.word	0x2000000c
 8001868:	2000000d 	.word	0x2000000d
 800186c:	2000000e 	.word	0x2000000e
 8001870:	2000000f 	.word	0x2000000f
 8001874:	20000008 	.word	0x20000008
 8001878:	20000009 	.word	0x20000009
 800187c:	2000001c 	.word	0x2000001c
 8001880:	2000001d 	.word	0x2000001d
 8001884:	2000032c 	.word	0x2000032c
 8001888:	2008bd94 	.word	0x2008bd94
 800188c:	2000000a 	.word	0x2000000a
 8001890:	2007dee9 	.word	0x2007dee9
 8001894:	2007dee8 	.word	0x2007dee8
 8001898:	2000000b 	.word	0x2000000b
 800189c:	2008bda0 	.word	0x2008bda0
 80018a0:	2008bd9c 	.word	0x2008bd9c

080018a4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, &spi_rev_2byte, 2, 1000);
	// USB command: Type and command
	if(hspi == SPI2){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4aae      	ldr	r2, [pc, #696]	; (8001b68 <HAL_SPI_RxCpltCallback+0x2c4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_SPI_RxCpltCallback+0x14>
		int a=2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	60fb      	str	r3, [r7, #12]
	}
	if(hspi == SPI3){
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4aac      	ldr	r2, [pc, #688]	; (8001b6c <HAL_SPI_RxCpltCallback+0x2c8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_SPI_RxCpltCallback+0x20>
		int a=3;
 80018c0:	2303      	movs	r3, #3
 80018c2:	60bb      	str	r3, [r7, #8]
	}
	switch (spi_rev_2byte[0] & 0b11000000)
 80018c4:	4baa      	ldr	r3, [pc, #680]	; (8001b70 <HAL_SPI_RxCpltCallback+0x2cc>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018cc:	2bc0      	cmp	r3, #192	; 0xc0
 80018ce:	f000 81e9 	beq.w	8001ca4 <HAL_SPI_RxCpltCallback+0x400>
 80018d2:	2bc0      	cmp	r3, #192	; 0xc0
 80018d4:	f300 82a0 	bgt.w	8001e18 <HAL_SPI_RxCpltCallback+0x574>
 80018d8:	2b80      	cmp	r3, #128	; 0x80
 80018da:	f000 81d7 	beq.w	8001c8c <HAL_SPI_RxCpltCallback+0x3e8>
 80018de:	2b80      	cmp	r3, #128	; 0x80
 80018e0:	f300 829a 	bgt.w	8001e18 <HAL_SPI_RxCpltCallback+0x574>
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_SPI_RxCpltCallback+0x4c>
 80018e8:	2b40      	cmp	r3, #64	; 0x40
 80018ea:	f000 8171 	beq.w	8001bd0 <HAL_SPI_RxCpltCallback+0x32c>
 80018ee:	e293      	b.n	8001e18 <HAL_SPI_RxCpltCallback+0x574>
	{
	case 0b00000000: //Chain SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 80018f0:	4b9f      	ldr	r3, [pc, #636]	; (8001b70 <HAL_SPI_RxCpltCallback+0x2cc>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018f8:	2b38      	cmp	r3, #56	; 0x38
 80018fa:	f200 8286 	bhi.w	8001e0a <HAL_SPI_RxCpltCallback+0x566>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <HAL_SPI_RxCpltCallback+0x60>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	080019e9 	.word	0x080019e9
 8001908:	08001e0b 	.word	0x08001e0b
 800190c:	08001e0b 	.word	0x08001e0b
 8001910:	08001e0b 	.word	0x08001e0b
 8001914:	08001e0b 	.word	0x08001e0b
 8001918:	08001e0b 	.word	0x08001e0b
 800191c:	08001e0b 	.word	0x08001e0b
 8001920:	08001e0b 	.word	0x08001e0b
 8001924:	08001a9b 	.word	0x08001a9b
 8001928:	08001e0b 	.word	0x08001e0b
 800192c:	08001e0b 	.word	0x08001e0b
 8001930:	08001e0b 	.word	0x08001e0b
 8001934:	08001e0b 	.word	0x08001e0b
 8001938:	08001e0b 	.word	0x08001e0b
 800193c:	08001e0b 	.word	0x08001e0b
 8001940:	08001e0b 	.word	0x08001e0b
 8001944:	08001b4d 	.word	0x08001b4d
 8001948:	08001e0b 	.word	0x08001e0b
 800194c:	08001e0b 	.word	0x08001e0b
 8001950:	08001e0b 	.word	0x08001e0b
 8001954:	08001e0b 	.word	0x08001e0b
 8001958:	08001e0b 	.word	0x08001e0b
 800195c:	08001e0b 	.word	0x08001e0b
 8001960:	08001e0b 	.word	0x08001e0b
 8001964:	08001bcd 	.word	0x08001bcd
 8001968:	08001e0b 	.word	0x08001e0b
 800196c:	08001e0b 	.word	0x08001e0b
 8001970:	08001e0b 	.word	0x08001e0b
 8001974:	08001e0b 	.word	0x08001e0b
 8001978:	08001e0b 	.word	0x08001e0b
 800197c:	08001e0b 	.word	0x08001e0b
 8001980:	08001e0b 	.word	0x08001e0b
 8001984:	08001bcd 	.word	0x08001bcd
 8001988:	08001e0b 	.word	0x08001e0b
 800198c:	08001e0b 	.word	0x08001e0b
 8001990:	08001e0b 	.word	0x08001e0b
 8001994:	08001e0b 	.word	0x08001e0b
 8001998:	08001e0b 	.word	0x08001e0b
 800199c:	08001e0b 	.word	0x08001e0b
 80019a0:	08001e0b 	.word	0x08001e0b
 80019a4:	08001bcd 	.word	0x08001bcd
 80019a8:	08001e0b 	.word	0x08001e0b
 80019ac:	08001e0b 	.word	0x08001e0b
 80019b0:	08001e0b 	.word	0x08001e0b
 80019b4:	08001e0b 	.word	0x08001e0b
 80019b8:	08001e0b 	.word	0x08001e0b
 80019bc:	08001e0b 	.word	0x08001e0b
 80019c0:	08001e0b 	.word	0x08001e0b
 80019c4:	08001bcd 	.word	0x08001bcd
 80019c8:	08001e0b 	.word	0x08001e0b
 80019cc:	08001e0b 	.word	0x08001e0b
 80019d0:	08001e0b 	.word	0x08001e0b
 80019d4:	08001e0b 	.word	0x08001e0b
 80019d8:	08001e0b 	.word	0x08001e0b
 80019dc:	08001e0b 	.word	0x08001e0b
 80019e0:	08001e0b 	.word	0x08001e0b
 80019e4:	08001bcd 	.word	0x08001bcd
		{
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi_rev_2byte[0] & 0b00000111)
 80019e8:	4b61      	ldr	r3, [pc, #388]	; (8001b70 <HAL_SPI_RxCpltCallback+0x2cc>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d03e      	beq.n	8001a72 <HAL_SPI_RxCpltCallback+0x1ce>
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	dc4c      	bgt.n	8001a92 <HAL_SPI_RxCpltCallback+0x1ee>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_SPI_RxCpltCallback+0x15e>
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d014      	beq.n	8001a2a <HAL_SPI_RxCpltCallback+0x186>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 8001a00:	e047      	b.n	8001a92 <HAL_SPI_RxCpltCallback+0x1ee>
				if (BOARD_NUMBER == 1)
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d145      	bne.n	8001a96 <HAL_SPI_RxCpltCallback+0x1f2>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	; (8001b78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4b5a      	ldr	r3, [pc, #360]	; (8001b7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	fb12 f303 	smulbb	r3, r2, r3
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a20:	4957      	ldr	r1, [pc, #348]	; (8001b80 <HAL_SPI_RxCpltCallback+0x2dc>)
 8001a22:	4858      	ldr	r0, [pc, #352]	; (8001b84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001a24:	f006 ff4b 	bl	80088be <HAL_SPI_Receive>
				break;
 8001a28:	e035      	b.n	8001a96 <HAL_SPI_RxCpltCallback+0x1f2>
				if (BOARD_NUMBER == 2)
 8001a2a:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d10f      	bne.n	8001a52 <HAL_SPI_RxCpltCallback+0x1ae>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001a32:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	fb12 f303 	smulbb	r3, r2, r3
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a48:	494d      	ldr	r1, [pc, #308]	; (8001b80 <HAL_SPI_RxCpltCallback+0x2dc>)
 8001a4a:	484e      	ldr	r0, [pc, #312]	; (8001b84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001a4c:	f006 ff37 	bl	80088be <HAL_SPI_Receive>
				break;
 8001a50:	e022      	b.n	8001a98 <HAL_SPI_RxCpltCallback+0x1f4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	fb12 f303 	smulbb	r3, r2, r3
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a68:	4947      	ldr	r1, [pc, #284]	; (8001b88 <HAL_SPI_RxCpltCallback+0x2e4>)
 8001a6a:	4846      	ldr	r0, [pc, #280]	; (8001b84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001a6c:	f006 ff27 	bl	80088be <HAL_SPI_Receive>
				break;
 8001a70:	e012      	b.n	8001a98 <HAL_SPI_RxCpltCallback+0x1f4>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001a72:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	fb12 f303 	smulbb	r3, r2, r3
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a88:	493d      	ldr	r1, [pc, #244]	; (8001b80 <HAL_SPI_RxCpltCallback+0x2dc>)
 8001a8a:	483e      	ldr	r0, [pc, #248]	; (8001b84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001a8c:	f006 ff17 	bl	80088be <HAL_SPI_Receive>
				break;
 8001a90:	e002      	b.n	8001a98 <HAL_SPI_RxCpltCallback+0x1f4>
				break;
 8001a92:	bf00      	nop
 8001a94:	e09b      	b.n	8001bce <HAL_SPI_RxCpltCallback+0x32a>
				break;
 8001a96:	bf00      	nop
			}
			break;
 8001a98:	e099      	b.n	8001bce <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi_rev_2byte[0] & 0b00000111)
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d03e      	beq.n	8001b24 <HAL_SPI_RxCpltCallback+0x280>
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	dc4c      	bgt.n	8001b44 <HAL_SPI_RxCpltCallback+0x2a0>
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_SPI_RxCpltCallback+0x210>
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d014      	beq.n	8001adc <HAL_SPI_RxCpltCallback+0x238>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 8001ab2:	e047      	b.n	8001b44 <HAL_SPI_RxCpltCallback+0x2a0>
				if (BOARD_NUMBER == 1)
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d145      	bne.n	8001b48 <HAL_SPI_RxCpltCallback+0x2a4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	fb12 f303 	smulbb	r3, r2, r3
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad2:	492e      	ldr	r1, [pc, #184]	; (8001b8c <HAL_SPI_RxCpltCallback+0x2e8>)
 8001ad4:	482b      	ldr	r0, [pc, #172]	; (8001b84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001ad6:	f006 fef2 	bl	80088be <HAL_SPI_Receive>
				break;
 8001ada:	e035      	b.n	8001b48 <HAL_SPI_RxCpltCallback+0x2a4>
				if (BOARD_NUMBER == 2)
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d10f      	bne.n	8001b04 <HAL_SPI_RxCpltCallback+0x260>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	fb12 f303 	smulbb	r3, r2, r3
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	4924      	ldr	r1, [pc, #144]	; (8001b8c <HAL_SPI_RxCpltCallback+0x2e8>)
 8001afc:	4821      	ldr	r0, [pc, #132]	; (8001b84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001afe:	f006 fede 	bl	80088be <HAL_SPI_Receive>
				break;
 8001b02:	e022      	b.n	8001b4a <HAL_SPI_RxCpltCallback+0x2a6>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	fb12 f303 	smulbb	r3, r2, r3
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	491b      	ldr	r1, [pc, #108]	; (8001b88 <HAL_SPI_RxCpltCallback+0x2e4>)
 8001b1c:	4819      	ldr	r0, [pc, #100]	; (8001b84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001b1e:	f006 fece 	bl	80088be <HAL_SPI_Receive>
				break;
 8001b22:	e012      	b.n	8001b4a <HAL_SPI_RxCpltCallback+0x2a6>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_SPI_RxCpltCallback+0x2d8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	fb12 f303 	smulbb	r3, r2, r3
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	4914      	ldr	r1, [pc, #80]	; (8001b8c <HAL_SPI_RxCpltCallback+0x2e8>)
 8001b3c:	4811      	ldr	r0, [pc, #68]	; (8001b84 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001b3e:	f006 febe 	bl	80088be <HAL_SPI_Receive>
				break;
 8001b42:	e002      	b.n	8001b4a <HAL_SPI_RxCpltCallback+0x2a6>
				break;
 8001b44:	bf00      	nop
 8001b46:	e042      	b.n	8001bce <HAL_SPI_RxCpltCallback+0x32a>
				break;
 8001b48:	bf00      	nop
			}
			break;
 8001b4a:	e040      	b.n	8001bce <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00010000: //Write Registers data
			switch (spi_rev_2byte[0] & 0b00000111)
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d033      	beq.n	8001bc0 <HAL_SPI_RxCpltCallback+0x31c>
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	dc35      	bgt.n	8001bc8 <HAL_SPI_RxCpltCallback+0x324>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d017      	beq.n	8001b90 <HAL_SPI_RxCpltCallback+0x2ec>
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d021      	beq.n	8001ba8 <HAL_SPI_RxCpltCallback+0x304>
				break;
			case 0b00000100: //Broadcast to every board
				Write_Registers_data(1);
				break;
			default:
				break;
 8001b64:	e030      	b.n	8001bc8 <HAL_SPI_RxCpltCallback+0x324>
 8001b66:	bf00      	nop
 8001b68:	40003800 	.word	0x40003800
 8001b6c:	40003c00 	.word	0x40003c00
 8001b70:	2008bd98 	.word	0x2008bd98
 8001b74:	2000001f 	.word	0x2000001f
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	2000e1d8 	.word	0x2000e1d8
 8001b84:	20000238 	.word	0x20000238
 8001b88:	20000330 	.word	0x20000330
 8001b8c:	2001c080 	.word	0x2001c080
				if (BOARD_NUMBER == 1)
 8001b90:	4bac      	ldr	r3, [pc, #688]	; (8001e44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d103      	bne.n	8001ba0 <HAL_SPI_RxCpltCallback+0x2fc>
					Write_Registers_data(1);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff fd5b 	bl	8001654 <Write_Registers_data>
				break;
 8001b9e:	e014      	b.n	8001bca <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fd57 	bl	8001654 <Write_Registers_data>
				break;
 8001ba6:	e010      	b.n	8001bca <HAL_SPI_RxCpltCallback+0x326>
				if (BOARD_NUMBER == 2)
 8001ba8:	4ba6      	ldr	r3, [pc, #664]	; (8001e44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d103      	bne.n	8001bb8 <HAL_SPI_RxCpltCallback+0x314>
					Write_Registers_data(1);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff fd4f 	bl	8001654 <Write_Registers_data>
				break;
 8001bb6:	e008      	b.n	8001bca <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff fd4b 	bl	8001654 <Write_Registers_data>
				break;
 8001bbe:	e004      	b.n	8001bca <HAL_SPI_RxCpltCallback+0x326>
				Write_Registers_data(1);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff fd47 	bl	8001654 <Write_Registers_data>
				break;
 8001bc6:	e000      	b.n	8001bca <HAL_SPI_RxCpltCallback+0x326>
				break;
 8001bc8:	bf00      	nop
			}
			break;
 8001bca:	e000      	b.n	8001bce <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00011000: //Write partial content of frame buffer
			break;
 8001bcc:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 8001bce:	e11c      	b.n	8001e0a <HAL_SPI_RxCpltCallback+0x566>
	case 0b01000000: //Master SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001bd0:	4b9d      	ldr	r3, [pc, #628]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bd8:	2b28      	cmp	r3, #40	; 0x28
 8001bda:	f200 8118 	bhi.w	8001e0e <HAL_SPI_RxCpltCallback+0x56a>
 8001bde:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <HAL_SPI_RxCpltCallback+0x340>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001c89 	.word	0x08001c89
 8001be8:	08001e0f 	.word	0x08001e0f
 8001bec:	08001e0f 	.word	0x08001e0f
 8001bf0:	08001e0f 	.word	0x08001e0f
 8001bf4:	08001e0f 	.word	0x08001e0f
 8001bf8:	08001e0f 	.word	0x08001e0f
 8001bfc:	08001e0f 	.word	0x08001e0f
 8001c00:	08001e0f 	.word	0x08001e0f
 8001c04:	08001c89 	.word	0x08001c89
 8001c08:	08001e0f 	.word	0x08001e0f
 8001c0c:	08001e0f 	.word	0x08001e0f
 8001c10:	08001e0f 	.word	0x08001e0f
 8001c14:	08001e0f 	.word	0x08001e0f
 8001c18:	08001e0f 	.word	0x08001e0f
 8001c1c:	08001e0f 	.word	0x08001e0f
 8001c20:	08001e0f 	.word	0x08001e0f
 8001c24:	08001c89 	.word	0x08001c89
 8001c28:	08001e0f 	.word	0x08001e0f
 8001c2c:	08001e0f 	.word	0x08001e0f
 8001c30:	08001e0f 	.word	0x08001e0f
 8001c34:	08001e0f 	.word	0x08001e0f
 8001c38:	08001e0f 	.word	0x08001e0f
 8001c3c:	08001e0f 	.word	0x08001e0f
 8001c40:	08001e0f 	.word	0x08001e0f
 8001c44:	08001c89 	.word	0x08001c89
 8001c48:	08001e0f 	.word	0x08001e0f
 8001c4c:	08001e0f 	.word	0x08001e0f
 8001c50:	08001e0f 	.word	0x08001e0f
 8001c54:	08001e0f 	.word	0x08001e0f
 8001c58:	08001e0f 	.word	0x08001e0f
 8001c5c:	08001e0f 	.word	0x08001e0f
 8001c60:	08001e0f 	.word	0x08001e0f
 8001c64:	08001c89 	.word	0x08001c89
 8001c68:	08001e0f 	.word	0x08001e0f
 8001c6c:	08001e0f 	.word	0x08001e0f
 8001c70:	08001e0f 	.word	0x08001e0f
 8001c74:	08001e0f 	.word	0x08001e0f
 8001c78:	08001e0f 	.word	0x08001e0f
 8001c7c:	08001e0f 	.word	0x08001e0f
 8001c80:	08001e0f 	.word	0x08001e0f
 8001c84:	08001c89 	.word	0x08001c89
		{
		case 0b00000000: //Start SPI write data
			break;
 8001c88:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001c8a:	e0c0      	b.n	8001e0e <HAL_SPI_RxCpltCallback+0x56a>
	case 0b10000000: //I2C command
		switch (spi_rev_2byte[0] & 0b00111000)
 8001c8c:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_SPI_RxCpltCallback+0x3fc>
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	f040 80ba 	bne.w	8001e12 <HAL_SPI_RxCpltCallback+0x56e>
		{
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001c9e:	e000      	b.n	8001ca2 <HAL_SPI_RxCpltCallback+0x3fe>
			break;
 8001ca0:	bf00      	nop
		}
		break;
 8001ca2:	e0b6      	b.n	8001e12 <HAL_SPI_RxCpltCallback+0x56e>
	case 0b11000000: //SPI flash function & Slave SPI
		switch (spi_rev_2byte[0] & 0b00111000)
 8001ca4:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	f000 80aa 	beq.w	8001e06 <HAL_SPI_RxCpltCallback+0x562>
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	f300 80af 	bgt.w	8001e16 <HAL_SPI_RxCpltCallback+0x572>
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HAL_SPI_RxCpltCallback+0x41e>
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d078      	beq.n	8001db2 <HAL_SPI_RxCpltCallback+0x50e>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001cc0:	e0a9      	b.n	8001e16 <HAL_SPI_RxCpltCallback+0x572>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001cc2:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d04c      	beq.n	8001d68 <HAL_SPI_RxCpltCallback+0x4c4>
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	dc69      	bgt.n	8001da6 <HAL_SPI_RxCpltCallback+0x502>
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_SPI_RxCpltCallback+0x438>
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d023      	beq.n	8001d22 <HAL_SPI_RxCpltCallback+0x47e>
				break;
 8001cda:	e064      	b.n	8001da6 <HAL_SPI_RxCpltCallback+0x502>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	fb12 f303 	smulbb	r3, r2, r3
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	4958      	ldr	r1, [pc, #352]	; (8001e54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001cf4:	4858      	ldr	r0, [pc, #352]	; (8001e58 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001cf6:	f006 fde2 	bl	80088be <HAL_SPI_Receive>
				if (BOARD_NUMBER == 1)
 8001cfa:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d153      	bne.n	8001daa <HAL_SPI_RxCpltCallback+0x506>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001d02:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d04:	785b      	ldrb	r3, [r3, #1]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fffa 	bl	8002d04 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001d10:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	484e      	ldr	r0, [pc, #312]	; (8001e54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001d1c:	f000 fc44 	bl	80025a8 <write_flash_page>
				break;
 8001d20:	e043      	b.n	8001daa <HAL_SPI_RxCpltCallback+0x506>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	fb12 f303 	smulbb	r3, r2, r3
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d38:	4946      	ldr	r1, [pc, #280]	; (8001e54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001d3a:	4847      	ldr	r0, [pc, #284]	; (8001e58 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001d3c:	f006 fdbf 	bl	80088be <HAL_SPI_Receive>
				if (BOARD_NUMBER == 2)
 8001d40:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d132      	bne.n	8001dae <HAL_SPI_RxCpltCallback+0x50a>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d4a:	785b      	ldrb	r3, [r3, #1]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 ffd7 	bl	8002d04 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001d56:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d58:	785b      	ldrb	r3, [r3, #1]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4619      	mov	r1, r3
 8001d60:	483c      	ldr	r0, [pc, #240]	; (8001e54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001d62:	f000 fc21 	bl	80025a8 <write_flash_page>
				break;
 8001d66:	e022      	b.n	8001dae <HAL_SPI_RxCpltCallback+0x50a>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001d68:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	fb12 f303 	smulbb	r3, r2, r3
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7e:	4935      	ldr	r1, [pc, #212]	; (8001e54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001d80:	4835      	ldr	r0, [pc, #212]	; (8001e58 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001d82:	f006 fd9c 	bl	80088be <HAL_SPI_Receive>
				erase_flash_sector(spi_rev_2byte[1] - 1);
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 ffb8 	bl	8002d04 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001d94:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	482d      	ldr	r0, [pc, #180]	; (8001e54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001da0:	f000 fc02 	bl	80025a8 <write_flash_page>
				break;
 8001da4:	e004      	b.n	8001db0 <HAL_SPI_RxCpltCallback+0x50c>
				break;
 8001da6:	bf00      	nop
 8001da8:	e02e      	b.n	8001e08 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001daa:	bf00      	nop
 8001dac:	e02c      	b.n	8001e08 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001dae:	bf00      	nop
			break;
 8001db0:	e02a      	b.n	8001e08 <HAL_SPI_RxCpltCallback+0x564>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d014      	beq.n	8001de8 <HAL_SPI_RxCpltCallback+0x544>
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	dc1d      	bgt.n	8001dfe <HAL_SPI_RxCpltCallback+0x55a>
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_SPI_RxCpltCallback+0x526>
 8001dc6:	2b01      	cmp	r3, #1
				break;
 8001dc8:	e01c      	b.n	8001e04 <HAL_SPI_RxCpltCallback+0x560>
				if (BOARD_NUMBER == 1)
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d117      	bne.n	8001e02 <HAL_SPI_RxCpltCallback+0x55e>
					reset_flash_software();
 8001dd2:	f001 f86d 	bl	8002eb0 <reset_flash_software>
					read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	481c      	ldr	r0, [pc, #112]	; (8001e54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001de2:	f000 fcb1 	bl	8002748 <read_flash_page>
				break;
 8001de6:	e00c      	b.n	8001e02 <HAL_SPI_RxCpltCallback+0x55e>
				reset_flash_software();
 8001de8:	f001 f862 	bl	8002eb0 <reset_flash_software>
				read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001dee:	785b      	ldrb	r3, [r3, #1]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4619      	mov	r1, r3
 8001df6:	4817      	ldr	r0, [pc, #92]	; (8001e54 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001df8:	f000 fca6 	bl	8002748 <read_flash_page>
				break;
 8001dfc:	e002      	b.n	8001e04 <HAL_SPI_RxCpltCallback+0x560>
				break;
 8001dfe:	bf00      	nop
 8001e00:	e002      	b.n	8001e08 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001e02:	bf00      	nop
			break;
 8001e04:	e000      	b.n	8001e08 <HAL_SPI_RxCpltCallback+0x564>
			break;
 8001e06:	bf00      	nop
		break;
 8001e08:	e005      	b.n	8001e16 <HAL_SPI_RxCpltCallback+0x572>
		break;
 8001e0a:	bf00      	nop
 8001e0c:	e004      	b.n	8001e18 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001e0e:	bf00      	nop
 8001e10:	e002      	b.n	8001e18 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001e12:	bf00      	nop
 8001e14:	e000      	b.n	8001e18 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001e16:	bf00      	nop
	}
	// USB command: ID
	switch (spi_rev_2byte[0] & 0b00000111)
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_SPI_RxCpltCallback+0x586>
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d002      	beq.n	8001e2e <HAL_SPI_RxCpltCallback+0x58a>
	case 0b00000000: //Command for DIP switch ID = 00
		break;
	case 0b00000001: //Command for DIP switch ID = 01
		break;
	default: //Broadcast to every board
		break;
 8001e28:	e002      	b.n	8001e30 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001e2a:	bf00      	nop
 8001e2c:	e000      	b.n	8001e30 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001e2e:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8001e30:	2202      	movs	r2, #2
 8001e32:	4905      	ldr	r1, [pc, #20]	; (8001e48 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001e34:	4808      	ldr	r0, [pc, #32]	; (8001e58 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001e36:	f007 f885 	bl	8008f44 <HAL_SPI_Receive_IT>
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000001f 	.word	0x2000001f
 8001e48:	2008bd98 	.word	0x2008bd98
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000004 	.word	0x20000004
 8001e54:	20000330 	.word	0x20000330
 8001e58:	20000238 	.word	0x20000238

08001e5c <display_panel>:

void display_panel(uint8_t *frame_buf)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	int num_ones = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 8001e68:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <display_panel+0xe4>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <display_panel+0xe8>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	4313      	orrs	r3, r2
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 12; i++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
 8001e80:	e00d      	b.n	8001e9e <display_panel+0x42>
	{
		if (Pixel_Mapping_one & (1 << i))
 8001e82:	897a      	ldrh	r2, [r7, #10]
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	fa42 f303 	asr.w	r3, r2, r3
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <display_panel+0x3c>
		{
			num_ones++;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	3301      	adds	r3, #1
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	2b0b      	cmp	r3, #11
 8001ea2:	ddee      	ble.n	8001e82 <display_panel+0x26>
		}
	}

	int frame_buf_count = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
	int Pixel_Mapping_one_count = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
	int c = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e034      	b.n	8001f20 <display_panel+0xc4>
	{
		Pixel_Mapping_one_count = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
		c = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 12; j++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e022      	b.n	8001f0a <display_panel+0xae>
		{
			if (Pixel_Mapping_one & (1 << j))
 8001ec4:	897a      	ldrh	r2, [r7, #10]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	fa42 f303 	asr.w	r3, r2, r3
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d014      	beq.n	8001efe <display_panel+0xa2>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4413      	add	r3, r2
 8001eda:	61fb      	str	r3, [r7, #28]
				image_arr_rgb888[frame_buf_count] = frame_buf[i + c];
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	7819      	ldrb	r1, [r3, #0]
 8001eea:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <display_panel+0xec>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	4413      	add	r3, r2
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	701a      	strb	r2, [r3, #0]
				c++;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
				Pixel_Mapping_one_count = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
			}
			Pixel_Mapping_one_count++;
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
		for (int j = 0; j < 12; j++)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b0b      	cmp	r3, #11
 8001f0e:	ddd9      	ble.n	8001ec4 <display_panel+0x68>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4413      	add	r3, r2
 8001f16:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	4413      	add	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <display_panel+0xf0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <display_panel+0xf4>)
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	fb03 f202 	mul.w	r2, r3, r2
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d8c1      	bhi.n	8001eb6 <display_panel+0x5a>
	}
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	372c      	adds	r7, #44	; 0x2c
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	2000001c 	.word	0x2000001c
 8001f44:	2000001d 	.word	0x2000001d
 8001f48:	2007deec 	.word	0x2007deec
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <read_flash_SR>:

/*====================================flash function begin====================================*/
uint8_t read_flash_SR()
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
	uint8_t dat[1] = {0x00};
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f64:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <read_flash_SR+0x4c>)
 8001f66:	f004 fa9f 	bl	80064a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x05}, 1, 1000);
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	703b      	strb	r3, [r7, #0]
 8001f6e:	4639      	mov	r1, r7
 8001f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f74:	2201      	movs	r2, #1
 8001f76:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <read_flash_SR+0x50>)
 8001f78:	f006 fb33 	bl	80085e2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)dat, 1, 1000);
 8001f7c:	1d39      	adds	r1, r7, #4
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	2201      	movs	r2, #1
 8001f84:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <read_flash_SR+0x50>)
 8001f86:	f006 fc9a 	bl	80088be <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <read_flash_SR+0x4c>)
 8001f92:	f004 fa89 	bl	80064a8 <HAL_GPIO_WritePin>

	return dat[0];
 8001f96:	793b      	ldrb	r3, [r7, #4]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	200001d4 	.word	0x200001d4

08001fa8 <flash_wait_nobusy>:

void flash_wait_nobusy(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
    while(((read_flash_SR()) & 0x01)==0x01);
 8001fac:	bf00      	nop
 8001fae:	f7ff ffd1 	bl	8001f54 <read_flash_SR>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d0f8      	beq.n	8001fae <flash_wait_nobusy+0x6>
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <mode_init>:
		delay_us(10);

		flash_wait_nobusy();
	}
}*/
void mode_init(){
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	e00f      	b.n	8001ff0 <mode_init+0x2c>
		Mode_config[i*2]=i;//picture_id
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	b2d1      	uxtb	r1, r2
 8001fd8:	4ac4      	ldr	r2, [pc, #784]	; (80022ec <mode_init+0x328>)
 8001fda:	54d1      	strb	r1, [r2, r3]
		Mode_config[i*2+1]=i;//picture_delay_time
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	b2d1      	uxtb	r1, r2
 8001fe6:	4ac1      	ldr	r2, [pc, #772]	; (80022ec <mode_init+0x328>)
 8001fe8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3301      	adds	r3, #1
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b6e      	cmp	r3, #110	; 0x6e
 8001ff4:	ddec      	ble.n	8001fd0 <mode_init+0xc>
	}
	Mode_config[Max_pic_per_mode*(Max_mode_num-1)*2]=0;
 8001ff6:	4bbd      	ldr	r3, [pc, #756]	; (80022ec <mode_init+0x328>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	//test mode 1
	Mode_config[0]=0;//frist pic
 8001ffe:	4bbb      	ldr	r3, [pc, #748]	; (80022ec <mode_init+0x328>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
	Mode_config[1]=2;//frsit picture delay time
 8002004:	4bb9      	ldr	r3, [pc, #740]	; (80022ec <mode_init+0x328>)
 8002006:	2202      	movs	r2, #2
 8002008:	705a      	strb	r2, [r3, #1]
	Mode_config[2]=1;
 800200a:	4bb8      	ldr	r3, [pc, #736]	; (80022ec <mode_init+0x328>)
 800200c:	2201      	movs	r2, #1
 800200e:	709a      	strb	r2, [r3, #2]
	Mode_config[3]=2;
 8002010:	4bb6      	ldr	r3, [pc, #728]	; (80022ec <mode_init+0x328>)
 8002012:	2202      	movs	r2, #2
 8002014:	70da      	strb	r2, [r3, #3]
	Mode_config[4]=255;//no pic
 8002016:	4bb5      	ldr	r3, [pc, #724]	; (80022ec <mode_init+0x328>)
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	711a      	strb	r2, [r3, #4]
	Mode_config[5]=1;
 800201c:	4bb3      	ldr	r3, [pc, #716]	; (80022ec <mode_init+0x328>)
 800201e:	2201      	movs	r2, #1
 8002020:	715a      	strb	r2, [r3, #5]
	Mode_config[6]=255;
 8002022:	4bb2      	ldr	r3, [pc, #712]	; (80022ec <mode_init+0x328>)
 8002024:	22ff      	movs	r2, #255	; 0xff
 8002026:	719a      	strb	r2, [r3, #6]
	Mode_config[7]=1;
 8002028:	4bb0      	ldr	r3, [pc, #704]	; (80022ec <mode_init+0x328>)
 800202a:	2201      	movs	r2, #1
 800202c:	71da      	strb	r2, [r3, #7]
	Mode_config[8]=255;
 800202e:	4baf      	ldr	r3, [pc, #700]	; (80022ec <mode_init+0x328>)
 8002030:	22ff      	movs	r2, #255	; 0xff
 8002032:	721a      	strb	r2, [r3, #8]
	Mode_config[9]=1;
 8002034:	4bad      	ldr	r3, [pc, #692]	; (80022ec <mode_init+0x328>)
 8002036:	2201      	movs	r2, #1
 8002038:	725a      	strb	r2, [r3, #9]
	//test mode 2
	Mode_config[10]=0;
 800203a:	4bac      	ldr	r3, [pc, #688]	; (80022ec <mode_init+0x328>)
 800203c:	2200      	movs	r2, #0
 800203e:	729a      	strb	r2, [r3, #10]
	Mode_config[11]=4;
 8002040:	4baa      	ldr	r3, [pc, #680]	; (80022ec <mode_init+0x328>)
 8002042:	2204      	movs	r2, #4
 8002044:	72da      	strb	r2, [r3, #11]
	Mode_config[12]=1;
 8002046:	4ba9      	ldr	r3, [pc, #676]	; (80022ec <mode_init+0x328>)
 8002048:	2201      	movs	r2, #1
 800204a:	731a      	strb	r2, [r3, #12]
	Mode_config[13]=4;
 800204c:	4ba7      	ldr	r3, [pc, #668]	; (80022ec <mode_init+0x328>)
 800204e:	2204      	movs	r2, #4
 8002050:	735a      	strb	r2, [r3, #13]
	Mode_config[14]=255;
 8002052:	4ba6      	ldr	r3, [pc, #664]	; (80022ec <mode_init+0x328>)
 8002054:	22ff      	movs	r2, #255	; 0xff
 8002056:	739a      	strb	r2, [r3, #14]
	Mode_config[15]=1;
 8002058:	4ba4      	ldr	r3, [pc, #656]	; (80022ec <mode_init+0x328>)
 800205a:	2201      	movs	r2, #1
 800205c:	73da      	strb	r2, [r3, #15]
	Mode_config[16]=255;
 800205e:	4ba3      	ldr	r3, [pc, #652]	; (80022ec <mode_init+0x328>)
 8002060:	22ff      	movs	r2, #255	; 0xff
 8002062:	741a      	strb	r2, [r3, #16]
	Mode_config[17]=1;
 8002064:	4ba1      	ldr	r3, [pc, #644]	; (80022ec <mode_init+0x328>)
 8002066:	2201      	movs	r2, #1
 8002068:	745a      	strb	r2, [r3, #17]
	Mode_config[18]=255;
 800206a:	4ba0      	ldr	r3, [pc, #640]	; (80022ec <mode_init+0x328>)
 800206c:	22ff      	movs	r2, #255	; 0xff
 800206e:	749a      	strb	r2, [r3, #18]
	Mode_config[19]=1;
 8002070:	4b9e      	ldr	r3, [pc, #632]	; (80022ec <mode_init+0x328>)
 8002072:	2201      	movs	r2, #1
 8002074:	74da      	strb	r2, [r3, #19]
	//test mode 3
	Mode_config[20]=2;
 8002076:	4b9d      	ldr	r3, [pc, #628]	; (80022ec <mode_init+0x328>)
 8002078:	2202      	movs	r2, #2
 800207a:	751a      	strb	r2, [r3, #20]
	Mode_config[21]=2;
 800207c:	4b9b      	ldr	r3, [pc, #620]	; (80022ec <mode_init+0x328>)
 800207e:	2202      	movs	r2, #2
 8002080:	755a      	strb	r2, [r3, #21]
	Mode_config[22]=3;
 8002082:	4b9a      	ldr	r3, [pc, #616]	; (80022ec <mode_init+0x328>)
 8002084:	2203      	movs	r2, #3
 8002086:	759a      	strb	r2, [r3, #22]
	Mode_config[23]=2;
 8002088:	4b98      	ldr	r3, [pc, #608]	; (80022ec <mode_init+0x328>)
 800208a:	2202      	movs	r2, #2
 800208c:	75da      	strb	r2, [r3, #23]
	Mode_config[24]=4;
 800208e:	4b97      	ldr	r3, [pc, #604]	; (80022ec <mode_init+0x328>)
 8002090:	2204      	movs	r2, #4
 8002092:	761a      	strb	r2, [r3, #24]
	Mode_config[25]=2;
 8002094:	4b95      	ldr	r3, [pc, #596]	; (80022ec <mode_init+0x328>)
 8002096:	2202      	movs	r2, #2
 8002098:	765a      	strb	r2, [r3, #25]
	Mode_config[26]=5;
 800209a:	4b94      	ldr	r3, [pc, #592]	; (80022ec <mode_init+0x328>)
 800209c:	2205      	movs	r2, #5
 800209e:	769a      	strb	r2, [r3, #26]
	Mode_config[27]=2;
 80020a0:	4b92      	ldr	r3, [pc, #584]	; (80022ec <mode_init+0x328>)
 80020a2:	2202      	movs	r2, #2
 80020a4:	76da      	strb	r2, [r3, #27]
	Mode_config[28]=255;
 80020a6:	4b91      	ldr	r3, [pc, #580]	; (80022ec <mode_init+0x328>)
 80020a8:	22ff      	movs	r2, #255	; 0xff
 80020aa:	771a      	strb	r2, [r3, #28]
	Mode_config[29]=1;
 80020ac:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <mode_init+0x328>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	775a      	strb	r2, [r3, #29]
	//test mode 4
	Mode_config[30]=2;
 80020b2:	4b8e      	ldr	r3, [pc, #568]	; (80022ec <mode_init+0x328>)
 80020b4:	2202      	movs	r2, #2
 80020b6:	779a      	strb	r2, [r3, #30]
	Mode_config[31]=4;
 80020b8:	4b8c      	ldr	r3, [pc, #560]	; (80022ec <mode_init+0x328>)
 80020ba:	2204      	movs	r2, #4
 80020bc:	77da      	strb	r2, [r3, #31]
	Mode_config[32]=3;
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <mode_init+0x328>)
 80020c0:	2203      	movs	r2, #3
 80020c2:	f883 2020 	strb.w	r2, [r3, #32]
	Mode_config[33]=4;
 80020c6:	4b89      	ldr	r3, [pc, #548]	; (80022ec <mode_init+0x328>)
 80020c8:	2204      	movs	r2, #4
 80020ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Mode_config[34]=4;
 80020ce:	4b87      	ldr	r3, [pc, #540]	; (80022ec <mode_init+0x328>)
 80020d0:	2204      	movs	r2, #4
 80020d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Mode_config[35]=4;
 80020d6:	4b85      	ldr	r3, [pc, #532]	; (80022ec <mode_init+0x328>)
 80020d8:	2204      	movs	r2, #4
 80020da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Mode_config[36]=5;
 80020de:	4b83      	ldr	r3, [pc, #524]	; (80022ec <mode_init+0x328>)
 80020e0:	2205      	movs	r2, #5
 80020e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Mode_config[37]=4;
 80020e6:	4b81      	ldr	r3, [pc, #516]	; (80022ec <mode_init+0x328>)
 80020e8:	2204      	movs	r2, #4
 80020ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Mode_config[38]=255;
 80020ee:	4b7f      	ldr	r3, [pc, #508]	; (80022ec <mode_init+0x328>)
 80020f0:	22ff      	movs	r2, #255	; 0xff
 80020f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Mode_config[39]=1;
 80020f6:	4b7d      	ldr	r3, [pc, #500]	; (80022ec <mode_init+0x328>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//test mode 4
	Mode_config[40]=7;
 80020fe:	4b7b      	ldr	r3, [pc, #492]	; (80022ec <mode_init+0x328>)
 8002100:	2207      	movs	r2, #7
 8002102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Mode_config[41]=2;
 8002106:	4b79      	ldr	r3, [pc, #484]	; (80022ec <mode_init+0x328>)
 8002108:	2202      	movs	r2, #2
 800210a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Mode_config[42]=8;
 800210e:	4b77      	ldr	r3, [pc, #476]	; (80022ec <mode_init+0x328>)
 8002110:	2208      	movs	r2, #8
 8002112:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Mode_config[43]=2;
 8002116:	4b75      	ldr	r3, [pc, #468]	; (80022ec <mode_init+0x328>)
 8002118:	2202      	movs	r2, #2
 800211a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Mode_config[44]=9;
 800211e:	4b73      	ldr	r3, [pc, #460]	; (80022ec <mode_init+0x328>)
 8002120:	2209      	movs	r2, #9
 8002122:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Mode_config[45]=2;
 8002126:	4b71      	ldr	r3, [pc, #452]	; (80022ec <mode_init+0x328>)
 8002128:	2202      	movs	r2, #2
 800212a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Mode_config[46]=10;
 800212e:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <mode_init+0x328>)
 8002130:	220a      	movs	r2, #10
 8002132:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Mode_config[47]=2;
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <mode_init+0x328>)
 8002138:	2202      	movs	r2, #2
 800213a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Mode_config[48]=255;
 800213e:	4b6b      	ldr	r3, [pc, #428]	; (80022ec <mode_init+0x328>)
 8002140:	22ff      	movs	r2, #255	; 0xff
 8002142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Mode_config[49]=1;
 8002146:	4b69      	ldr	r3, [pc, #420]	; (80022ec <mode_init+0x328>)
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	//test mode 6
	Mode_config[50]=7;
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <mode_init+0x328>)
 8002150:	2207      	movs	r2, #7
 8002152:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Mode_config[51]=4;
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <mode_init+0x328>)
 8002158:	2204      	movs	r2, #4
 800215a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Mode_config[52]=8;
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <mode_init+0x328>)
 8002160:	2208      	movs	r2, #8
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Mode_config[53]=4;
 8002166:	4b61      	ldr	r3, [pc, #388]	; (80022ec <mode_init+0x328>)
 8002168:	2204      	movs	r2, #4
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	Mode_config[54]=9;
 800216e:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <mode_init+0x328>)
 8002170:	2209      	movs	r2, #9
 8002172:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Mode_config[55]=4;
 8002176:	4b5d      	ldr	r3, [pc, #372]	; (80022ec <mode_init+0x328>)
 8002178:	2204      	movs	r2, #4
 800217a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Mode_config[56]=10;
 800217e:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <mode_init+0x328>)
 8002180:	220a      	movs	r2, #10
 8002182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Mode_config[57]=4;
 8002186:	4b59      	ldr	r3, [pc, #356]	; (80022ec <mode_init+0x328>)
 8002188:	2204      	movs	r2, #4
 800218a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Mode_config[58]=255;
 800218e:	4b57      	ldr	r3, [pc, #348]	; (80022ec <mode_init+0x328>)
 8002190:	22ff      	movs	r2, #255	; 0xff
 8002192:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Mode_config[59]=4;
 8002196:	4b55      	ldr	r3, [pc, #340]	; (80022ec <mode_init+0x328>)
 8002198:	2204      	movs	r2, #4
 800219a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//test mode 7
	Mode_config[60]=11;
 800219e:	4b53      	ldr	r3, [pc, #332]	; (80022ec <mode_init+0x328>)
 80021a0:	220b      	movs	r2, #11
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Mode_config[61]=2;
 80021a6:	4b51      	ldr	r3, [pc, #324]	; (80022ec <mode_init+0x328>)
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Mode_config[62]=12;
 80021ae:	4b4f      	ldr	r3, [pc, #316]	; (80022ec <mode_init+0x328>)
 80021b0:	220c      	movs	r2, #12
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Mode_config[63]=2;
 80021b6:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <mode_init+0x328>)
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Mode_config[64]=255;
 80021be:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <mode_init+0x328>)
 80021c0:	22ff      	movs	r2, #255	; 0xff
 80021c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Mode_config[65]=1;
 80021c6:	4b49      	ldr	r3, [pc, #292]	; (80022ec <mode_init+0x328>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Mode_config[66]=255;
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <mode_init+0x328>)
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Mode_config[67]=1;
 80021d6:	4b45      	ldr	r3, [pc, #276]	; (80022ec <mode_init+0x328>)
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Mode_config[68]=255;
 80021de:	4b43      	ldr	r3, [pc, #268]	; (80022ec <mode_init+0x328>)
 80021e0:	22ff      	movs	r2, #255	; 0xff
 80021e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Mode_config[69]=1;
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <mode_init+0x328>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	//test mode 8
	Mode_config[70]=11;
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <mode_init+0x328>)
 80021f0:	220b      	movs	r2, #11
 80021f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Mode_config[71]=4;
 80021f6:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <mode_init+0x328>)
 80021f8:	2204      	movs	r2, #4
 80021fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	Mode_config[72]=12;
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <mode_init+0x328>)
 8002200:	220c      	movs	r2, #12
 8002202:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Mode_config[73]=4;
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <mode_init+0x328>)
 8002208:	2204      	movs	r2, #4
 800220a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Mode_config[74]=255;
 800220e:	4b37      	ldr	r3, [pc, #220]	; (80022ec <mode_init+0x328>)
 8002210:	22ff      	movs	r2, #255	; 0xff
 8002212:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Mode_config[75]=1;
 8002216:	4b35      	ldr	r3, [pc, #212]	; (80022ec <mode_init+0x328>)
 8002218:	2201      	movs	r2, #1
 800221a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Mode_config[76]=255;
 800221e:	4b33      	ldr	r3, [pc, #204]	; (80022ec <mode_init+0x328>)
 8002220:	22ff      	movs	r2, #255	; 0xff
 8002222:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Mode_config[77]=1;
 8002226:	4b31      	ldr	r3, [pc, #196]	; (80022ec <mode_init+0x328>)
 8002228:	2201      	movs	r2, #1
 800222a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Mode_config[78]=255;
 800222e:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <mode_init+0x328>)
 8002230:	22ff      	movs	r2, #255	; 0xff
 8002232:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Mode_config[79]=1;
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <mode_init+0x328>)
 8002238:	2201      	movs	r2, #1
 800223a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	//test mode 9
	Mode_config[80]=13;
 800223e:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <mode_init+0x328>)
 8002240:	220d      	movs	r2, #13
 8002242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Mode_config[81]=2;
 8002246:	4b29      	ldr	r3, [pc, #164]	; (80022ec <mode_init+0x328>)
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Mode_config[82]=14;
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <mode_init+0x328>)
 8002250:	220e      	movs	r2, #14
 8002252:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Mode_config[83]=2;
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <mode_init+0x328>)
 8002258:	2202      	movs	r2, #2
 800225a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Mode_config[84]=255;
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <mode_init+0x328>)
 8002260:	22ff      	movs	r2, #255	; 0xff
 8002262:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Mode_config[85]=1;
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <mode_init+0x328>)
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Mode_config[86]=255;
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <mode_init+0x328>)
 8002270:	22ff      	movs	r2, #255	; 0xff
 8002272:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Mode_config[87]=1;
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <mode_init+0x328>)
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Mode_config[88]=255;
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <mode_init+0x328>)
 8002280:	22ff      	movs	r2, #255	; 0xff
 8002282:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	Mode_config[89]=1;
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <mode_init+0x328>)
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//test mode 10
	Mode_config[90]=13;
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <mode_init+0x328>)
 8002290:	220d      	movs	r2, #13
 8002292:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	Mode_config[91]=4;
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <mode_init+0x328>)
 8002298:	2204      	movs	r2, #4
 800229a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Mode_config[92]=14;
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <mode_init+0x328>)
 80022a0:	220e      	movs	r2, #14
 80022a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	Mode_config[93]=4;
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <mode_init+0x328>)
 80022a8:	2204      	movs	r2, #4
 80022aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	Mode_config[94]=255;
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <mode_init+0x328>)
 80022b0:	22ff      	movs	r2, #255	; 0xff
 80022b2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Mode_config[95]=1;
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <mode_init+0x328>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	Mode_config[96]=255;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <mode_init+0x328>)
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	Mode_config[97]=1;
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <mode_init+0x328>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	Mode_config[98]=255;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <mode_init+0x328>)
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	Mode_config[99]=1;
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <mode_init+0x328>)
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	2008bda0 	.word	0x2008bda0

080022f0 <write_flash_config>:
void write_flash_config()
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
	//content_size�????????0=16kb, 1=32kb, 2=32kb, 3=64kb
	int divide_value = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64; //divide_value=4
 80022fa:	4b60      	ldr	r3, [pc, #384]	; (800247c <write_flash_config+0x18c>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <write_flash_config+0x18>
 8002302:	2304      	movs	r3, #4
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002306:	e00c      	b.n	8002322 <write_flash_config+0x32>
	else if(content_size==1) divide_value=256/128; //divide_value=2
 8002308:	4b5c      	ldr	r3, [pc, #368]	; (800247c <write_flash_config+0x18c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d102      	bne.n	8002316 <write_flash_config+0x26>
 8002310:	2302      	movs	r3, #2
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002314:	e005      	b.n	8002322 <write_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;//divide_value=1
 8002316:	4b59      	ldr	r3, [pc, #356]	; (800247c <write_flash_config+0x18c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d101      	bne.n	8002322 <write_flash_config+0x32>
 800231e:	2301      	movs	r3, #1
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
	int image_id = 31;
 8002322:	231f      	movs	r3, #31
 8002324:	623b      	str	r3, [r7, #32]
	erase_flash_sector(image_id);
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 fcea 	bl	8002d04 <erase_flash_sector>

	int image_id_H = image_id / divide_value;
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	fb92 f3f3 	sdiv	r3, r2, r3
 8002338:	61fb      	str	r3, [r7, #28]
	int image_id_L = image_id % divide_value;
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002344:	fb01 f202 	mul.w	r2, r1, r2
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
	int count = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	fb92 f3f3 	sdiv	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	e076      	b.n	8002452 <write_flash_config+0x162>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800236a:	4845      	ldr	r0, [pc, #276]	; (8002480 <write_flash_config+0x190>)
 800236c:	f004 f89c 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002370:	2306      	movs	r3, #6
 8002372:	753b      	strb	r3, [r7, #20]
 8002374:	f107 0114 	add.w	r1, r7, #20
 8002378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237c:	2201      	movs	r2, #1
 800237e:	4841      	ldr	r0, [pc, #260]	; (8002484 <write_flash_config+0x194>)
 8002380:	f006 f92f 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002384:	2201      	movs	r2, #1
 8002386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800238a:	483d      	ldr	r0, [pc, #244]	; (8002480 <write_flash_config+0x190>)
 800238c:	f004 f88c 	bl	80064a8 <HAL_GPIO_WritePin>
		delay_us(10);
 8002390:	200a      	movs	r0, #10
 8002392:	f000 ffaf 	bl	80032f4 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800239c:	4838      	ldr	r0, [pc, #224]	; (8002480 <write_flash_config+0x190>)
 800239e:	f004 f883 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 80023a2:	2302      	movs	r3, #2
 80023a4:	743b      	strb	r3, [r7, #16]
 80023a6:	f107 0110 	add.w	r1, r7, #16
 80023aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ae:	2201      	movs	r2, #1
 80023b0:	4834      	ldr	r0, [pc, #208]	; (8002484 <write_flash_config+0x194>)
 80023b2:	f006 f916 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	733b      	strb	r3, [r7, #12]
 80023bc:	f107 010c 	add.w	r1, r7, #12
 80023c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c4:	2201      	movs	r2, #1
 80023c6:	482f      	ldr	r0, [pc, #188]	; (8002484 <write_flash_config+0x194>)
 80023c8:	f006 f90b 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	723b      	strb	r3, [r7, #8]
 80023d2:	f107 0108 	add.w	r1, r7, #8
 80023d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023da:	2201      	movs	r2, #1
 80023dc:	4829      	ldr	r0, [pc, #164]	; (8002484 <write_flash_config+0x194>)
 80023de:	f006 f900 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80023e2:	2300      	movs	r3, #0
 80023e4:	713b      	strb	r3, [r7, #4]
 80023e6:	1d39      	adds	r1, r7, #4
 80023e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ec:	2201      	movs	r2, #1
 80023ee:	4825      	ldr	r0, [pc, #148]	; (8002484 <write_flash_config+0x194>)
 80023f0:	f006 f8f7 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &Mode_config[0], Max_pic_per_mode*Max_mode_num*2, 1000);
 80023f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f8:	226e      	movs	r2, #110	; 0x6e
 80023fa:	4923      	ldr	r1, [pc, #140]	; (8002488 <write_flash_config+0x198>)
 80023fc:	4821      	ldr	r0, [pc, #132]	; (8002484 <write_flash_config+0x194>)
 80023fe:	f006 f8f0 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002402:	2201      	movs	r2, #1
 8002404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002408:	481d      	ldr	r0, [pc, #116]	; (8002480 <write_flash_config+0x190>)
 800240a:	f004 f84d 	bl	80064a8 <HAL_GPIO_WritePin>
		delay_us(10);
 800240e:	200a      	movs	r0, #10
 8002410:	f000 ff70 	bl	80032f4 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002414:	2200      	movs	r2, #0
 8002416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800241a:	4819      	ldr	r0, [pc, #100]	; (8002480 <write_flash_config+0x190>)
 800241c:	f004 f844 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002420:	2304      	movs	r3, #4
 8002422:	703b      	strb	r3, [r7, #0]
 8002424:	4639      	mov	r1, r7
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	2201      	movs	r2, #1
 800242c:	4815      	ldr	r0, [pc, #84]	; (8002484 <write_flash_config+0x194>)
 800242e:	f006 f8d8 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002432:	2201      	movs	r2, #1
 8002434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002438:	4811      	ldr	r0, [pc, #68]	; (8002480 <write_flash_config+0x190>)
 800243a:	f004 f835 	bl	80064a8 <HAL_GPIO_WritePin>
		delay_us(1000);
 800243e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002442:	f000 ff57 	bl	80032f4 <delay_us>
		count++;
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	3301      	adds	r3, #1
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	3301      	adds	r3, #1
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3301      	adds	r3, #1
 8002456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800245a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800245c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	4293      	cmp	r3, r2
 800246a:	f4ff af7b 	bcc.w	8002364 <write_flash_config+0x74>
	}

	flash_wait_nobusy();
 800246e:	f7ff fd9b 	bl	8001fa8 <flash_wait_nobusy>
}
 8002472:	bf00      	nop
 8002474:	3730      	adds	r7, #48	; 0x30
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000000b 	.word	0x2000000b
 8002480:	48000400 	.word	0x48000400
 8002484:	200001d4 	.word	0x200001d4
 8002488:	2008bda0 	.word	0x2008bda0

0800248c <read_flash_config>:
void read_flash_config()
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
	int divide_value = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
	if(content_size==0) divide_value=256/64;
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <read_flash_config+0x10c>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <read_flash_config+0x18>
 800249e:	2304      	movs	r3, #4
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	e00c      	b.n	80024be <read_flash_config+0x32>
	else if(content_size==1) divide_value=256/128;
 80024a4:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <read_flash_config+0x10c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d102      	bne.n	80024b2 <read_flash_config+0x26>
 80024ac:	2302      	movs	r3, #2
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	e005      	b.n	80024be <read_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;
 80024b2:	4b39      	ldr	r3, [pc, #228]	; (8002598 <read_flash_config+0x10c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d101      	bne.n	80024be <read_flash_config+0x32>
 80024ba:	2301      	movs	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24

	int image_id= 31;
 80024be:	231f      	movs	r3, #31
 80024c0:	61fb      	str	r3, [r7, #28]
	int image_id_H = image_id / divide_value;
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80024ca:	61bb      	str	r3, [r7, #24]
	int image_id_L = image_id % divide_value;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d0:	fb93 f2f2 	sdiv	r2, r3, r2
 80024d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d6:	fb01 f202 	mul.w	r2, r1, r2
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
	int count = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80024e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	e03d      	b.n	8002572 <read_flash_config+0xe6>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80024f6:	2200      	movs	r2, #0
 80024f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024fc:	4827      	ldr	r0, [pc, #156]	; (800259c <read_flash_config+0x110>)
 80024fe:	f003 ffd3 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 8002502:	2303      	movs	r3, #3
 8002504:	733b      	strb	r3, [r7, #12]
 8002506:	f107 010c 	add.w	r1, r7, #12
 800250a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250e:	2201      	movs	r2, #1
 8002510:	4823      	ldr	r0, [pc, #140]	; (80025a0 <read_flash_config+0x114>)
 8002512:	f006 f866 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	723b      	strb	r3, [r7, #8]
 800251c:	f107 0108 	add.w	r1, r7, #8
 8002520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002524:	2201      	movs	r2, #1
 8002526:	481e      	ldr	r0, [pc, #120]	; (80025a0 <read_flash_config+0x114>)
 8002528:	f006 f85b 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	713b      	strb	r3, [r7, #4]
 8002532:	1d39      	adds	r1, r7, #4
 8002534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002538:	2201      	movs	r2, #1
 800253a:	4819      	ldr	r0, [pc, #100]	; (80025a0 <read_flash_config+0x114>)
 800253c:	f006 f851 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002540:	2300      	movs	r3, #0
 8002542:	703b      	strb	r3, [r7, #0]
 8002544:	4639      	mov	r1, r7
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	2201      	movs	r2, #1
 800254c:	4814      	ldr	r0, [pc, #80]	; (80025a0 <read_flash_config+0x114>)
 800254e:	f006 f848 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &Mode_config[0],  Max_pic_per_mode*Max_mode_num*2, 1000);
 8002552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002556:	226e      	movs	r2, #110	; 0x6e
 8002558:	4912      	ldr	r1, [pc, #72]	; (80025a4 <read_flash_config+0x118>)
 800255a:	4811      	ldr	r0, [pc, #68]	; (80025a0 <read_flash_config+0x114>)
 800255c:	f006 f9af 	bl	80088be <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002560:	2201      	movs	r2, #1
 8002562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002566:	480d      	ldr	r0, [pc, #52]	; (800259c <read_flash_config+0x110>)
 8002568:	f003 ff9e 	bl	80064a8 <HAL_GPIO_WritePin>
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	3301      	adds	r3, #1
 8002570:	623b      	str	r3, [r7, #32]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	461a      	mov	r2, r3
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	4293      	cmp	r3, r2
 800258a:	d3b4      	bcc.n	80024f6 <read_flash_config+0x6a>
	}
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000000b 	.word	0x2000000b
 800259c:	48000400 	.word	0x48000400
 80025a0:	200001d4 	.word	0x200001d4
 80025a4:	2008bda0 	.word	0x2008bda0

080025a8 <write_flash_page>:
void write_flash_page(uint8_t *data, uint8_t image_id)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
	if(content_size==0) divide_value=256/64;
 80025b8:	4b60      	ldr	r3, [pc, #384]	; (800273c <write_flash_page+0x194>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <write_flash_page+0x1e>
 80025c0:	2304      	movs	r3, #4
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
 80025c4:	e00c      	b.n	80025e0 <write_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 80025c6:	4b5d      	ldr	r3, [pc, #372]	; (800273c <write_flash_page+0x194>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <write_flash_page+0x2c>
 80025ce:	2302      	movs	r3, #2
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
 80025d2:	e005      	b.n	80025e0 <write_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <write_flash_page+0x194>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d101      	bne.n	80025e0 <write_flash_page+0x38>
 80025dc:	2301      	movs	r3, #1
 80025de:	637b      	str	r3, [r7, #52]	; 0x34

	int image_id_H = image_id / divide_value;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
	int image_id_L = image_id % divide_value;
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025ee:	fb93 f2f2 	sdiv	r2, r3, r2
 80025f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025f4:	fb01 f202 	mul.w	r2, r1, r2
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
	int count = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	fb92 f3f3 	sdiv	r3, r2, r3
 800260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002612:	e07e      	b.n	8002712 <write_flash_page+0x16a>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800261a:	4849      	ldr	r0, [pc, #292]	; (8002740 <write_flash_page+0x198>)
 800261c:	f003 ff44 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002620:	2306      	movs	r3, #6
 8002622:	f887 3020 	strb.w	r3, [r7, #32]
 8002626:	f107 0120 	add.w	r1, r7, #32
 800262a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262e:	2201      	movs	r2, #1
 8002630:	4844      	ldr	r0, [pc, #272]	; (8002744 <write_flash_page+0x19c>)
 8002632:	f005 ffd6 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002636:	2201      	movs	r2, #1
 8002638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800263c:	4840      	ldr	r0, [pc, #256]	; (8002740 <write_flash_page+0x198>)
 800263e:	f003 ff33 	bl	80064a8 <HAL_GPIO_WritePin>
		delay_us(10);
 8002642:	200a      	movs	r0, #10
 8002644:	f000 fe56 	bl	80032f4 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002648:	2200      	movs	r2, #0
 800264a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800264e:	483c      	ldr	r0, [pc, #240]	; (8002740 <write_flash_page+0x198>)
 8002650:	f003 ff2a 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 8002654:	2302      	movs	r3, #2
 8002656:	773b      	strb	r3, [r7, #28]
 8002658:	f107 011c 	add.w	r1, r7, #28
 800265c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002660:	2201      	movs	r2, #1
 8002662:	4838      	ldr	r0, [pc, #224]	; (8002744 <write_flash_page+0x19c>)
 8002664:	f005 ffbd 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	b2db      	uxtb	r3, r3
 800266c:	763b      	strb	r3, [r7, #24]
 800266e:	f107 0118 	add.w	r1, r7, #24
 8002672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002676:	2201      	movs	r2, #1
 8002678:	4832      	ldr	r0, [pc, #200]	; (8002744 <write_flash_page+0x19c>)
 800267a:	f005 ffb2 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	b2db      	uxtb	r3, r3
 8002682:	753b      	strb	r3, [r7, #20]
 8002684:	f107 0114 	add.w	r1, r7, #20
 8002688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268c:	2201      	movs	r2, #1
 800268e:	482d      	ldr	r0, [pc, #180]	; (8002744 <write_flash_page+0x19c>)
 8002690:	f005 ffa7 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002694:	2300      	movs	r3, #0
 8002696:	743b      	strb	r3, [r7, #16]
 8002698:	f107 0110 	add.w	r1, r7, #16
 800269c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a0:	2201      	movs	r2, #1
 80026a2:	4828      	ldr	r0, [pc, #160]	; (8002744 <write_flash_page+0x19c>)
 80026a4:	f005 ff9d 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &data[count*256], 256, 1000);
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	461a      	mov	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1899      	adds	r1, r3, r2
 80026b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ba:	4822      	ldr	r0, [pc, #136]	; (8002744 <write_flash_page+0x19c>)
 80026bc:	f005 ff91 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80026c0:	2201      	movs	r2, #1
 80026c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026c6:	481e      	ldr	r0, [pc, #120]	; (8002740 <write_flash_page+0x198>)
 80026c8:	f003 feee 	bl	80064a8 <HAL_GPIO_WritePin>
		delay_us(10);
 80026cc:	200a      	movs	r0, #10
 80026ce:	f000 fe11 	bl	80032f4 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80026d2:	2200      	movs	r2, #0
 80026d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026d8:	4819      	ldr	r0, [pc, #100]	; (8002740 <write_flash_page+0x198>)
 80026da:	f003 fee5 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 80026de:	2304      	movs	r3, #4
 80026e0:	733b      	strb	r3, [r7, #12]
 80026e2:	f107 010c 	add.w	r1, r7, #12
 80026e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ea:	2201      	movs	r2, #1
 80026ec:	4815      	ldr	r0, [pc, #84]	; (8002744 <write_flash_page+0x19c>)
 80026ee:	f005 ff78 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80026f2:	2201      	movs	r2, #1
 80026f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026f8:	4811      	ldr	r0, [pc, #68]	; (8002740 <write_flash_page+0x198>)
 80026fa:	f003 fed5 	bl	80064a8 <HAL_GPIO_WritePin>
		delay_us(1000);
 80026fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002702:	f000 fdf7 	bl	80032f4 <delay_us>
		count++;
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	3301      	adds	r3, #1
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	3301      	adds	r3, #1
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	3301      	adds	r3, #1
 8002716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800271a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800271c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002720:	fb02 f303 	mul.w	r3, r2, r3
 8002724:	461a      	mov	r2, r3
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	4293      	cmp	r3, r2
 800272a:	f4ff af73 	bcc.w	8002614 <write_flash_page+0x6c>
	}

	flash_wait_nobusy();
 800272e:	f7ff fc3b 	bl	8001fa8 <flash_wait_nobusy>
}
 8002732:	bf00      	nop
 8002734:	3738      	adds	r7, #56	; 0x38
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000000b 	.word	0x2000000b
 8002740:	48000400 	.word	0x48000400
 8002744:	200001d4 	.word	0x200001d4

08002748 <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	; 0x30
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8002758:	4b43      	ldr	r3, [pc, #268]	; (8002868 <read_flash_page+0x120>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <read_flash_page+0x1e>
 8002760:	2304      	movs	r3, #4
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002764:	e00c      	b.n	8002780 <read_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 8002766:	4b40      	ldr	r3, [pc, #256]	; (8002868 <read_flash_page+0x120>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d102      	bne.n	8002774 <read_flash_page+0x2c>
 800276e:	2302      	movs	r3, #2
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002772:	e005      	b.n	8002780 <read_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8002774:	4b3c      	ldr	r3, [pc, #240]	; (8002868 <read_flash_page+0x120>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d101      	bne.n	8002780 <read_flash_page+0x38>
 800277c:	2301      	movs	r3, #1
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c

	int image_id_H = image_id / divide_value;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	fb92 f3f3 	sdiv	r3, r2, r3
 8002788:	623b      	str	r3, [r7, #32]
	int image_id_L = image_id % divide_value;
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002794:	fb01 f202 	mul.w	r2, r1, r2
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	61fb      	str	r3, [r7, #28]
	int count = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80027a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	e047      	b.n	8002844 <read_flash_page+0xfc>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80027b4:	2200      	movs	r2, #0
 80027b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ba:	482c      	ldr	r0, [pc, #176]	; (800286c <read_flash_page+0x124>)
 80027bc:	f003 fe74 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 80027c0:	2303      	movs	r3, #3
 80027c2:	763b      	strb	r3, [r7, #24]
 80027c4:	f107 0118 	add.w	r1, r7, #24
 80027c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027cc:	2201      	movs	r2, #1
 80027ce:	4828      	ldr	r0, [pc, #160]	; (8002870 <read_flash_page+0x128>)
 80027d0:	f005 ff07 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	753b      	strb	r3, [r7, #20]
 80027da:	f107 0114 	add.w	r1, r7, #20
 80027de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e2:	2201      	movs	r2, #1
 80027e4:	4822      	ldr	r0, [pc, #136]	; (8002870 <read_flash_page+0x128>)
 80027e6:	f005 fefc 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	743b      	strb	r3, [r7, #16]
 80027f0:	f107 0110 	add.w	r1, r7, #16
 80027f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f8:	2201      	movs	r2, #1
 80027fa:	481d      	ldr	r0, [pc, #116]	; (8002870 <read_flash_page+0x128>)
 80027fc:	f005 fef1 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002800:	2300      	movs	r3, #0
 8002802:	733b      	strb	r3, [r7, #12]
 8002804:	f107 010c 	add.w	r1, r7, #12
 8002808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280c:	2201      	movs	r2, #1
 800280e:	4818      	ldr	r0, [pc, #96]	; (8002870 <read_flash_page+0x128>)
 8002810:	f005 fee7 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &data[count*256], 256, 1000);
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	1899      	adds	r1, r3, r2
 800281e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002826:	4812      	ldr	r0, [pc, #72]	; (8002870 <read_flash_page+0x128>)
 8002828:	f006 f849 	bl	80088be <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <read_flash_page+0x124>)
 8002834:	f003 fe38 	bl	80064a8 <HAL_GPIO_WritePin>
		count++;
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	3301      	adds	r3, #1
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	3301      	adds	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	3301      	adds	r3, #1
 8002848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800284c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284e:	fb91 f2f2 	sdiv	r2, r1, r2
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	4293      	cmp	r3, r2
 800285c:	d3aa      	bcc.n	80027b4 <read_flash_page+0x6c>
	}
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	3730      	adds	r7, #48	; 0x30
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	2000000b 	.word	0x2000000b
 800286c:	48000400 	.word	0x48000400
 8002870:	200001d4 	.word	0x200001d4

08002874 <read_flash_page_DMA2d>:

void read_flash_page_DMA2d(uint8_t *data, uint8_t image_id)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	f5ad 4d5e 	sub.w	sp, sp, #56832	; 0xde00
 800287a:	b0be      	sub	sp, #248	; 0xf8
 800287c:	af00      	add	r7, sp, #0
 800287e:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 8002882:	f6a3 63f4 	subw	r3, r3, #3828	; 0xef4
 8002886:	6018      	str	r0, [r3, #0]
 8002888:	460a      	mov	r2, r1
 800288a:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 800288e:	f6a3 63f5 	subw	r3, r3, #3829	; 0xef5
 8002892:	701a      	strb	r2, [r3, #0]
	int divide_value = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 800289a:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 800289e:	6013      	str	r3, [r2, #0]
	if(content_size==0) divide_value=256/64;
 80028a0:	4bc1      	ldr	r3, [pc, #772]	; (8002ba8 <read_flash_page_DMA2d+0x334>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <read_flash_page_DMA2d+0x42>
 80028a8:	2304      	movs	r3, #4
 80028aa:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80028ae:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e014      	b.n	80028e0 <read_flash_page_DMA2d+0x6c>
	else if(content_size==1) divide_value=256/128;
 80028b6:	4bbc      	ldr	r3, [pc, #752]	; (8002ba8 <read_flash_page_DMA2d+0x334>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d106      	bne.n	80028cc <read_flash_page_DMA2d+0x58>
 80028be:	2302      	movs	r3, #2
 80028c0:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80028c4:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e009      	b.n	80028e0 <read_flash_page_DMA2d+0x6c>
	else if(content_size==2) divide_value=256/256;
 80028cc:	4bb6      	ldr	r3, [pc, #728]	; (8002ba8 <read_flash_page_DMA2d+0x334>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d105      	bne.n	80028e0 <read_flash_page_DMA2d+0x6c>
 80028d4:	2301      	movs	r3, #1
 80028d6:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 80028da:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 80028de:	6013      	str	r3, [r2, #0]
	uint8_t frame_buf[MAX_IMAGE_SIZE] = {0};
 80028e0:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 80028e4:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	3304      	adds	r3, #4
 80028ee:	f64d 62a4 	movw	r2, #56996	; 0xdea4
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f007 fff5 	bl	800a8e4 <memset>
	memset(frame_buf, 0, sizeof(frame_buf));
 80028fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028fe:	3bdc      	subs	r3, #220	; 0xdc
 8002900:	f64d 62a8 	movw	r2, #57000	; 0xdea8
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f007 ffec 	bl	800a8e4 <memset>

	int image_id_H = image_id / divide_value;
 800290c:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 8002910:	f6a3 63f5 	subw	r3, r3, #3829	; 0xef5
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 800291a:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	fb92 f3f3 	sdiv	r3, r2, r3
 8002924:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002928:	f102 02cc 	add.w	r2, r2, #204	; 0xcc
 800292c:	6013      	str	r3, [r2, #0]
	int image_id_L = image_id % divide_value;
 800292e:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 8002932:	f6a3 63f5 	subw	r3, r3, #3829	; 0xef5
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 800293c:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	fb93 f2f2 	sdiv	r2, r3, r2
 8002946:	f507 415e 	add.w	r1, r7, #56832	; 0xde00
 800294a:	f101 01f4 	add.w	r1, r1, #244	; 0xf4
 800294e:	6809      	ldr	r1, [r1, #0]
 8002950:	fb01 f202 	mul.w	r2, r1, r2
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 800295a:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 800295e:	6013      	str	r3, [r2, #0]
	int count = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002966:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 800296a:	6013      	str	r3, [r2, #0]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800296c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002970:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002974:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fb92 f3f3 	sdiv	r3, r2, r3
 800297e:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002982:	f102 02c8 	add.w	r2, r2, #200	; 0xc8
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002990:	f102 02ec 	add.w	r2, r2, #236	; 0xec
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e078      	b.n	8002a8a <read_flash_page_DMA2d+0x216>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800299e:	4883      	ldr	r0, [pc, #524]	; (8002bac <read_flash_page_DMA2d+0x338>)
 80029a0:	f003 fd82 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 80029a4:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 80029a8:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 80029ac:	2203      	movs	r2, #3
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80029b4:	39e0      	subs	r1, #224	; 0xe0
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	2201      	movs	r2, #1
 80029bc:	487c      	ldr	r0, [pc, #496]	; (8002bb0 <read_flash_page_DMA2d+0x33c>)
 80029be:	f005 fe10 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80029c2:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 80029c6:	f103 03cc 	add.w	r3, r3, #204	; 0xcc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 80029d2:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80029dc:	39e4      	subs	r1, #228	; 0xe4
 80029de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e2:	2201      	movs	r2, #1
 80029e4:	4872      	ldr	r0, [pc, #456]	; (8002bb0 <read_flash_page_DMA2d+0x33c>)
 80029e6:	f005 fdfc 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80029ea:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 80029ee:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 80029fa:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8002a04:	39e8      	subs	r1, #232	; 0xe8
 8002a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4868      	ldr	r0, [pc, #416]	; (8002bb0 <read_flash_page_DMA2d+0x33c>)
 8002a0e:	f005 fde8 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002a12:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 8002a16:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8002a22:	39ec      	subs	r1, #236	; 0xec
 8002a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4861      	ldr	r0, [pc, #388]	; (8002bb0 <read_flash_page_DMA2d+0x33c>)
 8002a2c:	f005 fdd9 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &frame_buf[count*256], 256, 1000);
 8002a30:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002a34:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	021a      	lsls	r2, r3, #8
 8002a3c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002a40:	3bdc      	subs	r3, #220	; 0xdc
 8002a42:	1899      	adds	r1, r3, r2
 8002a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a4c:	4858      	ldr	r0, [pc, #352]	; (8002bb0 <read_flash_page_DMA2d+0x33c>)
 8002a4e:	f005 ff36 	bl	80088be <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002a52:	2201      	movs	r2, #1
 8002a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a58:	4854      	ldr	r0, [pc, #336]	; (8002bac <read_flash_page_DMA2d+0x338>)
 8002a5a:	f003 fd25 	bl	80064a8 <HAL_GPIO_WritePin>
		count++;
 8002a5e:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002a62:	f103 03f0 	add.w	r3, r3, #240	; 0xf0
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a6e:	f102 02f0 	add.w	r2, r2, #240	; 0xf0
 8002a72:	6013      	str	r3, [r2, #0]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002a74:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002a78:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a84:	f102 02ec 	add.w	r2, r2, #236	; 0xec
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002a8e:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a9a:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002a9e:	f102 02f4 	add.w	r2, r2, #244	; 0xf4
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	fb91 f2f2 	sdiv	r2, r1, r2
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002ab2:	f103 03ec 	add.w	r3, r3, #236	; 0xec
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	f4ff af6d 	bcc.w	8002998 <read_flash_page_DMA2d+0x124>
	}

	int num_ones = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002ac4:	f102 02e8 	add.w	r2, r2, #232	; 0xe8
 8002ac8:	6013      	str	r3, [r2, #0]
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 8002aca:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <read_flash_page_DMA2d+0x340>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b21a      	sxth	r2, r3
 8002ad0:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <read_flash_page_DMA2d+0x344>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	b21b      	sxth	r3, r3
 8002adc:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002ae0:	f102 02c6 	add.w	r2, r2, #198	; 0xc6
 8002ae4:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < 12; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002aec:	f102 02e4 	add.w	r2, r2, #228	; 0xe4
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e025      	b.n	8002b40 <read_flash_page_DMA2d+0x2cc>
	{
		if (Pixel_Mapping_one & (1 << i))
 8002af4:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002af8:	f103 03c6 	add.w	r3, r3, #198	; 0xc6
 8002afc:	881a      	ldrh	r2, [r3, #0]
 8002afe:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b02:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	fa42 f303 	asr.w	r3, r2, r3
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <read_flash_page_DMA2d+0x2b6>
		{
			num_ones++;
 8002b14:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b18:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b24:	f102 02e8 	add.w	r2, r2, #232	; 0xe8
 8002b28:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 12; i++)
 8002b2a:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b2e:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3301      	adds	r3, #1
 8002b36:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b3a:	f102 02e4 	add.w	r2, r2, #228	; 0xe4
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002b44:	f103 03e4 	add.w	r3, r3, #228	; 0xe4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b0b      	cmp	r3, #11
 8002b4c:	ddd2      	ble.n	8002af4 <read_flash_page_DMA2d+0x280>
		}
	}

	int frame_buf_count = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b54:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8002b58:	6013      	str	r3, [r2, #0]
	int Pixel_Mapping_one_count = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b60:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8002b64:	6013      	str	r3, [r2, #0]
	int c = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b6c:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8002b70:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8002b72:	2300      	movs	r3, #0
 8002b74:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b78:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e0a7      	b.n	8002cd0 <read_flash_page_DMA2d+0x45c>
	{
		Pixel_Mapping_one_count = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b86:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8002b8a:	6013      	str	r3, [r2, #0]
		c = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b92:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8002b96:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < 12; j++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002b9e:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e06d      	b.n	8002c82 <read_flash_page_DMA2d+0x40e>
 8002ba6:	bf00      	nop
 8002ba8:	2000000b 	.word	0x2000000b
 8002bac:	48000400 	.word	0x48000400
 8002bb0:	200001d4 	.word	0x200001d4
 8002bb4:	2000001c 	.word	0x2000001c
 8002bb8:	2000001d 	.word	0x2000001d
		{
			if (Pixel_Mapping_one & (1 << j))
 8002bbc:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002bc0:	f103 03c6 	add.w	r3, r3, #198	; 0xc6
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002bca:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa42 f303 	asr.w	r3, r2, r3
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d03c      	beq.n	8002c56 <read_flash_page_DMA2d+0x3e2>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8002bdc:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002be0:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002bea:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002bf6:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8002bfa:	6013      	str	r3, [r2, #0]
				data[frame_buf_count] = frame_buf[i + c];
 8002bfc:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002c00:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002c0a:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	441a      	add	r2, r3
 8002c12:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002c16:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f607 61f8 	addw	r1, r7, #3832	; 0xef8
 8002c20:	f6a1 61f4 	subw	r1, r1, #3828	; 0xef4
 8002c24:	6809      	ldr	r1, [r1, #0]
 8002c26:	440b      	add	r3, r1
 8002c28:	f607 61f8 	addw	r1, r7, #3832	; 0xef8
 8002c2c:	f6a1 61dc 	subw	r1, r1, #3804	; 0xedc
 8002c30:	5c8a      	ldrb	r2, [r1, r2]
 8002c32:	701a      	strb	r2, [r3, #0]
				c++;
 8002c34:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002c38:	f103 03d8 	add.w	r3, r3, #216	; 0xd8
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002c44:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 8002c48:	6013      	str	r3, [r2, #0]
				Pixel_Mapping_one_count = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002c50:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8002c54:	6013      	str	r3, [r2, #0]
			}
			Pixel_Mapping_one_count++;
 8002c56:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002c5a:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002c66:	f102 02dc 	add.w	r2, r2, #220	; 0xdc
 8002c6a:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < 12; j++)
 8002c6c:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002c70:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002c7c:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002c86:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b0b      	cmp	r3, #11
 8002c8e:	dd95      	ble.n	8002bbc <read_flash_page_DMA2d+0x348>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8002c90:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002c94:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002c9e:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002caa:	f102 02e0 	add.w	r2, r2, #224	; 0xe0
 8002cae:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8002cb0:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002cb4:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002cbe:	f103 03e8 	add.w	r3, r3, #232	; 0xe8
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f507 425e 	add.w	r2, r7, #56832	; 0xde00
 8002cca:	f102 02d4 	add.w	r2, r2, #212	; 0xd4
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <read_flash_page_DMA2d+0x488>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <read_flash_page_DMA2d+0x48c>)
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	fb03 f202 	mul.w	r2, r3, r2
 8002cdc:	f507 435e 	add.w	r3, r7, #56832	; 0xde00
 8002ce0:	f103 03d4 	add.w	r3, r3, #212	; 0xd4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	f63f af4a 	bhi.w	8002b80 <read_flash_page_DMA2d+0x30c>
	}
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	f507 475e 	add.w	r7, r7, #56832	; 0xde00
 8002cf4:	37f8      	adds	r7, #248	; 0xf8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	; 0x30
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
	int divide_value = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8002d12:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <erase_flash_sector+0x1a0>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <erase_flash_sector+0x1c>
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d1e:	e00c      	b.n	8002d3a <erase_flash_sector+0x36>
	else if(content_size==1) divide_value=256/128;
 8002d20:	4b60      	ldr	r3, [pc, #384]	; (8002ea4 <erase_flash_sector+0x1a0>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <erase_flash_sector+0x2a>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2c:	e005      	b.n	8002d3a <erase_flash_sector+0x36>
	else if(content_size==2) divide_value=256/256;
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <erase_flash_sector+0x1a0>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d101      	bne.n	8002d3a <erase_flash_sector+0x36>
 8002d36:	2301      	movs	r3, #1
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t page_count = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(content_size==0) page_count=16/4;
 8002d40:	4b58      	ldr	r3, [pc, #352]	; (8002ea4 <erase_flash_sector+0x1a0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <erase_flash_sector+0x4c>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d4e:	e00e      	b.n	8002d6e <erase_flash_sector+0x6a>
	else if(content_size==1) page_count=32/4;
 8002d50:	4b54      	ldr	r3, [pc, #336]	; (8002ea4 <erase_flash_sector+0x1a0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d103      	bne.n	8002d60 <erase_flash_sector+0x5c>
 8002d58:	2308      	movs	r3, #8
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d5e:	e006      	b.n	8002d6e <erase_flash_sector+0x6a>
	else if(content_size==2) page_count=64/4;
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <erase_flash_sector+0x1a0>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d102      	bne.n	8002d6e <erase_flash_sector+0x6a>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	int image_id_H = image_id / divide_value;
 8002d6e:	79fa      	ldrb	r2, [r7, #7]
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
	int image_id_L = image_id % divide_value;
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7c:	fb93 f2f2 	sdiv	r2, r3, r2
 8002d80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d82:	fb01 f202 	mul.w	r2, r1, r2
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	623b      	str	r3, [r7, #32]

	reset_flash_software();
 8002d8a:	f000 f891 	bl	8002eb0 <reset_flash_software>

	for(uint8_t i = 0; i < page_count; i++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d94:	e07a      	b.n	8002e8c <erase_flash_sector+0x188>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d9c:	4842      	ldr	r0, [pc, #264]	; (8002ea8 <erase_flash_sector+0x1a4>)
 8002d9e:	f003 fb83 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002da2:	2306      	movs	r3, #6
 8002da4:	773b      	strb	r3, [r7, #28]
 8002da6:	f107 011c 	add.w	r1, r7, #28
 8002daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dae:	2201      	movs	r2, #1
 8002db0:	483e      	ldr	r0, [pc, #248]	; (8002eac <erase_flash_sector+0x1a8>)
 8002db2:	f005 fc16 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002db6:	2201      	movs	r2, #1
 8002db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dbc:	483a      	ldr	r0, [pc, #232]	; (8002ea8 <erase_flash_sector+0x1a4>)
 8002dbe:	f003 fb73 	bl	80064a8 <HAL_GPIO_WritePin>
		delay_us(10);
 8002dc2:	200a      	movs	r0, #10
 8002dc4:	f000 fa96 	bl	80032f4 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dce:	4836      	ldr	r0, [pc, #216]	; (8002ea8 <erase_flash_sector+0x1a4>)
 8002dd0:	f003 fb6a 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x20}, 1, 1000);
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	763b      	strb	r3, [r7, #24]
 8002dd8:	f107 0118 	add.w	r1, r7, #24
 8002ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de0:	2201      	movs	r2, #1
 8002de2:	4832      	ldr	r0, [pc, #200]	; (8002eac <erase_flash_sector+0x1a8>)
 8002de4:	f005 fbfd 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	753b      	strb	r3, [r7, #20]
 8002dee:	f107 0114 	add.w	r1, r7, #20
 8002df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df6:	2201      	movs	r2, #1
 8002df8:	482c      	ldr	r0, [pc, #176]	; (8002eac <erase_flash_sector+0x1a8>)
 8002dfa:	f005 fbf2 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){(image_id_L*(0x10*page_count)) + (0x10*i)}, 1, 1000);
 8002dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e02:	6a3a      	ldr	r2, [r7, #32]
 8002e04:	fb03 f202 	mul.w	r2, r3, r2
 8002e08:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002e0c:	4413      	add	r3, r2
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	743b      	strb	r3, [r7, #16]
 8002e16:	f107 0110 	add.w	r1, r7, #16
 8002e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1e:	2201      	movs	r2, #1
 8002e20:	4822      	ldr	r0, [pc, #136]	; (8002eac <erase_flash_sector+0x1a8>)
 8002e22:	f005 fbde 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002e26:	2300      	movs	r3, #0
 8002e28:	733b      	strb	r3, [r7, #12]
 8002e2a:	f107 010c 	add.w	r1, r7, #12
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	2201      	movs	r2, #1
 8002e34:	481d      	ldr	r0, [pc, #116]	; (8002eac <erase_flash_sector+0x1a8>)
 8002e36:	f005 fbd4 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e40:	4819      	ldr	r0, [pc, #100]	; (8002ea8 <erase_flash_sector+0x1a4>)
 8002e42:	f003 fb31 	bl	80064a8 <HAL_GPIO_WritePin>
		delay_us(10);
 8002e46:	200a      	movs	r0, #10
 8002e48:	f000 fa54 	bl	80032f4 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e52:	4815      	ldr	r0, [pc, #84]	; (8002ea8 <erase_flash_sector+0x1a4>)
 8002e54:	f003 fb28 	bl	80064a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002e58:	2304      	movs	r3, #4
 8002e5a:	723b      	strb	r3, [r7, #8]
 8002e5c:	f107 0108 	add.w	r1, r7, #8
 8002e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e64:	2201      	movs	r2, #1
 8002e66:	4811      	ldr	r0, [pc, #68]	; (8002eac <erase_flash_sector+0x1a8>)
 8002e68:	f005 fbbb 	bl	80085e2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e72:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <erase_flash_sector+0x1a4>)
 8002e74:	f003 fb18 	bl	80064a8 <HAL_GPIO_WritePin>
		delay_us(10);
 8002e78:	200a      	movs	r0, #10
 8002e7a:	f000 fa3b 	bl	80032f4 <delay_us>

		flash_wait_nobusy();
 8002e7e:	f7ff f893 	bl	8001fa8 <flash_wait_nobusy>
	for(uint8_t i = 0; i < page_count; i++)
 8002e82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002e86:	3301      	adds	r3, #1
 8002e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e8c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f4ff af7e 	bcc.w	8002d96 <erase_flash_sector+0x92>
	}
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	3730      	adds	r7, #48	; 0x30
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	2000000b 	.word	0x2000000b
 8002ea8:	48000400 	.word	0x48000400
 8002eac:	200001d4 	.word	0x200001d4

08002eb0 <reset_flash_software>:

void reset_flash_software()
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ebc:	481a      	ldr	r0, [pc, #104]	; (8002f28 <reset_flash_software+0x78>)
 8002ebe:	f003 faf3 	bl	80064a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x66}, 1, 1000);
 8002ec2:	2366      	movs	r3, #102	; 0x66
 8002ec4:	713b      	strb	r3, [r7, #4]
 8002ec6:	1d39      	adds	r1, r7, #4
 8002ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4817      	ldr	r0, [pc, #92]	; (8002f2c <reset_flash_software+0x7c>)
 8002ed0:	f005 fb87 	bl	80085e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eda:	4813      	ldr	r0, [pc, #76]	; (8002f28 <reset_flash_software+0x78>)
 8002edc:	f003 fae4 	bl	80064a8 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f000 fa22 	bl	800332a <delay_100ns>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eec:	480e      	ldr	r0, [pc, #56]	; (8002f28 <reset_flash_software+0x78>)
 8002eee:	f003 fadb 	bl	80064a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x99}, 1, 1000);
 8002ef2:	2399      	movs	r3, #153	; 0x99
 8002ef4:	703b      	strb	r3, [r7, #0]
 8002ef6:	4639      	mov	r1, r7
 8002ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002efc:	2201      	movs	r2, #1
 8002efe:	480b      	ldr	r0, [pc, #44]	; (8002f2c <reset_flash_software+0x7c>)
 8002f00:	f005 fb6f 	bl	80085e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002f04:	2201      	movs	r2, #1
 8002f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f0a:	4807      	ldr	r0, [pc, #28]	; (8002f28 <reset_flash_software+0x78>)
 8002f0c:	f003 facc 	bl	80064a8 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002f10:	2001      	movs	r0, #1
 8002f12:	f000 fa0a 	bl	800332a <delay_100ns>
	delay_us(1000);
 8002f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f1a:	f000 f9eb 	bl	80032f4 <delay_us>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	200001d4 	.word	0x200001d4

08002f30 <my_MX_DSIHOST_DSI_Init>:
/*====================================flash function end====================================*/

/*====================================customized function start====================================*/
static void my_MX_DSIHOST_DSI_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b0ae      	sub	sp, #184	; 0xb8
 8002f34:	af00      	add	r7, sp, #0
  DSI_PLLInitTypeDef PLLInit = {0};
 8002f36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8002f42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f007 fcca 	bl	800a8e4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8002f50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
 8002f60:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	226c      	movs	r2, #108	; 0x6c
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f007 fcbb 	bl	800a8e4 <memset>
  hdsi.Instance = DSI;
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f70:	4a6d      	ldr	r2, [pc, #436]	; (8003128 <my_MX_DSIHOST_DSI_Init+0x1f8>)
 8002f72:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002f74:	4b6b      	ldr	r3, [pc, #428]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8002f80:	4b68      	ldr	r3, [pc, #416]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8002f86:	2332      	movs	r3, #50	; 0x32
 8002f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002f98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4861      	ldr	r0, [pc, #388]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002fa0:	f002 fa94 	bl	80054cc <HAL_DSI_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <my_MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8002faa:	f000 fa35 	bl	8003418 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002fe4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002fe8:	4619      	mov	r1, r3
 8002fea:	484e      	ldr	r0, [pc, #312]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002fec:	f002 fee1 	bl	8005db2 <HAL_DSI_ConfigHostTimeouts>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <my_MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8002ff6:	f000 fa0f 	bl	8003418 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8002ffa:	2313      	movs	r3, #19
 8002ffc:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8002ffe:	230f      	movs	r3, #15
 8003000:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8003002:	2309      	movs	r3, #9
 8003004:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8003006:	230a      	movs	r3, #10
 8003008:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8003016:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800301a:	4619      	mov	r1, r3
 800301c:	4841      	ldr	r0, [pc, #260]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 800301e:	f002 fe5e 	bl	8005cde <HAL_DSI_ConfigPhyTimer>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <my_MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8003028:	f000 f9f6 	bl	8003418 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800302c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003030:	483c      	ldr	r0, [pc, #240]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8003032:	f003 f87a 	bl	800612a <HAL_DSI_SetLowPowerRXFilter>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <my_MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 800303c:	f000 f9ec 	bl	8003418 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8003040:	2100      	movs	r1, #0
 8003042:	4838      	ldr	r0, [pc, #224]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8003044:	f002 fb5e 	bl	8005704 <HAL_DSI_ConfigErrorMonitor>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <my_MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 800304e:	f000 f9e3 	bl	8003418 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8003056:	2305      	movs	r3, #5
 8003058:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 800305e:	2301      	movs	r3, #1
 8003060:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8003062:	2378      	movs	r3, #120	; 0x78
 8003064:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8003076:	2300      	movs	r3, #0
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = HSA;
 800307a:	4b2c      	ldr	r3, [pc, #176]	; (800312c <my_MX_DSIHOST_DSI_Init+0x1fc>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = HBP;
 8003080:	4b2b      	ldr	r3, [pc, #172]	; (8003130 <my_MX_DSIHOST_DSI_Init+0x200>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = HSA+HBP+IMAGE_H+HFP;
 8003086:	4b29      	ldr	r3, [pc, #164]	; (800312c <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	4b28      	ldr	r3, [pc, #160]	; (8003130 <my_MX_DSIHOST_DSI_Init+0x200>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	4413      	add	r3, r2
 8003092:	461a      	mov	r2, r3
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <my_MX_DSIHOST_DSI_Init+0x204>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4413      	add	r3, r2
 800309a:	4a27      	ldr	r2, [pc, #156]	; (8003138 <my_MX_DSIHOST_DSI_Init+0x208>)
 800309c:	8812      	ldrh	r2, [r2, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = VSA;
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <my_MX_DSIHOST_DSI_Init+0x20c>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = VBP;
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <my_MX_DSIHOST_DSI_Init+0x210>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = VFP;
 80030ae:	4b25      	ldr	r3, [pc, #148]	; (8003144 <my_MX_DSIHOST_DSI_Init+0x214>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = IMAGE_W;
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <my_MX_DSIHOST_DSI_Init+0x218>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 80030ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 80030c0:	231c      	movs	r3, #28
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 80030c4:	2350      	movs	r3, #80	; 0x50
 80030c6:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 80030c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030cc:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 80030ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d2:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 80030d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 80030da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030de:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 80030e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e4:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 80030e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ea:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	4619      	mov	r1, r3
 80030f4:	480b      	ldr	r0, [pc, #44]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80030f6:	f002 fbea 	bl	80058ce <HAL_DSI_ConfigVideoMode>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <my_MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8003100:	f000 f98a 	bl	8003418 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8003104:	2100      	movs	r1, #0
 8003106:	4807      	ldr	r0, [pc, #28]	; (8003124 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8003108:	f002 fbb9 	bl	800587e <HAL_DSI_SetGenericVCID>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <my_MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8003112:	f000 f981 	bl	8003418 <Error_Handler>
  }
  LCD_PowerOn();
 8003116:	f7fe fa87 	bl	8001628 <LCD_PowerOn>
}
 800311a:	bf00      	nop
 800311c:	37b8      	adds	r7, #184	; 0xb8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000110 	.word	0x20000110
 8003128:	40016c00 	.word	0x40016c00
 800312c:	20000010 	.word	0x20000010
 8003130:	20000012 	.word	0x20000012
 8003134:	20000000 	.word	0x20000000
 8003138:	20000014 	.word	0x20000014
 800313c:	20000016 	.word	0x20000016
 8003140:	20000018 	.word	0x20000018
 8003144:	2000001a 	.word	0x2000001a
 8003148:	20000004 	.word	0x20000004

0800314c <my_MX_LTDC_Init>:
static void my_MX_LTDC_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08e      	sub	sp, #56	; 0x38
 8003150:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	2234      	movs	r2, #52	; 0x34
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f007 fbc3 	bl	800a8e4 <memset>
  hltdc.Instance = LTDC;
 800315e:	4b5a      	ldr	r3, [pc, #360]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 8003160:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <my_MX_LTDC_Init+0x180>)
 8003162:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8003164:	4b58      	ldr	r3, [pc, #352]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 8003166:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800316a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 800316c:	4b56      	ldr	r3, [pc, #344]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 800316e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003172:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003174:	4b54      	ldr	r3, [pc, #336]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800317a:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = HSA-1;
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <my_MX_LTDC_Init+0x184>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	3b01      	subs	r3, #1
 8003186:	461a      	mov	r2, r3
 8003188:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 800318a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = VSA-1;
 800318c:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <my_MX_LTDC_Init+0x188>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	3b01      	subs	r3, #1
 8003192:	461a      	mov	r2, r3
 8003194:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 8003196:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = HSA+HBP-1;
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <my_MX_LTDC_Init+0x184>)
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	4b4e      	ldr	r3, [pc, #312]	; (80032d8 <my_MX_LTDC_Init+0x18c>)
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	3b01      	subs	r3, #1
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 80031aa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = VSA+VBP-1;
 80031ac:	4b49      	ldr	r3, [pc, #292]	; (80032d4 <my_MX_LTDC_Init+0x188>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <my_MX_LTDC_Init+0x190>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	3b01      	subs	r3, #1
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b42      	ldr	r3, [pc, #264]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 80031be:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = HSA+HBP+IMAGE_H-1;
 80031c0:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <my_MX_LTDC_Init+0x184>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <my_MX_LTDC_Init+0x18c>)
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	4413      	add	r3, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <my_MX_LTDC_Init+0x194>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	3b01      	subs	r3, #1
 80031d6:	4a3c      	ldr	r2, [pc, #240]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 80031d8:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = VSA+VBP+IMAGE_W-1;
 80031da:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <my_MX_LTDC_Init+0x188>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <my_MX_LTDC_Init+0x190>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	4413      	add	r3, r2
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <my_MX_LTDC_Init+0x198>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4413      	add	r3, r2
 80031ee:	3b01      	subs	r3, #1
 80031f0:	4a35      	ldr	r2, [pc, #212]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 80031f2:	6293      	str	r3, [r2, #40]	; 0x28
  hltdc.Init.TotalWidth = HSA+HBP+IMAGE_H+HFP-1;
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <my_MX_LTDC_Init+0x184>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <my_MX_LTDC_Init+0x18c>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <my_MX_LTDC_Init+0x194>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4413      	add	r3, r2
 8003208:	4a37      	ldr	r2, [pc, #220]	; (80032e8 <my_MX_LTDC_Init+0x19c>)
 800320a:	8812      	ldrh	r2, [r2, #0]
 800320c:	4413      	add	r3, r2
 800320e:	3b01      	subs	r3, #1
 8003210:	4a2d      	ldr	r2, [pc, #180]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 8003212:	62d3      	str	r3, [r2, #44]	; 0x2c
  hltdc.Init.TotalHeigh = VSA+VBP+IMAGE_W+VFP-1;
 8003214:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <my_MX_LTDC_Init+0x188>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <my_MX_LTDC_Init+0x190>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	4413      	add	r3, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <my_MX_LTDC_Init+0x198>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4413      	add	r3, r2
 8003228:	4a30      	ldr	r2, [pc, #192]	; (80032ec <my_MX_LTDC_Init+0x1a0>)
 800322a:	8812      	ldrh	r2, [r2, #0]
 800322c:	4413      	add	r3, r2
 800322e:	3b01      	subs	r3, #1
 8003230:	4a25      	ldr	r2, [pc, #148]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 8003232:	6313      	str	r3, [r2, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8003234:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 8003236:	22ff      	movs	r2, #255	; 0xff
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 800323c:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 800323e:	22ff      	movs	r2, #255	; 0xff
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8003244:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 8003246:	22ff      	movs	r2, #255	; 0xff
 8003248:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800324c:	481e      	ldr	r0, [pc, #120]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 800324e:	f003 f95b 	bl	8006508 <HAL_LTDC_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <my_MX_LTDC_Init+0x110>
  {
    Error_Handler();
 8003258:	f000 f8de 	bl	8003418 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = IMAGE_H;
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <my_MX_LTDC_Init+0x194>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = IMAGE_W;
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <my_MX_LTDC_Init+0x198>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8003270:	2301      	movs	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003274:	23ff      	movs	r3, #255	; 0xff
 8003276:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800327c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003280:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003282:	2305      	movs	r3, #5
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <my_MX_LTDC_Init+0x1a4>)
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = IMAGE_H;
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <my_MX_LTDC_Init+0x194>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = IMAGE_W;
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <my_MX_LTDC_Init+0x198>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8003296:	23ff      	movs	r3, #255	; 0xff
 8003298:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 800329c:	23ff      	movs	r3, #255	; 0xff
 800329e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 80032a2:	23ff      	movs	r3, #255	; 0xff
 80032a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	2200      	movs	r2, #0
 80032ac:	4619      	mov	r1, r3
 80032ae:	4806      	ldr	r0, [pc, #24]	; (80032c8 <my_MX_LTDC_Init+0x17c>)
 80032b0:	f003 f9fa 	bl	80066a8 <HAL_LTDC_ConfigLayer>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <my_MX_LTDC_Init+0x172>
  {
    Error_Handler();
 80032ba:	f000 f8ad 	bl	8003418 <Error_Handler>
  }
}
 80032be:	bf00      	nop
 80032c0:	3738      	adds	r7, #56	; 0x38
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	2000012c 	.word	0x2000012c
 80032cc:	40016800 	.word	0x40016800
 80032d0:	20000010 	.word	0x20000010
 80032d4:	20000016 	.word	0x20000016
 80032d8:	20000012 	.word	0x20000012
 80032dc:	20000018 	.word	0x20000018
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000004 	.word	0x20000004
 80032e8:	20000014 	.word	0x20000014
 80032ec:	2000001a 	.word	0x2000001a
 80032f0:	2007deec 	.word	0x2007deec

080032f4 <delay_us>:
/*====================================customized function end====================================*/

void delay_us(int time)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	int i = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
	while (time--)
 8003300:	e007      	b.n	8003312 <delay_us+0x1e>
	{
		i = 13;
 8003302:	230d      	movs	r3, #13
 8003304:	60fb      	str	r3, [r7, #12]
		while (i--);
 8003306:	bf00      	nop
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e5a      	subs	r2, r3, #1
 800330c:	60fa      	str	r2, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1fa      	bne.n	8003308 <delay_us+0x14>
	while (time--)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	1e5a      	subs	r2, r3, #1
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f2      	bne.n	8003302 <delay_us+0xe>
	}
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <delay_100ns>:

void delay_100ns(int time)
{
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
	int i = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
	while (time--)
 8003336:	e007      	b.n	8003348 <delay_100ns+0x1e>
	{
		i = 1;
 8003338:	2301      	movs	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
		while (i--);
 800333c:	bf00      	nop
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	60fa      	str	r2, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1fa      	bne.n	800333e <delay_100ns+0x14>
	while (time--)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1e5a      	subs	r2, r3, #1
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f2      	bne.n	8003338 <delay_100ns+0xe>
	}
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_EXTI_Callback>:

int button_count = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af02      	add	r7, sp, #8
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003370:	d033      	beq.n	80033da <HAL_GPIO_EXTI_Callback+0x7a>
	{

	}
	else if(GPIO_Pin == GPIO_PIN_8 && Mode_changed == 0){
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003378:	d12f      	bne.n	80033da <HAL_GPIO_EXTI_Callback+0x7a>
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x98>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d12b      	bne.n	80033da <HAL_GPIO_EXTI_Callback+0x7a>
		if(g_Mode_picture_count <= g_current_pic ){
 8003382:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_GPIO_EXTI_Callback+0x9c>)
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d802      	bhi.n	8003394 <HAL_GPIO_EXTI_Callback+0x34>
			g_current_pic = 0;
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
		}

	    if (HAL_DMA2D_Start(&hdma2d, (uint32_t) &frame_buf_mode[MAX_IMAGE_SIZE*g_current_pic], &image_arr_rgb888, IMAGE_W, IMAGE_H) == HAL_OK) {
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	f64d 63a8 	movw	r3, #57000	; 0xdea8
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	4a18      	ldr	r2, [pc, #96]	; (8003404 <HAL_GPIO_EXTI_Callback+0xa4>)
 80033a4:	4413      	add	r3, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	4917      	ldr	r1, [pc, #92]	; (8003408 <HAL_GPIO_EXTI_Callback+0xa8>)
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <HAL_GPIO_EXTI_Callback+0xac>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_GPIO_EXTI_Callback+0xb0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	460a      	mov	r2, r1
 80033b8:	4601      	mov	r1, r0
 80033ba:	4816      	ldr	r0, [pc, #88]	; (8003414 <HAL_GPIO_EXTI_Callback+0xb4>)
 80033bc:	f001 fde5 	bl	8004f8a <HAL_DMA2D_Start>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_GPIO_EXTI_Callback+0x6e>
	        // Wait for the transfer to complete
	        HAL_DMA2D_PollForTransfer(&hdma2d, 50); // Timeout in milliseconds
 80033c6:	2132      	movs	r1, #50	; 0x32
 80033c8:	4812      	ldr	r0, [pc, #72]	; (8003414 <HAL_GPIO_EXTI_Callback+0xb4>)
 80033ca:	f001 fe09 	bl	8004fe0 <HAL_DMA2D_PollForTransfer>
	    }
	    g_current_pic++;
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <HAL_GPIO_EXTI_Callback+0xa0>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_GPIO_EXTI_Callback+0xa0>)
 80033d8:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8 && Mode_changed == 1){
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e0:	d106      	bne.n	80033f0 <HAL_GPIO_EXTI_Callback+0x90>
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_GPIO_EXTI_Callback+0x98>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_GPIO_EXTI_Callback+0x90>
		g_current_pic = 0;
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_GPIO_EXTI_Callback+0xa0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	2008bd9c 	.word	0x2008bd9c
 80033fc:	2008be1b 	.word	0x2008be1b
 8003400:	2008be1a 	.word	0x2008be1a
 8003404:	20037dd0 	.word	0x20037dd0
 8003408:	2007deec 	.word	0x2007deec
 800340c:	20000004 	.word	0x20000004
 8003410:	20000000 	.word	0x20000000
 8003414:	200000b0 	.word	0x200000b0

08003418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003420:	e7fe      	b.n	8003420 <Error_Handler+0x8>
	...

08003424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_MspInit+0x44>)
 800342c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342e:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <HAL_MspInit+0x44>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6613      	str	r3, [r2, #96]	; 0x60
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_MspInit+0x44>)
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	607b      	str	r3, [r7, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_MspInit+0x44>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4a08      	ldr	r2, [pc, #32]	; (8003468 <HAL_MspInit+0x44>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_MspInit+0x44>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0b0      	sub	sp, #192	; 0xc0
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	f107 0310 	add.w	r3, r7, #16
 8003488:	229c      	movs	r2, #156	; 0x9c
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f007 fa29 	bl	800a8e4 <memset>
  if(hadc->Instance==ADC1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a27      	ldr	r2, [pc, #156]	; (8003534 <HAL_ADC_MspInit+0xc8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d146      	bne.n	800352a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800349c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80034a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80034aa:	2303      	movs	r3, #3
 80034ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80034b2:	2308      	movs	r3, #8
 80034b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80034b6:	2302      	movs	r3, #2
 80034b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80034ba:	2302      	movs	r3, #2
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80034be:	2302      	movs	r3, #2
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80034c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034c8:	f107 0310 	add.w	r3, r7, #16
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fa6d 	bl	80079ac <HAL_RCCEx_PeriphCLKConfig>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80034d8:	f7ff ff9e 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	4a15      	ldr	r2, [pc, #84]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 80034fa:	f043 0304 	orr.w	r3, r3, #4
 80034fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <HAL_ADC_MspInit+0xcc>)
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800350c:	2302      	movs	r3, #2
 800350e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003512:	230b      	movs	r3, #11
 8003514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003522:	4619      	mov	r1, r3
 8003524:	4805      	ldr	r0, [pc, #20]	; (800353c <HAL_ADC_MspInit+0xd0>)
 8003526:	f002 fe2d 	bl	8006184 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800352a:	bf00      	nop
 800352c:	37c0      	adds	r7, #192	; 0xc0
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	50040000 	.word	0x50040000
 8003538:	40021000 	.word	0x40021000
 800353c:	48000800 	.word	0x48000800

08003540 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_DMA2D_MspInit+0x38>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10b      	bne.n	800356a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_DMA2D_MspInit+0x3c>)
 8003554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <HAL_DMA2D_MspInit+0x3c>)
 8003558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355c:	6493      	str	r3, [r2, #72]	; 0x48
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <HAL_DMA2D_MspInit+0x3c>)
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	4002b000 	.word	0x4002b000
 800357c:	40021000 	.word	0x40021000

08003580 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b0aa      	sub	sp, #168	; 0xa8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	229c      	movs	r2, #156	; 0x9c
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f007 f9a7 	bl	800a8e4 <memset>
  if(hdsi->Instance==DSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <HAL_DSI_MspInit+0x60>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d11b      	bne.n	80035d8 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80035a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80035a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	4618      	mov	r0, r3
 80035b2:	f004 f9fb 	bl	80079ac <HAL_RCCEx_PeriphCLKConfig>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 80035bc:	f7ff ff2c 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_DSI_MspInit+0x64>)
 80035c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c4:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <HAL_DSI_MspInit+0x64>)
 80035c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035ca:	6613      	str	r3, [r2, #96]	; 0x60
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_DSI_MspInit+0x64>)
 80035ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80035d8:	bf00      	nop
 80035da:	37a8      	adds	r7, #168	; 0xa8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40016c00 	.word	0x40016c00
 80035e4:	40021000 	.word	0x40021000

080035e8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0aa      	sub	sp, #168	; 0xa8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035f0:	f107 030c 	add.w	r3, r7, #12
 80035f4:	229c      	movs	r2, #156	; 0x9c
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f007 f973 	bl	800a8e4 <memset>
  if(hltdc->Instance==LTDC)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_LTDC_MspInit+0x80>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d12b      	bne.n	8003660 <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800360c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 800360e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8003616:	2303      	movs	r3, #3
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 800361a:	2301      	movs	r3, #1
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 800361e:	2308      	movs	r3, #8
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8003622:	2302      	movs	r3, #2
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8003626:	2302      	movs	r3, #2
 8003628:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 800362a:	2302      	movs	r3, #2
 800362c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 800362e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003632:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	4618      	mov	r0, r3
 800363a:	f004 f9b7 	bl	80079ac <HAL_RCCEx_PeriphCLKConfig>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 8003644:	f7ff fee8 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_LTDC_MspInit+0x84>)
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	4a07      	ldr	r2, [pc, #28]	; (800366c <HAL_LTDC_MspInit+0x84>)
 800364e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003652:	6613      	str	r3, [r2, #96]	; 0x60
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_LTDC_MspInit+0x84>)
 8003656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003660:	bf00      	nop
 8003662:	37a8      	adds	r7, #168	; 0xa8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40016800 	.word	0x40016800
 800366c:	40021000 	.word	0x40021000

08003670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08c      	sub	sp, #48	; 0x30
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 031c 	add.w	r3, r7, #28
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a42      	ldr	r2, [pc, #264]	; (8003798 <HAL_SPI_MspInit+0x128>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d128      	bne.n	80036e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003692:	4b42      	ldr	r3, [pc, #264]	; (800379c <HAL_SPI_MspInit+0x12c>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	4a41      	ldr	r2, [pc, #260]	; (800379c <HAL_SPI_MspInit+0x12c>)
 8003698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800369c:	6593      	str	r3, [r2, #88]	; 0x58
 800369e:	4b3f      	ldr	r3, [pc, #252]	; (800379c <HAL_SPI_MspInit+0x12c>)
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036aa:	4b3c      	ldr	r3, [pc, #240]	; (800379c <HAL_SPI_MspInit+0x12c>)
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	4a3b      	ldr	r2, [pc, #236]	; (800379c <HAL_SPI_MspInit+0x12c>)
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_SPI_MspInit+0x12c>)
 80036b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3;
 80036c2:	231a      	movs	r3, #26
 80036c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036d2:	2305      	movs	r3, #5
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d6:	f107 031c 	add.w	r3, r7, #28
 80036da:	4619      	mov	r1, r3
 80036dc:	4830      	ldr	r0, [pc, #192]	; (80037a0 <HAL_SPI_MspInit+0x130>)
 80036de:	f002 fd51 	bl	8006184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80036e2:	e054      	b.n	800378e <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2e      	ldr	r2, [pc, #184]	; (80037a4 <HAL_SPI_MspInit+0x134>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d14f      	bne.n	800378e <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036ee:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_SPI_MspInit+0x12c>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	4a2a      	ldr	r2, [pc, #168]	; (800379c <HAL_SPI_MspInit+0x12c>)
 80036f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f8:	6593      	str	r3, [r2, #88]	; 0x58
 80036fa:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_SPI_MspInit+0x12c>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <HAL_SPI_MspInit+0x12c>)
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	4a24      	ldr	r2, [pc, #144]	; (800379c <HAL_SPI_MspInit+0x12c>)
 800370c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003712:	4b22      	ldr	r3, [pc, #136]	; (800379c <HAL_SPI_MspInit+0x12c>)
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800371e:	f003 fa5d 	bl	8006bdc <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <HAL_SPI_MspInit+0x12c>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <HAL_SPI_MspInit+0x12c>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_SPI_MspInit+0x12c>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 800373a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800373e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003740:	2302      	movs	r3, #2
 8003742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003748:	2303      	movs	r3, #3
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800374c:	2306      	movs	r3, #6
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003750:	f107 031c 	add.w	r3, r7, #28
 8003754:	4619      	mov	r1, r3
 8003756:	4814      	ldr	r0, [pc, #80]	; (80037a8 <HAL_SPI_MspInit+0x138>)
 8003758:	f002 fd14 	bl	8006184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 800375c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003762:	2302      	movs	r3, #2
 8003764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376a:	2303      	movs	r3, #3
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800376e:	2306      	movs	r3, #6
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003772:	f107 031c 	add.w	r3, r7, #28
 8003776:	4619      	mov	r1, r3
 8003778:	480c      	ldr	r0, [pc, #48]	; (80037ac <HAL_SPI_MspInit+0x13c>)
 800377a:	f002 fd03 	bl	8006184 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	2033      	movs	r0, #51	; 0x33
 8003784:	f001 fb0b 	bl	8004d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003788:	2033      	movs	r0, #51	; 0x33
 800378a:	f001 fb24 	bl	8004dd6 <HAL_NVIC_EnableIRQ>
}
 800378e:	bf00      	nop
 8003790:	3730      	adds	r7, #48	; 0x30
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40003800 	.word	0x40003800
 800379c:	40021000 	.word	0x40021000
 80037a0:	48000c00 	.word	0x48000c00
 80037a4:	40003c00 	.word	0x40003c00
 80037a8:	48001800 	.word	0x48001800
 80037ac:	48000800 	.word	0x48000800

080037b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b0b0      	sub	sp, #192	; 0xc0
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037c8:	f107 0310 	add.w	r3, r7, #16
 80037cc:	229c      	movs	r2, #156	; 0x9c
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f007 f887 	bl	800a8e4 <memset>
  if(huart->Instance==UART4)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a21      	ldr	r2, [pc, #132]	; (8003860 <HAL_UART_MspInit+0xb0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d13b      	bne.n	8003858 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80037e0:	2308      	movs	r3, #8
 80037e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80037e4:	2300      	movs	r3, #0
 80037e6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	4618      	mov	r0, r3
 80037ee:	f004 f8dd 	bl	80079ac <HAL_RCCEx_PeriphCLKConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037f8:	f7ff fe0e 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80037fc:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_UART_MspInit+0xb4>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <HAL_UART_MspInit+0xb4>)
 8003802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003806:	6593      	str	r3, [r2, #88]	; 0x58
 8003808:	4b16      	ldr	r3, [pc, #88]	; (8003864 <HAL_UART_MspInit+0xb4>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <HAL_UART_MspInit+0xb4>)
 8003816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003818:	4a12      	ldr	r2, [pc, #72]	; (8003864 <HAL_UART_MspInit+0xb4>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003820:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_UART_MspInit+0xb4>)
 8003822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800382c:	2303      	movs	r3, #3
 800382e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003832:	2302      	movs	r3, #2
 8003834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383e:	2303      	movs	r3, #3
 8003840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003844:	2308      	movs	r3, #8
 8003846:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800384e:	4619      	mov	r1, r3
 8003850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003854:	f002 fc96 	bl	8006184 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8003858:	bf00      	nop
 800385a:	37c0      	adds	r7, #192	; 0xc0
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40004c00 	.word	0x40004c00
 8003864:	40021000 	.word	0x40021000

08003868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800386c:	e7fe      	b.n	800386c <NMI_Handler+0x4>

0800386e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003872:	e7fe      	b.n	8003872 <HardFault_Handler+0x4>

08003874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003878:	e7fe      	b.n	8003878 <MemManage_Handler+0x4>

0800387a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800387e:	e7fe      	b.n	800387e <BusFault_Handler+0x4>

08003880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003884:	e7fe      	b.n	8003884 <UsageFault_Handler+0x4>

08003886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038b4:	f000 f8ac 	bl	8003a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038b8:	bf00      	nop
 80038ba:	bd80      	pop	{r7, pc}

080038bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sync_Pin);
 80038c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80038c4:	f002 fe08 	bl	80064d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}

080038cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pic_sw_Pin);
 80038d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038d4:	f002 fe00 	bl	80064d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038d8:	bf00      	nop
 80038da:	bd80      	pop	{r7, pc}

080038dc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <SPI3_IRQHandler+0x10>)
 80038e2:	f005 fc8f 	bl	8009204 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000238 	.word	0x20000238

080038f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <SystemInit+0x20>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fa:	4a05      	ldr	r2, [pc, #20]	; (8003910 <SystemInit+0x20>)
 80038fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800394c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003918:	f7ff ffea 	bl	80038f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800391c:	480c      	ldr	r0, [pc, #48]	; (8003950 <LoopForever+0x6>)
  ldr r1, =_edata
 800391e:	490d      	ldr	r1, [pc, #52]	; (8003954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <LoopForever+0xe>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003924:	e002      	b.n	800392c <LoopCopyDataInit>

08003926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392a:	3304      	adds	r3, #4

0800392c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800392c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003930:	d3f9      	bcc.n	8003926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003934:	4c0a      	ldr	r4, [pc, #40]	; (8003960 <LoopForever+0x16>)
  movs r3, #0
 8003936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003938:	e001      	b.n	800393e <LoopFillZerobss>

0800393a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800393c:	3204      	adds	r2, #4

0800393e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003940:	d3fb      	bcc.n	800393a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003942:	f006 ffab 	bl	800a89c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003946:	f7fc fddb 	bl	8000500 <main>

0800394a <LoopForever>:

LoopForever:
    b LoopForever
 800394a:	e7fe      	b.n	800394a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800394c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003954:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8003958:	0800aa0c 	.word	0x0800aa0c
  ldr r2, =_sbss
 800395c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8003960:	2008be20 	.word	0x2008be20

08003964 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003964:	e7fe      	b.n	8003964 <ADC1_IRQHandler>

08003966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003970:	2003      	movs	r0, #3
 8003972:	f001 fa09 	bl	8004d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003976:	2002      	movs	r0, #2
 8003978:	f000 f80e 	bl	8003998 <HAL_InitTick>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	71fb      	strb	r3, [r7, #7]
 8003986:	e001      	b.n	800398c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003988:	f7ff fd4c 	bl	8003424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800398c:	79fb      	ldrb	r3, [r7, #7]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <HAL_InitTick+0x6c>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d023      	beq.n	80039f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <HAL_InitTick+0x70>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_InitTick+0x6c>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 fa15 	bl	8004df2 <HAL_SYSTICK_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b0f      	cmp	r3, #15
 80039d2:	d809      	bhi.n	80039e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039d4:	2200      	movs	r2, #0
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	f001 f9df 	bl	8004d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <HAL_InitTick+0x74>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e007      	b.n	80039f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e004      	b.n	80039f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	e001      	b.n	80039f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000028 	.word	0x20000028
 8003a08:	20000020 	.word	0x20000020
 8003a0c:	20000024 	.word	0x20000024

08003a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_IncTick+0x20>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_IncTick+0x24>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a04      	ldr	r2, [pc, #16]	; (8003a34 <HAL_IncTick+0x24>)
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000028 	.word	0x20000028
 8003a34:	2008be1c 	.word	0x2008be1c

08003a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a3c:	4b03      	ldr	r3, [pc, #12]	; (8003a4c <HAL_GetTick+0x14>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	2008be1c 	.word	0x2008be1c

08003a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff ffee 	bl	8003a38 <HAL_GetTick>
 8003a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d005      	beq.n	8003a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_Delay+0x44>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a76:	bf00      	nop
 8003a78:	f7ff ffde 	bl	8003a38 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d8f7      	bhi.n	8003a78 <HAL_Delay+0x28>
  {
  }
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000028 	.word	0x20000028

08003a98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3360      	adds	r3, #96	; 0x60
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <LL_ADC_SetOffset+0x44>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	03fff000 	.word	0x03fff000

08003b48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3360      	adds	r3, #96	; 0x60
 8003b56:	461a      	mov	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3360      	adds	r3, #96	; 0x60
 8003b84:	461a      	mov	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b9e:	bf00      	nop
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	615a      	str	r2, [r3, #20]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b087      	sub	sp, #28
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3330      	adds	r3, #48	; 0x30
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	4413      	add	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	211f      	movs	r1, #31
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	401a      	ands	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0e9b      	lsrs	r3, r3, #26
 8003c2e:	f003 011f 	and.w	r1, r3, #31
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	0e5b      	lsrs	r3, r3, #25
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	0d1b      	lsrs	r3, r3, #20
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2107      	movs	r1, #7
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	401a      	ands	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	0d1b      	lsrs	r3, r3, #20
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	431a      	orrs	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f003 0318 	and.w	r3, r3, #24
 8003cc6:	4908      	ldr	r1, [pc, #32]	; (8003ce8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003cc8:	40d9      	lsrs	r1, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	400b      	ands	r3, r1
 8003cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	0007ffff 	.word	0x0007ffff

08003cec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003cfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6093      	str	r3, [r2, #8]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d24:	d101      	bne.n	8003d2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d74:	d101      	bne.n	8003d7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <LL_ADC_IsEnabled+0x18>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <LL_ADC_IsEnabled+0x1a>
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003de6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dea:	f043 0204 	orr.w	r2, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d101      	bne.n	8003e16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d101      	bne.n	8003e3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e12f      	b.n	80040c6 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff faf9 	bl	800346c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff ff3f 	bl	8003d10 <LL_ADC_IsDeepPowerDownEnabled>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff25 	bl	8003cec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff ff5a 	bl	8003d60 <LL_ADC_IsInternalRegulatorEnabled>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d115      	bne.n	8003ede <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff3e 	bl	8003d38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ebc:	4b84      	ldr	r3, [pc, #528]	; (80040d0 <HAL_ADC_Init+0x284>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	4a84      	ldr	r2, [pc, #528]	; (80040d4 <HAL_ADC_Init+0x288>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	099b      	lsrs	r3, r3, #6
 8003eca:	3301      	adds	r3, #1
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ed0:	e002      	b.n	8003ed8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f9      	bne.n	8003ed2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff3c 	bl	8003d60 <LL_ADC_IsInternalRegulatorEnabled>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10d      	bne.n	8003f0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f043 0210 	orr.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	f043 0201 	orr.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff ff75 	bl	8003dfe <LL_ADC_REG_IsConversionOngoing>
 8003f14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 80c8 	bne.w	80040b4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 80c4 	bne.w	80040b4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f34:	f043 0202 	orr.w	r2, r3, #2
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff35 	bl	8003db0 <LL_ADC_IsEnabled>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f4c:	4862      	ldr	r0, [pc, #392]	; (80040d8 <HAL_ADC_Init+0x28c>)
 8003f4e:	f7ff ff2f 	bl	8003db0 <LL_ADC_IsEnabled>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	485f      	ldr	r0, [pc, #380]	; (80040dc <HAL_ADC_Init+0x290>)
 8003f60:	f7ff fd9a 	bl	8003a98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	7e5b      	ldrb	r3, [r3, #25]
 8003f68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f6e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003f74:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003f7a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f82:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d106      	bne.n	8003fa0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	3b01      	subs	r3, #1
 8003f98:	045b      	lsls	r3, r3, #17
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <HAL_ADC_Init+0x294>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff12 	bl	8003dfe <LL_ADC_REG_IsConversionOngoing>
 8003fda:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff1f 	bl	8003e24 <LL_ADC_INJ_IsConversionOngoing>
 8003fe6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d140      	bne.n	8004070 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d13d      	bne.n	8004070 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	7e1b      	ldrb	r3, [r3, #24]
 8003ffc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ffe:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004006:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004016:	f023 0306 	bic.w	r3, r3, #6
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	69b9      	ldr	r1, [r7, #24]
 8004020:	430b      	orrs	r3, r1
 8004022:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800402a:	2b01      	cmp	r3, #1
 800402c:	d118      	bne.n	8004060 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004044:	4311      	orrs	r1, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004050:	430a      	orrs	r2, r1
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	611a      	str	r2, [r3, #16]
 800405e:	e007      	b.n	8004070 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d10c      	bne.n	8004092 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f023 010f 	bic.w	r1, r3, #15
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
 8004090:	e007      	b.n	80040a2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 020f 	bic.w	r2, r2, #15
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	; 0x58
 80040b2:	e007      	b.n	80040c4 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	f043 0210 	orr.w	r2, r3, #16
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000020 	.word	0x20000020
 80040d4:	053e2d63 	.word	0x053e2d63
 80040d8:	50040000 	.word	0x50040000
 80040dc:	50040300 	.word	0x50040300
 80040e0:	fff0c007 	.word	0xfff0c007

080040e4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fe84 	bl	8003dfe <LL_ADC_REG_IsConversionOngoing>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d14f      	bne.n	800419c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_ADC_Start+0x26>
 8004106:	2302      	movs	r3, #2
 8004108:	e04b      	b.n	80041a2 <HAL_ADC_Start+0xbe>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fce2 	bl	8004adc <ADC_Enable>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d137      	bne.n	8004192 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004142:	d106      	bne.n	8004152 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004148:	f023 0206 	bic.w	r2, r3, #6
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004150:	e002      	b.n	8004158 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	221c      	movs	r2, #28
 800415e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800417e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fe23 	bl	8003dd6 <LL_ADC_REG_StartConversion>
 8004190:	e006      	b.n	80041a0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800419a:	e001      	b.n	80041a0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800419c:	2302      	movs	r3, #2
 800419e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d102      	bne.n	80041c2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80041bc:	2308      	movs	r3, #8
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e010      	b.n	80041e4 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e06f      	b.n	80042c0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80041e0:	2304      	movs	r3, #4
 80041e2:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80041e4:	f7ff fc28 	bl	8003a38 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80041ea:	e021      	b.n	8004230 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d01d      	beq.n	8004230 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80041f4:	f7ff fc20 	bl	8003a38 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d302      	bcc.n	800420a <HAL_ADC_PollForConversion+0x60>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d112      	bne.n	8004230 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	f043 0204 	orr.w	r2, r3, #4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e047      	b.n	80042c0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0d6      	beq.n	80041ec <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fcbe 	bl	8003bd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01c      	beq.n	8004294 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7e5b      	ldrb	r3, [r3, #25]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d111      	bne.n	8004294 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	f043 0201 	orr.w	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d104      	bne.n	80042ac <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2208      	movs	r2, #8
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e008      	b.n	80042be <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d103      	bne.n	80042be <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	220c      	movs	r2, #12
 80042bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0b6      	sub	sp, #216	; 0xd8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x22>
 8004302:	2302      	movs	r3, #2
 8004304:	e3d5      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x7ce>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fd73 	bl	8003dfe <LL_ADC_REG_IsConversionOngoing>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 83ba 	bne.w	8004a94 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b05      	cmp	r3, #5
 8004326:	d824      	bhi.n	8004372 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	3b02      	subs	r3, #2
 800432e:	2b03      	cmp	r3, #3
 8004330:	d81b      	bhi.n	800436a <HAL_ADC_ConfigChannel+0x86>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <HAL_ADC_ConfigChannel+0x54>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	08004349 	.word	0x08004349
 800433c:	08004351 	.word	0x08004351
 8004340:	08004359 	.word	0x08004359
 8004344:	08004361 	.word	0x08004361
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	220c      	movs	r2, #12
 800434c:	605a      	str	r2, [r3, #4]
          break;
 800434e:	e011      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2212      	movs	r2, #18
 8004354:	605a      	str	r2, [r3, #4]
          break;
 8004356:	e00d      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2218      	movs	r2, #24
 800435c:	605a      	str	r2, [r3, #4]
          break;
 800435e:	e009      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004366:	605a      	str	r2, [r3, #4]
          break;
 8004368:	e004      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2206      	movs	r2, #6
 800436e:	605a      	str	r2, [r3, #4]
          break;
 8004370:	e000      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004372:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	f7ff fc38 	bl	8003bf6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fd37 	bl	8003dfe <LL_ADC_REG_IsConversionOngoing>
 8004390:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fd43 	bl	8003e24 <LL_ADC_INJ_IsConversionOngoing>
 800439e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 81c1 	bne.w	800472e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 81bc 	bne.w	800472e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043be:	d10f      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2200      	movs	r2, #0
 80043ca:	4619      	mov	r1, r3
 80043cc:	f7ff fc3f 	bl	8003c4e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fbe6 	bl	8003baa <LL_ADC_SetSamplingTimeCommonConfig>
 80043de:	e00e      	b.n	80043fe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6819      	ldr	r1, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f7ff fc2e 	bl	8003c4e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fbd6 	bl	8003baa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d00a      	beq.n	8004436 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6919      	ldr	r1, [r3, #16]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004430:	f7ff fb66 	bl	8003b00 <LL_ADC_SetOffset>
 8004434:	e17b      	b.n	800472e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2100      	movs	r1, #0
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fb83 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004442:	4603      	mov	r3, r0
 8004444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x17e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fb78 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004458:	4603      	mov	r3, r0
 800445a:	0e9b      	lsrs	r3, r3, #26
 800445c:	f003 021f 	and.w	r2, r3, #31
 8004460:	e01e      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x1bc>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fb6d 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 800446e:	4603      	mov	r3, r0
 8004470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004480:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004484:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004488:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004490:	2320      	movs	r3, #32
 8004492:	e004      	b.n	800449e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004494:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004498:	fab3 f383 	clz	r3, r3
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d105      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x1d4>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	0e9b      	lsrs	r3, r3, #26
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	e018      	b.n	80044ea <HAL_ADC_ConfigChannel+0x206>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80044cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80044d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80044dc:	2320      	movs	r3, #32
 80044de:	e004      	b.n	80044ea <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80044e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044e4:	fab3 f383 	clz	r3, r3
 80044e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d106      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	2100      	movs	r1, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fb3c 	bl	8003b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2101      	movs	r1, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fb20 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004508:	4603      	mov	r3, r0
 800450a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x244>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2101      	movs	r1, #1
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fb15 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 800451e:	4603      	mov	r3, r0
 8004520:	0e9b      	lsrs	r3, r3, #26
 8004522:	f003 021f 	and.w	r2, r3, #31
 8004526:	e01e      	b.n	8004566 <HAL_ADC_ConfigChannel+0x282>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2101      	movs	r1, #1
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fb0a 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004534:	4603      	mov	r3, r0
 8004536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800454a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800454e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8004556:	2320      	movs	r3, #32
 8004558:	e004      	b.n	8004564 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800455a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456e:	2b00      	cmp	r3, #0
 8004570:	d105      	bne.n	800457e <HAL_ADC_ConfigChannel+0x29a>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	0e9b      	lsrs	r3, r3, #26
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	e018      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x2cc>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800458a:	fa93 f3a3 	rbit	r3, r3
 800458e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004592:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800459a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80045a2:	2320      	movs	r3, #32
 80045a4:	e004      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80045a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d106      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fad9 	bl	8003b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2102      	movs	r1, #2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fabd 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x30a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fab2 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 80045e4:	4603      	mov	r3, r0
 80045e6:	0e9b      	lsrs	r3, r3, #26
 80045e8:	f003 021f 	and.w	r2, r3, #31
 80045ec:	e01e      	b.n	800462c <HAL_ADC_ConfigChannel+0x348>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2102      	movs	r1, #2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff faa7 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800460c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004614:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e004      	b.n	800462a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8004620:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x360>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0e9b      	lsrs	r3, r3, #26
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	e016      	b.n	8004672 <HAL_ADC_ConfigChannel+0x38e>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800465c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8004664:	2320      	movs	r3, #32
 8004666:	e004      	b.n	8004672 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800466c:	fab3 f383 	clz	r3, r3
 8004670:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004672:	429a      	cmp	r2, r3
 8004674:	d106      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	2102      	movs	r1, #2
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fa78 	bl	8003b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2103      	movs	r1, #3
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fa5c 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 8004690:	4603      	mov	r3, r0
 8004692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x3cc>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2103      	movs	r1, #3
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fa51 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 80046a6:	4603      	mov	r3, r0
 80046a8:	0e9b      	lsrs	r3, r3, #26
 80046aa:	f003 021f 	and.w	r2, r3, #31
 80046ae:	e017      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x3fc>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2103      	movs	r1, #3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fa46 	bl	8003b48 <LL_ADC_GetOffsetChannel>
 80046bc:	4603      	mov	r3, r0
 80046be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80046c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ca:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80046cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80046d2:	2320      	movs	r3, #32
 80046d4:	e003      	b.n	80046de <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80046d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d8:	fab3 f383 	clz	r3, r3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x414>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0e9b      	lsrs	r3, r3, #26
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	e011      	b.n	800471c <HAL_ADC_ConfigChannel+0x438>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004700:	fa93 f3a3 	rbit	r3, r3
 8004704:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004708:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800470a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004710:	2320      	movs	r3, #32
 8004712:	e003      	b.n	800471c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004716:	fab3 f383 	clz	r3, r3
 800471a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800471c:	429a      	cmp	r2, r3
 800471e:	d106      	bne.n	800472e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2200      	movs	r2, #0
 8004726:	2103      	movs	r1, #3
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fa23 	bl	8003b74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fb3c 	bl	8003db0 <LL_ADC_IsEnabled>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	f040 8140 	bne.w	80049c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6819      	ldr	r1, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	461a      	mov	r2, r3
 800474e:	f7ff faa9 	bl	8003ca4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4a8f      	ldr	r2, [pc, #572]	; (8004994 <HAL_ADC_ConfigChannel+0x6b0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	f040 8131 	bne.w	80049c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x4a2>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	0e9b      	lsrs	r3, r3, #26
 8004774:	3301      	adds	r3, #1
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2b09      	cmp	r3, #9
 800477c:	bf94      	ite	ls
 800477e:	2301      	movls	r3, #1
 8004780:	2300      	movhi	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	e019      	b.n	80047ba <HAL_ADC_ConfigChannel+0x4d6>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004796:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800479e:	2320      	movs	r3, #32
 80047a0:	e003      	b.n	80047aa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80047a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a4:	fab3 f383 	clz	r3, r3
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	2b09      	cmp	r3, #9
 80047b2:	bf94      	ite	ls
 80047b4:	2301      	movls	r3, #1
 80047b6:	2300      	movhi	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d079      	beq.n	80048b2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <HAL_ADC_ConfigChannel+0x4f6>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	0e9b      	lsrs	r3, r3, #26
 80047d0:	3301      	adds	r3, #1
 80047d2:	069b      	lsls	r3, r3, #26
 80047d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d8:	e015      	b.n	8004806 <HAL_ADC_ConfigChannel+0x522>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80047e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80047ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80047f2:	2320      	movs	r3, #32
 80047f4:	e003      	b.n	80047fe <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80047f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	069b      	lsls	r3, r3, #26
 8004802:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x542>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	0e9b      	lsrs	r3, r3, #26
 8004818:	3301      	adds	r3, #1
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	e017      	b.n	8004856 <HAL_ADC_ConfigChannel+0x572>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004836:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800483e:	2320      	movs	r3, #32
 8004840:	e003      	b.n	800484a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8004842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
 800484a:	3301      	adds	r3, #1
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	2101      	movs	r1, #1
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	ea42 0103 	orr.w	r1, r2, r3
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <HAL_ADC_ConfigChannel+0x598>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	0e9b      	lsrs	r3, r3, #26
 800486c:	3301      	adds	r3, #1
 800486e:	f003 021f 	and.w	r2, r3, #31
 8004872:	4613      	mov	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4413      	add	r3, r2
 8004878:	051b      	lsls	r3, r3, #20
 800487a:	e018      	b.n	80048ae <HAL_ADC_ConfigChannel+0x5ca>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	fa93 f3a3 	rbit	r3, r3
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800488e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004894:	2320      	movs	r3, #32
 8004896:	e003      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489a:	fab3 f383 	clz	r3, r3
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	3301      	adds	r3, #1
 80048a2:	f003 021f 	and.w	r2, r3, #31
 80048a6:	4613      	mov	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ae:	430b      	orrs	r3, r1
 80048b0:	e081      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x5ea>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	0e9b      	lsrs	r3, r3, #26
 80048c4:	3301      	adds	r3, #1
 80048c6:	069b      	lsls	r3, r3, #26
 80048c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048cc:	e015      	b.n	80048fa <HAL_ADC_ConfigChannel+0x616>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	fa93 f3a3 	rbit	r3, r3
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80048e6:	2320      	movs	r3, #32
 80048e8:	e003      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	fab3 f383 	clz	r3, r3
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	069b      	lsls	r3, r3, #26
 80048f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_ADC_ConfigChannel+0x636>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	0e9b      	lsrs	r3, r3, #26
 800490c:	3301      	adds	r3, #1
 800490e:	f003 031f 	and.w	r3, r3, #31
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	e017      	b.n	800494a <HAL_ADC_ConfigChannel+0x666>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	fa93 f3a3 	rbit	r3, r3
 8004926:	61fb      	str	r3, [r7, #28]
  return result;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004932:	2320      	movs	r3, #32
 8004934:	e003      	b.n	800493e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	fab3 f383 	clz	r3, r3
 800493c:	b2db      	uxtb	r3, r3
 800493e:	3301      	adds	r3, #1
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	2101      	movs	r1, #1
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	ea42 0103 	orr.w	r1, r2, r3
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x692>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	0e9b      	lsrs	r3, r3, #26
 8004960:	3301      	adds	r3, #1
 8004962:	f003 021f 	and.w	r2, r3, #31
 8004966:	4613      	mov	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	3b1e      	subs	r3, #30
 800496e:	051b      	lsls	r3, r3, #20
 8004970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004974:	e01e      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x6d0>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	613b      	str	r3, [r7, #16]
  return result;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800498e:	2320      	movs	r3, #32
 8004990:	e006      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x6bc>
 8004992:	bf00      	nop
 8004994:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	f003 021f 	and.w	r2, r3, #31
 80049a6:	4613      	mov	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4413      	add	r3, r2
 80049ac:	3b1e      	subs	r3, #30
 80049ae:	051b      	lsls	r3, r3, #20
 80049b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049b4:	430b      	orrs	r3, r1
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	6892      	ldr	r2, [r2, #8]
 80049ba:	4619      	mov	r1, r3
 80049bc:	f7ff f947 	bl	8003c4e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <HAL_ADC_ConfigChannel+0x7d8>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d06c      	beq.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049cc:	483c      	ldr	r0, [pc, #240]	; (8004ac0 <HAL_ADC_ConfigChannel+0x7dc>)
 80049ce:	f7ff f889 	bl	8003ae4 <LL_ADC_GetCommonPathInternalCh>
 80049d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3a      	ldr	r2, [pc, #232]	; (8004ac4 <HAL_ADC_ConfigChannel+0x7e0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d127      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d121      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a35      	ldr	r2, [pc, #212]	; (8004ac8 <HAL_ADC_ConfigChannel+0x7e4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d157      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049fe:	4619      	mov	r1, r3
 8004a00:	482f      	ldr	r0, [pc, #188]	; (8004ac0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a02:	f7ff f85c 	bl	8003abe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a06:	4b31      	ldr	r3, [pc, #196]	; (8004acc <HAL_ADC_ConfigChannel+0x7e8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	099b      	lsrs	r3, r3, #6
 8004a0c:	4a30      	ldr	r2, [pc, #192]	; (8004ad0 <HAL_ADC_ConfigChannel+0x7ec>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	099b      	lsrs	r3, r3, #6
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	4613      	mov	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a20:	e002      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f9      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a2e:	e03a      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d113      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x77e>
 8004a3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10d      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <HAL_ADC_ConfigChannel+0x7e4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d12a      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4819      	ldr	r0, [pc, #100]	; (8004ac0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a5c:	f7ff f82f 	bl	8003abe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a60:	e021      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_ADC_ConfigChannel+0x7f4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d11c      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d116      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a12      	ldr	r2, [pc, #72]	; (8004ac8 <HAL_ADC_ConfigChannel+0x7e4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d111      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	480c      	ldr	r0, [pc, #48]	; (8004ac0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a8e:	f7ff f816 	bl	8003abe <LL_ADC_SetCommonPathInternalCh>
 8004a92:	e008      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a98:	f043 0220 	orr.w	r2, r3, #32
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004aae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	37d8      	adds	r7, #216	; 0xd8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	80080000 	.word	0x80080000
 8004ac0:	50040300 	.word	0x50040300
 8004ac4:	c7520000 	.word	0xc7520000
 8004ac8:	50040000 	.word	0x50040000
 8004acc:	20000020 	.word	0x20000020
 8004ad0:	053e2d63 	.word	0x053e2d63
 8004ad4:	cb840000 	.word	0xcb840000
 8004ad8:	80000001 	.word	0x80000001

08004adc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff f95f 	bl	8003db0 <LL_ADC_IsEnabled>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d169      	bne.n	8004bcc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	4b36      	ldr	r3, [pc, #216]	; (8004bd8 <ADC_Enable+0xfc>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00d      	beq.n	8004b22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	f043 0210 	orr.w	r2, r3, #16
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	f043 0201 	orr.w	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e055      	b.n	8004bce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff f92e 	bl	8003d88 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004b2c:	482b      	ldr	r0, [pc, #172]	; (8004bdc <ADC_Enable+0x100>)
 8004b2e:	f7fe ffd9 	bl	8003ae4 <LL_ADC_GetCommonPathInternalCh>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d013      	beq.n	8004b64 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <ADC_Enable+0x104>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	099b      	lsrs	r3, r3, #6
 8004b42:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <ADC_Enable+0x108>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004b56:	e002      	b.n	8004b5e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f9      	bne.n	8004b58 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b64:	f7fe ff68 	bl	8003a38 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b6a:	e028      	b.n	8004bbe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff f91d 	bl	8003db0 <LL_ADC_IsEnabled>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d104      	bne.n	8004b86 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff f901 	bl	8003d88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b86:	f7fe ff57 	bl	8003a38 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d914      	bls.n	8004bbe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d00d      	beq.n	8004bbe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	f043 0210 	orr.w	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb2:	f043 0201 	orr.w	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e007      	b.n	8004bce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d1cf      	bne.n	8004b6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	8000003f 	.word	0x8000003f
 8004bdc:	50040300 	.word	0x50040300
 8004be0:	20000020 	.word	0x20000020
 8004be4:	053e2d63 	.word	0x053e2d63

08004be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <__NVIC_SetPriorityGrouping+0x44>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c04:	4013      	ands	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c1a:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <__NVIC_SetPriorityGrouping+0x44>)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	60d3      	str	r3, [r2, #12]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <__NVIC_GetPriorityGrouping+0x18>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	f003 0307 	and.w	r3, r3, #7
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	db0b      	blt.n	8004c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	f003 021f 	and.w	r2, r3, #31
 8004c64:	4907      	ldr	r1, [pc, #28]	; (8004c84 <__NVIC_EnableIRQ+0x38>)
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	e000e100 	.word	0xe000e100

08004c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	6039      	str	r1, [r7, #0]
 8004c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	db0a      	blt.n	8004cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	490c      	ldr	r1, [pc, #48]	; (8004cd4 <__NVIC_SetPriority+0x4c>)
 8004ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	440b      	add	r3, r1
 8004cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cb0:	e00a      	b.n	8004cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4908      	ldr	r1, [pc, #32]	; (8004cd8 <__NVIC_SetPriority+0x50>)
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	3b04      	subs	r3, #4
 8004cc0:	0112      	lsls	r2, r2, #4
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	761a      	strb	r2, [r3, #24]
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	e000e100 	.word	0xe000e100
 8004cd8:	e000ed00 	.word	0xe000ed00

08004cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b089      	sub	sp, #36	; 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f1c3 0307 	rsb	r3, r3, #7
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	bf28      	it	cs
 8004cfa:	2304      	movcs	r3, #4
 8004cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2b06      	cmp	r3, #6
 8004d04:	d902      	bls.n	8004d0c <NVIC_EncodePriority+0x30>
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	3b03      	subs	r3, #3
 8004d0a:	e000      	b.n	8004d0e <NVIC_EncodePriority+0x32>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d10:	f04f 32ff 	mov.w	r2, #4294967295
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43da      	mvns	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	401a      	ands	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d24:	f04f 31ff 	mov.w	r1, #4294967295
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	43d9      	mvns	r1, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d34:	4313      	orrs	r3, r2
         );
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3724      	adds	r7, #36	; 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d54:	d301      	bcc.n	8004d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d56:	2301      	movs	r3, #1
 8004d58:	e00f      	b.n	8004d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d5a:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <SysTick_Config+0x40>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d62:	210f      	movs	r1, #15
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	f7ff ff8e 	bl	8004c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <SysTick_Config+0x40>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d72:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <SysTick_Config+0x40>)
 8004d74:	2207      	movs	r2, #7
 8004d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	e000e010 	.word	0xe000e010

08004d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ff29 	bl	8004be8 <__NVIC_SetPriorityGrouping>
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b086      	sub	sp, #24
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	4603      	mov	r3, r0
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004db0:	f7ff ff3e 	bl	8004c30 <__NVIC_GetPriorityGrouping>
 8004db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	6978      	ldr	r0, [r7, #20]
 8004dbc:	f7ff ff8e 	bl	8004cdc <NVIC_EncodePriority>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ff5d 	bl	8004c88 <__NVIC_SetPriority>
}
 8004dce:	bf00      	nop
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	4603      	mov	r3, r0
 8004dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff31 	bl	8004c4c <__NVIC_EnableIRQ>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ffa2 	bl	8004d44 <SysTick_Config>
 8004e00:	4603      	mov	r3, r0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d005      	beq.n	8004e2e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2204      	movs	r2, #4
 8004e26:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
 8004e2c:	e047      	b.n	8004ebe <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 020e 	bic.w	r2, r2, #14
 8004e3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	f003 021c 	and.w	r2, r3, #28
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e70:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e7a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00c      	beq.n	8004e9e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e9c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
    }
  }
  return status;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e053      	b.n	8004f82 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fe fb26 	bl	8003540 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
#if defined(DMA2D_LINE_OFFSET_MODE_SUPPORT)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6851      	ldr	r1, [r2, #4]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	69d2      	ldr	r2, [r2, #28]
 8004f12:	4311      	orrs	r1, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
#endif /* DMA2D_LINE_OFFSET_MODE_SUPPORT */

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
#if defined(DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6891      	ldr	r1, [r2, #8]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6992      	ldr	r2, [r2, #24]
 8004f32:	4311      	orrs	r1, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6353      	str	r3, [r2, #52]	; 0x34
#else
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
#endif /* DMA2D_OUTPUT_TWO_BY_TWO_SWAP_SUPPORT */

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68d1      	ldr	r1, [r2, #12]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	051a      	lsls	r2, r3, #20
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	055b      	lsls	r3, r3, #21
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b086      	sub	sp, #24
 8004f8e:	af02      	add	r7, sp, #8
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_DMA2D_Start+0x1c>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e018      	b.n	8004fd8 <HAL_DMA2D_Start+0x4e>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f995 	bl	80052f0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d056      	beq.n	80050aa <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ffc:	f7fe fd1c 	bl	8003a38 <HAL_GetTick>
 8005000:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005002:	e04b      	b.n	800509c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005012:	2b00      	cmp	r3, #0
 8005014:	d023      	beq.n	800505e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005024:	f043 0202 	orr.w	r2, r3, #2
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503a:	f043 0201 	orr.w	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2221      	movs	r2, #33	; 0x21
 8005048:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2204      	movs	r2, #4
 800504e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0a5      	b.n	80051aa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d01a      	beq.n	800509c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005066:	f7fe fce7 	bl	8003a38 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <HAL_DMA2D_PollForTransfer+0x9c>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10f      	bne.n	800509c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2203      	movs	r2, #3
 800508c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e086      	b.n	80051aa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0ac      	beq.n	8005004 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d061      	beq.n	8005190 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80050cc:	f7fe fcb4 	bl	8003a38 <HAL_GetTick>
 80050d0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80050d2:	e056      	b.n	8005182 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d02e      	beq.n	8005144 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f4:	f043 0204 	orr.w	r2, r3, #4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510a:	f043 0202 	orr.w	r2, r3, #2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005120:	f043 0201 	orr.w	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2229      	movs	r2, #41	; 0x29
 800512e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2204      	movs	r2, #4
 8005134:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e032      	b.n	80051aa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d01a      	beq.n	8005182 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800514c:	f7fe fc74 	bl	8003a38 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <HAL_DMA2D_PollForTransfer+0x182>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10f      	bne.n	8005182 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2203      	movs	r2, #3
 8005172:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e013      	b.n	80051aa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0a1      	beq.n	80050d4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2212      	movs	r2, #18
 8005196:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_DMA2D_ConfigLayer+0x20>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e084      	b.n	80052de <HAL_DMA2D_ConfigLayer+0x12a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	3328      	adds	r3, #40	; 0x28
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005208:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005214:	4b35      	ldr	r3, [pc, #212]	; (80052ec <HAL_DMA2D_ConfigLayer+0x138>)
 8005216:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b0a      	cmp	r3, #10
 800521e:	d003      	beq.n	8005228 <HAL_DMA2D_ConfigLayer+0x74>
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b09      	cmp	r3, #9
 8005226:	d107      	bne.n	8005238 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e005      	b.n	8005244 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d120      	bne.n	800528c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	43db      	mvns	r3, r3
 8005254:	ea02 0103 	and.w	r1, r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	430a      	orrs	r2, r1
 8005260:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b0a      	cmp	r3, #10
 8005272:	d003      	beq.n	800527c <HAL_DMA2D_ConfigLayer+0xc8>
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b09      	cmp	r3, #9
 800527a:	d127      	bne.n	80052cc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005288:	629a      	str	r2, [r3, #40]	; 0x28
 800528a:	e01f      	b.n	80052cc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	43db      	mvns	r3, r3
 8005296:	ea02 0103 	and.w	r1, r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b0a      	cmp	r3, #10
 80052b4:	d003      	beq.n	80052be <HAL_DMA2D_ConfigLayer+0x10a>
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b09      	cmp	r3, #9
 80052bc:	d106      	bne.n	80052cc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80052ca:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	ff33000f 	.word	0xff33000f

080052f0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b08b      	sub	sp, #44	; 0x2c
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	041a      	lsls	r2, r3, #16
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	431a      	orrs	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005328:	d174      	bne.n	8005414 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005330:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005338:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005340:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	431a      	orrs	r2, r3
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	4313      	orrs	r3, r2
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
 8005360:	e053      	b.n	800540a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d106      	bne.n	8005378 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4313      	orrs	r3, r2
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
 8005376:	e048      	b.n	800540a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d111      	bne.n	80053a4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	0cdb      	lsrs	r3, r3, #19
 8005384:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	0a9b      	lsrs	r3, r3, #10
 800538a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	08db      	lsrs	r3, r3, #3
 8005390:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	02db      	lsls	r3, r3, #11
 800539a:	4313      	orrs	r3, r2
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
 80053a2:	e032      	b.n	800540a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d117      	bne.n	80053dc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	0fdb      	lsrs	r3, r3, #31
 80053b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	0cdb      	lsrs	r3, r3, #19
 80053b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	0adb      	lsrs	r3, r3, #11
 80053bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	08db      	lsrs	r3, r3, #3
 80053c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	029b      	lsls	r3, r3, #10
 80053cc:	431a      	orrs	r2, r3
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	03db      	lsls	r3, r3, #15
 80053d2:	4313      	orrs	r3, r2
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
 80053da:	e016      	b.n	800540a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	0f1b      	lsrs	r3, r3, #28
 80053e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	0d1b      	lsrs	r3, r3, #20
 80053e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	0b1b      	lsrs	r3, r3, #12
 80053ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	011a      	lsls	r2, r3, #4
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	431a      	orrs	r2, r3
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	4313      	orrs	r3, r2
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
#endif /*DMA2D_M2M_BLEND_FIXED_COLOR_FG_BG_SUPPORT*/
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005412:	e00d      	b.n	8005430 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800541c:	d104      	bne.n	8005428 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	615a      	str	r2, [r3, #20]
}
 8005426:	e003      	b.n	8005430 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	60da      	str	r2, [r3, #12]
}
 8005430:	bf00      	nop
 8005432:	372c      	adds	r7, #44	; 0x2c
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	019a      	lsls	r2, r3, #6
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	431a      	orrs	r2, r3
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	431a      	orrs	r2, r3
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	431a      	orrs	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800547c:	f7fe fadc 	bl	8003a38 <HAL_GetTick>
 8005480:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005482:	e009      	b.n	8005498 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005484:	f7fe fad8 	bl	8003a38 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005492:	d901      	bls.n	8005498 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e015      	b.n	80054c4 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0ee      	beq.n	8005484 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	019a      	lsls	r2, r3, #6
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	ea42 0103 	orr.w	r1, r2, r3
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	041a      	lsls	r2, r3, #16
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e10b      	b.n	80056f8 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	7c5b      	ldrb	r3, [r3, #17]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fe f848 	bl	8003580 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2203      	movs	r2, #3
 80054f4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800550a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800551e:	f7fe fa8b 	bl	8003a38 <HAL_GetTick>
 8005522:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005524:	e009      	b.n	800553a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005526:	f7fe fa87 	bl	8003a38 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005534:	d901      	bls.n	800553a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0de      	b.n	80056f8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0ed      	beq.n	8005526 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800555a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800555e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005576:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800557e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80055b2:	2001      	movs	r0, #1
 80055b4:	f7fe fa4c 	bl	8003a50 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80055b8:	f7fe fa3e 	bl	8003a38 <HAL_GetTick>
 80055bc:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80055be:	e009      	b.n	80055d4 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80055c0:	f7fe fa3a 	bl	8003a38 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ce:	d901      	bls.n	80055d4 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e091      	b.n	80056f8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80055dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0ed      	beq.n	80055c0 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0206 	orr.w	r2, r2, #6
 80055f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0203 	bic.w	r2, r2, #3
 8005608:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0203 	bic.w	r2, r2, #3
 8005636:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800565e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6899      	ldr	r1, [r3, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_DSI_Init+0x1b4>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	e000      	b.n	8005682 <HAL_DSI_Init+0x1b6>
 8005680:	2301      	movs	r3, #1
 8005682:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <HAL_DSI_Init+0x234>)
 8005688:	fb03 f202 	mul.w	r2, r3, r2
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	409a      	lsls	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800569e:	fb01 f303 	mul.w	r3, r1, r3
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80056b8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	003d0900 	.word	0x003d0900

08005704 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	7c1b      	ldrb	r3, [r3, #16]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_DSI_ConfigErrorMonitor+0x16>
 8005716:	2302      	movs	r3, #2
 8005718:	e0ab      	b.n	8005872 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2200      	movs	r2, #0
 8005726:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8005754:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8005758:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8005776:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d009      	beq.n	8005798 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0202 	orr.w	r2, r2, #2
 80057b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 020c 	orr.w	r2, r2, #12
 80057d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0210 	orr.w	r2, r2, #16
 80057ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0220 	orr.w	r2, r2, #32
 800580c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800582a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d009      	beq.n	800584c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005848:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8005866:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	7c1b      	ldrb	r3, [r3, #16]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_DSI_SetGenericVCID+0x16>
 8005890:	2302      	movs	r3, #2
 8005892:	e016      	b.n	80058c2 <HAL_DSI_SetGenericVCID+0x44>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0203 	bic.w	r2, r2, #3
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	7c1b      	ldrb	r3, [r3, #16]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_DSI_ConfigVideoMode+0x16>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e1f6      	b.n	8005cd2 <HAL_DSI_ConfigVideoMode+0x404>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0201 	bic.w	r2, r2, #1
 80058f8:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0203 	bic.w	r2, r2, #3
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800593e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005942:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005964:	f023 031f 	bic.w	r3, r3, #31
 8005968:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	695a      	ldr	r2, [r3, #20]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800598a:	f023 031f 	bic.w	r3, r3, #31
 800598e:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0203 	bic.w	r2, r2, #3
 80059b0:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68d9      	ldr	r1, [r3, #12]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695a      	ldr	r2, [r3, #20]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0207 	bic.w	r2, r2, #7
 80059d2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6959      	ldr	r1, [r3, #20]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 020f 	bic.w	r2, r2, #15
 8005a00:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6919      	ldr	r1, [r3, #16]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 020e 	bic.w	r2, r2, #14
 8005a24:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	005a      	lsls	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d110      	bne.n	8005a6a <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a56:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6919      	ldr	r1, [r3, #16]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005a78:	f023 030f 	bic.w	r3, r3, #15
 8005a7c:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005a9e:	f023 030f 	bic.w	r3, r3, #15
 8005aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ac8:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b10:	f023 0303 	bic.w	r3, r3, #3
 8005b14:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b60:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699a      	ldr	r2, [r3, #24]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8005ba4:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6999      	ldr	r1, [r3, #24]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb0:	041a      	lsls	r2, r3, #16
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bc8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6999      	ldr	r1, [r3, #24]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	7c1b      	ldrb	r3, [r3, #16]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_DSI_ConfigPhyTimer+0x16>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e058      	b.n	8005da6 <HAL_DSI_ConfigPhyTimer+0xc8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4293      	cmp	r3, r2
 8005d04:	bf38      	it	cc
 8005d06:	4613      	movcc	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8005d1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	041a      	lsls	r2, r3, #16
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005d48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005d82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	021a      	lsls	r2, r3, #8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7c1b      	ldrb	r3, [r3, #16]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_DSI_ConfigHostTimeouts+0x16>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e0b4      	b.n	8005f32 <HAL_DSI_ConfigHostTimeouts+0x180>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005ddc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6899      	ldr	r1, [r3, #8]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021a      	lsls	r2, r3, #8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	b292      	uxth	r2, r2
 8005dfe:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	041a      	lsls	r2, r3, #16
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	041b      	lsls	r3, r3, #16
 8005e92:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	699a      	ldr	r2, [r3, #24]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	041b      	lsls	r3, r3, #16
 8005ee6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	69da      	ldr	r2, [r3, #28]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	7c1b      	ldrb	r3, [r3, #16]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_DSI_Start+0x14>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e02b      	b.n	8005faa <HAL_DSI_Start+0x6c>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0208 	orr.w	r2, r2, #8
 8005f8e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b088      	sub	sp, #32
 8005fba:	af02      	add	r7, sp, #8
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	7c1b      	ldrb	r3, [r3, #16]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_DSI_ShortWrite+0x1a>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e010      	b.n	8005ff2 <HAL_DSI_ShortWrite+0x3c>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff fa44 	bl	800546e <DSI_ShortWrite>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	741a      	strb	r2, [r3, #16]

  return status;
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b08c      	sub	sp, #48	; 0x30
 8005ffe:	af02      	add	r7, sp, #8
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	7c1b      	ldrb	r3, [r3, #16]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_DSI_LongWrite+0x1e>
 8006014:	2302      	movs	r3, #2
 8006016:	e084      	b.n	8006122 <HAL_DSI_LongWrite+0x128>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800601e:	f7fd fd0b 	bl	8003a38 <HAL_GetTick>
 8006022:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006024:	e00c      	b.n	8006040 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006026:	f7fd fd07 	bl	8003a38 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006034:	d904      	bls.n	8006040 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e070      	b.n	8006122 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0eb      	beq.n	8006026 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b03      	cmp	r3, #3
 8006056:	bf28      	it	cs
 8006058:	2303      	movcs	r3, #3
 800605a:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800605c:	2300      	movs	r3, #0
 800605e:	623b      	str	r3, [r7, #32]
 8006060:	e00f      	b.n	8006082 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	4413      	add	r3, r2
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	3301      	adds	r3, #1
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	4313      	orrs	r3, r2
 800607a:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	3301      	adds	r3, #1
 8006080:	623b      	str	r3, [r7, #32]
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	429a      	cmp	r2, r3
 8006088:	d3eb      	bcc.n	8006062 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80060a2:	e028      	b.n	80060f6 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	bf28      	it	cs
 80060aa:	2304      	movcs	r3, #4
 80060ac:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80060b2:	2300      	movs	r3, #0
 80060b4:	623b      	str	r3, [r7, #32]
 80060b6:	e00e      	b.n	80060d6 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	4413      	add	r3, r2
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	3301      	adds	r3, #1
 80060d4:	623b      	str	r3, [r7, #32]
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d3ec      	bcc.n	80060b8 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80060e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1d3      	bne.n	80060a4 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8006104:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800610c:	b2db      	uxtb	r3, r3
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	f7ff f991 	bl	800543c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3728      	adds	r7, #40	; 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	7c1b      	ldrb	r3, [r3, #16]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800613c:	2302      	movs	r3, #2
 800613e:	e01b      	b.n	8006178 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8006156:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	065a      	lsls	r2, r3, #25
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006192:	e166      	b.n	8006462 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	2101      	movs	r1, #1
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	4013      	ands	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8158 	beq.w	800645c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d005      	beq.n	80061c4 <HAL_GPIO_Init+0x40>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d130      	bne.n	8006226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	2203      	movs	r2, #3
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4013      	ands	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061fa:	2201      	movs	r2, #1
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4013      	ands	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	091b      	lsrs	r3, r3, #4
 8006210:	f003 0201 	and.w	r2, r3, #1
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b03      	cmp	r3, #3
 8006230:	d017      	beq.n	8006262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	2203      	movs	r2, #3
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d123      	bne.n	80062b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	08da      	lsrs	r2, r3, #3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3208      	adds	r2, #8
 8006276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	220f      	movs	r2, #15
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43db      	mvns	r3, r3
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4013      	ands	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	08da      	lsrs	r2, r3, #3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3208      	adds	r2, #8
 80062b0:	6939      	ldr	r1, [r7, #16]
 80062b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	2203      	movs	r2, #3
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43db      	mvns	r3, r3
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4013      	ands	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f003 0203 	and.w	r2, r3, #3
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80b2 	beq.w	800645c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062f8:	4b61      	ldr	r3, [pc, #388]	; (8006480 <HAL_GPIO_Init+0x2fc>)
 80062fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fc:	4a60      	ldr	r2, [pc, #384]	; (8006480 <HAL_GPIO_Init+0x2fc>)
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	6613      	str	r3, [r2, #96]	; 0x60
 8006304:	4b5e      	ldr	r3, [pc, #376]	; (8006480 <HAL_GPIO_Init+0x2fc>)
 8006306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006310:	4a5c      	ldr	r2, [pc, #368]	; (8006484 <HAL_GPIO_Init+0x300>)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	089b      	lsrs	r3, r3, #2
 8006316:	3302      	adds	r3, #2
 8006318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800631c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	220f      	movs	r2, #15
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	43db      	mvns	r3, r3
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4013      	ands	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800633a:	d02b      	beq.n	8006394 <HAL_GPIO_Init+0x210>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a52      	ldr	r2, [pc, #328]	; (8006488 <HAL_GPIO_Init+0x304>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d025      	beq.n	8006390 <HAL_GPIO_Init+0x20c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a51      	ldr	r2, [pc, #324]	; (800648c <HAL_GPIO_Init+0x308>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d01f      	beq.n	800638c <HAL_GPIO_Init+0x208>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a50      	ldr	r2, [pc, #320]	; (8006490 <HAL_GPIO_Init+0x30c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d019      	beq.n	8006388 <HAL_GPIO_Init+0x204>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a4f      	ldr	r2, [pc, #316]	; (8006494 <HAL_GPIO_Init+0x310>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d013      	beq.n	8006384 <HAL_GPIO_Init+0x200>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a4e      	ldr	r2, [pc, #312]	; (8006498 <HAL_GPIO_Init+0x314>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00d      	beq.n	8006380 <HAL_GPIO_Init+0x1fc>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a4d      	ldr	r2, [pc, #308]	; (800649c <HAL_GPIO_Init+0x318>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d007      	beq.n	800637c <HAL_GPIO_Init+0x1f8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a4c      	ldr	r2, [pc, #304]	; (80064a0 <HAL_GPIO_Init+0x31c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d101      	bne.n	8006378 <HAL_GPIO_Init+0x1f4>
 8006374:	2307      	movs	r3, #7
 8006376:	e00e      	b.n	8006396 <HAL_GPIO_Init+0x212>
 8006378:	2308      	movs	r3, #8
 800637a:	e00c      	b.n	8006396 <HAL_GPIO_Init+0x212>
 800637c:	2306      	movs	r3, #6
 800637e:	e00a      	b.n	8006396 <HAL_GPIO_Init+0x212>
 8006380:	2305      	movs	r3, #5
 8006382:	e008      	b.n	8006396 <HAL_GPIO_Init+0x212>
 8006384:	2304      	movs	r3, #4
 8006386:	e006      	b.n	8006396 <HAL_GPIO_Init+0x212>
 8006388:	2303      	movs	r3, #3
 800638a:	e004      	b.n	8006396 <HAL_GPIO_Init+0x212>
 800638c:	2302      	movs	r3, #2
 800638e:	e002      	b.n	8006396 <HAL_GPIO_Init+0x212>
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <HAL_GPIO_Init+0x212>
 8006394:	2300      	movs	r3, #0
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	f002 0203 	and.w	r2, r2, #3
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	4093      	lsls	r3, r2
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80063a6:	4937      	ldr	r1, [pc, #220]	; (8006484 <HAL_GPIO_Init+0x300>)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	089b      	lsrs	r3, r3, #2
 80063ac:	3302      	adds	r3, #2
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063b4:	4b3b      	ldr	r3, [pc, #236]	; (80064a4 <HAL_GPIO_Init+0x320>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	43db      	mvns	r3, r3
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4013      	ands	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063d8:	4a32      	ldr	r2, [pc, #200]	; (80064a4 <HAL_GPIO_Init+0x320>)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063de:	4b31      	ldr	r3, [pc, #196]	; (80064a4 <HAL_GPIO_Init+0x320>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	43db      	mvns	r3, r3
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	4013      	ands	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006402:	4a28      	ldr	r2, [pc, #160]	; (80064a4 <HAL_GPIO_Init+0x320>)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006408:	4b26      	ldr	r3, [pc, #152]	; (80064a4 <HAL_GPIO_Init+0x320>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	43db      	mvns	r3, r3
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4013      	ands	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800642c:	4a1d      	ldr	r2, [pc, #116]	; (80064a4 <HAL_GPIO_Init+0x320>)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006432:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <HAL_GPIO_Init+0x320>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	43db      	mvns	r3, r3
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4013      	ands	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006456:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <HAL_GPIO_Init+0x320>)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	3301      	adds	r3, #1
 8006460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	fa22 f303 	lsr.w	r3, r2, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	f47f ae91 	bne.w	8006194 <HAL_GPIO_Init+0x10>
  }
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40021000 	.word	0x40021000
 8006484:	40010000 	.word	0x40010000
 8006488:	48000400 	.word	0x48000400
 800648c:	48000800 	.word	0x48000800
 8006490:	48000c00 	.word	0x48000c00
 8006494:	48001000 	.word	0x48001000
 8006498:	48001400 	.word	0x48001400
 800649c:	48001800 	.word	0x48001800
 80064a0:	48001c00 	.word	0x48001c00
 80064a4:	40010400 	.word	0x40010400

080064a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	807b      	strh	r3, [r7, #2]
 80064b4:	4613      	mov	r3, r2
 80064b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064b8:	787b      	ldrb	r3, [r7, #1]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064be:	887a      	ldrh	r2, [r7, #2]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064c4:	e002      	b.n	80064cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064c6:	887a      	ldrh	r2, [r7, #2]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d006      	beq.n	80064fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064ee:	4a05      	ldr	r2, [pc, #20]	; (8006504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064f0:	88fb      	ldrh	r3, [r7, #6]
 80064f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fc ff32 	bl	8003360 <HAL_GPIO_EXTI_Callback>
  }
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40010400 	.word	0x40010400

08006508 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e0bf      	b.n	800669a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fd f85a 	bl	80035e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800654a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6999      	ldr	r1, [r3, #24]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006560:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6899      	ldr	r1, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b4a      	ldr	r3, [pc, #296]	; (80066a4 <HAL_LTDC_Init+0x19c>)
 800657c:	400b      	ands	r3, r1
 800657e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	041b      	lsls	r3, r3, #16
 8006586:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6899      	ldr	r1, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68d9      	ldr	r1, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	4b3e      	ldr	r3, [pc, #248]	; (80066a4 <HAL_LTDC_Init+0x19c>)
 80065aa:	400b      	ands	r3, r1
 80065ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68d9      	ldr	r1, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6919      	ldr	r1, [r3, #16]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4b33      	ldr	r3, [pc, #204]	; (80066a4 <HAL_LTDC_Init+0x19c>)
 80065d8:	400b      	ands	r3, r1
 80065da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	041b      	lsls	r3, r3, #16
 80065e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6919      	ldr	r1, [r3, #16]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6959      	ldr	r1, [r3, #20]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <HAL_LTDC_Init+0x19c>)
 8006606:	400b      	ands	r3, r1
 8006608:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6959      	ldr	r1, [r3, #20]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006638:	041b      	lsls	r3, r3, #16
 800663a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800664a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0206 	orr.w	r2, r2, #6
 8006676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	f000f800 	.word	0xf000f800

080066a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80066a8:	b5b0      	push	{r4, r5, r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_LTDC_ConfigLayer+0x1a>
 80066be:	2302      	movs	r3, #2
 80066c0:	e02c      	b.n	800671c <HAL_LTDC_ConfigLayer+0x74>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2202      	movs	r2, #2
 80066ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2134      	movs	r1, #52	; 0x34
 80066d8:	fb01 f303 	mul.w	r3, r1, r3
 80066dc:	4413      	add	r3, r2
 80066de:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4614      	mov	r4, r2
 80066e6:	461d      	mov	r5, r3
 80066e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f811 	bl	8006724 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bdb0      	pop	{r4, r5, r7, pc}

08006724 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006724:	b480      	push	{r7}
 8006726:	b089      	sub	sp, #36	; 0x24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006740:	4413      	add	r3, r2
 8006742:	041b      	lsls	r3, r3, #16
 8006744:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	01db      	lsls	r3, r3, #7
 8006750:	4413      	add	r3, r2
 8006752:	3384      	adds	r3, #132	; 0x84
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	6812      	ldr	r2, [r2, #0]
 800675a:	4611      	mov	r1, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	01d2      	lsls	r2, r2, #7
 8006760:	440a      	add	r2, r1
 8006762:	3284      	adds	r2, #132	; 0x84
 8006764:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006768:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800677a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800677c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4619      	mov	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	01db      	lsls	r3, r3, #7
 8006788:	440b      	add	r3, r1
 800678a:	3384      	adds	r3, #132	; 0x84
 800678c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006792:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067a2:	4413      	add	r3, r2
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	01db      	lsls	r3, r3, #7
 80067b2:	4413      	add	r3, r2
 80067b4:	3384      	adds	r3, #132	; 0x84
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	4611      	mov	r1, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	01d2      	lsls	r2, r2, #7
 80067c2:	440a      	add	r2, r1
 80067c4:	3284      	adds	r2, #132	; 0x84
 80067c6:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80067ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067da:	4413      	add	r3, r2
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	01db      	lsls	r3, r3, #7
 80067e8:	440b      	add	r3, r1
 80067ea:	3384      	adds	r3, #132	; 0x84
 80067ec:	4619      	mov	r1, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	01db      	lsls	r3, r3, #7
 80067fe:	4413      	add	r3, r2
 8006800:	3384      	adds	r3, #132	; 0x84
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	4611      	mov	r1, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	01d2      	lsls	r2, r2, #7
 800680e:	440a      	add	r2, r1
 8006810:	3284      	adds	r2, #132	; 0x84
 8006812:	f023 0307 	bic.w	r3, r3, #7
 8006816:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	01db      	lsls	r3, r3, #7
 8006822:	4413      	add	r3, r2
 8006824:	3384      	adds	r3, #132	; 0x84
 8006826:	461a      	mov	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800683e:	041b      	lsls	r3, r3, #16
 8006840:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	061b      	lsls	r3, r3, #24
 8006848:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	01db      	lsls	r3, r3, #7
 8006854:	4413      	add	r3, r2
 8006856:	3384      	adds	r3, #132	; 0x84
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	01db      	lsls	r3, r3, #7
 8006864:	4413      	add	r3, r2
 8006866:	3384      	adds	r3, #132	; 0x84
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006874:	461a      	mov	r2, r3
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	431a      	orrs	r2, r3
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	431a      	orrs	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4619      	mov	r1, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	01db      	lsls	r3, r3, #7
 8006888:	440b      	add	r3, r1
 800688a:	3384      	adds	r3, #132	; 0x84
 800688c:	4619      	mov	r1, r3
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	01db      	lsls	r3, r3, #7
 800689e:	4413      	add	r3, r2
 80068a0:	3384      	adds	r3, #132	; 0x84
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	4611      	mov	r1, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	01d2      	lsls	r2, r2, #7
 80068ae:	440a      	add	r2, r1
 80068b0:	3284      	adds	r2, #132	; 0x84
 80068b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	01db      	lsls	r3, r3, #7
 80068c2:	4413      	add	r3, r2
 80068c4:	3384      	adds	r3, #132	; 0x84
 80068c6:	461a      	mov	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	01db      	lsls	r3, r3, #7
 80068d8:	4413      	add	r3, r2
 80068da:	3384      	adds	r3, #132	; 0x84
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	4611      	mov	r1, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	01d2      	lsls	r2, r2, #7
 80068e8:	440a      	add	r2, r1
 80068ea:	3284      	adds	r2, #132	; 0x84
 80068ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80068f0:	f023 0307 	bic.w	r3, r3, #7
 80068f4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	69da      	ldr	r2, [r3, #28]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	6809      	ldr	r1, [r1, #0]
 8006902:	4608      	mov	r0, r1
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	01c9      	lsls	r1, r1, #7
 8006908:	4401      	add	r1, r0
 800690a:	3184      	adds	r1, #132	; 0x84
 800690c:	4313      	orrs	r3, r2
 800690e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	01db      	lsls	r3, r3, #7
 800691a:	4413      	add	r3, r2
 800691c:	3384      	adds	r3, #132	; 0x84
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	01db      	lsls	r3, r3, #7
 800692a:	4413      	add	r3, r2
 800692c:	3384      	adds	r3, #132	; 0x84
 800692e:	461a      	mov	r2, r3
 8006930:	2300      	movs	r3, #0
 8006932:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	01db      	lsls	r3, r3, #7
 800693e:	4413      	add	r3, r2
 8006940:	3384      	adds	r3, #132	; 0x84
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006952:	2304      	movs	r3, #4
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e01b      	b.n	8006990 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d102      	bne.n	8006966 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006960:	2303      	movs	r3, #3
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	e014      	b.n	8006990 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b04      	cmp	r3, #4
 800696c:	d00b      	beq.n	8006986 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006972:	2b02      	cmp	r3, #2
 8006974:	d007      	beq.n	8006986 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800697a:	2b03      	cmp	r3, #3
 800697c:	d003      	beq.n	8006986 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006982:	2b07      	cmp	r3, #7
 8006984:	d102      	bne.n	800698c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006986:	2302      	movs	r3, #2
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	e001      	b.n	8006990 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800698c:	2301      	movs	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	01db      	lsls	r3, r3, #7
 800699a:	4413      	add	r3, r2
 800699c:	3384      	adds	r3, #132	; 0x84
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	4611      	mov	r1, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	01d2      	lsls	r2, r2, #7
 80069aa:	440a      	add	r2, r1
 80069ac:	3284      	adds	r2, #132	; 0x84
 80069ae:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80069b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
 80069be:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6859      	ldr	r1, [r3, #4]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	1acb      	subs	r3, r1, r3
 80069ca:	69f9      	ldr	r1, [r7, #28]
 80069cc:	fb01 f303 	mul.w	r3, r1, r3
 80069d0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	6809      	ldr	r1, [r1, #0]
 80069d6:	4608      	mov	r0, r1
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	01c9      	lsls	r1, r1, #7
 80069dc:	4401      	add	r1, r0
 80069de:	3184      	adds	r1, #132	; 0x84
 80069e0:	4313      	orrs	r3, r2
 80069e2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	01db      	lsls	r3, r3, #7
 80069ee:	4413      	add	r3, r2
 80069f0:	3384      	adds	r3, #132	; 0x84
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	6812      	ldr	r2, [r2, #0]
 80069f8:	4611      	mov	r1, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	01d2      	lsls	r2, r2, #7
 80069fe:	440a      	add	r2, r1
 8006a00:	3284      	adds	r2, #132	; 0x84
 8006a02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a06:	f023 0307 	bic.w	r3, r3, #7
 8006a0a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	01db      	lsls	r3, r3, #7
 8006a16:	4413      	add	r3, r2
 8006a18:	3384      	adds	r3, #132	; 0x84
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	01db      	lsls	r3, r3, #7
 8006a2c:	4413      	add	r3, r2
 8006a2e:	3384      	adds	r3, #132	; 0x84
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	4611      	mov	r1, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	01d2      	lsls	r2, r2, #7
 8006a3c:	440a      	add	r2, r1
 8006a3e:	3284      	adds	r2, #132	; 0x84
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	6013      	str	r3, [r2, #0]
}
 8006a46:	bf00      	nop
 8006a48:	3724      	adds	r7, #36	; 0x24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a58:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a64:	d102      	bne.n	8006a6c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a6a:	e00b      	b.n	8006a84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006a6c:	4b08      	ldr	r3, [pc, #32]	; (8006a90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7a:	d102      	bne.n	8006a82 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a80:	e000      	b.n	8006a84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006a82:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40007000 	.word	0x40007000

08006a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d141      	bne.n	8006b26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006aa2:	4b4b      	ldr	r3, [pc, #300]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aae:	d131      	bne.n	8006b14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ab0:	4b47      	ldr	r3, [pc, #284]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab6:	4a46      	ldr	r2, [pc, #280]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006abc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ac0:	4b43      	ldr	r3, [pc, #268]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ac8:	4a41      	ldr	r2, [pc, #260]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ace:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006ad0:	4b40      	ldr	r3, [pc, #256]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2232      	movs	r2, #50	; 0x32
 8006ad6:	fb02 f303 	mul.w	r3, r2, r3
 8006ada:	4a3f      	ldr	r2, [pc, #252]	; (8006bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006adc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae0:	0c9b      	lsrs	r3, r3, #18
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ae6:	e002      	b.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006aee:	4b38      	ldr	r3, [pc, #224]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afa:	d102      	bne.n	8006b02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f2      	bne.n	8006ae8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b02:	4b33      	ldr	r3, [pc, #204]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0e:	d158      	bne.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e057      	b.n	8006bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b14:	4b2e      	ldr	r3, [pc, #184]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b1a:	4a2d      	ldr	r2, [pc, #180]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006b24:	e04d      	b.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2c:	d141      	bne.n	8006bb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b2e:	4b28      	ldr	r3, [pc, #160]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3a:	d131      	bne.n	8006ba0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b3c:	4b24      	ldr	r3, [pc, #144]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b42:	4a23      	ldr	r2, [pc, #140]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b4c:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b54:	4a1e      	ldr	r2, [pc, #120]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006b5c:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2232      	movs	r2, #50	; 0x32
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b68:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6c:	0c9b      	lsrs	r3, r3, #18
 8006b6e:	3301      	adds	r3, #1
 8006b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b72:	e002      	b.n	8006b7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b7a:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b86:	d102      	bne.n	8006b8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f2      	bne.n	8006b74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b8e:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b9a:	d112      	bne.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e011      	b.n	8006bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba6:	4a0a      	ldr	r2, [pc, #40]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006bb0:	e007      	b.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006bb2:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006bba:	4a05      	ldr	r2, [pc, #20]	; (8006bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bc0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	40007000 	.word	0x40007000
 8006bd4:	20000020 	.word	0x20000020
 8006bd8:	431bde83 	.word	0x431bde83

08006bdc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4a04      	ldr	r2, [pc, #16]	; (8006bf8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bea:	6053      	str	r3, [r2, #4]
}
 8006bec:	bf00      	nop
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40007000 	.word	0x40007000

08006bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f000 bc08 	b.w	8007420 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c10:	4b96      	ldr	r3, [pc, #600]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 030c 	and.w	r3, r3, #12
 8006c18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c1a:	4b94      	ldr	r3, [pc, #592]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0310 	and.w	r3, r3, #16
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80e4 	beq.w	8006dfa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <HAL_RCC_OscConfig+0x4c>
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	2b0c      	cmp	r3, #12
 8006c3c:	f040 808b 	bne.w	8006d56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	f040 8087 	bne.w	8006d56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c48:	4b88      	ldr	r3, [pc, #544]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <HAL_RCC_OscConfig+0x64>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e3df      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1a      	ldr	r2, [r3, #32]
 8006c64:	4b81      	ldr	r3, [pc, #516]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <HAL_RCC_OscConfig+0x7e>
 8006c70:	4b7e      	ldr	r3, [pc, #504]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c78:	e005      	b.n	8006c86 <HAL_RCC_OscConfig+0x8a>
 8006c7a:	4b7c      	ldr	r3, [pc, #496]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c80:	091b      	lsrs	r3, r3, #4
 8006c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d223      	bcs.n	8006cd2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fdcc 	bl	800782c <RCC_SetFlashLatencyFromMSIRange>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e3c0      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c9e:	4b73      	ldr	r3, [pc, #460]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a72      	ldr	r2, [pc, #456]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006ca4:	f043 0308 	orr.w	r3, r3, #8
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	4b70      	ldr	r3, [pc, #448]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	496d      	ldr	r1, [pc, #436]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cbc:	4b6b      	ldr	r3, [pc, #428]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	4968      	ldr	r1, [pc, #416]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	604b      	str	r3, [r1, #4]
 8006cd0:	e025      	b.n	8006d1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cd2:	4b66      	ldr	r3, [pc, #408]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a65      	ldr	r2, [pc, #404]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006cd8:	f043 0308 	orr.w	r3, r3, #8
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	4b63      	ldr	r3, [pc, #396]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	4960      	ldr	r1, [pc, #384]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cf0:	4b5e      	ldr	r3, [pc, #376]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	495b      	ldr	r1, [pc, #364]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fd8c 	bl	800782c <RCC_SetFlashLatencyFromMSIRange>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e380      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d1e:	f000 fcc1 	bl	80076a4 <HAL_RCC_GetSysClockFreq>
 8006d22:	4602      	mov	r2, r0
 8006d24:	4b51      	ldr	r3, [pc, #324]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	4950      	ldr	r1, [pc, #320]	; (8006e70 <HAL_RCC_OscConfig+0x274>)
 8006d30:	5ccb      	ldrb	r3, [r1, r3]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3a:	4a4e      	ldr	r2, [pc, #312]	; (8006e74 <HAL_RCC_OscConfig+0x278>)
 8006d3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006d3e:	4b4e      	ldr	r3, [pc, #312]	; (8006e78 <HAL_RCC_OscConfig+0x27c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fc fe28 	bl	8003998 <HAL_InitTick>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d052      	beq.n	8006df8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	e364      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d032      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006d5e:	4b43      	ldr	r3, [pc, #268]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a42      	ldr	r2, [pc, #264]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006d64:	f043 0301 	orr.w	r3, r3, #1
 8006d68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d6a:	f7fc fe65 	bl	8003a38 <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d72:	f7fc fe61 	bl	8003a38 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e34d      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d84:	4b39      	ldr	r3, [pc, #228]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f0      	beq.n	8006d72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d90:	4b36      	ldr	r3, [pc, #216]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a35      	ldr	r2, [pc, #212]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006d96:	f043 0308 	orr.w	r3, r3, #8
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	4b33      	ldr	r3, [pc, #204]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	4930      	ldr	r1, [pc, #192]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006dae:	4b2f      	ldr	r3, [pc, #188]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	021b      	lsls	r3, r3, #8
 8006dbc:	492b      	ldr	r1, [pc, #172]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	604b      	str	r3, [r1, #4]
 8006dc2:	e01a      	b.n	8006dfa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006dc4:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a28      	ldr	r2, [pc, #160]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006dd0:	f7fc fe32 	bl	8003a38 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006dd8:	f7fc fe2e 	bl	8003a38 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e31a      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006dea:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f0      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x1dc>
 8006df6:	e000      	b.n	8006dfa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006df8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d073      	beq.n	8006eee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d005      	beq.n	8006e18 <HAL_RCC_OscConfig+0x21c>
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b0c      	cmp	r3, #12
 8006e10:	d10e      	bne.n	8006e30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d10b      	bne.n	8006e30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e18:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d063      	beq.n	8006eec <HAL_RCC_OscConfig+0x2f0>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d15f      	bne.n	8006eec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e2f7      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e38:	d106      	bne.n	8006e48 <HAL_RCC_OscConfig+0x24c>
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a0b      	ldr	r2, [pc, #44]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	e025      	b.n	8006e94 <HAL_RCC_OscConfig+0x298>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e50:	d114      	bne.n	8006e7c <HAL_RCC_OscConfig+0x280>
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a05      	ldr	r2, [pc, #20]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a02      	ldr	r2, [pc, #8]	; (8006e6c <HAL_RCC_OscConfig+0x270>)
 8006e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	e013      	b.n	8006e94 <HAL_RCC_OscConfig+0x298>
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	0800a98c 	.word	0x0800a98c
 8006e74:	20000020 	.word	0x20000020
 8006e78:	20000024 	.word	0x20000024
 8006e7c:	4ba0      	ldr	r3, [pc, #640]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a9f      	ldr	r2, [pc, #636]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	4b9d      	ldr	r3, [pc, #628]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a9c      	ldr	r2, [pc, #624]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d013      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9c:	f7fc fdcc 	bl	8003a38 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea4:	f7fc fdc8 	bl	8003a38 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b64      	cmp	r3, #100	; 0x64
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e2b4      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eb6:	4b92      	ldr	r3, [pc, #584]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f0      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x2a8>
 8006ec2:	e014      	b.n	8006eee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec4:	f7fc fdb8 	bl	8003a38 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ecc:	f7fc fdb4 	bl	8003a38 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b64      	cmp	r3, #100	; 0x64
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e2a0      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ede:	4b88      	ldr	r3, [pc, #544]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f0      	bne.n	8006ecc <HAL_RCC_OscConfig+0x2d0>
 8006eea:	e000      	b.n	8006eee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d060      	beq.n	8006fbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d005      	beq.n	8006f0c <HAL_RCC_OscConfig+0x310>
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b0c      	cmp	r3, #12
 8006f04:	d119      	bne.n	8006f3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d116      	bne.n	8006f3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f0c:	4b7c      	ldr	r3, [pc, #496]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCC_OscConfig+0x328>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e27d      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f24:	4b76      	ldr	r3, [pc, #472]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	4973      	ldr	r1, [pc, #460]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f38:	e040      	b.n	8006fbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d023      	beq.n	8006f8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f42:	4b6f      	ldr	r3, [pc, #444]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a6e      	ldr	r2, [pc, #440]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4e:	f7fc fd73 	bl	8003a38 <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f54:	e008      	b.n	8006f68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f56:	f7fc fd6f 	bl	8003a38 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e25b      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f68:	4b65      	ldr	r3, [pc, #404]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0f0      	beq.n	8006f56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f74:	4b62      	ldr	r3, [pc, #392]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	061b      	lsls	r3, r3, #24
 8006f82:	495f      	ldr	r1, [pc, #380]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	604b      	str	r3, [r1, #4]
 8006f88:	e018      	b.n	8006fbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f8a:	4b5d      	ldr	r3, [pc, #372]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a5c      	ldr	r2, [pc, #368]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f96:	f7fc fd4f 	bl	8003a38 <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f9e:	f7fc fd4b 	bl	8003a38 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e237      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fb0:	4b53      	ldr	r3, [pc, #332]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f0      	bne.n	8006f9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d03c      	beq.n	8007042 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01c      	beq.n	800700a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fd0:	4b4b      	ldr	r3, [pc, #300]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd6:	4a4a      	ldr	r2, [pc, #296]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe0:	f7fc fd2a 	bl	8003a38 <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fe8:	f7fc fd26 	bl	8003a38 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e212      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ffa:	4b41      	ldr	r3, [pc, #260]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8006ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0ef      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x3ec>
 8007008:	e01b      	b.n	8007042 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800700a:	4b3d      	ldr	r3, [pc, #244]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 800700c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007010:	4a3b      	ldr	r2, [pc, #236]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8007012:	f023 0301 	bic.w	r3, r3, #1
 8007016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701a:	f7fc fd0d 	bl	8003a38 <HAL_GetTick>
 800701e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007020:	e008      	b.n	8007034 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007022:	f7fc fd09 	bl	8003a38 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e1f5      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007034:	4b32      	ldr	r3, [pc, #200]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8007036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1ef      	bne.n	8007022 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 80a6 	beq.w	800719c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007050:	2300      	movs	r3, #0
 8007052:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007054:	4b2a      	ldr	r3, [pc, #168]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8007056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10d      	bne.n	800707c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007060:	4b27      	ldr	r3, [pc, #156]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8007062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007064:	4a26      	ldr	r2, [pc, #152]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 8007066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800706a:	6593      	str	r3, [r2, #88]	; 0x58
 800706c:	4b24      	ldr	r3, [pc, #144]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 800706e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007078:	2301      	movs	r3, #1
 800707a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800707c:	4b21      	ldr	r3, [pc, #132]	; (8007104 <HAL_RCC_OscConfig+0x508>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007084:	2b00      	cmp	r3, #0
 8007086:	d118      	bne.n	80070ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007088:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <HAL_RCC_OscConfig+0x508>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <HAL_RCC_OscConfig+0x508>)
 800708e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007094:	f7fc fcd0 	bl	8003a38 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800709c:	f7fc fccc 	bl	8003a38 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e1b8      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070ae:	4b15      	ldr	r3, [pc, #84]	; (8007104 <HAL_RCC_OscConfig+0x508>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d108      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4d8>
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 80070c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c8:	4a0d      	ldr	r2, [pc, #52]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070d2:	e029      	b.n	8007128 <HAL_RCC_OscConfig+0x52c>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	2b05      	cmp	r3, #5
 80070da:	d115      	bne.n	8007108 <HAL_RCC_OscConfig+0x50c>
 80070dc:	4b08      	ldr	r3, [pc, #32]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e2:	4a07      	ldr	r2, [pc, #28]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 80070e4:	f043 0304 	orr.w	r3, r3, #4
 80070e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f2:	4a03      	ldr	r2, [pc, #12]	; (8007100 <HAL_RCC_OscConfig+0x504>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070fc:	e014      	b.n	8007128 <HAL_RCC_OscConfig+0x52c>
 80070fe:	bf00      	nop
 8007100:	40021000 	.word	0x40021000
 8007104:	40007000 	.word	0x40007000
 8007108:	4b9d      	ldr	r3, [pc, #628]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710e:	4a9c      	ldr	r2, [pc, #624]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007118:	4b99      	ldr	r3, [pc, #612]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711e:	4a98      	ldr	r2, [pc, #608]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007120:	f023 0304 	bic.w	r3, r3, #4
 8007124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d016      	beq.n	800715e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007130:	f7fc fc82 	bl	8003a38 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007136:	e00a      	b.n	800714e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007138:	f7fc fc7e 	bl	8003a38 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	; 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e168      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800714e:	4b8c      	ldr	r3, [pc, #560]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0ed      	beq.n	8007138 <HAL_RCC_OscConfig+0x53c>
 800715c:	e015      	b.n	800718a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715e:	f7fc fc6b 	bl	8003a38 <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007164:	e00a      	b.n	800717c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007166:	f7fc fc67 	bl	8003a38 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f241 3288 	movw	r2, #5000	; 0x1388
 8007174:	4293      	cmp	r3, r2
 8007176:	d901      	bls.n	800717c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e151      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800717c:	4b80      	ldr	r3, [pc, #512]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1ed      	bne.n	8007166 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800718a:	7ffb      	ldrb	r3, [r7, #31]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d105      	bne.n	800719c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007190:	4b7b      	ldr	r3, [pc, #492]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	4a7a      	ldr	r2, [pc, #488]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d03c      	beq.n	8007222 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01c      	beq.n	80071ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071b0:	4b73      	ldr	r3, [pc, #460]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80071b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071b6:	4a72      	ldr	r2, [pc, #456]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80071b8:	f043 0301 	orr.w	r3, r3, #1
 80071bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c0:	f7fc fc3a 	bl	8003a38 <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071c8:	f7fc fc36 	bl	8003a38 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e122      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071da:	4b69      	ldr	r3, [pc, #420]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80071dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ef      	beq.n	80071c8 <HAL_RCC_OscConfig+0x5cc>
 80071e8:	e01b      	b.n	8007222 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071ea:	4b65      	ldr	r3, [pc, #404]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80071ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071f0:	4a63      	ldr	r2, [pc, #396]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80071f2:	f023 0301 	bic.w	r3, r3, #1
 80071f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fa:	f7fc fc1d 	bl	8003a38 <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007200:	e008      	b.n	8007214 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007202:	f7fc fc19 	bl	8003a38 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e105      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007214:	4b5a      	ldr	r3, [pc, #360]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007216:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1ef      	bne.n	8007202 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80f9 	beq.w	800741e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	2b02      	cmp	r3, #2
 8007232:	f040 80cf 	bne.w	80073d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007236:	4b52      	ldr	r3, [pc, #328]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f003 0203 	and.w	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	429a      	cmp	r2, r3
 8007248:	d12c      	bne.n	80072a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	3b01      	subs	r3, #1
 8007256:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007258:	429a      	cmp	r2, r3
 800725a:	d123      	bne.n	80072a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007266:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007268:	429a      	cmp	r2, r3
 800726a:	d11b      	bne.n	80072a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007278:	429a      	cmp	r2, r3
 800727a:	d113      	bne.n	80072a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	3b01      	subs	r3, #1
 800728a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800728c:	429a      	cmp	r2, r3
 800728e:	d109      	bne.n	80072a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	3b01      	subs	r3, #1
 800729e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d071      	beq.n	8007388 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b0c      	cmp	r3, #12
 80072a8:	d068      	beq.n	800737c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80072aa:	4b35      	ldr	r3, [pc, #212]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d105      	bne.n	80072c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80072b6:	4b32      	ldr	r3, [pc, #200]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e0ac      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80072c6:	4b2e      	ldr	r3, [pc, #184]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a2d      	ldr	r2, [pc, #180]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80072cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80072d2:	f7fc fbb1 	bl	8003a38 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072d8:	e008      	b.n	80072ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072da:	f7fc fbad 	bl	8003a38 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e099      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072ec:	4b24      	ldr	r3, [pc, #144]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1f0      	bne.n	80072da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072f8:	4b21      	ldr	r3, [pc, #132]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	4b21      	ldr	r3, [pc, #132]	; (8007384 <HAL_RCC_OscConfig+0x788>)
 80072fe:	4013      	ands	r3, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007308:	3a01      	subs	r2, #1
 800730a:	0112      	lsls	r2, r2, #4
 800730c:	4311      	orrs	r1, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007312:	0212      	lsls	r2, r2, #8
 8007314:	4311      	orrs	r1, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800731a:	0852      	lsrs	r2, r2, #1
 800731c:	3a01      	subs	r2, #1
 800731e:	0552      	lsls	r2, r2, #21
 8007320:	4311      	orrs	r1, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007326:	0852      	lsrs	r2, r2, #1
 8007328:	3a01      	subs	r2, #1
 800732a:	0652      	lsls	r2, r2, #25
 800732c:	4311      	orrs	r1, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007332:	06d2      	lsls	r2, r2, #27
 8007334:	430a      	orrs	r2, r1
 8007336:	4912      	ldr	r1, [pc, #72]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007338:	4313      	orrs	r3, r2
 800733a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a0f      	ldr	r2, [pc, #60]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007346:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007348:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	4a0c      	ldr	r2, [pc, #48]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 800734e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007352:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007354:	f7fc fb70 	bl	8003a38 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800735c:	f7fc fb6c 	bl	8003a38 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e058      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800736e:	4b04      	ldr	r3, [pc, #16]	; (8007380 <HAL_RCC_OscConfig+0x784>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0f0      	beq.n	800735c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800737a:	e050      	b.n	800741e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e04f      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
 8007380:	40021000 	.word	0x40021000
 8007384:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007388:	4b27      	ldr	r3, [pc, #156]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d144      	bne.n	800741e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007394:	4b24      	ldr	r3, [pc, #144]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a23      	ldr	r2, [pc, #140]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 800739a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800739e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073a0:	4b21      	ldr	r3, [pc, #132]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	4a20      	ldr	r2, [pc, #128]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 80073a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80073ac:	f7fc fb44 	bl	8003a38 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b4:	f7fc fb40 	bl	8003a38 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e02c      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073c6:	4b18      	ldr	r3, [pc, #96]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f0      	beq.n	80073b4 <HAL_RCC_OscConfig+0x7b8>
 80073d2:	e024      	b.n	800741e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b0c      	cmp	r3, #12
 80073d8:	d01f      	beq.n	800741a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073da:	4b13      	ldr	r3, [pc, #76]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a12      	ldr	r2, [pc, #72]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 80073e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e6:	f7fc fb27 	bl	8003a38 <HAL_GetTick>
 80073ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073ec:	e008      	b.n	8007400 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ee:	f7fc fb23 	bl	8003a38 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e00f      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007400:	4b09      	ldr	r3, [pc, #36]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f0      	bne.n	80073ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800740c:	4b06      	ldr	r3, [pc, #24]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	4905      	ldr	r1, [pc, #20]	; (8007428 <HAL_RCC_OscConfig+0x82c>)
 8007412:	4b06      	ldr	r3, [pc, #24]	; (800742c <HAL_RCC_OscConfig+0x830>)
 8007414:	4013      	ands	r3, r2
 8007416:	60cb      	str	r3, [r1, #12]
 8007418:	e001      	b.n	800741e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3720      	adds	r7, #32
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40021000 	.word	0x40021000
 800742c:	feeefffc 	.word	0xfeeefffc

08007430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e11d      	b.n	8007684 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007448:	4b90      	ldr	r3, [pc, #576]	; (800768c <HAL_RCC_ClockConfig+0x25c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 030f 	and.w	r3, r3, #15
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d910      	bls.n	8007478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007456:	4b8d      	ldr	r3, [pc, #564]	; (800768c <HAL_RCC_ClockConfig+0x25c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f023 020f 	bic.w	r2, r3, #15
 800745e:	498b      	ldr	r1, [pc, #556]	; (800768c <HAL_RCC_ClockConfig+0x25c>)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	4313      	orrs	r3, r2
 8007464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007466:	4b89      	ldr	r3, [pc, #548]	; (800768c <HAL_RCC_ClockConfig+0x25c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	429a      	cmp	r2, r3
 8007472:	d001      	beq.n	8007478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e105      	b.n	8007684 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d010      	beq.n	80074a6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	4b81      	ldr	r3, [pc, #516]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007490:	429a      	cmp	r2, r3
 8007492:	d908      	bls.n	80074a6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007494:	4b7e      	ldr	r3, [pc, #504]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	497b      	ldr	r1, [pc, #492]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d079      	beq.n	80075a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d11e      	bne.n	80074f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074ba:	4b75      	ldr	r3, [pc, #468]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e0dc      	b.n	8007684 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80074ca:	f000 fa09 	bl	80078e0 <RCC_GetSysClockFreqFromPLLSource>
 80074ce:	4603      	mov	r3, r0
 80074d0:	4a70      	ldr	r2, [pc, #448]	; (8007694 <HAL_RCC_ClockConfig+0x264>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d946      	bls.n	8007564 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80074d6:	4b6e      	ldr	r3, [pc, #440]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d140      	bne.n	8007564 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074e2:	4b6b      	ldr	r3, [pc, #428]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ea:	4a69      	ldr	r2, [pc, #420]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80074ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80074f2:	2380      	movs	r3, #128	; 0x80
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	e035      	b.n	8007564 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d107      	bne.n	8007510 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007500:	4b63      	ldr	r3, [pc, #396]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d115      	bne.n	8007538 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e0b9      	b.n	8007684 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d107      	bne.n	8007528 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007518:	4b5d      	ldr	r3, [pc, #372]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d109      	bne.n	8007538 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0ad      	b.n	8007684 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007528:	4b59      	ldr	r3, [pc, #356]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e0a5      	b.n	8007684 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007538:	f000 f8b4 	bl	80076a4 <HAL_RCC_GetSysClockFreq>
 800753c:	4603      	mov	r3, r0
 800753e:	4a55      	ldr	r2, [pc, #340]	; (8007694 <HAL_RCC_ClockConfig+0x264>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d90f      	bls.n	8007564 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007544:	4b52      	ldr	r3, [pc, #328]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007550:	4b4f      	ldr	r3, [pc, #316]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007558:	4a4d      	ldr	r2, [pc, #308]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 800755a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007560:	2380      	movs	r3, #128	; 0x80
 8007562:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007564:	4b4a      	ldr	r3, [pc, #296]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f023 0203 	bic.w	r2, r3, #3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	4947      	ldr	r1, [pc, #284]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007572:	4313      	orrs	r3, r2
 8007574:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007576:	f7fc fa5f 	bl	8003a38 <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800757c:	e00a      	b.n	8007594 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800757e:	f7fc fa5b 	bl	8003a38 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	f241 3288 	movw	r2, #5000	; 0x1388
 800758c:	4293      	cmp	r3, r2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e077      	b.n	8007684 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007594:	4b3e      	ldr	r3, [pc, #248]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 020c 	and.w	r2, r3, #12
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d1eb      	bne.n	800757e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b80      	cmp	r3, #128	; 0x80
 80075aa:	d105      	bne.n	80075b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80075ac:	4b38      	ldr	r3, [pc, #224]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4a37      	ldr	r2, [pc, #220]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80075b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d010      	beq.n	80075e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	4b31      	ldr	r3, [pc, #196]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d208      	bcs.n	80075e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d4:	4b2e      	ldr	r3, [pc, #184]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	492b      	ldr	r1, [pc, #172]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075e6:	4b29      	ldr	r3, [pc, #164]	; (800768c <HAL_RCC_ClockConfig+0x25c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d210      	bcs.n	8007616 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f4:	4b25      	ldr	r3, [pc, #148]	; (800768c <HAL_RCC_ClockConfig+0x25c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f023 020f 	bic.w	r2, r3, #15
 80075fc:	4923      	ldr	r1, [pc, #140]	; (800768c <HAL_RCC_ClockConfig+0x25c>)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	4313      	orrs	r3, r2
 8007602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007604:	4b21      	ldr	r3, [pc, #132]	; (800768c <HAL_RCC_ClockConfig+0x25c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d001      	beq.n	8007616 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e036      	b.n	8007684 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007622:	4b1b      	ldr	r3, [pc, #108]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	4918      	ldr	r1, [pc, #96]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007630:	4313      	orrs	r3, r2
 8007632:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d009      	beq.n	8007654 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007640:	4b13      	ldr	r3, [pc, #76]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	4910      	ldr	r1, [pc, #64]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 8007650:	4313      	orrs	r3, r2
 8007652:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007654:	f000 f826 	bl	80076a4 <HAL_RCC_GetSysClockFreq>
 8007658:	4602      	mov	r2, r0
 800765a:	4b0d      	ldr	r3, [pc, #52]	; (8007690 <HAL_RCC_ClockConfig+0x260>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	091b      	lsrs	r3, r3, #4
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	490c      	ldr	r1, [pc, #48]	; (8007698 <HAL_RCC_ClockConfig+0x268>)
 8007666:	5ccb      	ldrb	r3, [r1, r3]
 8007668:	f003 031f 	and.w	r3, r3, #31
 800766c:	fa22 f303 	lsr.w	r3, r2, r3
 8007670:	4a0a      	ldr	r2, [pc, #40]	; (800769c <HAL_RCC_ClockConfig+0x26c>)
 8007672:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007674:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <HAL_RCC_ClockConfig+0x270>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f7fc f98d 	bl	8003998 <HAL_InitTick>
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]

  return status;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40022000 	.word	0x40022000
 8007690:	40021000 	.word	0x40021000
 8007694:	04c4b400 	.word	0x04c4b400
 8007698:	0800a98c 	.word	0x0800a98c
 800769c:	20000020 	.word	0x20000020
 80076a0:	20000024 	.word	0x20000024

080076a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b089      	sub	sp, #36	; 0x24
 80076a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	2300      	movs	r3, #0
 80076b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076b2:	4b3e      	ldr	r3, [pc, #248]	; (80077ac <HAL_RCC_GetSysClockFreq+0x108>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 030c 	and.w	r3, r3, #12
 80076ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076bc:	4b3b      	ldr	r3, [pc, #236]	; (80077ac <HAL_RCC_GetSysClockFreq+0x108>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x34>
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b0c      	cmp	r3, #12
 80076d0:	d121      	bne.n	8007716 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d11e      	bne.n	8007716 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80076d8:	4b34      	ldr	r3, [pc, #208]	; (80077ac <HAL_RCC_GetSysClockFreq+0x108>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0308 	and.w	r3, r3, #8
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d107      	bne.n	80076f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80076e4:	4b31      	ldr	r3, [pc, #196]	; (80077ac <HAL_RCC_GetSysClockFreq+0x108>)
 80076e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	61fb      	str	r3, [r7, #28]
 80076f2:	e005      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80076f4:	4b2d      	ldr	r3, [pc, #180]	; (80077ac <HAL_RCC_GetSysClockFreq+0x108>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	091b      	lsrs	r3, r3, #4
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007700:	4a2b      	ldr	r2, [pc, #172]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007708:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10d      	bne.n	800772c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007714:	e00a      	b.n	800772c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b04      	cmp	r3, #4
 800771a:	d102      	bne.n	8007722 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800771c:	4b25      	ldr	r3, [pc, #148]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	e004      	b.n	800772c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b08      	cmp	r3, #8
 8007726:	d101      	bne.n	800772c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007728:	4b23      	ldr	r3, [pc, #140]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800772a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2b0c      	cmp	r3, #12
 8007730:	d134      	bne.n	800779c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007732:	4b1e      	ldr	r3, [pc, #120]	; (80077ac <HAL_RCC_GetSysClockFreq+0x108>)
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d003      	beq.n	800774a <HAL_RCC_GetSysClockFreq+0xa6>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d003      	beq.n	8007750 <HAL_RCC_GetSysClockFreq+0xac>
 8007748:	e005      	b.n	8007756 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800774c:	617b      	str	r3, [r7, #20]
      break;
 800774e:	e005      	b.n	800775c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007750:	4b19      	ldr	r3, [pc, #100]	; (80077b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007752:	617b      	str	r3, [r7, #20]
      break;
 8007754:	e002      	b.n	800775c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	617b      	str	r3, [r7, #20]
      break;
 800775a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800775c:	4b13      	ldr	r3, [pc, #76]	; (80077ac <HAL_RCC_GetSysClockFreq+0x108>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	091b      	lsrs	r3, r3, #4
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	3301      	adds	r3, #1
 8007768:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800776a:	4b10      	ldr	r3, [pc, #64]	; (80077ac <HAL_RCC_GetSysClockFreq+0x108>)
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	0a1b      	lsrs	r3, r3, #8
 8007770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	fb03 f202 	mul.w	r2, r3, r2
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007780:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007782:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <HAL_RCC_GetSysClockFreq+0x108>)
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	0e5b      	lsrs	r3, r3, #25
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	3301      	adds	r3, #1
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	fbb2 f3f3 	udiv	r3, r2, r3
 800779a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800779c:	69bb      	ldr	r3, [r7, #24]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3724      	adds	r7, #36	; 0x24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40021000 	.word	0x40021000
 80077b0:	0800a9a4 	.word	0x0800a9a4
 80077b4:	00f42400 	.word	0x00f42400
 80077b8:	007a1200 	.word	0x007a1200

080077bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077c0:	4b03      	ldr	r3, [pc, #12]	; (80077d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80077c2:	681b      	ldr	r3, [r3, #0]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	20000020 	.word	0x20000020

080077d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80077d8:	f7ff fff0 	bl	80077bc <HAL_RCC_GetHCLKFreq>
 80077dc:	4602      	mov	r2, r0
 80077de:	4b06      	ldr	r3, [pc, #24]	; (80077f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	f003 0307 	and.w	r3, r3, #7
 80077e8:	4904      	ldr	r1, [pc, #16]	; (80077fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80077ea:	5ccb      	ldrb	r3, [r1, r3]
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	40021000 	.word	0x40021000
 80077fc:	0800a99c 	.word	0x0800a99c

08007800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007804:	f7ff ffda 	bl	80077bc <HAL_RCC_GetHCLKFreq>
 8007808:	4602      	mov	r2, r0
 800780a:	4b06      	ldr	r3, [pc, #24]	; (8007824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	0adb      	lsrs	r3, r3, #11
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	4904      	ldr	r1, [pc, #16]	; (8007828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007816:	5ccb      	ldrb	r3, [r1, r3]
 8007818:	f003 031f 	and.w	r3, r3, #31
 800781c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007820:	4618      	mov	r0, r3
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40021000 	.word	0x40021000
 8007828:	0800a99c 	.word	0x0800a99c

0800782c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007834:	2300      	movs	r3, #0
 8007836:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007838:	4b27      	ldr	r3, [pc, #156]	; (80078d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800783a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800783c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007844:	f7ff f906 	bl	8006a54 <HAL_PWREx_GetVoltageRange>
 8007848:	6178      	str	r0, [r7, #20]
 800784a:	e014      	b.n	8007876 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800784c:	4b22      	ldr	r3, [pc, #136]	; (80078d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800784e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007850:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007856:	6593      	str	r3, [r2, #88]	; 0x58
 8007858:	4b1f      	ldr	r3, [pc, #124]	; (80078d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800785a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007864:	f7ff f8f6 	bl	8006a54 <HAL_PWREx_GetVoltageRange>
 8007868:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800786a:	4b1b      	ldr	r3, [pc, #108]	; (80078d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800786c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786e:	4a1a      	ldr	r2, [pc, #104]	; (80078d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007874:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787c:	d10b      	bne.n	8007896 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b80      	cmp	r3, #128	; 0x80
 8007882:	d913      	bls.n	80078ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2ba0      	cmp	r3, #160	; 0xa0
 8007888:	d902      	bls.n	8007890 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800788a:	2302      	movs	r3, #2
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	e00d      	b.n	80078ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007890:	2301      	movs	r3, #1
 8007892:	613b      	str	r3, [r7, #16]
 8007894:	e00a      	b.n	80078ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b7f      	cmp	r3, #127	; 0x7f
 800789a:	d902      	bls.n	80078a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800789c:	2302      	movs	r3, #2
 800789e:	613b      	str	r3, [r7, #16]
 80078a0:	e004      	b.n	80078ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b70      	cmp	r3, #112	; 0x70
 80078a6:	d101      	bne.n	80078ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80078a8:	2301      	movs	r3, #1
 80078aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80078ac:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f023 020f 	bic.w	r2, r3, #15
 80078b4:	4909      	ldr	r1, [pc, #36]	; (80078dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 030f 	and.w	r3, r3, #15
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d001      	beq.n	80078ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40021000 	.word	0x40021000
 80078dc:	40022000 	.word	0x40022000

080078e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078e6:	4b2d      	ldr	r3, [pc, #180]	; (800799c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d00b      	beq.n	800790e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d825      	bhi.n	8007948 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d008      	beq.n	8007914 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d11f      	bne.n	8007948 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007908:	4b25      	ldr	r3, [pc, #148]	; (80079a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800790a:	613b      	str	r3, [r7, #16]
    break;
 800790c:	e01f      	b.n	800794e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800790e:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007910:	613b      	str	r3, [r7, #16]
    break;
 8007912:	e01c      	b.n	800794e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007914:	4b21      	ldr	r3, [pc, #132]	; (800799c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b00      	cmp	r3, #0
 800791e:	d107      	bne.n	8007930 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007920:	4b1e      	ldr	r3, [pc, #120]	; (800799c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007926:	0a1b      	lsrs	r3, r3, #8
 8007928:	f003 030f 	and.w	r3, r3, #15
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	e005      	b.n	800793c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007930:	4b1a      	ldr	r3, [pc, #104]	; (800799c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800793c:	4a1a      	ldr	r2, [pc, #104]	; (80079a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007944:	613b      	str	r3, [r7, #16]
    break;
 8007946:	e002      	b.n	800794e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	613b      	str	r3, [r7, #16]
    break;
 800794c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	091b      	lsrs	r3, r3, #4
 8007954:	f003 030f 	and.w	r3, r3, #15
 8007958:	3301      	adds	r3, #1
 800795a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800795c:	4b0f      	ldr	r3, [pc, #60]	; (800799c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	fb03 f202 	mul.w	r2, r3, r2
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007972:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007974:	4b09      	ldr	r3, [pc, #36]	; (800799c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	0e5b      	lsrs	r3, r3, #25
 800797a:	f003 0303 	and.w	r3, r3, #3
 800797e:	3301      	adds	r3, #1
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800798e:	683b      	ldr	r3, [r7, #0]
}
 8007990:	4618      	mov	r0, r3
 8007992:	371c      	adds	r7, #28
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	40021000 	.word	0x40021000
 80079a0:	00f42400 	.word	0x00f42400
 80079a4:	007a1200 	.word	0x007a1200
 80079a8:	0800a9a4 	.word	0x0800a9a4

080079ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079b4:	2300      	movs	r3, #0
 80079b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079b8:	2300      	movs	r3, #0
 80079ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d040      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079cc:	2b80      	cmp	r3, #128	; 0x80
 80079ce:	d02a      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80079d0:	2b80      	cmp	r3, #128	; 0x80
 80079d2:	d825      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80079d4:	2b60      	cmp	r3, #96	; 0x60
 80079d6:	d026      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80079d8:	2b60      	cmp	r3, #96	; 0x60
 80079da:	d821      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80079dc:	2b40      	cmp	r3, #64	; 0x40
 80079de:	d006      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d81d      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d010      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80079ec:	e018      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079ee:	4b89      	ldr	r3, [pc, #548]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	4a88      	ldr	r2, [pc, #544]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079fa:	e015      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3304      	adds	r3, #4
 8007a00:	2100      	movs	r1, #0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fb62 	bl	80080cc <RCCEx_PLLSAI1_Config>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a0c:	e00c      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3320      	adds	r3, #32
 8007a12:	2100      	movs	r1, #0
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fc4d 	bl	80082b4 <RCCEx_PLLSAI2_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007a1e:	e003      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	74fb      	strb	r3, [r7, #19]
      break;
 8007a24:	e000      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a28:	7cfb      	ldrb	r3, [r7, #19]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a2e:	4b79      	ldr	r3, [pc, #484]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a34:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a3c:	4975      	ldr	r1, [pc, #468]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007a44:	e001      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a46:	7cfb      	ldrb	r3, [r7, #19]
 8007a48:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d047      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a5e:	d030      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a64:	d82a      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a6a:	d02a      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a70:	d824      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a76:	d008      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a7c:	d81e      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a86:	d010      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a88:	e018      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a8a:	4b62      	ldr	r3, [pc, #392]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	4a61      	ldr	r2, [pc, #388]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a94:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a96:	e015      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fb14 	bl	80080cc <RCCEx_PLLSAI1_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007aa8:	e00c      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3320      	adds	r3, #32
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fbff 	bl	80082b4 <RCCEx_PLLSAI2_Config>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007aba:	e003      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	74fb      	strb	r3, [r7, #19]
      break;
 8007ac0:	e000      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ac4:	7cfb      	ldrb	r3, [r7, #19]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10b      	bne.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007aca:	4b52      	ldr	r3, [pc, #328]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad8:	494e      	ldr	r1, [pc, #312]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007ae0:	e001      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae2:	7cfb      	ldrb	r3, [r7, #19]
 8007ae4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 809f 	beq.w	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007af4:	2300      	movs	r3, #0
 8007af6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007af8:	4b46      	ldr	r3, [pc, #280]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b0e:	4b41      	ldr	r3, [pc, #260]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b12:	4a40      	ldr	r2, [pc, #256]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b18:	6593      	str	r3, [r2, #88]	; 0x58
 8007b1a:	4b3e      	ldr	r3, [pc, #248]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b22:	60bb      	str	r3, [r7, #8]
 8007b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b26:	2301      	movs	r3, #1
 8007b28:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b2a:	4b3b      	ldr	r3, [pc, #236]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a3a      	ldr	r2, [pc, #232]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b36:	f7fb ff7f 	bl	8003a38 <HAL_GetTick>
 8007b3a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b3c:	e009      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b3e:	f7fb ff7b 	bl	8003a38 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d902      	bls.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	74fb      	strb	r3, [r7, #19]
        break;
 8007b50:	e005      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b52:	4b31      	ldr	r3, [pc, #196]	; (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0ef      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007b5e:	7cfb      	ldrb	r3, [r7, #19]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d15b      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b64:	4b2b      	ldr	r3, [pc, #172]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b6e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d01f      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d019      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b82:	4b24      	ldr	r3, [pc, #144]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b8e:	4b21      	ldr	r3, [pc, #132]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b9e:	4b1d      	ldr	r3, [pc, #116]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba4:	4a1b      	ldr	r2, [pc, #108]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007bae:	4a19      	ldr	r2, [pc, #100]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d016      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc0:	f7fb ff3a 	bl	8003a38 <HAL_GetTick>
 8007bc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bc6:	e00b      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc8:	f7fb ff36 	bl	8003a38 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d902      	bls.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	74fb      	strb	r3, [r7, #19]
            break;
 8007bde:	e006      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007be0:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0ec      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007bee:	7cfb      	ldrb	r3, [r7, #19]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10c      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bf4:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c04:	4903      	ldr	r1, [pc, #12]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c0c:	e008      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c0e:	7cfb      	ldrb	r3, [r7, #19]
 8007c10:	74bb      	strb	r3, [r7, #18]
 8007c12:	e005      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007c14:	40021000 	.word	0x40021000
 8007c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1c:	7cfb      	ldrb	r3, [r7, #19]
 8007c1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c20:	7c7b      	ldrb	r3, [r7, #17]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d105      	bne.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c26:	4ba0      	ldr	r3, [pc, #640]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2a:	4a9f      	ldr	r2, [pc, #636]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c3e:	4b9a      	ldr	r3, [pc, #616]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c44:	f023 0203 	bic.w	r2, r3, #3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4c:	4996      	ldr	r1, [pc, #600]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c60:	4b91      	ldr	r3, [pc, #580]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c66:	f023 020c 	bic.w	r2, r3, #12
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	498e      	ldr	r1, [pc, #568]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c82:	4b89      	ldr	r3, [pc, #548]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c90:	4985      	ldr	r1, [pc, #532]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ca4:	4b80      	ldr	r3, [pc, #512]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007caa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb2:	497d      	ldr	r1, [pc, #500]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0310 	and.w	r3, r3, #16
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cc6:	4b78      	ldr	r3, [pc, #480]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd4:	4974      	ldr	r1, [pc, #464]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ce8:	4b6f      	ldr	r3, [pc, #444]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf6:	496c      	ldr	r1, [pc, #432]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d0a:	4b67      	ldr	r3, [pc, #412]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d18:	4963      	ldr	r1, [pc, #396]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d2c:	4b5e      	ldr	r3, [pc, #376]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d3a:	495b      	ldr	r1, [pc, #364]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d4e:	4b56      	ldr	r3, [pc, #344]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5c:	4952      	ldr	r1, [pc, #328]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d70:	4b4d      	ldr	r3, [pc, #308]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7e:	494a      	ldr	r1, [pc, #296]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d92:	4b45      	ldr	r3, [pc, #276]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da0:	4941      	ldr	r1, [pc, #260]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007db4:	4b3c      	ldr	r3, [pc, #240]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dba:	f023 0203 	bic.w	r2, r3, #3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc2:	4939      	ldr	r1, [pc, #228]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d028      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dd6:	4b34      	ldr	r3, [pc, #208]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ddc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de4:	4930      	ldr	r1, [pc, #192]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007df4:	d106      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007df6:	4b2c      	ldr	r3, [pc, #176]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	4a2b      	ldr	r2, [pc, #172]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e00:	60d3      	str	r3, [r2, #12]
 8007e02:	e011      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e0c:	d10c      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3304      	adds	r3, #4
 8007e12:	2101      	movs	r1, #1
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 f959 	bl	80080cc <RCCEx_PLLSAI1_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007e1e:	7cfb      	ldrb	r3, [r7, #19]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007e24:	7cfb      	ldrb	r3, [r7, #19]
 8007e26:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d04d      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e3c:	d108      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007e3e:	4b1a      	ldr	r3, [pc, #104]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e44:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007e4e:	e012      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007e50:	4b15      	ldr	r3, [pc, #84]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e56:	4a14      	ldr	r2, [pc, #80]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007e60:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e6e:	490e      	ldr	r1, [pc, #56]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e7e:	d106      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e80:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	4a08      	ldr	r2, [pc, #32]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e8a:	60d3      	str	r3, [r2, #12]
 8007e8c:	e020      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e96:	d109      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e98:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	4a02      	ldr	r2, [pc, #8]	; (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea2:	60d3      	str	r3, [r2, #12]
 8007ea4:	e014      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007ea6:	bf00      	nop
 8007ea8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007eb4:	d10c      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	2101      	movs	r1, #1
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f905 	bl	80080cc <RCCEx_PLLSAI1_Config>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ec6:	7cfb      	ldrb	r3, [r7, #19]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007ecc:	7cfb      	ldrb	r3, [r7, #19]
 8007ece:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d028      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007edc:	4b7a      	ldr	r3, [pc, #488]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eea:	4977      	ldr	r1, [pc, #476]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007efa:	d106      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007efc:	4b72      	ldr	r3, [pc, #456]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	4a71      	ldr	r2, [pc, #452]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f06:	60d3      	str	r3, [r2, #12]
 8007f08:	e011      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f12:	d10c      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	2101      	movs	r1, #1
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 f8d6 	bl	80080cc <RCCEx_PLLSAI1_Config>
 8007f20:	4603      	mov	r3, r0
 8007f22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f24:	7cfb      	ldrb	r3, [r7, #19]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007f2a:	7cfb      	ldrb	r3, [r7, #19]
 8007f2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01e      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f3a:	4b63      	ldr	r3, [pc, #396]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f4a:	495f      	ldr	r1, [pc, #380]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f5c:	d10c      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3304      	adds	r3, #4
 8007f62:	2102      	movs	r1, #2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 f8b1 	bl	80080cc <RCCEx_PLLSAI1_Config>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f6e:	7cfb      	ldrb	r3, [r7, #19]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007f74:	7cfb      	ldrb	r3, [r7, #19]
 8007f76:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f84:	4b50      	ldr	r3, [pc, #320]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f8a:	f023 0204 	bic.w	r2, r3, #4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f94:	494c      	ldr	r1, [pc, #304]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00b      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007fa8:	4b47      	ldr	r3, [pc, #284]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fae:	f023 0218 	bic.w	r2, r3, #24
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb8:	4943      	ldr	r1, [pc, #268]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d035      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007fcc:	4b3e      	ldr	r3, [pc, #248]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a3d      	ldr	r2, [pc, #244]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fd8:	f7fb fd2e 	bl	8003a38 <HAL_GetTick>
 8007fdc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007fde:	e009      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007fe0:	f7fb fd2a 	bl	8003a38 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d902      	bls.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	74fb      	strb	r3, [r7, #19]
        break;
 8007ff2:	e005      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ff4:	4b34      	ldr	r3, [pc, #208]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1ef      	bne.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8008000:	7cfb      	ldrb	r3, [r7, #19]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d113      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8008006:	4b30      	ldr	r3, [pc, #192]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008008:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800800c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008016:	492c      	ldr	r1, [pc, #176]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008018:	4313      	orrs	r3, r2
 800801a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3320      	adds	r3, #32
 8008022:	2102      	movs	r1, #2
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f945 	bl	80082b4 <RCCEx_PLLSAI2_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800802e:	7cfb      	ldrb	r3, [r7, #19]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8008034:	7cfb      	ldrb	r3, [r7, #19]
 8008036:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01e      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8008044:	4b20      	ldr	r3, [pc, #128]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800804a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008054:	491c      	ldr	r1, [pc, #112]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008066:	d10c      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3320      	adds	r3, #32
 800806c:	2101      	movs	r1, #1
 800806e:	4618      	mov	r0, r3
 8008070:	f000 f920 	bl	80082b4 <RCCEx_PLLSAI2_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008078:	7cfb      	ldrb	r3, [r7, #19]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800807e:	7cfb      	ldrb	r3, [r7, #19]
 8008080:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d017      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800808e:	4b0e      	ldr	r3, [pc, #56]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008090:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800809e:	490a      	ldr	r1, [pc, #40]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080b0:	d105      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080b2:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	4a04      	ldr	r2, [pc, #16]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80080b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080bc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80080be:	7cbb      	ldrb	r3, [r7, #18]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	40021000 	.word	0x40021000

080080cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80080da:	4b72      	ldr	r3, [pc, #456]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00e      	beq.n	8008104 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80080e6:	4b6f      	ldr	r3, [pc, #444]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f003 0203 	and.w	r2, r3, #3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d103      	bne.n	80080fe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
       ||
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d142      	bne.n	8008184 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	73fb      	strb	r3, [r7, #15]
 8008102:	e03f      	b.n	8008184 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b03      	cmp	r3, #3
 800810a:	d018      	beq.n	800813e <RCCEx_PLLSAI1_Config+0x72>
 800810c:	2b03      	cmp	r3, #3
 800810e:	d825      	bhi.n	800815c <RCCEx_PLLSAI1_Config+0x90>
 8008110:	2b01      	cmp	r3, #1
 8008112:	d002      	beq.n	800811a <RCCEx_PLLSAI1_Config+0x4e>
 8008114:	2b02      	cmp	r3, #2
 8008116:	d009      	beq.n	800812c <RCCEx_PLLSAI1_Config+0x60>
 8008118:	e020      	b.n	800815c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800811a:	4b62      	ldr	r3, [pc, #392]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d11d      	bne.n	8008162 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800812a:	e01a      	b.n	8008162 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800812c:	4b5d      	ldr	r3, [pc, #372]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008134:	2b00      	cmp	r3, #0
 8008136:	d116      	bne.n	8008166 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800813c:	e013      	b.n	8008166 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800813e:	4b59      	ldr	r3, [pc, #356]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10f      	bne.n	800816a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800814a:	4b56      	ldr	r3, [pc, #344]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800815a:	e006      	b.n	800816a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
      break;
 8008160:	e004      	b.n	800816c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008162:	bf00      	nop
 8008164:	e002      	b.n	800816c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008166:	bf00      	nop
 8008168:	e000      	b.n	800816c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800816a:	bf00      	nop
    }

    if(status == HAL_OK)
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d108      	bne.n	8008184 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008172:	4b4c      	ldr	r3, [pc, #304]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f023 0203 	bic.w	r2, r3, #3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4949      	ldr	r1, [pc, #292]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008180:	4313      	orrs	r3, r2
 8008182:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 8086 	bne.w	8008298 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800818c:	4b45      	ldr	r3, [pc, #276]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a44      	ldr	r2, [pc, #272]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008192:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008198:	f7fb fc4e 	bl	8003a38 <HAL_GetTick>
 800819c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800819e:	e009      	b.n	80081b4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081a0:	f7fb fc4a 	bl	8003a38 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d902      	bls.n	80081b4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	73fb      	strb	r3, [r7, #15]
        break;
 80081b2:	e005      	b.n	80081c0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081b4:	4b3b      	ldr	r3, [pc, #236]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1ef      	bne.n	80081a0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d168      	bne.n	8008298 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d113      	bne.n	80081f4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081cc:	4b35      	ldr	r3, [pc, #212]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	4b35      	ldr	r3, [pc, #212]	; (80082a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80081d2:	4013      	ands	r3, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6892      	ldr	r2, [r2, #8]
 80081d8:	0211      	lsls	r1, r2, #8
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	68d2      	ldr	r2, [r2, #12]
 80081de:	06d2      	lsls	r2, r2, #27
 80081e0:	4311      	orrs	r1, r2
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6852      	ldr	r2, [r2, #4]
 80081e6:	3a01      	subs	r2, #1
 80081e8:	0112      	lsls	r2, r2, #4
 80081ea:	430a      	orrs	r2, r1
 80081ec:	492d      	ldr	r1, [pc, #180]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	610b      	str	r3, [r1, #16]
 80081f2:	e02d      	b.n	8008250 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d115      	bne.n	8008226 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081fa:	4b2a      	ldr	r3, [pc, #168]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	4b2b      	ldr	r3, [pc, #172]	; (80082ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008200:	4013      	ands	r3, r2
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6892      	ldr	r2, [r2, #8]
 8008206:	0211      	lsls	r1, r2, #8
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6912      	ldr	r2, [r2, #16]
 800820c:	0852      	lsrs	r2, r2, #1
 800820e:	3a01      	subs	r2, #1
 8008210:	0552      	lsls	r2, r2, #21
 8008212:	4311      	orrs	r1, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6852      	ldr	r2, [r2, #4]
 8008218:	3a01      	subs	r2, #1
 800821a:	0112      	lsls	r2, r2, #4
 800821c:	430a      	orrs	r2, r1
 800821e:	4921      	ldr	r1, [pc, #132]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008220:	4313      	orrs	r3, r2
 8008222:	610b      	str	r3, [r1, #16]
 8008224:	e014      	b.n	8008250 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008226:	4b1f      	ldr	r3, [pc, #124]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008228:	691a      	ldr	r2, [r3, #16]
 800822a:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800822c:	4013      	ands	r3, r2
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6892      	ldr	r2, [r2, #8]
 8008232:	0211      	lsls	r1, r2, #8
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6952      	ldr	r2, [r2, #20]
 8008238:	0852      	lsrs	r2, r2, #1
 800823a:	3a01      	subs	r2, #1
 800823c:	0652      	lsls	r2, r2, #25
 800823e:	4311      	orrs	r1, r2
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	6852      	ldr	r2, [r2, #4]
 8008244:	3a01      	subs	r2, #1
 8008246:	0112      	lsls	r2, r2, #4
 8008248:	430a      	orrs	r2, r1
 800824a:	4916      	ldr	r1, [pc, #88]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800824c:	4313      	orrs	r3, r2
 800824e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008250:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a13      	ldr	r2, [pc, #76]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800825a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800825c:	f7fb fbec 	bl	8003a38 <HAL_GetTick>
 8008260:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008262:	e009      	b.n	8008278 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008264:	f7fb fbe8 	bl	8003a38 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b02      	cmp	r3, #2
 8008270:	d902      	bls.n	8008278 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	73fb      	strb	r3, [r7, #15]
          break;
 8008276:	e005      	b.n	8008284 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008278:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0ef      	beq.n	8008264 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800828a:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	4904      	ldr	r1, [pc, #16]	; (80082a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008294:	4313      	orrs	r3, r2
 8008296:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	40021000 	.word	0x40021000
 80082a8:	07ff800f 	.word	0x07ff800f
 80082ac:	ff9f800f 	.word	0xff9f800f
 80082b0:	f9ff800f 	.word	0xf9ff800f

080082b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80082c2:	4b72      	ldr	r3, [pc, #456]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00e      	beq.n	80082ec <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80082ce:	4b6f      	ldr	r3, [pc, #444]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f003 0203 	and.w	r2, r3, #3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d103      	bne.n	80082e6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
       ||
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d142      	bne.n	800836c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	73fb      	strb	r3, [r7, #15]
 80082ea:	e03f      	b.n	800836c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d018      	beq.n	8008326 <RCCEx_PLLSAI2_Config+0x72>
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d825      	bhi.n	8008344 <RCCEx_PLLSAI2_Config+0x90>
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d002      	beq.n	8008302 <RCCEx_PLLSAI2_Config+0x4e>
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d009      	beq.n	8008314 <RCCEx_PLLSAI2_Config+0x60>
 8008300:	e020      	b.n	8008344 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008302:	4b62      	ldr	r3, [pc, #392]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d11d      	bne.n	800834a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008312:	e01a      	b.n	800834a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008314:	4b5d      	ldr	r3, [pc, #372]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800831c:	2b00      	cmp	r3, #0
 800831e:	d116      	bne.n	800834e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008324:	e013      	b.n	800834e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008326:	4b59      	ldr	r3, [pc, #356]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10f      	bne.n	8008352 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008332:	4b56      	ldr	r3, [pc, #344]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008342:	e006      	b.n	8008352 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
      break;
 8008348:	e004      	b.n	8008354 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800834a:	bf00      	nop
 800834c:	e002      	b.n	8008354 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800834e:	bf00      	nop
 8008350:	e000      	b.n	8008354 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008352:	bf00      	nop
    }

    if(status == HAL_OK)
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d108      	bne.n	800836c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800835a:	4b4c      	ldr	r3, [pc, #304]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f023 0203 	bic.w	r2, r3, #3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4949      	ldr	r1, [pc, #292]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008368:	4313      	orrs	r3, r2
 800836a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f040 8086 	bne.w	8008480 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008374:	4b45      	ldr	r3, [pc, #276]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a44      	ldr	r2, [pc, #272]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 800837a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800837e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008380:	f7fb fb5a 	bl	8003a38 <HAL_GetTick>
 8008384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008386:	e009      	b.n	800839c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008388:	f7fb fb56 	bl	8003a38 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d902      	bls.n	800839c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	73fb      	strb	r3, [r7, #15]
        break;
 800839a:	e005      	b.n	80083a8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800839c:	4b3b      	ldr	r3, [pc, #236]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1ef      	bne.n	8008388 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d168      	bne.n	8008480 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d113      	bne.n	80083dc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80083b4:	4b35      	ldr	r3, [pc, #212]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 80083b6:	695a      	ldr	r2, [r3, #20]
 80083b8:	4b35      	ldr	r3, [pc, #212]	; (8008490 <RCCEx_PLLSAI2_Config+0x1dc>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	6892      	ldr	r2, [r2, #8]
 80083c0:	0211      	lsls	r1, r2, #8
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	68d2      	ldr	r2, [r2, #12]
 80083c6:	06d2      	lsls	r2, r2, #27
 80083c8:	4311      	orrs	r1, r2
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6852      	ldr	r2, [r2, #4]
 80083ce:	3a01      	subs	r2, #1
 80083d0:	0112      	lsls	r2, r2, #4
 80083d2:	430a      	orrs	r2, r1
 80083d4:	492d      	ldr	r1, [pc, #180]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	614b      	str	r3, [r1, #20]
 80083da:	e02d      	b.n	8008438 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d115      	bne.n	800840e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80083e2:	4b2a      	ldr	r3, [pc, #168]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 80083e4:	695a      	ldr	r2, [r3, #20]
 80083e6:	4b2b      	ldr	r3, [pc, #172]	; (8008494 <RCCEx_PLLSAI2_Config+0x1e0>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6892      	ldr	r2, [r2, #8]
 80083ee:	0211      	lsls	r1, r2, #8
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6912      	ldr	r2, [r2, #16]
 80083f4:	0852      	lsrs	r2, r2, #1
 80083f6:	3a01      	subs	r2, #1
 80083f8:	0552      	lsls	r2, r2, #21
 80083fa:	4311      	orrs	r1, r2
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6852      	ldr	r2, [r2, #4]
 8008400:	3a01      	subs	r2, #1
 8008402:	0112      	lsls	r2, r2, #4
 8008404:	430a      	orrs	r2, r1
 8008406:	4921      	ldr	r1, [pc, #132]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008408:	4313      	orrs	r3, r2
 800840a:	614b      	str	r3, [r1, #20]
 800840c:	e014      	b.n	8008438 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800840e:	4b1f      	ldr	r3, [pc, #124]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008410:	695a      	ldr	r2, [r3, #20]
 8008412:	4b21      	ldr	r3, [pc, #132]	; (8008498 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008414:	4013      	ands	r3, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6892      	ldr	r2, [r2, #8]
 800841a:	0211      	lsls	r1, r2, #8
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6952      	ldr	r2, [r2, #20]
 8008420:	0852      	lsrs	r2, r2, #1
 8008422:	3a01      	subs	r2, #1
 8008424:	0652      	lsls	r2, r2, #25
 8008426:	4311      	orrs	r1, r2
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	6852      	ldr	r2, [r2, #4]
 800842c:	3a01      	subs	r2, #1
 800842e:	0112      	lsls	r2, r2, #4
 8008430:	430a      	orrs	r2, r1
 8008432:	4916      	ldr	r1, [pc, #88]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008434:	4313      	orrs	r3, r2
 8008436:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008438:	4b14      	ldr	r3, [pc, #80]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a13      	ldr	r2, [pc, #76]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 800843e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008442:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008444:	f7fb faf8 	bl	8003a38 <HAL_GetTick>
 8008448:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800844a:	e009      	b.n	8008460 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800844c:	f7fb faf4 	bl	8003a38 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d902      	bls.n	8008460 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	73fb      	strb	r3, [r7, #15]
          break;
 800845e:	e005      	b.n	800846c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008460:	4b0a      	ldr	r3, [pc, #40]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0ef      	beq.n	800844c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008474:	695a      	ldr	r2, [r3, #20]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	4904      	ldr	r1, [pc, #16]	; (800848c <RCCEx_PLLSAI2_Config+0x1d8>)
 800847c:	4313      	orrs	r3, r2
 800847e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	40021000 	.word	0x40021000
 8008490:	07ff800f 	.word	0x07ff800f
 8008494:	ff9f800f 	.word	0xff9f800f
 8008498:	f9ff800f 	.word	0xf9ff800f

0800849c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e095      	b.n	80085da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d108      	bne.n	80084c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084be:	d009      	beq.n	80084d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	61da      	str	r2, [r3, #28]
 80084c6:	e005      	b.n	80084d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d106      	bne.n	80084f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fb f8be 	bl	8003670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800850a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008514:	d902      	bls.n	800851c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e002      	b.n	8008522 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800851c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008520:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800852a:	d007      	beq.n	800853c <HAL_SPI_Init+0xa0>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008534:	d002      	beq.n	800853c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	431a      	orrs	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008574:	431a      	orrs	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857e:	ea42 0103 	orr.w	r1, r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008586:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	0c1b      	lsrs	r3, r3, #16
 8008598:	f003 0204 	and.w	r2, r3, #4
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	f003 0310 	and.w	r3, r3, #16
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	431a      	orrs	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80085b8:	ea42 0103 	orr.w	r1, r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b088      	sub	sp, #32
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	60f8      	str	r0, [r7, #12]
 80085ea:	60b9      	str	r1, [r7, #8]
 80085ec:	603b      	str	r3, [r7, #0]
 80085ee:	4613      	mov	r3, r2
 80085f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_SPI_Transmit+0x22>
 8008600:	2302      	movs	r3, #2
 8008602:	e158      	b.n	80088b6 <HAL_SPI_Transmit+0x2d4>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800860c:	f7fb fa14 	bl	8003a38 <HAL_GetTick>
 8008610:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b01      	cmp	r3, #1
 8008620:	d002      	beq.n	8008628 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008622:	2302      	movs	r3, #2
 8008624:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008626:	e13d      	b.n	80088a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <HAL_SPI_Transmit+0x52>
 800862e:	88fb      	ldrh	r3, [r7, #6]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d102      	bne.n	800863a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008638:	e134      	b.n	80088a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2203      	movs	r2, #3
 800863e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	88fa      	ldrh	r2, [r7, #6]
 8008652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	88fa      	ldrh	r2, [r7, #6]
 8008658:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008684:	d10f      	bne.n	80086a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008694:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b0:	2b40      	cmp	r3, #64	; 0x40
 80086b2:	d007      	beq.n	80086c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086cc:	d94b      	bls.n	8008766 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <HAL_SPI_Transmit+0xfa>
 80086d6:	8afb      	ldrh	r3, [r7, #22]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d13e      	bne.n	800875a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	881a      	ldrh	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	1c9a      	adds	r2, r3, #2
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008700:	e02b      	b.n	800875a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b02      	cmp	r3, #2
 800870e:	d112      	bne.n	8008736 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	881a      	ldrh	r2, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	1c9a      	adds	r2, r3, #2
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800872a:	b29b      	uxth	r3, r3
 800872c:	3b01      	subs	r3, #1
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008734:	e011      	b.n	800875a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008736:	f7fb f97f 	bl	8003a38 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d803      	bhi.n	800874e <HAL_SPI_Transmit+0x16c>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874c:	d102      	bne.n	8008754 <HAL_SPI_Transmit+0x172>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d102      	bne.n	800875a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008758:	e0a4      	b.n	80088a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800875e:	b29b      	uxth	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1ce      	bne.n	8008702 <HAL_SPI_Transmit+0x120>
 8008764:	e07c      	b.n	8008860 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HAL_SPI_Transmit+0x192>
 800876e:	8afb      	ldrh	r3, [r7, #22]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d170      	bne.n	8008856 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008778:	b29b      	uxth	r3, r3
 800877a:	2b01      	cmp	r3, #1
 800877c:	d912      	bls.n	80087a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	881a      	ldrh	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	1c9a      	adds	r2, r3, #2
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008798:	b29b      	uxth	r3, r3
 800879a:	3b02      	subs	r3, #2
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087a2:	e058      	b.n	8008856 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	330c      	adds	r3, #12
 80087ae:	7812      	ldrb	r2, [r2, #0]
 80087b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	3b01      	subs	r3, #1
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80087ca:	e044      	b.n	8008856 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d12b      	bne.n	8008832 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087de:	b29b      	uxth	r3, r3
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d912      	bls.n	800880a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	881a      	ldrh	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	1c9a      	adds	r2, r3, #2
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087fe:	b29b      	uxth	r3, r3
 8008800:	3b02      	subs	r3, #2
 8008802:	b29a      	uxth	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008808:	e025      	b.n	8008856 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	330c      	adds	r3, #12
 8008814:	7812      	ldrb	r2, [r2, #0]
 8008816:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008826:	b29b      	uxth	r3, r3
 8008828:	3b01      	subs	r3, #1
 800882a:	b29a      	uxth	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008830:	e011      	b.n	8008856 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008832:	f7fb f901 	bl	8003a38 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d803      	bhi.n	800884a <HAL_SPI_Transmit+0x268>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008848:	d102      	bne.n	8008850 <HAL_SPI_Transmit+0x26e>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d102      	bne.n	8008856 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008854:	e026      	b.n	80088a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1b5      	bne.n	80087cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f001 f8c5 	bl	80099f4 <SPI_EndRxTxTransaction>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2220      	movs	r2, #32
 8008874:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800887e:	2300      	movs	r3, #0
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	613b      	str	r3, [r7, #16]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	e000      	b.n	80088a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80088a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80088b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3720      	adds	r7, #32
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b088      	sub	sp, #32
 80088c2:	af02      	add	r7, sp, #8
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	603b      	str	r3, [r7, #0]
 80088ca:	4613      	mov	r3, r2
 80088cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088da:	d112      	bne.n	8008902 <HAL_SPI_Receive+0x44>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10e      	bne.n	8008902 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2204      	movs	r2, #4
 80088e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80088ec:	88fa      	ldrh	r2, [r7, #6]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	4613      	mov	r3, r2
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f910 	bl	8008b1e <HAL_SPI_TransmitReceive>
 80088fe:	4603      	mov	r3, r0
 8008900:	e109      	b.n	8008b16 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_SPI_Receive+0x52>
 800890c:	2302      	movs	r3, #2
 800890e:	e102      	b.n	8008b16 <HAL_SPI_Receive+0x258>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008918:	f7fb f88e 	bl	8003a38 <HAL_GetTick>
 800891c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b01      	cmp	r3, #1
 8008928:	d002      	beq.n	8008930 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800892a:	2302      	movs	r3, #2
 800892c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800892e:	e0e9      	b.n	8008b04 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <HAL_SPI_Receive+0x7e>
 8008936:	88fb      	ldrh	r3, [r7, #6]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008940:	e0e0      	b.n	8008b04 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2204      	movs	r2, #4
 8008946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	88fa      	ldrh	r2, [r7, #6]
 800895a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	88fa      	ldrh	r2, [r7, #6]
 8008962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800898c:	d908      	bls.n	80089a0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800899c:	605a      	str	r2, [r3, #4]
 800899e:	e007      	b.n	80089b0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089ae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b8:	d10f      	bne.n	80089da <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b40      	cmp	r3, #64	; 0x40
 80089e6:	d007      	beq.n	80089f8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a00:	d867      	bhi.n	8008ad2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008a02:	e030      	b.n	8008a66 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d117      	bne.n	8008a42 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f103 020c 	add.w	r2, r3, #12
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	7812      	ldrb	r2, [r2, #0]
 8008a20:	b2d2      	uxtb	r2, r2
 8008a22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008a40:	e011      	b.n	8008a66 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a42:	f7fa fff9 	bl	8003a38 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d803      	bhi.n	8008a5a <HAL_SPI_Receive+0x19c>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a58:	d102      	bne.n	8008a60 <HAL_SPI_Receive+0x1a2>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a64:	e04e      	b.n	8008b04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1c8      	bne.n	8008a04 <HAL_SPI_Receive+0x146>
 8008a72:	e034      	b.n	8008ade <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d115      	bne.n	8008aae <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68da      	ldr	r2, [r3, #12]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	b292      	uxth	r2, r2
 8008a8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	1c9a      	adds	r2, r3, #2
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008aac:	e011      	b.n	8008ad2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008aae:	f7fa ffc3 	bl	8003a38 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d803      	bhi.n	8008ac6 <HAL_SPI_Receive+0x208>
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac4:	d102      	bne.n	8008acc <HAL_SPI_Receive+0x20e>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d102      	bne.n	8008ad2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ad0:	e018      	b.n	8008b04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1ca      	bne.n	8008a74 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 ff2e 	bl	8009944 <SPI_EndRxTransaction>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2220      	movs	r2, #32
 8008af2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	75fb      	strb	r3, [r7, #23]
 8008b00:	e000      	b.n	8008b04 <HAL_SPI_Receive+0x246>
  }

error :
 8008b02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b08a      	sub	sp, #40	; 0x28
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d101      	bne.n	8008b44 <HAL_SPI_TransmitReceive+0x26>
 8008b40:	2302      	movs	r3, #2
 8008b42:	e1fb      	b.n	8008f3c <HAL_SPI_TransmitReceive+0x41e>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b4c:	f7fa ff74 	bl	8003a38 <HAL_GetTick>
 8008b50:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b58:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008b60:	887b      	ldrh	r3, [r7, #2]
 8008b62:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008b64:	887b      	ldrh	r3, [r7, #2]
 8008b66:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b68:	7efb      	ldrb	r3, [r7, #27]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d00e      	beq.n	8008b8c <HAL_SPI_TransmitReceive+0x6e>
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b74:	d106      	bne.n	8008b84 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <HAL_SPI_TransmitReceive+0x66>
 8008b7e:	7efb      	ldrb	r3, [r7, #27]
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d003      	beq.n	8008b8c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008b84:	2302      	movs	r3, #2
 8008b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008b8a:	e1cd      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d005      	beq.n	8008b9e <HAL_SPI_TransmitReceive+0x80>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <HAL_SPI_TransmitReceive+0x80>
 8008b98:	887b      	ldrh	r3, [r7, #2]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008ba4:	e1c0      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d003      	beq.n	8008bba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2205      	movs	r2, #5
 8008bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	887a      	ldrh	r2, [r7, #2]
 8008bca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	887a      	ldrh	r2, [r7, #2]
 8008bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	887a      	ldrh	r2, [r7, #2]
 8008be0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	887a      	ldrh	r2, [r7, #2]
 8008be6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bfc:	d802      	bhi.n	8008c04 <HAL_SPI_TransmitReceive+0xe6>
 8008bfe:	8a3b      	ldrh	r3, [r7, #16]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d908      	bls.n	8008c16 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c12:	605a      	str	r2, [r3, #4]
 8008c14:	e007      	b.n	8008c26 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c24:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c30:	2b40      	cmp	r3, #64	; 0x40
 8008c32:	d007      	beq.n	8008c44 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c4c:	d97c      	bls.n	8008d48 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <HAL_SPI_TransmitReceive+0x13e>
 8008c56:	8a7b      	ldrh	r3, [r7, #18]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d169      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	881a      	ldrh	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	1c9a      	adds	r2, r3, #2
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c80:	e056      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d11b      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x1aa>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d016      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0x1aa>
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d113      	bne.n	8008cc8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	881a      	ldrh	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	1c9a      	adds	r2, r3, #2
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d11c      	bne.n	8008d10 <HAL_SPI_TransmitReceive+0x1f2>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d016      	beq.n	8008d10 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cec:	b292      	uxth	r2, r2
 8008cee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	1c9a      	adds	r2, r3, #2
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d10:	f7fa fe92 	bl	8003a38 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d807      	bhi.n	8008d30 <HAL_SPI_TransmitReceive+0x212>
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d26:	d003      	beq.n	8008d30 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008d2e:	e0fb      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1a3      	bne.n	8008c82 <HAL_SPI_TransmitReceive+0x164>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d19d      	bne.n	8008c82 <HAL_SPI_TransmitReceive+0x164>
 8008d46:	e0df      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <HAL_SPI_TransmitReceive+0x23a>
 8008d50:	8a7b      	ldrh	r3, [r7, #18]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	f040 80cb 	bne.w	8008eee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d912      	bls.n	8008d88 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d66:	881a      	ldrh	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	1c9a      	adds	r2, r3, #2
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b02      	subs	r3, #2
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d86:	e0b2      	b.n	8008eee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	7812      	ldrb	r2, [r2, #0]
 8008d94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3b01      	subs	r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dae:	e09e      	b.n	8008eee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d134      	bne.n	8008e28 <HAL_SPI_TransmitReceive+0x30a>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d02f      	beq.n	8008e28 <HAL_SPI_TransmitReceive+0x30a>
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d12c      	bne.n	8008e28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d912      	bls.n	8008dfe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	1c9a      	adds	r2, r3, #2
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	3b02      	subs	r3, #2
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008dfc:	e012      	b.n	8008e24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	330c      	adds	r3, #12
 8008e08:	7812      	ldrb	r2, [r2, #0]
 8008e0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	1c5a      	adds	r2, r3, #1
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d148      	bne.n	8008ec8 <HAL_SPI_TransmitReceive+0x3aa>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d042      	beq.n	8008ec8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d923      	bls.n	8008e96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e58:	b292      	uxth	r2, r2
 8008e5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e60:	1c9a      	adds	r2, r3, #2
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b02      	subs	r3, #2
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d81f      	bhi.n	8008ec4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e92:	605a      	str	r2, [r3, #4]
 8008e94:	e016      	b.n	8008ec4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f103 020c 	add.w	r2, r3, #12
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	7812      	ldrb	r2, [r2, #0]
 8008ea4:	b2d2      	uxtb	r2, r2
 8008ea6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ec8:	f7fa fdb6 	bl	8003a38 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d803      	bhi.n	8008ee0 <HAL_SPI_TransmitReceive+0x3c2>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ede:	d102      	bne.n	8008ee6 <HAL_SPI_TransmitReceive+0x3c8>
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d103      	bne.n	8008eee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008eec:	e01c      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f47f af5b 	bne.w	8008db0 <HAL_SPI_TransmitReceive+0x292>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f47f af54 	bne.w	8008db0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fd71 	bl	80099f4 <SPI_EndRxTxTransaction>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d006      	beq.n	8008f26 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	661a      	str	r2, [r3, #96]	; 0x60
 8008f24:	e000      	b.n	8008f28 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3728      	adds	r7, #40	; 0x28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d110      	bne.n	8008f80 <HAL_SPI_Receive_IT+0x3c>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f66:	d10b      	bne.n	8008f80 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2204      	movs	r2, #4
 8008f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8008f70:	88fb      	ldrh	r3, [r7, #6]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	68b9      	ldr	r1, [r7, #8]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 f894 	bl	80090a4 <HAL_SPI_TransmitReceive_IT>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	e089      	b.n	8009094 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d101      	bne.n	8008f8e <HAL_SPI_Receive_IT+0x4a>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e082      	b.n	8009094 <HAL_SPI_Receive_IT+0x150>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d002      	beq.n	8008fa8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fa6:	e070      	b.n	800908a <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d002      	beq.n	8008fb4 <HAL_SPI_Receive_IT+0x70>
 8008fae:	88fb      	ldrh	r3, [r7, #6]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fb8:	e067      	b.n	800908a <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2204      	movs	r2, #4
 8008fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	88fa      	ldrh	r2, [r7, #6]
 8008fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	88fa      	ldrh	r2, [r7, #6]
 8008fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ffe:	d90b      	bls.n	8009018 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800900e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4a22      	ldr	r2, [pc, #136]	; (800909c <HAL_SPI_Receive_IT+0x158>)
 8009014:	64da      	str	r2, [r3, #76]	; 0x4c
 8009016:	e00a      	b.n	800902e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009026:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4a1d      	ldr	r2, [pc, #116]	; (80090a0 <HAL_SPI_Receive_IT+0x15c>)
 800902c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009036:	d10f      	bne.n	8009058 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009046:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009056:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009066:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d008      	beq.n	8009088 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	e000      	b.n	800908a <HAL_SPI_Receive_IT+0x146>
  }

error :
 8009088:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009092:	7dfb      	ldrb	r3, [r7, #23]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	080096bd 	.word	0x080096bd
 80090a0:	0800966d 	.word	0x0800966d

080090a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_SPI_TransmitReceive_IT+0x20>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e091      	b.n	80091e8 <HAL_SPI_TransmitReceive_IT+0x144>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80090da:	7dbb      	ldrb	r3, [r7, #22]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d00d      	beq.n	80090fc <HAL_SPI_TransmitReceive_IT+0x58>
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090e6:	d106      	bne.n	80090f6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <HAL_SPI_TransmitReceive_IT+0x52>
 80090f0:	7dbb      	ldrb	r3, [r7, #22]
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d002      	beq.n	80090fc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80090f6:	2302      	movs	r3, #2
 80090f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80090fa:	e070      	b.n	80091de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d005      	beq.n	800910e <HAL_SPI_TransmitReceive_IT+0x6a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <HAL_SPI_TransmitReceive_IT+0x6a>
 8009108:	887b      	ldrh	r3, [r7, #2]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d102      	bne.n	8009114 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009112:	e064      	b.n	80091de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b04      	cmp	r3, #4
 800911e:	d003      	beq.n	8009128 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2205      	movs	r2, #5
 8009124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	887a      	ldrh	r2, [r7, #2]
 8009138:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	887a      	ldrh	r2, [r7, #2]
 800913e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	887a      	ldrh	r2, [r7, #2]
 800914a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	887a      	ldrh	r2, [r7, #2]
 8009152:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800915e:	d906      	bls.n	800916e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4a24      	ldr	r2, [pc, #144]	; (80091f4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009164:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	4a23      	ldr	r2, [pc, #140]	; (80091f8 <HAL_SPI_TransmitReceive_IT+0x154>)
 800916a:	651a      	str	r2, [r3, #80]	; 0x50
 800916c:	e005      	b.n	800917a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4a22      	ldr	r2, [pc, #136]	; (80091fc <HAL_SPI_TransmitReceive_IT+0x158>)
 8009172:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4a22      	ldr	r2, [pc, #136]	; (8009200 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009178:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009182:	d802      	bhi.n	800918a <HAL_SPI_TransmitReceive_IT+0xe6>
 8009184:	887b      	ldrh	r3, [r7, #2]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d908      	bls.n	800919c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009198:	605a      	str	r2, [r3, #4]
 800919a:	e007      	b.n	80091ac <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80091aa:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80091ba:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d008      	beq.n	80091dc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	e000      	b.n	80091de <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80091dc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	080095a7 	.word	0x080095a7
 80091f8:	0800960d 	.word	0x0800960d
 80091fc:	08009457 	.word	0x08009457
 8009200:	08009515 	.word	0x08009515

08009204 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	099b      	lsrs	r3, r3, #6
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10f      	bne.n	8009248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	099b      	lsrs	r3, r3, #6
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	4798      	blx	r3
    return;
 8009246:	e0d7      	b.n	80093f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <HAL_SPI_IRQHandler+0x66>
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	09db      	lsrs	r3, r3, #7
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	4798      	blx	r3
    return;
 8009268:	e0c6      	b.n	80093f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	095b      	lsrs	r3, r3, #5
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10c      	bne.n	8009290 <HAL_SPI_IRQHandler+0x8c>
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	099b      	lsrs	r3, r3, #6
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	0a1b      	lsrs	r3, r3, #8
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 80b4 	beq.w	80093f8 <HAL_SPI_IRQHandler+0x1f4>
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 80ad 	beq.w	80093f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	099b      	lsrs	r3, r3, #6
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d023      	beq.n	80092f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d011      	beq.n	80092da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ba:	f043 0204 	orr.w	r2, r3, #4
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092c2:	2300      	movs	r3, #0
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	617b      	str	r3, [r7, #20]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	e00b      	b.n	80092f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092da:	2300      	movs	r3, #0
 80092dc:	613b      	str	r3, [r7, #16]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	693b      	ldr	r3, [r7, #16]
        return;
 80092f0:	e082      	b.n	80093f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	095b      	lsrs	r3, r3, #5
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d014      	beq.n	8009328 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009302:	f043 0201 	orr.w	r2, r3, #1
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	60fb      	str	r3, [r7, #12]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	0a1b      	lsrs	r3, r3, #8
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00c      	beq.n	800934e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009338:	f043 0208 	orr.w	r2, r3, #8
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009340:	2300      	movs	r3, #0
 8009342:	60bb      	str	r3, [r7, #8]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	60bb      	str	r3, [r7, #8]
 800934c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009352:	2b00      	cmp	r3, #0
 8009354:	d04f      	beq.n	80093f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009364:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <HAL_SPI_IRQHandler+0x17e>
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d034      	beq.n	80093ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0203 	bic.w	r2, r2, #3
 8009390:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	2b00      	cmp	r3, #0
 8009398:	d011      	beq.n	80093be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939e:	4a18      	ldr	r2, [pc, #96]	; (8009400 <HAL_SPI_IRQHandler+0x1fc>)
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fb fd2f 	bl	8004e0a <HAL_DMA_Abort_IT>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d005      	beq.n	80093be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d016      	beq.n	80093f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ca:	4a0d      	ldr	r2, [pc, #52]	; (8009400 <HAL_SPI_IRQHandler+0x1fc>)
 80093cc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fb fd19 	bl	8004e0a <HAL_DMA_Abort_IT>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80093ea:	e003      	b.n	80093f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f813 	bl	8009418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80093f2:	e000      	b.n	80093f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80093f4:	bf00      	nop
    return;
 80093f6:	bf00      	nop
  }
}
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	0800942d 	.word	0x0800942d

08009404 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009438:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7ff ffe5 	bl	8009418 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b01      	cmp	r3, #1
 8009468:	d923      	bls.n	80094b2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009474:	b292      	uxth	r2, r2
 8009476:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947c:	1c9a      	adds	r2, r3, #2
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b02      	subs	r3, #2
 800948c:	b29a      	uxth	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800949a:	b29b      	uxth	r3, r3
 800949c:	2b01      	cmp	r3, #1
 800949e:	d11f      	bne.n	80094e0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094ae:	605a      	str	r2, [r3, #4]
 80094b0:	e016      	b.n	80094e0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f103 020c 	add.w	r2, r3, #12
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	7812      	ldrb	r2, [r2, #0]
 80094c0:	b2d2      	uxtb	r2, r2
 80094c2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	3b01      	subs	r3, #1
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10f      	bne.n	800950c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80094fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009500:	b29b      	uxth	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d102      	bne.n	800950c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 faba 	bl	8009a80 <SPI_CloseRxTx_ISR>
    }
  }
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009520:	b29b      	uxth	r3, r3
 8009522:	2b01      	cmp	r3, #1
 8009524:	d912      	bls.n	800954c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952a:	881a      	ldrh	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	1c9a      	adds	r2, r3, #2
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009540:	b29b      	uxth	r3, r3
 8009542:	3b02      	subs	r3, #2
 8009544:	b29a      	uxth	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	87da      	strh	r2, [r3, #62]	; 0x3e
 800954a:	e012      	b.n	8009572 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	7812      	ldrb	r2, [r2, #0]
 8009558:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009568:	b29b      	uxth	r3, r3
 800956a:	3b01      	subs	r3, #1
 800956c:	b29a      	uxth	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009576:	b29b      	uxth	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	d110      	bne.n	800959e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800958a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009592:	b29b      	uxth	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fa71 	bl	8009a80 <SPI_CloseRxTx_ISR>
    }
  }
}
 800959e:	bf00      	nop
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68da      	ldr	r2, [r3, #12]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	b292      	uxth	r2, r2
 80095ba:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c0:	1c9a      	adds	r2, r3, #2
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095de:	b29b      	uxth	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10f      	bne.n	8009604 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d102      	bne.n	8009604 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa3e 	bl	8009a80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009618:	881a      	ldrh	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	1c9a      	adds	r2, r3, #2
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800963c:	b29b      	uxth	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d110      	bne.n	8009664 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009650:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009658:	b29b      	uxth	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fa0e 	bl	8009a80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009664:	bf00      	nop
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f103 020c 	add.w	r2, r3, #12
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009680:	7812      	ldrb	r2, [r2, #0]
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fa28 	bl	8009b04 <SPI_CloseRx_ISR>
  }
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ce:	b292      	uxth	r2, r2
 80096d0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	1c9a      	adds	r2, r3, #2
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d102      	bne.n	8009700 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa02 	bl	8009b04 <SPI_CloseRx_ISR>
  }
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	4613      	mov	r3, r2
 8009716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009718:	f7fa f98e 	bl	8003a38 <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	1a9b      	subs	r3, r3, r2
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	4413      	add	r3, r2
 8009726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009728:	f7fa f986 	bl	8003a38 <HAL_GetTick>
 800972c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800972e:	4b39      	ldr	r3, [pc, #228]	; (8009814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	015b      	lsls	r3, r3, #5
 8009734:	0d1b      	lsrs	r3, r3, #20
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	fb02 f303 	mul.w	r3, r2, r3
 800973c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800973e:	e054      	b.n	80097ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009746:	d050      	beq.n	80097ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009748:	f7fa f976 	bl	8003a38 <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	429a      	cmp	r2, r3
 8009756:	d902      	bls.n	800975e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d13d      	bne.n	80097da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800976c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009776:	d111      	bne.n	800979c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009780:	d004      	beq.n	800978c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800978a:	d107      	bne.n	800979c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800979a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097a4:	d10f      	bne.n	80097c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e017      	b.n	800980a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4013      	ands	r3, r2
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	bf0c      	ite	eq
 80097fa:	2301      	moveq	r3, #1
 80097fc:	2300      	movne	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	461a      	mov	r2, r3
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	429a      	cmp	r2, r3
 8009806:	d19b      	bne.n	8009740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3720      	adds	r7, #32
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	20000020 	.word	0x20000020

08009818 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b08a      	sub	sp, #40	; 0x28
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800982a:	f7fa f905 	bl	8003a38 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009832:	1a9b      	subs	r3, r3, r2
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	4413      	add	r3, r2
 8009838:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800983a:	f7fa f8fd 	bl	8003a38 <HAL_GetTick>
 800983e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	330c      	adds	r3, #12
 8009846:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009848:	4b3d      	ldr	r3, [pc, #244]	; (8009940 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	00da      	lsls	r2, r3, #3
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	0d1b      	lsrs	r3, r3, #20
 8009858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985a:	fb02 f303 	mul.w	r3, r2, r3
 800985e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009860:	e060      	b.n	8009924 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009868:	d107      	bne.n	800987a <SPI_WaitFifoStateUntilTimeout+0x62>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d104      	bne.n	800987a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009878:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009880:	d050      	beq.n	8009924 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009882:	f7fa f8d9 	bl	8003a38 <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988e:	429a      	cmp	r2, r3
 8009890:	d902      	bls.n	8009898 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	2b00      	cmp	r3, #0
 8009896:	d13d      	bne.n	8009914 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098b0:	d111      	bne.n	80098d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098ba:	d004      	beq.n	80098c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098c4:	d107      	bne.n	80098d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098de:	d10f      	bne.n	8009900 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e010      	b.n	8009936 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	3b01      	subs	r3, #1
 8009922:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689a      	ldr	r2, [r3, #8]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	4013      	ands	r3, r2
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d196      	bne.n	8009862 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3728      	adds	r7, #40	; 0x28
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000020 	.word	0x20000020

08009944 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af02      	add	r7, sp, #8
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009958:	d111      	bne.n	800997e <SPI_EndRxTransaction+0x3a>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009962:	d004      	beq.n	800996e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800996c:	d107      	bne.n	800997e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800997c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2200      	movs	r2, #0
 8009986:	2180      	movs	r1, #128	; 0x80
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f7ff febd 	bl	8009708 <SPI_WaitFlagStateUntilTimeout>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d007      	beq.n	80099a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009998:	f043 0220 	orr.w	r2, r3, #32
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e023      	b.n	80099ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ac:	d11d      	bne.n	80099ea <SPI_EndRxTransaction+0xa6>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b6:	d004      	beq.n	80099c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c0:	d113      	bne.n	80099ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7ff ff22 	bl	8009818 <SPI_WaitFifoStateUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d007      	beq.n	80099ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099de:	f043 0220 	orr.w	r2, r3, #32
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80099e6:	2303      	movs	r3, #3
 80099e8:	e000      	b.n	80099ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af02      	add	r7, sp, #8
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7ff ff03 	bl	8009818 <SPI_WaitFifoStateUntilTimeout>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d007      	beq.n	8009a28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a1c:	f043 0220 	orr.w	r2, r3, #32
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	e027      	b.n	8009a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2180      	movs	r1, #128	; 0x80
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f7ff fe68 	bl	8009708 <SPI_WaitFlagStateUntilTimeout>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d007      	beq.n	8009a4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a42:	f043 0220 	orr.w	r2, r3, #32
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e014      	b.n	8009a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f7ff fedc 	bl	8009818 <SPI_WaitFifoStateUntilTimeout>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d007      	beq.n	8009a76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a6a:	f043 0220 	orr.w	r2, r3, #32
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e000      	b.n	8009a78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a88:	f7f9 ffd6 	bl	8003a38 <HAL_GetTick>
 8009a8c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0220 	bic.w	r2, r2, #32
 8009a9c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	2164      	movs	r1, #100	; 0x64
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7ff ffa6 	bl	80099f4 <SPI_EndRxTxTransaction>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab2:	f043 0220 	orr.w	r2, r3, #32
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d115      	bne.n	8009aee <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	d107      	bne.n	8009ade <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7f7 fee4 	bl	80018a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009adc:	e00e      	b.n	8009afc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff fc8c 	bl	8009404 <HAL_SPI_TxRxCpltCallback>
}
 8009aec:	e006      	b.n	8009afc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff fc8e 	bl	8009418 <HAL_SPI_ErrorCallback>
}
 8009afc:	bf00      	nop
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009b1a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009b1c:	f7f9 ff8c 	bl	8003a38 <HAL_GetTick>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	2164      	movs	r1, #100	; 0x64
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff ff0c 	bl	8009944 <SPI_EndRxTransaction>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d005      	beq.n	8009b3e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b36:	f043 0220 	orr.w	r2, r3, #32
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d103      	bne.n	8009b56 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7f7 fea8 	bl	80018a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009b54:	e002      	b.n	8009b5c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff fc5e 	bl	8009418 <HAL_SPI_ErrorCallback>
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e042      	b.n	8009bfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d106      	bne.n	8009b8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7f9 fe11 	bl	80037b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2224      	movs	r2, #36	; 0x24
 8009b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0201 	bic.w	r2, r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f8c4 	bl	8009d34 <UART_SetConfig>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d101      	bne.n	8009bb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e022      	b.n	8009bfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fbb4 	bl	800a32c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685a      	ldr	r2, [r3, #4]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689a      	ldr	r2, [r3, #8]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f042 0201 	orr.w	r2, r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fc3b 	bl	800a470 <UART_CheckIdleState>
 8009bfa:	4603      	mov	r3, r0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08a      	sub	sp, #40	; 0x28
 8009c08:	af02      	add	r7, sp, #8
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	4613      	mov	r3, r2
 8009c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	f040 8084 	bne.w	8009d28 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <HAL_UART_Transmit+0x28>
 8009c26:	88fb      	ldrh	r3, [r7, #6]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e07c      	b.n	8009d2a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_UART_Transmit+0x3a>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e075      	b.n	8009d2a <HAL_UART_Transmit+0x126>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2221      	movs	r2, #33	; 0x21
 8009c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c56:	f7f9 feef 	bl	8003a38 <HAL_GetTick>
 8009c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	88fa      	ldrh	r2, [r7, #6]
 8009c60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	88fa      	ldrh	r2, [r7, #6]
 8009c68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c74:	d108      	bne.n	8009c88 <HAL_UART_Transmit+0x84>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d104      	bne.n	8009c88 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	61bb      	str	r3, [r7, #24]
 8009c86:	e003      	b.n	8009c90 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009c98:	e02d      	b.n	8009cf6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2180      	movs	r1, #128	; 0x80
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fc2e 	bl	800a506 <UART_WaitOnFlagUntilTimeout>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	e03a      	b.n	8009d2a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10b      	bne.n	8009cd2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	881a      	ldrh	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cc6:	b292      	uxth	r2, r2
 8009cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	3302      	adds	r3, #2
 8009cce:	61bb      	str	r3, [r7, #24]
 8009cd0:	e008      	b.n	8009ce4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	781a      	ldrb	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	b292      	uxth	r2, r2
 8009cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	3b01      	subs	r3, #1
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1cb      	bne.n	8009c9a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2140      	movs	r1, #64	; 0x40
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 fbfa 	bl	800a506 <UART_WaitOnFlagUntilTimeout>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e006      	b.n	8009d2a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	e000      	b.n	8009d2a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009d28:	2302      	movs	r3, #2
  }
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3720      	adds	r7, #32
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
	...

08009d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d38:	b08c      	sub	sp, #48	; 0x30
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	689a      	ldr	r2, [r3, #8]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	431a      	orrs	r2, r3
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	4baa      	ldr	r3, [pc, #680]	; (800a00c <UART_SetConfig+0x2d8>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	6812      	ldr	r2, [r2, #0]
 8009d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d6c:	430b      	orrs	r3, r1
 8009d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	430a      	orrs	r2, r1
 8009d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a9f      	ldr	r2, [pc, #636]	; (800a010 <UART_SetConfig+0x2dc>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d004      	beq.n	8009da0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009daa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	6812      	ldr	r2, [r2, #0]
 8009db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009db4:	430b      	orrs	r3, r1
 8009db6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	f023 010f 	bic.w	r1, r3, #15
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a90      	ldr	r2, [pc, #576]	; (800a014 <UART_SetConfig+0x2e0>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d125      	bne.n	8009e24 <UART_SetConfig+0xf0>
 8009dd8:	4b8f      	ldr	r3, [pc, #572]	; (800a018 <UART_SetConfig+0x2e4>)
 8009dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dde:	f003 0303 	and.w	r3, r3, #3
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d81a      	bhi.n	8009e1c <UART_SetConfig+0xe8>
 8009de6:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <UART_SetConfig+0xb8>)
 8009de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dec:	08009dfd 	.word	0x08009dfd
 8009df0:	08009e0d 	.word	0x08009e0d
 8009df4:	08009e05 	.word	0x08009e05
 8009df8:	08009e15 	.word	0x08009e15
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e02:	e116      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009e04:	2302      	movs	r3, #2
 8009e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e0a:	e112      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e12:	e10e      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009e14:	2308      	movs	r3, #8
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e1a:	e10a      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e22:	e106      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a7c      	ldr	r2, [pc, #496]	; (800a01c <UART_SetConfig+0x2e8>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d138      	bne.n	8009ea0 <UART_SetConfig+0x16c>
 8009e2e:	4b7a      	ldr	r3, [pc, #488]	; (800a018 <UART_SetConfig+0x2e4>)
 8009e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e34:	f003 030c 	and.w	r3, r3, #12
 8009e38:	2b0c      	cmp	r3, #12
 8009e3a:	d82d      	bhi.n	8009e98 <UART_SetConfig+0x164>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <UART_SetConfig+0x110>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e79 	.word	0x08009e79
 8009e48:	08009e99 	.word	0x08009e99
 8009e4c:	08009e99 	.word	0x08009e99
 8009e50:	08009e99 	.word	0x08009e99
 8009e54:	08009e89 	.word	0x08009e89
 8009e58:	08009e99 	.word	0x08009e99
 8009e5c:	08009e99 	.word	0x08009e99
 8009e60:	08009e99 	.word	0x08009e99
 8009e64:	08009e81 	.word	0x08009e81
 8009e68:	08009e99 	.word	0x08009e99
 8009e6c:	08009e99 	.word	0x08009e99
 8009e70:	08009e99 	.word	0x08009e99
 8009e74:	08009e91 	.word	0x08009e91
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e7e:	e0d8      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009e80:	2302      	movs	r3, #2
 8009e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e86:	e0d4      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009e88:	2304      	movs	r3, #4
 8009e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e8e:	e0d0      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009e90:	2308      	movs	r3, #8
 8009e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e96:	e0cc      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009e98:	2310      	movs	r3, #16
 8009e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e9e:	e0c8      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a5e      	ldr	r2, [pc, #376]	; (800a020 <UART_SetConfig+0x2ec>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d125      	bne.n	8009ef6 <UART_SetConfig+0x1c2>
 8009eaa:	4b5b      	ldr	r3, [pc, #364]	; (800a018 <UART_SetConfig+0x2e4>)
 8009eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009eb4:	2b30      	cmp	r3, #48	; 0x30
 8009eb6:	d016      	beq.n	8009ee6 <UART_SetConfig+0x1b2>
 8009eb8:	2b30      	cmp	r3, #48	; 0x30
 8009eba:	d818      	bhi.n	8009eee <UART_SetConfig+0x1ba>
 8009ebc:	2b20      	cmp	r3, #32
 8009ebe:	d00a      	beq.n	8009ed6 <UART_SetConfig+0x1a2>
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	d814      	bhi.n	8009eee <UART_SetConfig+0x1ba>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <UART_SetConfig+0x19a>
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	d008      	beq.n	8009ede <UART_SetConfig+0x1aa>
 8009ecc:	e00f      	b.n	8009eee <UART_SetConfig+0x1ba>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ed4:	e0ad      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009ed6:	2302      	movs	r3, #2
 8009ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009edc:	e0a9      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009ede:	2304      	movs	r3, #4
 8009ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ee4:	e0a5      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009ee6:	2308      	movs	r3, #8
 8009ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eec:	e0a1      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009eee:	2310      	movs	r3, #16
 8009ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ef4:	e09d      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a4a      	ldr	r2, [pc, #296]	; (800a024 <UART_SetConfig+0x2f0>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d125      	bne.n	8009f4c <UART_SetConfig+0x218>
 8009f00:	4b45      	ldr	r3, [pc, #276]	; (800a018 <UART_SetConfig+0x2e4>)
 8009f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8009f0c:	d016      	beq.n	8009f3c <UART_SetConfig+0x208>
 8009f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8009f10:	d818      	bhi.n	8009f44 <UART_SetConfig+0x210>
 8009f12:	2b80      	cmp	r3, #128	; 0x80
 8009f14:	d00a      	beq.n	8009f2c <UART_SetConfig+0x1f8>
 8009f16:	2b80      	cmp	r3, #128	; 0x80
 8009f18:	d814      	bhi.n	8009f44 <UART_SetConfig+0x210>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <UART_SetConfig+0x1f0>
 8009f1e:	2b40      	cmp	r3, #64	; 0x40
 8009f20:	d008      	beq.n	8009f34 <UART_SetConfig+0x200>
 8009f22:	e00f      	b.n	8009f44 <UART_SetConfig+0x210>
 8009f24:	2300      	movs	r3, #0
 8009f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f2a:	e082      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f32:	e07e      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009f34:	2304      	movs	r3, #4
 8009f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f3a:	e07a      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f42:	e076      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009f44:	2310      	movs	r3, #16
 8009f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f4a:	e072      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a35      	ldr	r2, [pc, #212]	; (800a028 <UART_SetConfig+0x2f4>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d12a      	bne.n	8009fac <UART_SetConfig+0x278>
 8009f56:	4b30      	ldr	r3, [pc, #192]	; (800a018 <UART_SetConfig+0x2e4>)
 8009f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f64:	d01a      	beq.n	8009f9c <UART_SetConfig+0x268>
 8009f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f6a:	d81b      	bhi.n	8009fa4 <UART_SetConfig+0x270>
 8009f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f70:	d00c      	beq.n	8009f8c <UART_SetConfig+0x258>
 8009f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f76:	d815      	bhi.n	8009fa4 <UART_SetConfig+0x270>
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <UART_SetConfig+0x250>
 8009f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f80:	d008      	beq.n	8009f94 <UART_SetConfig+0x260>
 8009f82:	e00f      	b.n	8009fa4 <UART_SetConfig+0x270>
 8009f84:	2300      	movs	r3, #0
 8009f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f8a:	e052      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f92:	e04e      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009f94:	2304      	movs	r3, #4
 8009f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f9a:	e04a      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009f9c:	2308      	movs	r3, #8
 8009f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fa2:	e046      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009fa4:	2310      	movs	r3, #16
 8009fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009faa:	e042      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a17      	ldr	r2, [pc, #92]	; (800a010 <UART_SetConfig+0x2dc>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d13a      	bne.n	800a02c <UART_SetConfig+0x2f8>
 8009fb6:	4b18      	ldr	r3, [pc, #96]	; (800a018 <UART_SetConfig+0x2e4>)
 8009fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009fc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fc4:	d01a      	beq.n	8009ffc <UART_SetConfig+0x2c8>
 8009fc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fca:	d81b      	bhi.n	800a004 <UART_SetConfig+0x2d0>
 8009fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd0:	d00c      	beq.n	8009fec <UART_SetConfig+0x2b8>
 8009fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd6:	d815      	bhi.n	800a004 <UART_SetConfig+0x2d0>
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d003      	beq.n	8009fe4 <UART_SetConfig+0x2b0>
 8009fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fe0:	d008      	beq.n	8009ff4 <UART_SetConfig+0x2c0>
 8009fe2:	e00f      	b.n	800a004 <UART_SetConfig+0x2d0>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fea:	e022      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009fec:	2302      	movs	r3, #2
 8009fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ff2:	e01e      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ffa:	e01a      	b.n	800a032 <UART_SetConfig+0x2fe>
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a002:	e016      	b.n	800a032 <UART_SetConfig+0x2fe>
 800a004:	2310      	movs	r3, #16
 800a006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a00a:	e012      	b.n	800a032 <UART_SetConfig+0x2fe>
 800a00c:	cfff69f3 	.word	0xcfff69f3
 800a010:	40008000 	.word	0x40008000
 800a014:	40013800 	.word	0x40013800
 800a018:	40021000 	.word	0x40021000
 800a01c:	40004400 	.word	0x40004400
 800a020:	40004800 	.word	0x40004800
 800a024:	40004c00 	.word	0x40004c00
 800a028:	40005000 	.word	0x40005000
 800a02c:	2310      	movs	r3, #16
 800a02e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4aae      	ldr	r2, [pc, #696]	; (800a2f0 <UART_SetConfig+0x5bc>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	f040 8097 	bne.w	800a16c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a03e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a042:	2b08      	cmp	r3, #8
 800a044:	d823      	bhi.n	800a08e <UART_SetConfig+0x35a>
 800a046:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <UART_SetConfig+0x318>)
 800a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04c:	0800a071 	.word	0x0800a071
 800a050:	0800a08f 	.word	0x0800a08f
 800a054:	0800a079 	.word	0x0800a079
 800a058:	0800a08f 	.word	0x0800a08f
 800a05c:	0800a07f 	.word	0x0800a07f
 800a060:	0800a08f 	.word	0x0800a08f
 800a064:	0800a08f 	.word	0x0800a08f
 800a068:	0800a08f 	.word	0x0800a08f
 800a06c:	0800a087 	.word	0x0800a087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a070:	f7fd fbb0 	bl	80077d4 <HAL_RCC_GetPCLK1Freq>
 800a074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a076:	e010      	b.n	800a09a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a078:	4b9e      	ldr	r3, [pc, #632]	; (800a2f4 <UART_SetConfig+0x5c0>)
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a07c:	e00d      	b.n	800a09a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a07e:	f7fd fb11 	bl	80076a4 <HAL_RCC_GetSysClockFreq>
 800a082:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a084:	e009      	b.n	800a09a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a08a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a08c:	e005      	b.n	800a09a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a098:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 8130 	beq.w	800a302 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	4a94      	ldr	r2, [pc, #592]	; (800a2f8 <UART_SetConfig+0x5c4>)
 800a0a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	4413      	add	r3, r2
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d305      	bcc.n	800a0d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0cc:	69ba      	ldr	r2, [r7, #24]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d903      	bls.n	800a0da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a0d8:	e113      	b.n	800a302 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	2200      	movs	r2, #0
 800a0de:	60bb      	str	r3, [r7, #8]
 800a0e0:	60fa      	str	r2, [r7, #12]
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	4a84      	ldr	r2, [pc, #528]	; (800a2f8 <UART_SetConfig+0x5c4>)
 800a0e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	603b      	str	r3, [r7, #0]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0fc:	f7f6 f87e 	bl	80001fc <__aeabi_uldivmod>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4610      	mov	r0, r2
 800a106:	4619      	mov	r1, r3
 800a108:	f04f 0200 	mov.w	r2, #0
 800a10c:	f04f 0300 	mov.w	r3, #0
 800a110:	020b      	lsls	r3, r1, #8
 800a112:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a116:	0202      	lsls	r2, r0, #8
 800a118:	6979      	ldr	r1, [r7, #20]
 800a11a:	6849      	ldr	r1, [r1, #4]
 800a11c:	0849      	lsrs	r1, r1, #1
 800a11e:	2000      	movs	r0, #0
 800a120:	460c      	mov	r4, r1
 800a122:	4605      	mov	r5, r0
 800a124:	eb12 0804 	adds.w	r8, r2, r4
 800a128:	eb43 0905 	adc.w	r9, r3, r5
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	469a      	mov	sl, r3
 800a134:	4693      	mov	fp, r2
 800a136:	4652      	mov	r2, sl
 800a138:	465b      	mov	r3, fp
 800a13a:	4640      	mov	r0, r8
 800a13c:	4649      	mov	r1, r9
 800a13e:	f7f6 f85d 	bl	80001fc <__aeabi_uldivmod>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4613      	mov	r3, r2
 800a148:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a150:	d308      	bcc.n	800a164 <UART_SetConfig+0x430>
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a158:	d204      	bcs.n	800a164 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6a3a      	ldr	r2, [r7, #32]
 800a160:	60da      	str	r2, [r3, #12]
 800a162:	e0ce      	b.n	800a302 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a16a:	e0ca      	b.n	800a302 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a174:	d166      	bne.n	800a244 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a17a:	2b08      	cmp	r3, #8
 800a17c:	d827      	bhi.n	800a1ce <UART_SetConfig+0x49a>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <UART_SetConfig+0x450>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a1a9 	.word	0x0800a1a9
 800a188:	0800a1b1 	.word	0x0800a1b1
 800a18c:	0800a1b9 	.word	0x0800a1b9
 800a190:	0800a1cf 	.word	0x0800a1cf
 800a194:	0800a1bf 	.word	0x0800a1bf
 800a198:	0800a1cf 	.word	0x0800a1cf
 800a19c:	0800a1cf 	.word	0x0800a1cf
 800a1a0:	0800a1cf 	.word	0x0800a1cf
 800a1a4:	0800a1c7 	.word	0x0800a1c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1a8:	f7fd fb14 	bl	80077d4 <HAL_RCC_GetPCLK1Freq>
 800a1ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1ae:	e014      	b.n	800a1da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1b0:	f7fd fb26 	bl	8007800 <HAL_RCC_GetPCLK2Freq>
 800a1b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1b6:	e010      	b.n	800a1da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1b8:	4b4e      	ldr	r3, [pc, #312]	; (800a2f4 <UART_SetConfig+0x5c0>)
 800a1ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1bc:	e00d      	b.n	800a1da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1be:	f7fd fa71 	bl	80076a4 <HAL_RCC_GetSysClockFreq>
 800a1c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1c4:	e009      	b.n	800a1da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1cc:	e005      	b.n	800a1da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a1d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 8090 	beq.w	800a302 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	4a44      	ldr	r2, [pc, #272]	; (800a2f8 <UART_SetConfig+0x5c4>)
 800a1e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1f4:	005a      	lsls	r2, r3, #1
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	085b      	lsrs	r3, r3, #1
 800a1fc:	441a      	add	r2, r3
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	fbb2 f3f3 	udiv	r3, r2, r3
 800a206:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	2b0f      	cmp	r3, #15
 800a20c:	d916      	bls.n	800a23c <UART_SetConfig+0x508>
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a214:	d212      	bcs.n	800a23c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	f023 030f 	bic.w	r3, r3, #15
 800a21e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	085b      	lsrs	r3, r3, #1
 800a224:	b29b      	uxth	r3, r3
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	8bfb      	ldrh	r3, [r7, #30]
 800a22e:	4313      	orrs	r3, r2
 800a230:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	8bfa      	ldrh	r2, [r7, #30]
 800a238:	60da      	str	r2, [r3, #12]
 800a23a:	e062      	b.n	800a302 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a242:	e05e      	b.n	800a302 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a244:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a248:	2b08      	cmp	r3, #8
 800a24a:	d828      	bhi.n	800a29e <UART_SetConfig+0x56a>
 800a24c:	a201      	add	r2, pc, #4	; (adr r2, 800a254 <UART_SetConfig+0x520>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a279 	.word	0x0800a279
 800a258:	0800a281 	.word	0x0800a281
 800a25c:	0800a289 	.word	0x0800a289
 800a260:	0800a29f 	.word	0x0800a29f
 800a264:	0800a28f 	.word	0x0800a28f
 800a268:	0800a29f 	.word	0x0800a29f
 800a26c:	0800a29f 	.word	0x0800a29f
 800a270:	0800a29f 	.word	0x0800a29f
 800a274:	0800a297 	.word	0x0800a297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a278:	f7fd faac 	bl	80077d4 <HAL_RCC_GetPCLK1Freq>
 800a27c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a27e:	e014      	b.n	800a2aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a280:	f7fd fabe 	bl	8007800 <HAL_RCC_GetPCLK2Freq>
 800a284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a286:	e010      	b.n	800a2aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a288:	4b1a      	ldr	r3, [pc, #104]	; (800a2f4 <UART_SetConfig+0x5c0>)
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a28c:	e00d      	b.n	800a2aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a28e:	f7fd fa09 	bl	80076a4 <HAL_RCC_GetSysClockFreq>
 800a292:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a294:	e009      	b.n	800a2aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a29a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a29c:	e005      	b.n	800a2aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a2a8:	bf00      	nop
    }

    if (pclk != 0U)
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d028      	beq.n	800a302 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b4:	4a10      	ldr	r2, [pc, #64]	; (800a2f8 <UART_SetConfig+0x5c4>)
 800a2b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	085b      	lsrs	r3, r3, #1
 800a2c8:	441a      	add	r2, r3
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	2b0f      	cmp	r3, #15
 800a2d8:	d910      	bls.n	800a2fc <UART_SetConfig+0x5c8>
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e0:	d20c      	bcs.n	800a2fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	60da      	str	r2, [r3, #12]
 800a2ec:	e009      	b.n	800a302 <UART_SetConfig+0x5ce>
 800a2ee:	bf00      	nop
 800a2f0:	40008000 	.word	0x40008000
 800a2f4:	00f42400 	.word	0x00f42400
 800a2f8:	0800a9d4 	.word	0x0800a9d4
      }
      else
      {
        ret = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2201      	movs	r2, #1
 800a306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2200      	movs	r2, #0
 800a316:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2200      	movs	r2, #0
 800a31c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a31e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a322:	4618      	mov	r0, r3
 800a324:	3730      	adds	r7, #48	; 0x30
 800a326:	46bd      	mov	sp, r7
 800a328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a32c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00a      	beq.n	800a356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35a:	f003 0302 	and.w	r3, r3, #2
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00a      	beq.n	800a378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	430a      	orrs	r2, r1
 800a376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00a      	beq.n	800a39a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a39e:	f003 0308 	and.w	r3, r3, #8
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c0:	f003 0310 	and.w	r3, r3, #16
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00a      	beq.n	800a3de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e2:	f003 0320 	and.w	r3, r3, #32
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d01a      	beq.n	800a442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a42a:	d10a      	bne.n	800a442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	605a      	str	r2, [r3, #4]
  }
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af02      	add	r7, sp, #8
 800a476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a480:	f7f9 fada 	bl	8003a38 <HAL_GetTick>
 800a484:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0308 	and.w	r3, r3, #8
 800a490:	2b08      	cmp	r3, #8
 800a492:	d10e      	bne.n	800a4b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f82f 	bl	800a506 <UART_WaitOnFlagUntilTimeout>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e025      	b.n	800a4fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0304 	and.w	r3, r3, #4
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d10e      	bne.n	800a4de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f819 	bl	800a506 <UART_WaitOnFlagUntilTimeout>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e00f      	b.n	800a4fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2220      	movs	r2, #32
 800a4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b09c      	sub	sp, #112	; 0x70
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	603b      	str	r3, [r7, #0]
 800a512:	4613      	mov	r3, r2
 800a514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a516:	e0a9      	b.n	800a66c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	f000 80a5 	beq.w	800a66c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a522:	f7f9 fa89 	bl	8003a38 <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a52e:	429a      	cmp	r2, r3
 800a530:	d302      	bcc.n	800a538 <UART_WaitOnFlagUntilTimeout+0x32>
 800a532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a534:	2b00      	cmp	r3, #0
 800a536:	d140      	bne.n	800a5ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a540:	e853 3f00 	ldrex	r3, [r3]
 800a544:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a54c:	667b      	str	r3, [r7, #100]	; 0x64
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a556:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a558:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a55c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a55e:	e841 2300 	strex	r3, r2, [r1]
 800a562:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1e6      	bne.n	800a538 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3308      	adds	r3, #8
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	f023 0301 	bic.w	r3, r3, #1
 800a580:	663b      	str	r3, [r7, #96]	; 0x60
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3308      	adds	r3, #8
 800a588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a58a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a58c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a592:	e841 2300 	strex	r3, r2, [r1]
 800a596:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1e5      	bne.n	800a56a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2220      	movs	r2, #32
 800a5a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2220      	movs	r2, #32
 800a5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e069      	b.n	800a68e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d051      	beq.n	800a66c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	69db      	ldr	r3, [r3, #28]
 800a5ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5d6:	d149      	bne.n	800a66c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	e853 3f00 	ldrex	r3, [r3]
 800a5ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a600:	637b      	str	r3, [r7, #52]	; 0x34
 800a602:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a608:	e841 2300 	strex	r3, r2, [r1]
 800a60c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e6      	bne.n	800a5e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3308      	adds	r3, #8
 800a61a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	e853 3f00 	ldrex	r3, [r3]
 800a622:	613b      	str	r3, [r7, #16]
   return(result);
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	f023 0301 	bic.w	r3, r3, #1
 800a62a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3308      	adds	r3, #8
 800a632:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a634:	623a      	str	r2, [r7, #32]
 800a636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a638:	69f9      	ldr	r1, [r7, #28]
 800a63a:	6a3a      	ldr	r2, [r7, #32]
 800a63c:	e841 2300 	strex	r3, r2, [r1]
 800a640:	61bb      	str	r3, [r7, #24]
   return(result);
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1e5      	bne.n	800a614 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2220      	movs	r2, #32
 800a64c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2220      	movs	r2, #32
 800a654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2220      	movs	r2, #32
 800a65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	e010      	b.n	800a68e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	69da      	ldr	r2, [r3, #28]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	4013      	ands	r3, r2
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	429a      	cmp	r2, r3
 800a67a:	bf0c      	ite	eq
 800a67c:	2301      	moveq	r3, #1
 800a67e:	2300      	movne	r3, #0
 800a680:	b2db      	uxtb	r3, r3
 800a682:	461a      	mov	r2, r3
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	429a      	cmp	r2, r3
 800a688:	f43f af46 	beq.w	800a518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3770      	adds	r7, #112	; 0x70
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d101      	bne.n	800a6ac <HAL_UARTEx_DisableFifoMode+0x16>
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e027      	b.n	800a6fc <HAL_UARTEx_DisableFifoMode+0x66>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2224      	movs	r2, #36	; 0x24
 800a6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 0201 	bic.w	r2, r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d101      	bne.n	800a720 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a71c:	2302      	movs	r3, #2
 800a71e:	e02d      	b.n	800a77c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2224      	movs	r2, #36	; 0x24
 800a72c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 0201 	bic.w	r2, r2, #1
 800a746:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	430a      	orrs	r2, r1
 800a75a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f84f 	bl	800a800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a794:	2b01      	cmp	r3, #1
 800a796:	d101      	bne.n	800a79c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a798:	2302      	movs	r3, #2
 800a79a:	e02d      	b.n	800a7f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2224      	movs	r2, #36	; 0x24
 800a7a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f022 0201 	bic.w	r2, r2, #1
 800a7c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f811 	bl	800a800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d108      	bne.n	800a822 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a820:	e031      	b.n	800a886 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a822:	2308      	movs	r3, #8
 800a824:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a826:	2308      	movs	r3, #8
 800a828:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	0e5b      	lsrs	r3, r3, #25
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 0307 	and.w	r3, r3, #7
 800a838:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	0f5b      	lsrs	r3, r3, #29
 800a842:	b2db      	uxtb	r3, r3
 800a844:	f003 0307 	and.w	r3, r3, #7
 800a848:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	7b3a      	ldrb	r2, [r7, #12]
 800a84e:	4911      	ldr	r1, [pc, #68]	; (800a894 <UARTEx_SetNbDataToProcess+0x94>)
 800a850:	5c8a      	ldrb	r2, [r1, r2]
 800a852:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a856:	7b3a      	ldrb	r2, [r7, #12]
 800a858:	490f      	ldr	r1, [pc, #60]	; (800a898 <UARTEx_SetNbDataToProcess+0x98>)
 800a85a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a85c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a860:	b29a      	uxth	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a868:	7bfb      	ldrb	r3, [r7, #15]
 800a86a:	7b7a      	ldrb	r2, [r7, #13]
 800a86c:	4909      	ldr	r1, [pc, #36]	; (800a894 <UARTEx_SetNbDataToProcess+0x94>)
 800a86e:	5c8a      	ldrb	r2, [r1, r2]
 800a870:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a874:	7b7a      	ldrb	r2, [r7, #13]
 800a876:	4908      	ldr	r1, [pc, #32]	; (800a898 <UARTEx_SetNbDataToProcess+0x98>)
 800a878:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a87a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a87e:	b29a      	uxth	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a886:	bf00      	nop
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	0800a9ec 	.word	0x0800a9ec
 800a898:	0800a9f4 	.word	0x0800a9f4

0800a89c <__libc_init_array>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	4d0d      	ldr	r5, [pc, #52]	; (800a8d4 <__libc_init_array+0x38>)
 800a8a0:	4c0d      	ldr	r4, [pc, #52]	; (800a8d8 <__libc_init_array+0x3c>)
 800a8a2:	1b64      	subs	r4, r4, r5
 800a8a4:	10a4      	asrs	r4, r4, #2
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	42a6      	cmp	r6, r4
 800a8aa:	d109      	bne.n	800a8c0 <__libc_init_array+0x24>
 800a8ac:	4d0b      	ldr	r5, [pc, #44]	; (800a8dc <__libc_init_array+0x40>)
 800a8ae:	4c0c      	ldr	r4, [pc, #48]	; (800a8e0 <__libc_init_array+0x44>)
 800a8b0:	f000 f820 	bl	800a8f4 <_init>
 800a8b4:	1b64      	subs	r4, r4, r5
 800a8b6:	10a4      	asrs	r4, r4, #2
 800a8b8:	2600      	movs	r6, #0
 800a8ba:	42a6      	cmp	r6, r4
 800a8bc:	d105      	bne.n	800a8ca <__libc_init_array+0x2e>
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c4:	4798      	blx	r3
 800a8c6:	3601      	adds	r6, #1
 800a8c8:	e7ee      	b.n	800a8a8 <__libc_init_array+0xc>
 800a8ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ce:	4798      	blx	r3
 800a8d0:	3601      	adds	r6, #1
 800a8d2:	e7f2      	b.n	800a8ba <__libc_init_array+0x1e>
 800a8d4:	0800aa04 	.word	0x0800aa04
 800a8d8:	0800aa04 	.word	0x0800aa04
 800a8dc:	0800aa04 	.word	0x0800aa04
 800a8e0:	0800aa08 	.word	0x0800aa08

0800a8e4 <memset>:
 800a8e4:	4402      	add	r2, r0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d100      	bne.n	800a8ee <memset+0xa>
 800a8ec:	4770      	bx	lr
 800a8ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a8f2:	e7f9      	b.n	800a8e8 <memset+0x4>

0800a8f4 <_init>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	bf00      	nop
 800a8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fa:	bc08      	pop	{r3}
 800a8fc:	469e      	mov	lr, r3
 800a8fe:	4770      	bx	lr

0800a900 <_fini>:
 800a900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a902:	bf00      	nop
 800a904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a906:	bc08      	pop	{r3}
 800a908:	469e      	mov	lr, r3
 800a90a:	4770      	bx	lr
