
GL_REV2_R.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a24  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cd0  08008cd0  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd8  08008cd8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08008ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000702d0  20000030  08008d10  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20070300  08008d10  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015470  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025aa  00000000  00000000  000354d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00037a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00038a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003011d  00000000  00000000  000399c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014855  00000000  00000000  00069ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001223ce  00000000  00000000  0007e33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a0708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004374  00000000  00000000  001a0758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000030 	.word	0x20000030
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008bc8 	.word	0x08008bc8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000034 	.word	0x20000034
 80001f8:	08008bc8 	.word	0x08008bc8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	; 0x30
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f002 fe6c 	bl	80031e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 fa43 	bl	8000994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fcbd 	bl	8000e8c <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 8000512:	f000 fa8d 	bl	8000a30 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000516:	f000 fb77 	bl	8000c08 <MX_LTDC_Init>
  MX_SPI2_Init();
 800051a:	f000 fbf5 	bl	8000d08 <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fc31 	bl	8000d84 <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fc67 	bl	8000df4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 8000526:	f000 fd87 	bl	8001038 <mipi_config>
  HAL_UART_Transmit(&huart4, "start_s", 7, 1000);
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	2207      	movs	r2, #7
 8000530:	499d      	ldr	r1, [pc, #628]	; (80007a8 <main+0x2a8>)
 8000532:	489e      	ldr	r0, [pc, #632]	; (80007ac <main+0x2ac>)
 8000534:	f007 fc74 	bl	8007e20 <HAL_UART_Transmit>

  play_mode = 3;
 8000538:	4b9d      	ldr	r3, [pc, #628]	; (80007b0 <main+0x2b0>)
 800053a:	2203      	movs	r2, #3
 800053c:	701a      	strb	r2, [r3, #0]
  play_mode_source = 0;
 800053e:	4b9d      	ldr	r3, [pc, #628]	; (80007b4 <main+0x2b4>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
  mode_init();
 8000544:	f001 fc56 	bl	8001df4 <mode_init>
  write_flash_config();
 8000548:	f001 fdea 	bl	8002120 <write_flash_config>
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 800054c:	2300      	movs	r3, #0
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000550:	e00d      	b.n	800056e <main+0x6e>
	  Mode_config[i*2]=0;    //picture_id
 8000552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4a98      	ldr	r2, [pc, #608]	; (80007b8 <main+0x2b8>)
 8000558:	2100      	movs	r1, #0
 800055a:	54d1      	strb	r1, [r2, r3]
	  Mode_config[i*2+1]=0;  //picture_delay_time
 800055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	3301      	adds	r3, #1
 8000562:	4a95      	ldr	r2, [pc, #596]	; (80007b8 <main+0x2b8>)
 8000564:	2100      	movs	r1, #0
 8000566:	54d1      	strb	r1, [r2, r3]
  for(int i=0; i <= Max_pic_per_mode*Max_mode_num;i++){
 8000568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800056a:	3301      	adds	r3, #1
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000570:	2b37      	cmp	r3, #55	; 0x37
 8000572:	ddee      	ble.n	8000552 <main+0x52>
  }
  Mode_config[Max_pic_per_mode*2*Max_mode_num-1] = 0; //playing_mode
 8000574:	4b90      	ldr	r3, [pc, #576]	; (80007b8 <main+0x2b8>)
 8000576:	2200      	movs	r2, #0
 8000578:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  read_flash_config();
 800057c:	f001 fe9e 	bl	80022bc <read_flash_config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2102      	movs	r1, #2
 8000584:	488d      	ldr	r0, [pc, #564]	; (80007bc <main+0x2bc>)
 8000586:	f004 f883 	bl	8004690 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	488b      	ldr	r0, [pc, #556]	; (80007c0 <main+0x2c0>)
 8000592:	f004 f87d 	bl	8004690 <HAL_GPIO_WritePin>

  HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8000596:	2202      	movs	r2, #2
 8000598:	498a      	ldr	r1, [pc, #552]	; (80007c4 <main+0x2c4>)
 800059a:	488b      	ldr	r0, [pc, #556]	; (80007c8 <main+0x2c8>)
 800059c:	f006 fde4 	bl	8007168 <HAL_SPI_Receive_IT>
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80005a4:	e007      	b.n	80005b6 <main+0xb6>
  {
	  image_arr_rgb888[i] = 0xFF;
 80005a6:	4a89      	ldr	r2, [pc, #548]	; (80007cc <main+0x2cc>)
 80005a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005aa:	4413      	add	r3, r2
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < IMAGE_H*IMAGE_W*3; i++)
 80005b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b2:	3301      	adds	r3, #1
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80005b6:	4b86      	ldr	r3, [pc, #536]	; (80007d0 <main+0x2d0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a86      	ldr	r2, [pc, #536]	; (80007d4 <main+0x2d4>)
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	fb03 f202 	mul.w	r2, r3, r2
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	441a      	add	r2, r3
 80005c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d8eb      	bhi.n	80005a6 <main+0xa6>
    while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode_source == 0)
 80005ce:	4b79      	ldr	r3, [pc, #484]	; (80007b4 <main+0x2b4>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f040 8110 	bne.w	80007f8 <main+0x2f8>
	  {
		  if (play_mode == 0)
 80005d8:	4b75      	ldr	r3, [pc, #468]	; (80007b0 <main+0x2b0>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d109      	bne.n	80005f4 <main+0xf4>
		  {
			  read_flash_page(&frame_buf_flash, display_image_number);
 80005e0:	4b7d      	ldr	r3, [pc, #500]	; (80007d8 <main+0x2d8>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	487d      	ldr	r0, [pc, #500]	; (80007dc <main+0x2dc>)
 80005e8:	f001 ffc6 	bl	8002578 <read_flash_page>
			  display_panel(&frame_buf_flash);
 80005ec:	487b      	ldr	r0, [pc, #492]	; (80007dc <main+0x2dc>)
 80005ee:	f001 fb4d 	bl	8001c8c <display_panel>
 80005f2:	e151      	b.n	8000898 <main+0x398>
		  }
		  else if (play_mode == 1)
 80005f4:	4b6e      	ldr	r3, [pc, #440]	; (80007b0 <main+0x2b0>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d147      	bne.n	800068c <main+0x18c>
		  {
			  uint8_t should_break = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  while(1)
			  {
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 8000602:	4b77      	ldr	r3, [pc, #476]	; (80007e0 <main+0x2e0>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	623b      	str	r3, [r7, #32]
 8000608:	e02c      	b.n	8000664 <main+0x164>
				  {
					  HAL_Delay(5);
 800060a:	2005      	movs	r0, #5
 800060c:	f002 fe5e 	bl	80032cc <HAL_Delay>
					  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
 8000610:	bf00      	nop
 8000612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f004 f821 	bl	8004660 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d0f6      	beq.n	8000612 <main+0x112>
					  if (play_mode_source != 0 || play_mode != 1 || setting_changed == 1)
 8000624:	4b63      	ldr	r3, [pc, #396]	; (80007b4 <main+0x2b4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d107      	bne.n	800063c <main+0x13c>
 800062c:	4b60      	ldr	r3, [pc, #384]	; (80007b0 <main+0x2b0>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d103      	bne.n	800063c <main+0x13c>
 8000634:	4b6b      	ldr	r3, [pc, #428]	; (80007e4 <main+0x2e4>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d103      	bne.n	8000644 <main+0x144>
					  {
						  should_break = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						  break;
 8000642:	e015      	b.n	8000670 <main+0x170>
					  }
					  read_flash_page(&frame_buf_flash, i);
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	4864      	ldr	r0, [pc, #400]	; (80007dc <main+0x2dc>)
 800064c:	f001 ff94 	bl	8002578 <read_flash_page>
					  display_panel(&frame_buf_flash);
 8000650:	4862      	ldr	r0, [pc, #392]	; (80007dc <main+0x2dc>)
 8000652:	f001 fb1b 	bl	8001c8c <display_panel>
					  display_image_number = i;
 8000656:	6a3b      	ldr	r3, [r7, #32]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b5f      	ldr	r3, [pc, #380]	; (80007d8 <main+0x2d8>)
 800065c:	701a      	strb	r2, [r3, #0]
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	3301      	adds	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
 8000664:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <main+0x2e8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	4293      	cmp	r3, r2
 800066e:	ddcc      	ble.n	800060a <main+0x10a>
				  }
				  if (should_break == 0)
 8000670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000674:	2b00      	cmp	r3, #0
 8000676:	d103      	bne.n	8000680 <main+0x180>
				  {
					  display_image_number = 0;
 8000678:	4b57      	ldr	r3, [pc, #348]	; (80007d8 <main+0x2d8>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e7c0      	b.n	8000602 <main+0x102>
				  }
				  else if (should_break == 1)
 8000680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000684:	2b01      	cmp	r3, #1
 8000686:	f000 8104 	beq.w	8000892 <main+0x392>
				  for (int i = auto_run_start_content; i <= auto_run_end_content; i++)
 800068a:	e7ba      	b.n	8000602 <main+0x102>
				  {
				  	  break;
				  }
			  }
		  }
		  else if (play_mode == 3)
 800068c:	4b48      	ldr	r3, [pc, #288]	; (80007b0 <main+0x2b0>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b03      	cmp	r3, #3
 8000692:	f040 8101 	bne.w	8000898 <main+0x398>
		  {
			  uint8_t should_break = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	77fb      	strb	r3, [r7, #31]
			  uint8_t Picture_count = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	77bb      	strb	r3, [r7, #30]
			  //initial or change mode
			  if( Mode_changed )
 800069e:	4b53      	ldr	r3, [pc, #332]	; (80007ec <main+0x2ec>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d042      	beq.n	800072c <main+0x22c>
			  {
				  read_flash_config();
 80006a6:	f001 fe09 	bl	80022bc <read_flash_config>
				  Playing_mode = Mode_config[100];//playing_mode_store = [Max_pic_per_mode*2*(Max_mode_num-1)]
 80006aa:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <main+0x2b8>)
 80006ac:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80006b0:	4b4f      	ldr	r3, [pc, #316]	; (80007f0 <main+0x2f0>)
 80006b2:	701a      	strb	r2, [r3, #0]
				  //fill Current_mode_config from Mode_config by using Playing_mode
				  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 80006b4:	4b4e      	ldr	r3, [pc, #312]	; (80007f0 <main+0x2f0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e00e      	b.n	80006e8 <main+0x1e8>
					 Current_mode_config[j]=Mode_config[i];
 80006ca:	4a3b      	ldr	r2, [pc, #236]	; (80007b8 <main+0x2b8>)
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	4413      	add	r3, r2
 80006d0:	7819      	ldrb	r1, [r3, #0]
 80006d2:	4a48      	ldr	r2, [pc, #288]	; (80007f4 <main+0x2f4>)
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	4413      	add	r3, r2
 80006d8:	460a      	mov	r2, r1
 80006da:	701a      	strb	r2, [r3, #0]
					 j++;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	3301      	adds	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
				  for(int i=Playing_mode*10,j=0; i<(Playing_mode+1)*10 ;i++){
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	3301      	adds	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	4b41      	ldr	r3, [pc, #260]	; (80007f0 <main+0x2f0>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	461a      	mov	r2, r3
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	4293      	cmp	r3, r2
 80006fc:	dbe5      	blt.n	80006ca <main+0x1ca>
				  }
				  Mode_changed = 0;
 80006fe:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <main+0x2ec>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
				  //check how many pics to display
				  //warning don't set Current_mode_config = [255 255 1 2 10 2 255 255 255 255]
				  Picture_count = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	77bb      	strb	r3, [r7, #30]
				  for(int i = 0 ; i < 5 ; i++){
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	e00b      	b.n	8000726 <main+0x226>
					 if(Current_mode_config[i*2] != 255)
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4a38      	ldr	r2, [pc, #224]	; (80007f4 <main+0x2f4>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	2bff      	cmp	r3, #255	; 0xff
 8000718:	d002      	beq.n	8000720 <main+0x220>
						 Picture_count++;
 800071a:	7fbb      	ldrb	r3, [r7, #30]
 800071c:	3301      	adds	r3, #1
 800071e:	77bb      	strb	r3, [r7, #30]
				  for(int i = 0 ; i < 5 ; i++){
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	3301      	adds	r3, #1
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	2b04      	cmp	r3, #4
 800072a:	ddf0      	ble.n	800070e <main+0x20e>
				  }
			  }
			  while(1)//display
			  {
				  for (int i = 0; i < Picture_count*2; i = i+2)
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	e030      	b.n	8000794 <main+0x294>
				  {
					  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);// wait to sync
 8000732:	bf00      	nop
 8000734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f003 ff90 	bl	8004660 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d0f6      	beq.n	8000734 <main+0x234>
					  int current_pic_delay=(Current_mode_config[i+1])*500;//ms
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3301      	adds	r3, #1
 800074a:	4a2a      	ldr	r2, [pc, #168]	; (80007f4 <main+0x2f4>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	461a      	mov	r2, r3
 8000750:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000754:	fb02 f303 	mul.w	r3, r2, r3
 8000758:	60bb      	str	r3, [r7, #8]
					  //HAL_Delay(current_pic_delay);
					  if (play_mode_source != 0 || play_mode != 3 || Mode_changed == 1)
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <main+0x2b4>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d107      	bne.n	8000772 <main+0x272>
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <main+0x2b0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d103      	bne.n	8000772 <main+0x272>
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <main+0x2ec>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d102      	bne.n	8000778 <main+0x278>
					  {
						  should_break = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	77fb      	strb	r3, [r7, #31]
						  break;
 8000776:	e012      	b.n	800079e <main+0x29e>
					  }
					  read_flash_page(&frame_buf_flash, Current_mode_config[i]);
 8000778:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <main+0x2f4>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	4816      	ldr	r0, [pc, #88]	; (80007dc <main+0x2dc>)
 8000784:	f001 fef8 	bl	8002578 <read_flash_page>
					  display_panel(&frame_buf_flash);
 8000788:	4814      	ldr	r0, [pc, #80]	; (80007dc <main+0x2dc>)
 800078a:	f001 fa7f 	bl	8001c8c <display_panel>
				  for (int i = 0; i < Picture_count*2; i = i+2)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3302      	adds	r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	7fbb      	ldrb	r3, [r7, #30]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	429a      	cmp	r2, r3
 800079c:	dbc9      	blt.n	8000732 <main+0x232>
				  }
				  if (should_break == 1)
 800079e:	7ffb      	ldrb	r3, [r7, #31]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d078      	beq.n	8000896 <main+0x396>
				  for (int i = 0; i < Picture_count*2; i = i+2)
 80007a4:	e7c2      	b.n	800072c <main+0x22c>
 80007a6:	bf00      	nop
 80007a8:	08008be0 	.word	0x08008be0
 80007ac:	200001d8 	.word	0x200001d8
 80007b0:	20040270 	.word	0x20040270
 80007b4:	20040271 	.word	0x20040271
 80007b8:	2007027c 	.word	0x2007027c
 80007bc:	48000800 	.word	0x48000800
 80007c0:	48001400 	.word	0x48001400
 80007c4:	20070278 	.word	0x20070278
 80007c8:	20000174 	.word	0x20000174
 80007cc:	20040274 	.word	0x20040274
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000004 	.word	0x20000004
 80007d8:	20070274 	.word	0x20070274
 80007dc:	20030270 	.word	0x20030270
 80007e0:	2000026c 	.word	0x2000026c
 80007e4:	2007027a 	.word	0x2007027a
 80007e8:	2000000a 	.word	0x2000000a
 80007ec:	20000020 	.word	0x20000020
 80007f0:	2000001f 	.word	0x2000001f
 80007f4:	200702ec 	.word	0x200702ec
					  break;
				  }
			  }
		  }
	  }
	  else if (play_mode_source == 1)
 80007f8:	4b56      	ldr	r3, [pc, #344]	; (8000954 <main+0x454>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d140      	bne.n	8000882 <main+0x382>
	  {
		  if (play_mode == 2)
 8000800:	4b55      	ldr	r3, [pc, #340]	; (8000958 <main+0x458>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d138      	bne.n	800087a <main+0x37a>
		  {
			  while(1)
			  {
				  HAL_Delay(5);
 8000808:	2005      	movs	r0, #5
 800080a:	f002 fd5f 	bl	80032cc <HAL_Delay>
				  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
 800080e:	bf00      	nop
 8000810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f003 ff22 	bl	8004660 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d0f6      	beq.n	8000810 <main+0x310>
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 8000822:	4b4c      	ldr	r3, [pc, #304]	; (8000954 <main+0x454>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d136      	bne.n	8000898 <main+0x398>
 800082a:	4b4b      	ldr	r3, [pc, #300]	; (8000958 <main+0x458>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b02      	cmp	r3, #2
 8000830:	d132      	bne.n	8000898 <main+0x398>
 8000832:	4b4a      	ldr	r3, [pc, #296]	; (800095c <main+0x45c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d02e      	beq.n	8000898 <main+0x398>
				  {
					  break;
				  }
				  display_panel(&frame_buf_0);
 800083a:	4849      	ldr	r0, [pc, #292]	; (8000960 <main+0x460>)
 800083c:	f001 fa26 	bl	8001c8c <display_panel>

				  HAL_Delay(5);
 8000840:	2005      	movs	r0, #5
 8000842:	f002 fd43 	bl	80032cc <HAL_Delay>
				  while(HAL_GPIO_ReadPin(sync_GPIO_Port, sync_Pin) == GPIO_PIN_SET);
 8000846:	bf00      	nop
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000850:	f003 ff06 	bl	8004660 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d0f6      	beq.n	8000848 <main+0x348>
				  if (play_mode_source != 1 || play_mode != 2 || setting_changed == 1)
 800085a:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <main+0x454>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d11a      	bne.n	8000898 <main+0x398>
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <main+0x458>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d116      	bne.n	8000898 <main+0x398>
 800086a:	4b3c      	ldr	r3, [pc, #240]	; (800095c <main+0x45c>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d012      	beq.n	8000898 <main+0x398>
				  {
					  break;
				  }
				  display_panel(&frame_buf_1);
 8000872:	483c      	ldr	r0, [pc, #240]	; (8000964 <main+0x464>)
 8000874:	f001 fa0a 	bl	8001c8c <display_panel>
				  HAL_Delay(5);
 8000878:	e7c6      	b.n	8000808 <main+0x308>
			  }
		  }
		  else
		  {
			  display_panel(&frame_buf_0);
 800087a:	4839      	ldr	r0, [pc, #228]	; (8000960 <main+0x460>)
 800087c:	f001 fa06 	bl	8001c8c <display_panel>
 8000880:	e00a      	b.n	8000898 <main+0x398>
		  }
	  }
	  else if (play_mode_source == 2)
 8000882:	4b34      	ldr	r3, [pc, #208]	; (8000954 <main+0x454>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d106      	bne.n	8000898 <main+0x398>
	  {
		  display_panel(&frame_buf_1);
 800088a:	4836      	ldr	r0, [pc, #216]	; (8000964 <main+0x464>)
 800088c:	f001 f9fe 	bl	8001c8c <display_panel>
 8000890:	e002      	b.n	8000898 <main+0x398>
				  	  break;
 8000892:	bf00      	nop
 8000894:	e000      	b.n	8000898 <main+0x398>
					  break;
 8000896:	bf00      	nop
	  }

	  if(setting_changed == 1)
 8000898:	4b30      	ldr	r3, [pc, #192]	; (800095c <main+0x45c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d155      	bne.n	800094c <main+0x44c>
	  {
		  uint16_t Horizontal_blanking_total = Horizontal_blanking_H*256 + Horizontal_blanking_L;
 80008a0:	4b31      	ldr	r3, [pc, #196]	; (8000968 <main+0x468>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <main+0x46c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	4413      	add	r3, r2
 80008b2:	80fb      	strh	r3, [r7, #6]
		  HBP = Horizontal_blanking_total / 3;
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	4a2e      	ldr	r2, [pc, #184]	; (8000970 <main+0x470>)
 80008b8:	fba2 2303 	umull	r2, r3, r2, r3
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	b29a      	uxth	r2, r3
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <main+0x474>)
 80008c2:	801a      	strh	r2, [r3, #0]
		  HFP = Horizontal_blanking_total / 3;
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	4a2a      	ldr	r2, [pc, #168]	; (8000970 <main+0x470>)
 80008c8:	fba2 2303 	umull	r2, r3, r2, r3
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <main+0x478>)
 80008d2:	801a      	strh	r2, [r3, #0]
		  HSA = Horizontal_blanking_total - (HBP + HFP);
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <main+0x474>)
 80008d6:	881a      	ldrh	r2, [r3, #0]
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <main+0x478>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	b29b      	uxth	r3, r3
 80008e0:	88fa      	ldrh	r2, [r7, #6]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <main+0x47c>)
 80008e8:	801a      	strh	r2, [r3, #0]

		  uint16_t Vertical_blanking_total = Vertical_blanking_H*256 + Vertical_blanking_L;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <main+0x480>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <main+0x484>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	4413      	add	r3, r2
 80008fc:	80bb      	strh	r3, [r7, #4]
		  VBP = Vertical_blanking_total / 3;
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <main+0x470>)
 8000902:	fba2 2303 	umull	r2, r3, r2, r3
 8000906:	085b      	lsrs	r3, r3, #1
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <main+0x488>)
 800090c:	801a      	strh	r2, [r3, #0]
		  VFP = Vertical_blanking_total / 3;
 800090e:	88bb      	ldrh	r3, [r7, #4]
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <main+0x470>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	085b      	lsrs	r3, r3, #1
 8000918:	b29a      	uxth	r2, r3
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <main+0x48c>)
 800091c:	801a      	strh	r2, [r3, #0]
		  VSA = Vertical_blanking_total - (VBP + VFP);
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <main+0x488>)
 8000920:	881a      	ldrh	r2, [r3, #0]
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <main+0x48c>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	b29b      	uxth	r3, r3
 800092a:	88ba      	ldrh	r2, [r7, #4]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <main+0x490>)
 8000932:	801a      	strh	r2, [r3, #0]

		  my_MX_DSIHOST_DSI_Init();
 8000934:	f001 ffcc 	bl	80028d0 <my_MX_DSIHOST_DSI_Init>
		  my_MX_LTDC_Init();
 8000938:	f002 f8d8 	bl	8002aec <my_MX_LTDC_Init>
		  mipi_config();
 800093c:	f000 fb7c 	bl	8001038 <mipi_config>
		  HAL_Delay(10);
 8000940:	200a      	movs	r0, #10
 8000942:	f002 fcc3 	bl	80032cc <HAL_Delay>

		  setting_changed = 0;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <main+0x45c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(10);
 800094c:	200a      	movs	r0, #10
 800094e:	f002 fcbd 	bl	80032cc <HAL_Delay>
	  if (play_mode_source == 0)
 8000952:	e63c      	b.n	80005ce <main+0xce>
 8000954:	20040271 	.word	0x20040271
 8000958:	20040270 	.word	0x20040270
 800095c:	2007027a 	.word	0x2007027a
 8000960:	20010270 	.word	0x20010270
 8000964:	20020270 	.word	0x20020270
 8000968:	2000000c 	.word	0x2000000c
 800096c:	2000000d 	.word	0x2000000d
 8000970:	aaaaaaab 	.word	0xaaaaaaab
 8000974:	20000012 	.word	0x20000012
 8000978:	20000014 	.word	0x20000014
 800097c:	20000010 	.word	0x20000010
 8000980:	2000000e 	.word	0x2000000e
 8000984:	2000000f 	.word	0x2000000f
 8000988:	20000018 	.word	0x20000018
 800098c:	2000001a 	.word	0x2000001a
 8000990:	20000016 	.word	0x20000016

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b096      	sub	sp, #88	; 0x58
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2244      	movs	r2, #68	; 0x44
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f008 f908 	bl	8008bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80009b6:	2000      	movs	r0, #0
 80009b8:	f004 f960 	bl	8004c7c <HAL_PWREx_ControlVoltageScaling>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80009c2:	f002 f9f9 	bl	8002db8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c6:	2301      	movs	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d0:	2302      	movs	r3, #2
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d4:	2303      	movs	r3, #3
 80009d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009d8:	2301      	movs	r3, #1
 80009da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80009dc:	231e      	movs	r3, #30
 80009de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 f9f7 	bl	8004de4 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009fc:	f002 f9dc 	bl	8002db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2303      	movs	r3, #3
 8000a06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	2105      	movs	r1, #5
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 fdfd 	bl	8005618 <HAL_RCC_ClockConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a24:	f002 f9c8 	bl	8002db8 <Error_Handler>
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3758      	adds	r7, #88	; 0x58
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0ae      	sub	sp, #184	; 0xb8
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a46:	2224      	movs	r2, #36	; 0x24
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f008 f8b4 	bl	8008bb8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	226c      	movs	r2, #108	; 0x6c
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f008 f8a5 	bl	8008bb8 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a6e:	4b64      	ldr	r3, [pc, #400]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a70:	4a64      	ldr	r2, [pc, #400]	; (8000c04 <MX_DSIHOST_DSI_Init+0x1d4>)
 8000a72:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a74:	4b62      	ldr	r3, [pc, #392]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8000a7a:	4b61      	ldr	r3, [pc, #388]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000a80:	4b5f      	ldr	r3, [pc, #380]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8000a86:	2332      	movs	r3, #50	; 0x32
 8000a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000a92:	2301      	movs	r3, #1
 8000a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4858      	ldr	r0, [pc, #352]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000aa0:	f002 fdf0 	bl	8003684 <HAL_DSI_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000aaa:	f002 f985 	bl	8002db8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ae4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4845      	ldr	r0, [pc, #276]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000aec:	f003 fa3d 	bl	8003f6a <HAL_DSI_ConfigHostTimeouts>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000af6:	f002 f95f 	bl	8002db8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000afa:	2313      	movs	r3, #19
 8000afc:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000afe:	230f      	movs	r3, #15
 8000b00:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000b02:	2309      	movs	r3, #9
 8000b04:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000b06:	230a      	movs	r3, #10
 8000b08:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4838      	ldr	r0, [pc, #224]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b1e:	f003 f9ba 	bl	8003e96 <HAL_DSI_ConfigPhyTimer>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000b28:	f002 f946 	bl	8002db8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000b2c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b30:	4833      	ldr	r0, [pc, #204]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b32:	f003 fbd6 	bl	80042e2 <HAL_DSI_SetLowPowerRXFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000b3c:	f002 f93c 	bl	8002db8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	482f      	ldr	r0, [pc, #188]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b44:	f002 feba 	bl	80038bc <HAL_DSI_ConfigErrorMonitor>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000b4e:	f002 f933 	bl	8002db8 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000b56:	2305      	movs	r3, #5
 8000b58:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8000b62:	2378      	movs	r3, #120	; 0x78
 8000b64:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 184;
 8000b7a:	23b8      	movs	r3, #184	; 0xb8
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 180;
 8000b7e:	23b4      	movs	r3, #180	; 0xb4
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 664;
 8000b82:	f44f 7326 	mov.w	r3, #664	; 0x298
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 9;
 8000b88:	2309      	movs	r3, #9
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000b90:	2308      	movs	r3, #8
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 156;
 8000b94:	239c      	movs	r3, #156	; 0x9c
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000b9e:	231c      	movs	r3, #28
 8000ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000ba2:	2350      	movs	r3, #80	; 0x50
 8000ba4:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000baa:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000bb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbc:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc2:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480b      	ldr	r0, [pc, #44]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bd4:	f002 ff57 	bl	8003a86 <HAL_DSI_ConfigVideoMode>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000bde:	f002 f8eb 	bl	8002db8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000be6:	f002 ff26 	bl	8003a36 <HAL_DSI_SetGenericVCID>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000bf0:	f002 f8e2 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
  LCD_PowerOn();
 8000bf4:	f000 fc2c 	bl	8001450 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	37b8      	adds	r7, #184	; 0xb8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000004c 	.word	0x2000004c
 8000c04:	40016c00 	.word	0x40016c00

08000c08 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	; 0x38
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2234      	movs	r2, #52	; 0x34
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f007 ffcf 	bl	8008bb8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c1c:	4a38      	ldr	r2, [pc, #224]	; (8000d00 <MX_LTDC_Init+0xf8>)
 8000c1e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c26:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000c28:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c30:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 183;
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c3e:	22b7      	movs	r2, #183	; 0xb7
 8000c40:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 363;
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c4a:	f240 126b 	movw	r2, #363	; 0x16b
 8000c4e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 16;
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c52:	2210      	movs	r2, #16
 8000c54:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 483;
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c58:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 172;
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c60:	22ac      	movs	r2, #172	; 0xac
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 663;
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c66:	f240 2297 	movw	r2, #663	; 0x297
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 180;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c6e:	22b4      	movs	r2, #180	; 0xb4
 8000c70:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c74:	22ff      	movs	r2, #255	; 0xff
 8000c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c7c:	22ff      	movs	r2, #255	; 0xff
 8000c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c84:	22ff      	movs	r2, #255	; 0xff
 8000c86:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c8a:	481c      	ldr	r0, [pc, #112]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000c8c:	f003 fd30 	bl	80046f0 <HAL_LTDC_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000c96:	f002 f88f 	bl	8002db8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 120;
 8000c9e:	2378      	movs	r3, #120	; 0x78
 8000ca0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 156;
 8000ca6:	239c      	movs	r3, #156	; 0x9c
 8000ca8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000cae:	23ff      	movs	r3, #255	; 0xff
 8000cb0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cba:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_LTDC_Init+0xfc>)
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 120;
 8000cc4:	2378      	movs	r3, #120	; 0x78
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 156;
 8000cc8:	239c      	movs	r3, #156	; 0x9c
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000ccc:	23ff      	movs	r3, #255	; 0xff
 8000cce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000cd2:	23ff      	movs	r3, #255	; 0xff
 8000cd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000cd8:	23ff      	movs	r3, #255	; 0xff
 8000cda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_LTDC_Init+0xf4>)
 8000ce6:	f003 fdd3 	bl	8004890 <HAL_LTDC_ConfigLayer>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000cf0:	f002 f862 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000068 	.word	0x20000068
 8000d00:	40016800 	.word	0x40016800
 8000d04:	20040274 	.word	0x20040274

08000d08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <MX_SPI2_Init+0x78>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d26:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d3e:	2208      	movs	r2, #8
 8000d40:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d56:	2207      	movs	r2, #7
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d62:	2208      	movs	r2, #8
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_SPI2_Init+0x74>)
 8000d68:	f005 fc8c 	bl	8006684 <HAL_SPI_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d72:	f002 f821 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000110 	.word	0x20000110
 8000d80:	40003800 	.word	0x40003800

08000d84 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_SPI3_Init+0x68>)
 8000d8a:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <MX_SPI3_Init+0x6c>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_SPI3_Init+0x68>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_SPI3_Init+0x68>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_SPI3_Init+0x68>)
 8000d9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000da0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_SPI3_Init+0x68>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_SPI3_Init+0x68>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_SPI3_Init+0x68>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <MX_SPI3_Init+0x68>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_SPI3_Init+0x68>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_SPI3_Init+0x68>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_SPI3_Init+0x68>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_SPI3_Init+0x68>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_SPI3_Init+0x68>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_SPI3_Init+0x68>)
 8000dda:	f005 fc53 	bl	8006684 <HAL_SPI_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000de4:	f001 ffe8 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000174 	.word	0x20000174
 8000df0:	40003c00 	.word	0x40003c00

08000df4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000df8:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_UART4_Init+0x90>)
 8000dfa:	4a23      	ldr	r2, [pc, #140]	; (8000e88 <MX_UART4_Init+0x94>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e3c:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e3e:	f006 ff9f 	bl	8007d80 <HAL_UART_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000e48:	f001 ffb6 	bl	8002db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	480d      	ldr	r0, [pc, #52]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e50:	f007 fdc4 	bl	80089dc <HAL_UARTEx_SetTxFifoThreshold>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e5a:	f001 ffad 	bl	8002db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4808      	ldr	r0, [pc, #32]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e62:	f007 fdf9 	bl	8008a58 <HAL_UARTEx_SetRxFifoThreshold>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e6c:	f001 ffa4 	bl	8002db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_UART4_Init+0x90>)
 8000e72:	f007 fd7a 	bl	800896a <HAL_UARTEx_DisableFifoMode>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e7c:	f001 ff9c 	bl	8002db8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200001d8 	.word	0x200001d8
 8000e88:	40004c00 	.word	0x40004c00

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea2:	4b60      	ldr	r3, [pc, #384]	; (8001024 <MX_GPIO_Init+0x198>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a5f      	ldr	r2, [pc, #380]	; (8001024 <MX_GPIO_Init+0x198>)
 8000ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b5d      	ldr	r3, [pc, #372]	; (8001024 <MX_GPIO_Init+0x198>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 8000eba:	f003 ff83 	bl	8004dc4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	4b59      	ldr	r3, [pc, #356]	; (8001024 <MX_GPIO_Init+0x198>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a58      	ldr	r2, [pc, #352]	; (8001024 <MX_GPIO_Init+0x198>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b56      	ldr	r3, [pc, #344]	; (8001024 <MX_GPIO_Init+0x198>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b53      	ldr	r3, [pc, #332]	; (8001024 <MX_GPIO_Init+0x198>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a52      	ldr	r2, [pc, #328]	; (8001024 <MX_GPIO_Init+0x198>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b50      	ldr	r3, [pc, #320]	; (8001024 <MX_GPIO_Init+0x198>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <MX_GPIO_Init+0x198>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a4c      	ldr	r2, [pc, #304]	; (8001024 <MX_GPIO_Init+0x198>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <MX_GPIO_Init+0x198>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <MX_GPIO_Init+0x198>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a46      	ldr	r2, [pc, #280]	; (8001024 <MX_GPIO_Init+0x198>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b44      	ldr	r3, [pc, #272]	; (8001024 <MX_GPIO_Init+0x198>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <MX_GPIO_Init+0x198>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a40      	ldr	r2, [pc, #256]	; (8001024 <MX_GPIO_Init+0x198>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <MX_GPIO_Init+0x198>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <MX_GPIO_Init+0x198>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a3a      	ldr	r2, [pc, #232]	; (8001024 <MX_GPIO_Init+0x198>)
 8000f3c:	f043 0320 	orr.w	r3, r3, #32
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b38      	ldr	r3, [pc, #224]	; (8001024 <MX_GPIO_Init+0x198>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0320 	and.w	r3, r3, #32
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f54:	4834      	ldr	r0, [pc, #208]	; (8001028 <MX_GPIO_Init+0x19c>)
 8000f56:	f003 fb9b 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESXP_Pin|flash_cs_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8000f60:	4831      	ldr	r0, [pc, #196]	; (8001028 <MX_GPIO_Init+0x19c>)
 8000f62:	f003 fb95 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bat_en_GPIO_Port, bat_en_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4830      	ldr	r0, [pc, #192]	; (800102c <MX_GPIO_Init+0x1a0>)
 8000f6c:	f003 fb90 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(en_GPIO_Port, en_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f76:	482e      	ldr	r0, [pc, #184]	; (8001030 <MX_GPIO_Init+0x1a4>)
 8000f78:	f003 fb8a 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin RESXP_Pin flash_cs_Pin */
  GPIO_InitStruct.Pin = led_Pin|RESXP_Pin|flash_cs_Pin;
 8000f7c:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4824      	ldr	r0, [pc, #144]	; (8001028 <MX_GPIO_Init+0x19c>)
 8000f96:	f003 f9d1 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : sync_Pin */
  GPIO_InitStruct.Pin = sync_Pin;
 8000f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(sync_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f003 f9c3 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : pic_sw_Pin */
  GPIO_InitStruct.Pin = pic_sw_Pin;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fbc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(pic_sw_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <MX_GPIO_Init+0x1a8>)
 8000fce:	f003 f9b5 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : bat_en_Pin */
  GPIO_InitStruct.Pin = bat_en_Pin;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(bat_en_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <MX_GPIO_Init+0x1a0>)
 8000fea:	f003 f9a7 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : en_Pin */
  GPIO_InitStruct.Pin = en_Pin;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(en_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	480a      	ldr	r0, [pc, #40]	; (8001030 <MX_GPIO_Init+0x1a4>)
 8001008:	f003 f998 	bl	800433c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2103      	movs	r1, #3
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f002 fa5a 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001016:	2028      	movs	r0, #40	; 0x28
 8001018:	f002 fa73 	bl	8003502 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101c:	bf00      	nop
 800101e:	3730      	adds	r7, #48	; 0x30
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000800 	.word	0x48000800
 8001030:	48001400 	.word	0x48001400
 8001034:	48000c00 	.word	0x48000c00

08001038 <mipi_config>:

/* USER CODE BEGIN 4 */

void mipi_config()
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b0af      	sub	sp, #188	; 0xbc
 800103c:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK)
 800103e:	48c4      	ldr	r0, [pc, #784]	; (8001350 <mipi_config+0x318>)
 8001040:	f003 f859 	bl	80040f6 <HAL_DSI_Start>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <mipi_config+0x16>
	{
		Error_Handler();
 800104a:	f001 feb5 	bl	8002db8 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 800104e:	23c3      	movs	r3, #195	; 0xc3
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	23f0      	movs	r3, #240	; 0xf0
 8001054:	2215      	movs	r2, #21
 8001056:	2100      	movs	r1, #0
 8001058:	48bd      	ldr	r0, [pc, #756]	; (8001350 <mipi_config+0x318>)
 800105a:	f003 f888 	bl	800416e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 800105e:	2396      	movs	r3, #150	; 0x96
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	23f0      	movs	r3, #240	; 0xf0
 8001064:	2215      	movs	r2, #21
 8001066:	2100      	movs	r1, #0
 8001068:	48b9      	ldr	r0, [pc, #740]	; (8001350 <mipi_config+0x318>)
 800106a:	f003 f880 	bl	800416e <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = {0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33};
 800106e:	4ab9      	ldr	r2, [pc, #740]	; (8001354 <mipi_config+0x31c>)
 8001070:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001078:	6018      	str	r0, [r3, #0]
 800107a:	3304      	adds	r3, #4
 800107c:	8019      	strh	r1, [r3, #0]
 800107e:	3302      	adds	r3, #2
 8001080:	0c0a      	lsrs	r2, r1, #16
 8001082:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8001084:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	23e7      	movs	r3, #231	; 0xe7
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2308      	movs	r3, #8
 8001090:	2239      	movs	r2, #57	; 0x39
 8001092:	2100      	movs	r1, #0
 8001094:	48ae      	ldr	r0, [pc, #696]	; (8001350 <mipi_config+0x318>)
 8001096:	f003 f88c 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = {0xC0, 0x68, 0xE0};
 800109a:	4aaf      	ldr	r2, [pc, #700]	; (8001358 <mipi_config+0x320>)
 800109c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	4611      	mov	r1, r2
 80010a4:	8019      	strh	r1, [r3, #0]
 80010a6:	3302      	adds	r3, #2
 80010a8:	0c12      	lsrs	r2, r2, #16
 80010aa:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 80010ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	23a4      	movs	r3, #164	; 0xa4
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2304      	movs	r3, #4
 80010b8:	2239      	movs	r2, #57	; 0x39
 80010ba:	2100      	movs	r1, #0
 80010bc:	48a4      	ldr	r0, [pc, #656]	; (8001350 <mipi_config+0x318>)
 80010be:	f003 f878 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = {0x42, 0x05, 0x24, 0x03};
 80010c2:	4ba6      	ldr	r3, [pc, #664]	; (800135c <mipi_config+0x324>)
 80010c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 80010c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	23c3      	movs	r3, #195	; 0xc3
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2305      	movs	r3, #5
 80010d4:	2239      	movs	r2, #57	; 0x39
 80010d6:	2100      	movs	r1, #0
 80010d8:	489d      	ldr	r0, [pc, #628]	; (8001350 <mipi_config+0x318>)
 80010da:	f003 f86a 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = {0x42, 0x05, 0x24, 0x03};
 80010de:	4b9f      	ldr	r3, [pc, #636]	; (800135c <mipi_config+0x324>)
 80010e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 80010e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	23c4      	movs	r3, #196	; 0xc4
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2305      	movs	r3, #5
 80010f0:	2239      	movs	r2, #57	; 0x39
 80010f2:	2100      	movs	r1, #0
 80010f4:	4896      	ldr	r0, [pc, #600]	; (8001350 <mipi_config+0x318>)
 80010f6:	f003 f85c 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 80010fa:	4a99      	ldr	r2, [pc, #612]	; (8001360 <mipi_config+0x328>)
 80010fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001100:	ca07      	ldmia	r2, {r0, r1, r2}
 8001102:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 8001106:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	23e5      	movs	r3, #229	; 0xe5
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	230d      	movs	r3, #13
 8001112:	2239      	movs	r2, #57	; 0x39
 8001114:	2100      	movs	r1, #0
 8001116:	488e      	ldr	r0, [pc, #568]	; (8001350 <mipi_config+0x318>)
 8001118:	f003 f84b 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 800111c:	4a90      	ldr	r2, [pc, #576]	; (8001360 <mipi_config+0x328>)
 800111e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001122:	ca07      	ldmia	r2, {r0, r1, r2}
 8001124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001128:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	23e6      	movs	r3, #230	; 0xe6
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	230d      	movs	r3, #13
 8001134:	2239      	movs	r2, #57	; 0x39
 8001136:	2100      	movs	r1, #0
 8001138:	4885      	ldr	r0, [pc, #532]	; (8001350 <mipi_config+0x318>)
 800113a:	f003 f83a 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = {0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22};
 800113e:	4a89      	ldr	r2, [pc, #548]	; (8001364 <mipi_config+0x32c>)
 8001140:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001148:	6018      	str	r0, [r3, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	8019      	strh	r1, [r3, #0]
 800114e:	3302      	adds	r3, #2
 8001150:	0c0a      	lsrs	r2, r1, #16
 8001152:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 8001154:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	23ec      	movs	r3, #236	; 0xec
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2308      	movs	r3, #8
 8001160:	2239      	movs	r2, #57	; 0x39
 8001162:	2100      	movs	r1, #0
 8001164:	487a      	ldr	r0, [pc, #488]	; (8001350 <mipi_config+0x318>)
 8001166:	f003 f824 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = {0x88, 0x05, 0x0F, 0x18};
 800116a:	4b7f      	ldr	r3, [pc, #508]	; (8001368 <mipi_config+0x330>)
 800116c:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 800116e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	23c1      	movs	r3, #193	; 0xc1
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2305      	movs	r3, #5
 800117a:	2239      	movs	r2, #57	; 0x39
 800117c:	2100      	movs	r1, #0
 800117e:	4874      	ldr	r0, [pc, #464]	; (8001350 <mipi_config+0x318>)
 8001180:	f003 f817 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = {0x88, 0x05, 0x0F, 0x18};
 8001184:	4b78      	ldr	r3, [pc, #480]	; (8001368 <mipi_config+0x330>)
 8001186:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 8001188:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	23c2      	movs	r3, #194	; 0xc2
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2305      	movs	r3, #5
 8001194:	2239      	movs	r2, #57	; 0x39
 8001196:	2100      	movs	r1, #0
 8001198:	486d      	ldr	r0, [pc, #436]	; (8001350 <mipi_config+0x318>)
 800119a:	f003 f80a 	bl	80041b2 <HAL_DSI_LongWrite>
	//HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x08);
 800119e:	2308      	movs	r3, #8
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2336      	movs	r3, #54	; 0x36
 80011a4:	2215      	movs	r2, #21
 80011a6:	2100      	movs	r1, #0
 80011a8:	4869      	ldr	r0, [pc, #420]	; (8001350 <mipi_config+0x318>)
 80011aa:	f002 ffe0 	bl	800416e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 80011ae:	2307      	movs	r3, #7
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	233a      	movs	r3, #58	; 0x3a
 80011b4:	2215      	movs	r2, #21
 80011b6:	2100      	movs	r1, #0
 80011b8:	4865      	ldr	r0, [pc, #404]	; (8001350 <mipi_config+0x318>)
 80011ba:	f002 ffd8 	bl	800416e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 80011be:	23be      	movs	r3, #190	; 0xbe
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	23c5      	movs	r3, #197	; 0xc5
 80011c4:	2215      	movs	r2, #21
 80011c6:	2100      	movs	r1, #0
 80011c8:	4861      	ldr	r0, [pc, #388]	; (8001350 <mipi_config+0x318>)
 80011ca:	f002 ffd0 	bl	800416e <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = {0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55, 0x3D, 0x19, 0x18, 0x24, 0x27};
 80011ce:	4b67      	ldr	r3, [pc, #412]	; (800136c <mipi_config+0x334>)
 80011d0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80011d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d6:	c407      	stmia	r4!, {r0, r1, r2}
 80011d8:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 80011da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	23e0      	movs	r3, #224	; 0xe0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	230f      	movs	r3, #15
 80011e6:	2239      	movs	r2, #57	; 0x39
 80011e8:	2100      	movs	r1, #0
 80011ea:	4859      	ldr	r0, [pc, #356]	; (8001350 <mipi_config+0x318>)
 80011ec:	f002 ffe1 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = {0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56, 0x3E, 0x1A, 0x18, 0x24, 0x28};
 80011f0:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <mipi_config+0x338>)
 80011f2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80011f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f8:	c407      	stmia	r4!, {r0, r1, r2}
 80011fa:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 80011fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	23e1      	movs	r3, #225	; 0xe1
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	230f      	movs	r3, #15
 8001208:	2239      	movs	r2, #57	; 0x39
 800120a:	2100      	movs	r1, #0
 800120c:	4850      	ldr	r0, [pc, #320]	; (8001350 <mipi_config+0x318>)
 800120e:	f002 ffd0 	bl	80041b2 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 8001212:	2310      	movs	r3, #16
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	23b2      	movs	r3, #178	; 0xb2
 8001218:	2215      	movs	r2, #21
 800121a:	2100      	movs	r1, #0
 800121c:	484c      	ldr	r0, [pc, #304]	; (8001350 <mipi_config+0x318>)
 800121e:	f002 ffa6 	bl	800416e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 8001222:	2301      	movs	r3, #1
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	23b3      	movs	r3, #179	; 0xb3
 8001228:	2215      	movs	r2, #21
 800122a:	2100      	movs	r1, #0
 800122c:	4848      	ldr	r0, [pc, #288]	; (8001350 <mipi_config+0x318>)
 800122e:	f002 ff9e 	bl	800416e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 8001232:	2301      	movs	r3, #1
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	23b4      	movs	r3, #180	; 0xb4
 8001238:	2215      	movs	r2, #21
 800123a:	2100      	movs	r1, #0
 800123c:	4844      	ldr	r0, [pc, #272]	; (8001350 <mipi_config+0x318>)
 800123e:	f002 ff96 	bl	800416e <HAL_DSI_ShortWrite>
	//uint8_t cmd20[2] = {0x27, 0x09};
	uint8_t cmd20[2] = {0x4D, 0x0E};
 8001242:	f640 634d 	movw	r3, #3661	; 0xe4d
 8001246:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 800124a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	23b6      	movs	r3, #182	; 0xb6
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2303      	movs	r3, #3
 8001256:	2239      	movs	r2, #57	; 0x39
 8001258:	2100      	movs	r1, #0
 800125a:	483d      	ldr	r0, [pc, #244]	; (8001350 <mipi_config+0x318>)
 800125c:	f002 ffa9 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = {0x00, 0x54, 0x00, 0x54};
 8001260:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 8001264:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 8001266:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	23b5      	movs	r3, #181	; 0xb5
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2305      	movs	r3, #5
 8001272:	2239      	movs	r2, #57	; 0x39
 8001274:	2100      	movs	r1, #0
 8001276:	4836      	ldr	r0, [pc, #216]	; (8001350 <mipi_config+0x318>)
 8001278:	f002 ff9b 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 800127c:	4a3d      	ldr	r2, [pc, #244]	; (8001374 <mipi_config+0x33c>)
 800127e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001282:	ca07      	ldmia	r2, {r0, r1, r2}
 8001284:	c303      	stmia	r3!, {r0, r1}
 8001286:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 8001288:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	23a5      	movs	r3, #165	; 0xa5
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	230a      	movs	r3, #10
 8001294:	2239      	movs	r2, #57	; 0x39
 8001296:	2100      	movs	r1, #0
 8001298:	482d      	ldr	r0, [pc, #180]	; (8001350 <mipi_config+0x318>)
 800129a:	f002 ff8a 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 800129e:	4a35      	ldr	r2, [pc, #212]	; (8001374 <mipi_config+0x33c>)
 80012a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a6:	c303      	stmia	r3!, {r0, r1}
 80012a8:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 80012aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	23a6      	movs	r3, #166	; 0xa6
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	230a      	movs	r3, #10
 80012b6:	2239      	movs	r2, #57	; 0x39
 80012b8:	2100      	movs	r1, #0
 80012ba:	4825      	ldr	r0, [pc, #148]	; (8001350 <mipi_config+0x318>)
 80012bc:	f002 ff79 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = {0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00};
 80012c0:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <mipi_config+0x340>)
 80012c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ca:	6018      	str	r0, [r3, #0]
 80012cc:	3304      	adds	r3, #4
 80012ce:	8019      	strh	r1, [r3, #0]
 80012d0:	3302      	adds	r3, #2
 80012d2:	0c0a      	lsrs	r2, r1, #16
 80012d4:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 80012d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	23ba      	movs	r3, #186	; 0xba
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2308      	movs	r3, #8
 80012e2:	2239      	movs	r2, #57	; 0x39
 80012e4:	2100      	movs	r1, #0
 80012e6:	481a      	ldr	r0, [pc, #104]	; (8001350 <mipi_config+0x318>)
 80012e8:	f002 ff63 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 80012ec:	4a23      	ldr	r2, [pc, #140]	; (800137c <mipi_config+0x344>)
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f6:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	23bb      	movs	r3, #187	; 0xbb
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2309      	movs	r3, #9
 8001306:	2239      	movs	r2, #57	; 0x39
 8001308:	2100      	movs	r1, #0
 800130a:	4811      	ldr	r0, [pc, #68]	; (8001350 <mipi_config+0x318>)
 800130c:	f002 ff51 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 8001310:	4a1a      	ldr	r2, [pc, #104]	; (800137c <mipi_config+0x344>)
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800131a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	23bc      	movs	r3, #188	; 0xbc
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2309      	movs	r3, #9
 800132a:	2239      	movs	r2, #57	; 0x39
 800132c:	2100      	movs	r1, #0
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <mipi_config+0x318>)
 8001330:	f002 ff3f 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = {0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF, 0xFF, 0xF9};
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <mipi_config+0x348>)
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	ca07      	ldmia	r2, {r0, r1, r2}
 800133c:	c303      	stmia	r3!, {r0, r1}
 800133e:	801a      	strh	r2, [r3, #0]
 8001340:	3302      	adds	r3, #2
 8001342:	0c12      	lsrs	r2, r2, #16
 8001344:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	e01a      	b.n	8001384 <mipi_config+0x34c>
 800134e:	bf00      	nop
 8001350:	2000004c 	.word	0x2000004c
 8001354:	08008be8 	.word	0x08008be8
 8001358:	08008bf0 	.word	0x08008bf0
 800135c:	03240542 	.word	0x03240542
 8001360:	08008bf4 	.word	0x08008bf4
 8001364:	08008c00 	.word	0x08008c00
 8001368:	180f0588 	.word	0x180f0588
 800136c:	08008c08 	.word	0x08008c08
 8001370:	08008c18 	.word	0x08008c18
 8001374:	08008c28 	.word	0x08008c28
 8001378:	08008c34 	.word	0x08008c34
 800137c:	08008c3c 	.word	0x08008c3c
 8001380:	08008c44 	.word	0x08008c44
 8001384:	23bd      	movs	r3, #189	; 0xbd
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	230c      	movs	r3, #12
 800138a:	2239      	movs	r2, #57	; 0x39
 800138c:	2100      	movs	r1, #0
 800138e:	482d      	ldr	r0, [pc, #180]	; (8001444 <mipi_config+0x40c>)
 8001390:	f002 ff0f 	bl	80041b2 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 8001394:	23c3      	movs	r3, #195	; 0xc3
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	23ed      	movs	r3, #237	; 0xed
 800139a:	2215      	movs	r2, #21
 800139c:	2100      	movs	r1, #0
 800139e:	4829      	ldr	r0, [pc, #164]	; (8001444 <mipi_config+0x40c>)
 80013a0:	f002 fee5 	bl	800416e <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = {0x40, 0x0F, 0x00};
 80013a4:	4a28      	ldr	r2, [pc, #160]	; (8001448 <mipi_config+0x410>)
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	4611      	mov	r1, r2
 80013ae:	8019      	strh	r1, [r3, #0]
 80013b0:	3302      	adds	r3, #2
 80013b2:	0c12      	lsrs	r2, r2, #16
 80013b4:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	23e4      	movs	r3, #228	; 0xe4
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2304      	movs	r3, #4
 80013c2:	2239      	movs	r2, #57	; 0x39
 80013c4:	2100      	movs	r1, #0
 80013c6:	481f      	ldr	r0, [pc, #124]	; (8001444 <mipi_config+0x40c>)
 80013c8:	f002 fef3 	bl	80041b2 <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = {0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25};
 80013cc:	4a1f      	ldr	r2, [pc, #124]	; (800144c <mipi_config+0x414>)
 80013ce:	463b      	mov	r3, r7
 80013d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d2:	c303      	stmia	r3!, {r0, r1}
 80013d4:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 80013d6:	463b      	mov	r3, r7
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	23cc      	movs	r3, #204	; 0xcc
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	230a      	movs	r3, #10
 80013e0:	2239      	movs	r2, #57	; 0x39
 80013e2:	2100      	movs	r1, #0
 80013e4:	4817      	ldr	r0, [pc, #92]	; (8001444 <mipi_config+0x40c>)
 80013e6:	f002 fee4 	bl	80041b2 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80013ea:	2300      	movs	r3, #0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2335      	movs	r3, #53	; 0x35
 80013f0:	2215      	movs	r2, #21
 80013f2:	2100      	movs	r1, #0
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <mipi_config+0x40c>)
 80013f6:	f002 feba 	bl	800416e <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f001 ff66 	bl	80032cc <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001400:	2300      	movs	r3, #0
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2311      	movs	r3, #17
 8001406:	2205      	movs	r2, #5
 8001408:	2100      	movs	r1, #0
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <mipi_config+0x40c>)
 800140c:	f002 feaf 	bl	800416e <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001410:	2078      	movs	r0, #120	; 0x78
 8001412:	f001 ff5b 	bl	80032cc <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8001416:	2300      	movs	r3, #0
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2329      	movs	r3, #41	; 0x29
 800141c:	2205      	movs	r2, #5
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <mipi_config+0x40c>)
 8001422:	f002 fea4 	bl	800416e <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001426:	2078      	movs	r0, #120	; 0x78
 8001428:	f001 ff50 	bl	80032cc <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800142c:	2300      	movs	r3, #0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2335      	movs	r3, #53	; 0x35
 8001432:	2215      	movs	r2, #21
 8001434:	2100      	movs	r1, #0
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <mipi_config+0x40c>)
 8001438:	f002 fe99 	bl	800416e <HAL_DSI_ShortWrite>
}
 800143c:	bf00      	nop
 800143e:	37b4      	adds	r7, #180	; 0xb4
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	2000004c 	.word	0x2000004c
 8001448:	08008c50 	.word	0x08008c50
 800144c:	08008c54 	.word	0x08008c54

08001450 <LCD_PowerOn>:

static void LCD_PowerOn(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2140      	movs	r1, #64	; 0x40
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <LCD_PowerOn+0x28>)
 800145a:	f003 f919 	bl	8004690 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 800145e:	2014      	movs	r0, #20
 8001460:	f001 ff34 	bl	80032cc <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2140      	movs	r1, #64	; 0x40
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <LCD_PowerOn+0x28>)
 800146a:	f003 f911 	bl	8004690 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 800146e:	2078      	movs	r0, #120	; 0x78
 8001470:	f001 ff2c 	bl	80032cc <HAL_Delay>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	48000400 	.word	0x48000400

0800147c <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = {0};
 8001486:	2300      	movs	r3, #0
 8001488:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = {0};
 800148a:	2300      	movs	r3, #0
 800148c:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 1000);
 800148e:	f107 010c 	add.w	r1, r7, #12
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	2201      	movs	r2, #1
 8001498:	4879      	ldr	r0, [pc, #484]	; (8001680 <Write_Registers_data+0x204>)
 800149a:	f005 fb0b 	bl	8006ab4 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)data, 1, 1000);
 800149e:	f107 0108 	add.w	r1, r7, #8
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	2201      	movs	r2, #1
 80014a8:	4875      	ldr	r0, [pc, #468]	; (8001680 <Write_Registers_data+0x204>)
 80014aa:	f005 fb03 	bl	8006ab4 <HAL_SPI_Receive>
	if (do_flag == 1)
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	f040 80dc 	bne.w	800166e <Write_Registers_data+0x1f2>
	{
		switch (Register_Address[0])
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
 80014b8:	2b21      	cmp	r3, #33	; 0x21
 80014ba:	f200 80dd 	bhi.w	8001678 <Write_Registers_data+0x1fc>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <Write_Registers_data+0x48>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	0800154d 	.word	0x0800154d
 80014c8:	0800155d 	.word	0x0800155d
 80014cc:	0800156d 	.word	0x0800156d
 80014d0:	0800157b 	.word	0x0800157b
 80014d4:	08001589 	.word	0x08001589
 80014d8:	08001597 	.word	0x08001597
 80014dc:	080015a5 	.word	0x080015a5
 80014e0:	080015ad 	.word	0x080015ad
 80014e4:	08001673 	.word	0x08001673
 80014e8:	08001673 	.word	0x08001673
 80014ec:	08001673 	.word	0x08001673
 80014f0:	080015b5 	.word	0x080015b5
 80014f4:	080015bd 	.word	0x080015bd
 80014f8:	080015c5 	.word	0x080015c5
 80014fc:	080015cd 	.word	0x080015cd
 8001500:	080015d5 	.word	0x080015d5
 8001504:	080015dd 	.word	0x080015dd
 8001508:	08001673 	.word	0x08001673
 800150c:	08001673 	.word	0x08001673
 8001510:	08001673 	.word	0x08001673
 8001514:	08001673 	.word	0x08001673
 8001518:	08001673 	.word	0x08001673
 800151c:	08001673 	.word	0x08001673
 8001520:	08001673 	.word	0x08001673
 8001524:	0800163f 	.word	0x0800163f
 8001528:	08001647 	.word	0x08001647
 800152c:	08001679 	.word	0x08001679
 8001530:	08001679 	.word	0x08001679
 8001534:	08001679 	.word	0x08001679
 8001538:	08001679 	.word	0x08001679
 800153c:	08001679 	.word	0x08001679
 8001540:	08001679 	.word	0x08001679
 8001544:	08001679 	.word	0x08001679
 8001548:	08001655 	.word	0x08001655
		{
		case 0: //Horizontal Resolution
			IMAGE_H = (uint32_t)data[0];
 800154c:	7a3b      	ldrb	r3, [r7, #8]
 800154e:	461a      	mov	r2, r3
 8001550:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <Write_Registers_data+0x208>)
 8001552:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 8001554:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <Write_Registers_data+0x20c>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
			break;
 800155a:	e08d      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 1: //Vertical Resolution
			IMAGE_W = (uint32_t)data[0];
 800155c:	7a3b      	ldrb	r3, [r7, #8]
 800155e:	461a      	mov	r2, r3
 8001560:	4b4a      	ldr	r3, [pc, #296]	; (800168c <Write_Registers_data+0x210>)
 8001562:	601a      	str	r2, [r3, #0]
			setting_changed = 1;
 8001564:	4b48      	ldr	r3, [pc, #288]	; (8001688 <Write_Registers_data+0x20c>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
			break;
 800156a:	e085      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 2: //Horizontal blanking (High byte)
			Horizontal_blanking_H = data[0];
 800156c:	7a3a      	ldrb	r2, [r7, #8]
 800156e:	4b48      	ldr	r3, [pc, #288]	; (8001690 <Write_Registers_data+0x214>)
 8001570:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001572:	4b45      	ldr	r3, [pc, #276]	; (8001688 <Write_Registers_data+0x20c>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
			break;
 8001578:	e07e      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 3: //Horizontal blanking (Low byte)
			Horizontal_blanking_L = data[0];
 800157a:	7a3a      	ldrb	r2, [r7, #8]
 800157c:	4b45      	ldr	r3, [pc, #276]	; (8001694 <Write_Registers_data+0x218>)
 800157e:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 8001580:	4b41      	ldr	r3, [pc, #260]	; (8001688 <Write_Registers_data+0x20c>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
			break;
 8001586:	e077      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 4: //Vertical blanking (High byte)
			Vertical_blanking_H = data[0];
 8001588:	7a3a      	ldrb	r2, [r7, #8]
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <Write_Registers_data+0x21c>)
 800158c:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 800158e:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <Write_Registers_data+0x20c>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
			break;
 8001594:	e070      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 5: //Vertical blanking (Low byte)
			Vertical_blanking_L = data[0];
 8001596:	7a3a      	ldrb	r2, [r7, #8]
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <Write_Registers_data+0x220>)
 800159a:	701a      	strb	r2, [r3, #0]
			setting_changed = 1;
 800159c:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <Write_Registers_data+0x20c>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
			break;
 80015a2:	e069      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 6: //Frame rate x 2 (Hz)
			frame_rate_r = data[0];
 80015a4:	7a3a      	ldrb	r2, [r7, #8]
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <Write_Registers_data+0x224>)
 80015a8:	701a      	strb	r2, [r3, #0]
			break;
 80015aa:	e065      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 7: //Show SPI flash content length
			spi_flash_content_length = data[0];
 80015ac:	7a3a      	ldrb	r2, [r7, #8]
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <Write_Registers_data+0x228>)
 80015b0:	701a      	strb	r2, [r3, #0]
			break;
 80015b2:	e061      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 9: //Clock rate of SPI
			break;
		case 10: //Clock rate of I2C
			break;
		case 11: //Pixel Mapping one_L
			Pixel_Mapping_one_L = data[0];
 80015b4:	7a3a      	ldrb	r2, [r7, #8]
 80015b6:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <Write_Registers_data+0x22c>)
 80015b8:	701a      	strb	r2, [r3, #0]
			break;
 80015ba:	e05d      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 12: //Pixel Mapping one_H
			Pixel_Mapping_one_H = data[0];
 80015bc:	7a3a      	ldrb	r2, [r7, #8]
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <Write_Registers_data+0x230>)
 80015c0:	701a      	strb	r2, [r3, #0]
			break;
 80015c2:	e059      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 13: //Auto Run start content of SPI flash
			auto_run_start_content = data[0];
 80015c4:	7a3a      	ldrb	r2, [r7, #8]
 80015c6:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <Write_Registers_data+0x234>)
 80015c8:	701a      	strb	r2, [r3, #0]
			break;
 80015ca:	e055      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 14: //Show first content number of SPI flash
			display_image_number = data[0];
 80015cc:	7a3a      	ldrb	r2, [r7, #8]
 80015ce:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <Write_Registers_data+0x238>)
 80015d0:	701a      	strb	r2, [r3, #0]
			break;
 80015d2:	e051      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 15: //Auto Run end content of SPI flash
			auto_run_end_content = data[0];
 80015d4:	7a3a      	ldrb	r2, [r7, #8]
 80015d6:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <Write_Registers_data+0x23c>)
 80015d8:	701a      	strb	r2, [r3, #0]
			break;
 80015da:	e04d      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 16: //Control A
			switch (data[0] & 0b00000011) //Display Mode
 80015dc:	7a3b      	ldrb	r3, [r7, #8]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d00e      	beq.n	8001604 <Write_Registers_data+0x188>
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	dc10      	bgt.n	800160c <Write_Registers_data+0x190>
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <Write_Registers_data+0x178>
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d004      	beq.n	80015fc <Write_Registers_data+0x180>
 80015f2:	e00b      	b.n	800160c <Write_Registers_data+0x190>
			{
			case 0b00000000: //Display content of frame buffer (0)
				play_mode_source = 1;
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <Write_Registers_data+0x240>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
				break;
 80015fa:	e007      	b.n	800160c <Write_Registers_data+0x190>
			case 0b00000001: //Display content of frame buffer (1)
				play_mode_source = 2;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <Write_Registers_data+0x240>)
 80015fe:	2202      	movs	r2, #2
 8001600:	701a      	strb	r2, [r3, #0]
				break;
 8001602:	e003      	b.n	800160c <Write_Registers_data+0x190>
			case 0b00000011: //Display Flash content
				play_mode_source = 0;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <Write_Registers_data+0x240>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
				break;
 800160a:	bf00      	nop
			}
			switch (data[0] & 0b00001100) //Static or Dynamic mode
 800160c:	7a3b      	ldrb	r3, [r7, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b08      	cmp	r3, #8
 8001614:	d00e      	beq.n	8001634 <Write_Registers_data+0x1b8>
 8001616:	2b08      	cmp	r3, #8
 8001618:	dc2d      	bgt.n	8001676 <Write_Registers_data+0x1fa>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <Write_Registers_data+0x1a8>
 800161e:	2b04      	cmp	r3, #4
 8001620:	d004      	beq.n	800162c <Write_Registers_data+0x1b0>
				break;
			case 0b00001000: //Dynamic display flash content
				play_mode = 1;
				break;
			}
			break;
 8001622:	e028      	b.n	8001676 <Write_Registers_data+0x1fa>
				play_mode = 0;
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <Write_Registers_data+0x244>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
				break;
 800162a:	e007      	b.n	800163c <Write_Registers_data+0x1c0>
				play_mode = 2;
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <Write_Registers_data+0x244>)
 800162e:	2202      	movs	r2, #2
 8001630:	701a      	strb	r2, [r3, #0]
				break;
 8001632:	e003      	b.n	800163c <Write_Registers_data+0x1c0>
				play_mode = 1;
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <Write_Registers_data+0x244>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
				break;
 800163a:	bf00      	nop
			break;
 800163c:	e01b      	b.n	8001676 <Write_Registers_data+0x1fa>
		case 22: //Power Status
			break;
		case 23: //Serial number
			break;
		case 24: //content size
			content_size = data[0];
 800163e:	7a3a      	ldrb	r2, [r7, #8]
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <Write_Registers_data+0x248>)
 8001642:	701a      	strb	r2, [r3, #0]
			break;
 8001644:	e018      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 25:// force play buffer to write flash.
			play_mode_source = 1;
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <Write_Registers_data+0x240>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
			play_mode = 2;
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <Write_Registers_data+0x244>)
 800164e:	2202      	movs	r2, #2
 8001650:	701a      	strb	r2, [r3, #0]
			break;
 8001652:	e011      	b.n	8001678 <Write_Registers_data+0x1fc>
		case 33:// force play buffer to write flash.
			Mode_config[100] = data[0];
 8001654:	7a3a      	ldrb	r2, [r7, #8]
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <Write_Registers_data+0x24c>)
 8001658:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			Playing_mode = data[0];
 800165c:	7a3a      	ldrb	r2, [r7, #8]
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <Write_Registers_data+0x250>)
 8001660:	701a      	strb	r2, [r3, #0]

			write_flash_config();
 8001662:	f000 fd5d 	bl	8002120 <write_flash_config>
			Mode_changed = 1;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <Write_Registers_data+0x254>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]

			break;
 800166c:	e004      	b.n	8001678 <Write_Registers_data+0x1fc>
		}
	}
 800166e:	bf00      	nop
 8001670:	e002      	b.n	8001678 <Write_Registers_data+0x1fc>
			break;
 8001672:	bf00      	nop
 8001674:	e000      	b.n	8001678 <Write_Registers_data+0x1fc>
			break;
 8001676:	bf00      	nop
	//HAL_UART_Transmit(&huart4, &Register_Address, 1, 1000);
	//HAL_UART_Transmit(&huart4, &data, 1, 1000);
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000174 	.word	0x20000174
 8001684:	20000000 	.word	0x20000000
 8001688:	2007027a 	.word	0x2007027a
 800168c:	20000004 	.word	0x20000004
 8001690:	2000000c 	.word	0x2000000c
 8001694:	2000000d 	.word	0x2000000d
 8001698:	2000000e 	.word	0x2000000e
 800169c:	2000000f 	.word	0x2000000f
 80016a0:	20000008 	.word	0x20000008
 80016a4:	20000009 	.word	0x20000009
 80016a8:	2000001c 	.word	0x2000001c
 80016ac:	2000001d 	.word	0x2000001d
 80016b0:	2000026c 	.word	0x2000026c
 80016b4:	20070274 	.word	0x20070274
 80016b8:	2000000a 	.word	0x2000000a
 80016bc:	20040271 	.word	0x20040271
 80016c0:	20040270 	.word	0x20040270
 80016c4:	2000000b 	.word	0x2000000b
 80016c8:	2007027c 	.word	0x2007027c
 80016cc:	2000001f 	.word	0x2000001f
 80016d0:	20000020 	.word	0x20000020

080016d4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, &spi_rev_2byte, 2, 1000);
	// USB command: Type and command
	if(hspi == SPI2){
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4aae      	ldr	r2, [pc, #696]	; (8001998 <HAL_SPI_RxCpltCallback+0x2c4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d101      	bne.n	80016e8 <HAL_SPI_RxCpltCallback+0x14>
		int a=2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	60fb      	str	r3, [r7, #12]
	}
	if(hspi == SPI3){
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4aac      	ldr	r2, [pc, #688]	; (800199c <HAL_SPI_RxCpltCallback+0x2c8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_SPI_RxCpltCallback+0x20>
		int a=3;
 80016f0:	2303      	movs	r3, #3
 80016f2:	60bb      	str	r3, [r7, #8]
	}
	switch (spi_rev_2byte[0] & 0b11000000)
 80016f4:	4baa      	ldr	r3, [pc, #680]	; (80019a0 <HAL_SPI_RxCpltCallback+0x2cc>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016fc:	2bc0      	cmp	r3, #192	; 0xc0
 80016fe:	f000 81e9 	beq.w	8001ad4 <HAL_SPI_RxCpltCallback+0x400>
 8001702:	2bc0      	cmp	r3, #192	; 0xc0
 8001704:	f300 82a0 	bgt.w	8001c48 <HAL_SPI_RxCpltCallback+0x574>
 8001708:	2b80      	cmp	r3, #128	; 0x80
 800170a:	f000 81d7 	beq.w	8001abc <HAL_SPI_RxCpltCallback+0x3e8>
 800170e:	2b80      	cmp	r3, #128	; 0x80
 8001710:	f300 829a 	bgt.w	8001c48 <HAL_SPI_RxCpltCallback+0x574>
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_SPI_RxCpltCallback+0x4c>
 8001718:	2b40      	cmp	r3, #64	; 0x40
 800171a:	f000 8171 	beq.w	8001a00 <HAL_SPI_RxCpltCallback+0x32c>
 800171e:	e293      	b.n	8001c48 <HAL_SPI_RxCpltCallback+0x574>
	{
	case 0b00000000: //Chain SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001720:	4b9f      	ldr	r3, [pc, #636]	; (80019a0 <HAL_SPI_RxCpltCallback+0x2cc>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001728:	2b38      	cmp	r3, #56	; 0x38
 800172a:	f200 8286 	bhi.w	8001c3a <HAL_SPI_RxCpltCallback+0x566>
 800172e:	a201      	add	r2, pc, #4	; (adr r2, 8001734 <HAL_SPI_RxCpltCallback+0x60>)
 8001730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001734:	08001819 	.word	0x08001819
 8001738:	08001c3b 	.word	0x08001c3b
 800173c:	08001c3b 	.word	0x08001c3b
 8001740:	08001c3b 	.word	0x08001c3b
 8001744:	08001c3b 	.word	0x08001c3b
 8001748:	08001c3b 	.word	0x08001c3b
 800174c:	08001c3b 	.word	0x08001c3b
 8001750:	08001c3b 	.word	0x08001c3b
 8001754:	080018cb 	.word	0x080018cb
 8001758:	08001c3b 	.word	0x08001c3b
 800175c:	08001c3b 	.word	0x08001c3b
 8001760:	08001c3b 	.word	0x08001c3b
 8001764:	08001c3b 	.word	0x08001c3b
 8001768:	08001c3b 	.word	0x08001c3b
 800176c:	08001c3b 	.word	0x08001c3b
 8001770:	08001c3b 	.word	0x08001c3b
 8001774:	0800197d 	.word	0x0800197d
 8001778:	08001c3b 	.word	0x08001c3b
 800177c:	08001c3b 	.word	0x08001c3b
 8001780:	08001c3b 	.word	0x08001c3b
 8001784:	08001c3b 	.word	0x08001c3b
 8001788:	08001c3b 	.word	0x08001c3b
 800178c:	08001c3b 	.word	0x08001c3b
 8001790:	08001c3b 	.word	0x08001c3b
 8001794:	080019fd 	.word	0x080019fd
 8001798:	08001c3b 	.word	0x08001c3b
 800179c:	08001c3b 	.word	0x08001c3b
 80017a0:	08001c3b 	.word	0x08001c3b
 80017a4:	08001c3b 	.word	0x08001c3b
 80017a8:	08001c3b 	.word	0x08001c3b
 80017ac:	08001c3b 	.word	0x08001c3b
 80017b0:	08001c3b 	.word	0x08001c3b
 80017b4:	080019fd 	.word	0x080019fd
 80017b8:	08001c3b 	.word	0x08001c3b
 80017bc:	08001c3b 	.word	0x08001c3b
 80017c0:	08001c3b 	.word	0x08001c3b
 80017c4:	08001c3b 	.word	0x08001c3b
 80017c8:	08001c3b 	.word	0x08001c3b
 80017cc:	08001c3b 	.word	0x08001c3b
 80017d0:	08001c3b 	.word	0x08001c3b
 80017d4:	080019fd 	.word	0x080019fd
 80017d8:	08001c3b 	.word	0x08001c3b
 80017dc:	08001c3b 	.word	0x08001c3b
 80017e0:	08001c3b 	.word	0x08001c3b
 80017e4:	08001c3b 	.word	0x08001c3b
 80017e8:	08001c3b 	.word	0x08001c3b
 80017ec:	08001c3b 	.word	0x08001c3b
 80017f0:	08001c3b 	.word	0x08001c3b
 80017f4:	080019fd 	.word	0x080019fd
 80017f8:	08001c3b 	.word	0x08001c3b
 80017fc:	08001c3b 	.word	0x08001c3b
 8001800:	08001c3b 	.word	0x08001c3b
 8001804:	08001c3b 	.word	0x08001c3b
 8001808:	08001c3b 	.word	0x08001c3b
 800180c:	08001c3b 	.word	0x08001c3b
 8001810:	08001c3b 	.word	0x08001c3b
 8001814:	080019fd 	.word	0x080019fd
		{
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi_rev_2byte[0] & 0b00000111)
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <HAL_SPI_RxCpltCallback+0x2cc>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	2b04      	cmp	r3, #4
 8001822:	d03e      	beq.n	80018a2 <HAL_SPI_RxCpltCallback+0x1ce>
 8001824:	2b04      	cmp	r3, #4
 8001826:	dc4c      	bgt.n	80018c2 <HAL_SPI_RxCpltCallback+0x1ee>
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <HAL_SPI_RxCpltCallback+0x15e>
 800182c:	2b01      	cmp	r3, #1
 800182e:	d014      	beq.n	800185a <HAL_SPI_RxCpltCallback+0x186>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 8001830:	e047      	b.n	80018c2 <HAL_SPI_RxCpltCallback+0x1ee>
				if (BOARD_NUMBER == 1)
 8001832:	4b5c      	ldr	r3, [pc, #368]	; (80019a4 <HAL_SPI_RxCpltCallback+0x2d0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d145      	bne.n	80018c6 <HAL_SPI_RxCpltCallback+0x1f2>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 800183a:	4b5b      	ldr	r3, [pc, #364]	; (80019a8 <HAL_SPI_RxCpltCallback+0x2d4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b5a      	ldr	r3, [pc, #360]	; (80019ac <HAL_SPI_RxCpltCallback+0x2d8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	fb12 f303 	smulbb	r3, r2, r3
 800184a:	b29a      	uxth	r2, r3
 800184c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001850:	4957      	ldr	r1, [pc, #348]	; (80019b0 <HAL_SPI_RxCpltCallback+0x2dc>)
 8001852:	4858      	ldr	r0, [pc, #352]	; (80019b4 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001854:	f005 f92e 	bl	8006ab4 <HAL_SPI_Receive>
				break;
 8001858:	e035      	b.n	80018c6 <HAL_SPI_RxCpltCallback+0x1f2>
				if (BOARD_NUMBER == 2)
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <HAL_SPI_RxCpltCallback+0x2d0>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d10f      	bne.n	8001882 <HAL_SPI_RxCpltCallback+0x1ae>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 8001862:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_SPI_RxCpltCallback+0x2d8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	fb12 f303 	smulbb	r3, r2, r3
 8001872:	b29a      	uxth	r2, r3
 8001874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001878:	494d      	ldr	r1, [pc, #308]	; (80019b0 <HAL_SPI_RxCpltCallback+0x2dc>)
 800187a:	484e      	ldr	r0, [pc, #312]	; (80019b4 <HAL_SPI_RxCpltCallback+0x2e0>)
 800187c:	f005 f91a 	bl	8006ab4 <HAL_SPI_Receive>
				break;
 8001880:	e022      	b.n	80018c8 <HAL_SPI_RxCpltCallback+0x1f4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001882:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b48      	ldr	r3, [pc, #288]	; (80019ac <HAL_SPI_RxCpltCallback+0x2d8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	fb12 f303 	smulbb	r3, r2, r3
 8001892:	b29a      	uxth	r2, r3
 8001894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001898:	4947      	ldr	r1, [pc, #284]	; (80019b8 <HAL_SPI_RxCpltCallback+0x2e4>)
 800189a:	4846      	ldr	r0, [pc, #280]	; (80019b4 <HAL_SPI_RxCpltCallback+0x2e0>)
 800189c:	f005 f90a 	bl	8006ab4 <HAL_SPI_Receive>
				break;
 80018a0:	e012      	b.n	80018c8 <HAL_SPI_RxCpltCallback+0x1f4>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, IMAGE_H*IMAGE_W, 1000);
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_SPI_RxCpltCallback+0x2d4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b40      	ldr	r3, [pc, #256]	; (80019ac <HAL_SPI_RxCpltCallback+0x2d8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	fb12 f303 	smulbb	r3, r2, r3
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b8:	493d      	ldr	r1, [pc, #244]	; (80019b0 <HAL_SPI_RxCpltCallback+0x2dc>)
 80018ba:	483e      	ldr	r0, [pc, #248]	; (80019b4 <HAL_SPI_RxCpltCallback+0x2e0>)
 80018bc:	f005 f8fa 	bl	8006ab4 <HAL_SPI_Receive>
				break;
 80018c0:	e002      	b.n	80018c8 <HAL_SPI_RxCpltCallback+0x1f4>
				break;
 80018c2:	bf00      	nop
 80018c4:	e09b      	b.n	80019fe <HAL_SPI_RxCpltCallback+0x32a>
				break;
 80018c6:	bf00      	nop
			}
			break;
 80018c8:	e099      	b.n	80019fe <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi_rev_2byte[0] & 0b00000111)
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <HAL_SPI_RxCpltCallback+0x2cc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d03e      	beq.n	8001954 <HAL_SPI_RxCpltCallback+0x280>
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	dc4c      	bgt.n	8001974 <HAL_SPI_RxCpltCallback+0x2a0>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_SPI_RxCpltCallback+0x210>
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d014      	beq.n	800190c <HAL_SPI_RxCpltCallback+0x238>
				break;
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
				break;
			default:
				break;
 80018e2:	e047      	b.n	8001974 <HAL_SPI_RxCpltCallback+0x2a0>
				if (BOARD_NUMBER == 1)
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_SPI_RxCpltCallback+0x2d0>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d145      	bne.n	8001978 <HAL_SPI_RxCpltCallback+0x2a4>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_SPI_RxCpltCallback+0x2d4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_SPI_RxCpltCallback+0x2d8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	fb12 f303 	smulbb	r3, r2, r3
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	492e      	ldr	r1, [pc, #184]	; (80019bc <HAL_SPI_RxCpltCallback+0x2e8>)
 8001904:	482b      	ldr	r0, [pc, #172]	; (80019b4 <HAL_SPI_RxCpltCallback+0x2e0>)
 8001906:	f005 f8d5 	bl	8006ab4 <HAL_SPI_Receive>
				break;
 800190a:	e035      	b.n	8001978 <HAL_SPI_RxCpltCallback+0x2a4>
				if (BOARD_NUMBER == 2)
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <HAL_SPI_RxCpltCallback+0x2d0>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d10f      	bne.n	8001934 <HAL_SPI_RxCpltCallback+0x260>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_SPI_RxCpltCallback+0x2d8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	fb12 f303 	smulbb	r3, r2, r3
 8001924:	b29a      	uxth	r2, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	4924      	ldr	r1, [pc, #144]	; (80019bc <HAL_SPI_RxCpltCallback+0x2e8>)
 800192c:	4821      	ldr	r0, [pc, #132]	; (80019b4 <HAL_SPI_RxCpltCallback+0x2e0>)
 800192e:	f005 f8c1 	bl	8006ab4 <HAL_SPI_Receive>
				break;
 8001932:	e022      	b.n	800197a <HAL_SPI_RxCpltCallback+0x2a6>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_SPI_RxCpltCallback+0x2d8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	fb12 f303 	smulbb	r3, r2, r3
 8001944:	b29a      	uxth	r2, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	491b      	ldr	r1, [pc, #108]	; (80019b8 <HAL_SPI_RxCpltCallback+0x2e4>)
 800194c:	4819      	ldr	r0, [pc, #100]	; (80019b4 <HAL_SPI_RxCpltCallback+0x2e0>)
 800194e:	f005 f8b1 	bl	8006ab4 <HAL_SPI_Receive>
				break;
 8001952:	e012      	b.n	800197a <HAL_SPI_RxCpltCallback+0x2a6>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, IMAGE_H*IMAGE_W, 1000);
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_SPI_RxCpltCallback+0x2d4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_SPI_RxCpltCallback+0x2d8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	fb12 f303 	smulbb	r3, r2, r3
 8001964:	b29a      	uxth	r2, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <HAL_SPI_RxCpltCallback+0x2e8>)
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <HAL_SPI_RxCpltCallback+0x2e0>)
 800196e:	f005 f8a1 	bl	8006ab4 <HAL_SPI_Receive>
				break;
 8001972:	e002      	b.n	800197a <HAL_SPI_RxCpltCallback+0x2a6>
				break;
 8001974:	bf00      	nop
 8001976:	e042      	b.n	80019fe <HAL_SPI_RxCpltCallback+0x32a>
				break;
 8001978:	bf00      	nop
			}
			break;
 800197a:	e040      	b.n	80019fe <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00010000: //Write Registers data
			switch (spi_rev_2byte[0] & 0b00000111)
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_SPI_RxCpltCallback+0x2cc>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	2b04      	cmp	r3, #4
 8001986:	d033      	beq.n	80019f0 <HAL_SPI_RxCpltCallback+0x31c>
 8001988:	2b04      	cmp	r3, #4
 800198a:	dc35      	bgt.n	80019f8 <HAL_SPI_RxCpltCallback+0x324>
 800198c:	2b00      	cmp	r3, #0
 800198e:	d017      	beq.n	80019c0 <HAL_SPI_RxCpltCallback+0x2ec>
 8001990:	2b01      	cmp	r3, #1
 8001992:	d021      	beq.n	80019d8 <HAL_SPI_RxCpltCallback+0x304>
				break;
			case 0b00000100: //Broadcast to every board
				Write_Registers_data(1);
				break;
			default:
				break;
 8001994:	e030      	b.n	80019f8 <HAL_SPI_RxCpltCallback+0x324>
 8001996:	bf00      	nop
 8001998:	40003800 	.word	0x40003800
 800199c:	40003c00 	.word	0x40003c00
 80019a0:	20070278 	.word	0x20070278
 80019a4:	2000001e 	.word	0x2000001e
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004
 80019b0:	20010270 	.word	0x20010270
 80019b4:	20000174 	.word	0x20000174
 80019b8:	20000270 	.word	0x20000270
 80019bc:	20020270 	.word	0x20020270
				if (BOARD_NUMBER == 1)
 80019c0:	4bac      	ldr	r3, [pc, #688]	; (8001c74 <HAL_SPI_RxCpltCallback+0x5a0>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d103      	bne.n	80019d0 <HAL_SPI_RxCpltCallback+0x2fc>
					Write_Registers_data(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fd57 	bl	800147c <Write_Registers_data>
				break;
 80019ce:	e014      	b.n	80019fa <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fd53 	bl	800147c <Write_Registers_data>
				break;
 80019d6:	e010      	b.n	80019fa <HAL_SPI_RxCpltCallback+0x326>
				if (BOARD_NUMBER == 2)
 80019d8:	4ba6      	ldr	r3, [pc, #664]	; (8001c74 <HAL_SPI_RxCpltCallback+0x5a0>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d103      	bne.n	80019e8 <HAL_SPI_RxCpltCallback+0x314>
					Write_Registers_data(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff fd4b 	bl	800147c <Write_Registers_data>
				break;
 80019e6:	e008      	b.n	80019fa <HAL_SPI_RxCpltCallback+0x326>
					Write_Registers_data(0);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fd47 	bl	800147c <Write_Registers_data>
				break;
 80019ee:	e004      	b.n	80019fa <HAL_SPI_RxCpltCallback+0x326>
				Write_Registers_data(1);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fd43 	bl	800147c <Write_Registers_data>
				break;
 80019f6:	e000      	b.n	80019fa <HAL_SPI_RxCpltCallback+0x326>
				break;
 80019f8:	bf00      	nop
			}
			break;
 80019fa:	e000      	b.n	80019fe <HAL_SPI_RxCpltCallback+0x32a>
		case 0b00011000: //Write partial content of frame buffer
			break;
 80019fc:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 80019fe:	e11c      	b.n	8001c3a <HAL_SPI_RxCpltCallback+0x566>
	case 0b01000000: //Master SPI functions
		switch (spi_rev_2byte[0] & 0b00111000)
 8001a00:	4b9d      	ldr	r3, [pc, #628]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a08:	2b28      	cmp	r3, #40	; 0x28
 8001a0a:	f200 8118 	bhi.w	8001c3e <HAL_SPI_RxCpltCallback+0x56a>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <HAL_SPI_RxCpltCallback+0x340>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001ab9 	.word	0x08001ab9
 8001a18:	08001c3f 	.word	0x08001c3f
 8001a1c:	08001c3f 	.word	0x08001c3f
 8001a20:	08001c3f 	.word	0x08001c3f
 8001a24:	08001c3f 	.word	0x08001c3f
 8001a28:	08001c3f 	.word	0x08001c3f
 8001a2c:	08001c3f 	.word	0x08001c3f
 8001a30:	08001c3f 	.word	0x08001c3f
 8001a34:	08001ab9 	.word	0x08001ab9
 8001a38:	08001c3f 	.word	0x08001c3f
 8001a3c:	08001c3f 	.word	0x08001c3f
 8001a40:	08001c3f 	.word	0x08001c3f
 8001a44:	08001c3f 	.word	0x08001c3f
 8001a48:	08001c3f 	.word	0x08001c3f
 8001a4c:	08001c3f 	.word	0x08001c3f
 8001a50:	08001c3f 	.word	0x08001c3f
 8001a54:	08001ab9 	.word	0x08001ab9
 8001a58:	08001c3f 	.word	0x08001c3f
 8001a5c:	08001c3f 	.word	0x08001c3f
 8001a60:	08001c3f 	.word	0x08001c3f
 8001a64:	08001c3f 	.word	0x08001c3f
 8001a68:	08001c3f 	.word	0x08001c3f
 8001a6c:	08001c3f 	.word	0x08001c3f
 8001a70:	08001c3f 	.word	0x08001c3f
 8001a74:	08001ab9 	.word	0x08001ab9
 8001a78:	08001c3f 	.word	0x08001c3f
 8001a7c:	08001c3f 	.word	0x08001c3f
 8001a80:	08001c3f 	.word	0x08001c3f
 8001a84:	08001c3f 	.word	0x08001c3f
 8001a88:	08001c3f 	.word	0x08001c3f
 8001a8c:	08001c3f 	.word	0x08001c3f
 8001a90:	08001c3f 	.word	0x08001c3f
 8001a94:	08001ab9 	.word	0x08001ab9
 8001a98:	08001c3f 	.word	0x08001c3f
 8001a9c:	08001c3f 	.word	0x08001c3f
 8001aa0:	08001c3f 	.word	0x08001c3f
 8001aa4:	08001c3f 	.word	0x08001c3f
 8001aa8:	08001c3f 	.word	0x08001c3f
 8001aac:	08001c3f 	.word	0x08001c3f
 8001ab0:	08001c3f 	.word	0x08001c3f
 8001ab4:	08001ab9 	.word	0x08001ab9
		{
		case 0b00000000: //Start SPI write data
			break;
 8001ab8:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001aba:	e0c0      	b.n	8001c3e <HAL_SPI_RxCpltCallback+0x56a>
	case 0b10000000: //I2C command
		switch (spi_rev_2byte[0] & 0b00111000)
 8001abc:	4b6e      	ldr	r3, [pc, #440]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_SPI_RxCpltCallback+0x3fc>
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	f040 80ba 	bne.w	8001c42 <HAL_SPI_RxCpltCallback+0x56e>
		{
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001ace:	e000      	b.n	8001ad2 <HAL_SPI_RxCpltCallback+0x3fe>
			break;
 8001ad0:	bf00      	nop
		}
		break;
 8001ad2:	e0b6      	b.n	8001c42 <HAL_SPI_RxCpltCallback+0x56e>
	case 0b11000000: //SPI flash function & Slave SPI
		switch (spi_rev_2byte[0] & 0b00111000)
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	f000 80aa 	beq.w	8001c36 <HAL_SPI_RxCpltCallback+0x562>
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	f300 80af 	bgt.w	8001c46 <HAL_SPI_RxCpltCallback+0x572>
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_SPI_RxCpltCallback+0x41e>
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d078      	beq.n	8001be2 <HAL_SPI_RxCpltCallback+0x50e>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001af0:	e0a9      	b.n	8001c46 <HAL_SPI_RxCpltCallback+0x572>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001af2:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d04c      	beq.n	8001b98 <HAL_SPI_RxCpltCallback+0x4c4>
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	dc69      	bgt.n	8001bd6 <HAL_SPI_RxCpltCallback+0x502>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_SPI_RxCpltCallback+0x438>
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d023      	beq.n	8001b52 <HAL_SPI_RxCpltCallback+0x47e>
				break;
 8001b0a:	e064      	b.n	8001bd6 <HAL_SPI_RxCpltCallback+0x502>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001b0c:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b5b      	ldr	r3, [pc, #364]	; (8001c80 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	fb12 f303 	smulbb	r3, r2, r3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	4958      	ldr	r1, [pc, #352]	; (8001c84 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b24:	4858      	ldr	r0, [pc, #352]	; (8001c88 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001b26:	f004 ffc5 	bl	8006ab4 <HAL_SPI_Receive>
				if (BOARD_NUMBER == 1)
 8001b2a:	4b52      	ldr	r3, [pc, #328]	; (8001c74 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d153      	bne.n	8001bda <HAL_SPI_RxCpltCallback+0x506>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001b32:	4b51      	ldr	r3, [pc, #324]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b34:	785b      	ldrb	r3, [r3, #1]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fdb2 	bl	80026a4 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	484e      	ldr	r0, [pc, #312]	; (8001c84 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b4c:	f000 fc44 	bl	80023d8 <write_flash_page>
				break;
 8001b50:	e043      	b.n	8001bda <HAL_SPI_RxCpltCallback+0x506>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	fb12 f303 	smulbb	r3, r2, r3
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b68:	4946      	ldr	r1, [pc, #280]	; (8001c84 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b6a:	4847      	ldr	r0, [pc, #284]	; (8001c88 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001b6c:	f004 ffa2 	bl	8006ab4 <HAL_SPI_Receive>
				if (BOARD_NUMBER == 2)
 8001b70:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d132      	bne.n	8001bde <HAL_SPI_RxCpltCallback+0x50a>
					erase_flash_sector(spi_rev_2byte[1] - 1);
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fd8f 	bl	80026a4 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b88:	785b      	ldrb	r3, [r3, #1]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4619      	mov	r1, r3
 8001b90:	483c      	ldr	r0, [pc, #240]	; (8001c84 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001b92:	f000 fc21 	bl	80023d8 <write_flash_page>
				break;
 8001b96:	e022      	b.n	8001bde <HAL_SPI_RxCpltCallback+0x50a>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, IMAGE_H*IMAGE_W, 1000);
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <HAL_SPI_RxCpltCallback+0x5a8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	fb12 f303 	smulbb	r3, r2, r3
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	4935      	ldr	r1, [pc, #212]	; (8001c84 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001bb0:	4835      	ldr	r0, [pc, #212]	; (8001c88 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001bb2:	f004 ff7f 	bl	8006ab4 <HAL_SPI_Receive>
				erase_flash_sector(spi_rev_2byte[1] - 1);
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fd70 	bl	80026a4 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bc6:	785b      	ldrb	r3, [r3, #1]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4619      	mov	r1, r3
 8001bce:	482d      	ldr	r0, [pc, #180]	; (8001c84 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001bd0:	f000 fc02 	bl	80023d8 <write_flash_page>
				break;
 8001bd4:	e004      	b.n	8001be0 <HAL_SPI_RxCpltCallback+0x50c>
				break;
 8001bd6:	bf00      	nop
 8001bd8:	e02e      	b.n	8001c38 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001bda:	bf00      	nop
 8001bdc:	e02c      	b.n	8001c38 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001bde:	bf00      	nop
			break;
 8001be0:	e02a      	b.n	8001c38 <HAL_SPI_RxCpltCallback+0x564>
			switch (spi_rev_2byte[0] & 0b00000111)
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d014      	beq.n	8001c18 <HAL_SPI_RxCpltCallback+0x544>
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	dc1d      	bgt.n	8001c2e <HAL_SPI_RxCpltCallback+0x55a>
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_SPI_RxCpltCallback+0x526>
 8001bf6:	2b01      	cmp	r3, #1
				break;
 8001bf8:	e01c      	b.n	8001c34 <HAL_SPI_RxCpltCallback+0x560>
				if (BOARD_NUMBER == 1)
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_SPI_RxCpltCallback+0x5a0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d117      	bne.n	8001c32 <HAL_SPI_RxCpltCallback+0x55e>
					reset_flash_software();
 8001c02:	f000 fe25 	bl	8002850 <reset_flash_software>
					read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4619      	mov	r1, r3
 8001c10:	481c      	ldr	r0, [pc, #112]	; (8001c84 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c12:	f000 fcb1 	bl	8002578 <read_flash_page>
				break;
 8001c16:	e00c      	b.n	8001c32 <HAL_SPI_RxCpltCallback+0x55e>
				reset_flash_software();
 8001c18:	f000 fe1a 	bl	8002850 <reset_flash_software>
				read_flash_page(&frame_buf_tmp, spi_rev_2byte[1] - 1);
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4619      	mov	r1, r3
 8001c26:	4817      	ldr	r0, [pc, #92]	; (8001c84 <HAL_SPI_RxCpltCallback+0x5b0>)
 8001c28:	f000 fca6 	bl	8002578 <read_flash_page>
				break;
 8001c2c:	e002      	b.n	8001c34 <HAL_SPI_RxCpltCallback+0x560>
				break;
 8001c2e:	bf00      	nop
 8001c30:	e002      	b.n	8001c38 <HAL_SPI_RxCpltCallback+0x564>
				break;
 8001c32:	bf00      	nop
			break;
 8001c34:	e000      	b.n	8001c38 <HAL_SPI_RxCpltCallback+0x564>
			break;
 8001c36:	bf00      	nop
		break;
 8001c38:	e005      	b.n	8001c46 <HAL_SPI_RxCpltCallback+0x572>
		break;
 8001c3a:	bf00      	nop
 8001c3c:	e004      	b.n	8001c48 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001c3e:	bf00      	nop
 8001c40:	e002      	b.n	8001c48 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001c42:	bf00      	nop
 8001c44:	e000      	b.n	8001c48 <HAL_SPI_RxCpltCallback+0x574>
		break;
 8001c46:	bf00      	nop
	}
	// USB command: ID
	switch (spi_rev_2byte[0] & 0b00000111)
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_SPI_RxCpltCallback+0x586>
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d002      	beq.n	8001c5e <HAL_SPI_RxCpltCallback+0x58a>
	case 0b00000000: //Command for DIP switch ID = 00
		break;
	case 0b00000001: //Command for DIP switch ID = 01
		break;
	default: //Broadcast to every board
		break;
 8001c58:	e002      	b.n	8001c60 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001c5a:	bf00      	nop
 8001c5c:	e000      	b.n	8001c60 <HAL_SPI_RxCpltCallback+0x58c>
		break;
 8001c5e:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi_rev_2byte, 2);
 8001c60:	2202      	movs	r2, #2
 8001c62:	4905      	ldr	r1, [pc, #20]	; (8001c78 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c64:	4808      	ldr	r0, [pc, #32]	; (8001c88 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c66:	f005 fa7f 	bl	8007168 <HAL_SPI_Receive_IT>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000001e 	.word	0x2000001e
 8001c78:	20070278 	.word	0x20070278
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000270 	.word	0x20000270
 8001c88:	20000174 	.word	0x20000174

08001c8c <display_panel>:

void display_panel(uint8_t *frame_buf)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b08b      	sub	sp, #44	; 0x2c
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	int num_ones = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t Pixel_Mapping_one = Pixel_Mapping_one_L | Pixel_Mapping_one_H << 8;
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <display_panel+0xe4>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <display_panel+0xe8>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 12; i++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	e00d      	b.n	8001cce <display_panel+0x42>
	{
		if (Pixel_Mapping_one & (1 << i))
 8001cb2:	897a      	ldrh	r2, [r7, #10]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	fa42 f303 	asr.w	r3, r2, r3
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <display_panel+0x3c>
		{
			num_ones++;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	623b      	str	r3, [r7, #32]
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	2b0b      	cmp	r3, #11
 8001cd2:	ddee      	ble.n	8001cb2 <display_panel+0x26>
		}
	}

	int frame_buf_count = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
	int Pixel_Mapping_one_count = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
	int c = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e034      	b.n	8001d50 <display_panel+0xc4>
	{
		Pixel_Mapping_one_count = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
		c = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < 12; j++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e022      	b.n	8001d3a <display_panel+0xae>
		{
			if (Pixel_Mapping_one & (1 << j))
 8001cf4:	897a      	ldrh	r2, [r7, #10]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	fa42 f303 	asr.w	r3, r2, r3
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <display_panel+0xa2>
			{
				frame_buf_count += Pixel_Mapping_one_count;
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4413      	add	r3, r2
 8001d0a:	61fb      	str	r3, [r7, #28]
				image_arr_rgb888[frame_buf_count] = frame_buf[i + c];
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4413      	add	r3, r2
 8001d12:	461a      	mov	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	7819      	ldrb	r1, [r3, #0]
 8001d1a:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <display_panel+0xec>)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	4413      	add	r3, r2
 8001d20:	460a      	mov	r2, r1
 8001d22:	701a      	strb	r2, [r3, #0]
				c++;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3301      	adds	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
				Pixel_Mapping_one_count = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
			}
			Pixel_Mapping_one_count++;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
		for (int j = 0; j < 12; j++)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b0b      	cmp	r3, #11
 8001d3e:	ddd9      	ble.n	8001cf4 <display_panel+0x68>
		}
		frame_buf_count += Pixel_Mapping_one_count;
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4413      	add	r3, r2
 8001d46:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < IMAGE_H*IMAGE_W; i += num_ones)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	4413      	add	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <display_panel+0xf0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <display_panel+0xf4>)
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fb03 f202 	mul.w	r2, r3, r2
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d8c1      	bhi.n	8001ce6 <display_panel+0x5a>
	}
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	372c      	adds	r7, #44	; 0x2c
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	2000001c 	.word	0x2000001c
 8001d74:	2000001d 	.word	0x2000001d
 8001d78:	20040274 	.word	0x20040274
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000004 	.word	0x20000004

08001d84 <read_flash_SR>:

/*====================================flash function begin====================================*/
uint8_t read_flash_SR()
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
	uint8_t dat[1] = {0x00};
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d94:	480e      	ldr	r0, [pc, #56]	; (8001dd0 <read_flash_SR+0x4c>)
 8001d96:	f002 fc7b 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x05}, 1, 1000);
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	703b      	strb	r3, [r7, #0]
 8001d9e:	4639      	mov	r1, r7
 8001da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da4:	2201      	movs	r2, #1
 8001da6:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <read_flash_SR+0x50>)
 8001da8:	f004 fd0f 	bl	80067ca <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, (uint8_t *)dat, 1, 1000);
 8001dac:	1d39      	adds	r1, r7, #4
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	2201      	movs	r2, #1
 8001db4:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <read_flash_SR+0x50>)
 8001db6:	f004 fe7d 	bl	8006ab4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <read_flash_SR+0x4c>)
 8001dc2:	f002 fc65 	bl	8004690 <HAL_GPIO_WritePin>

	return dat[0];
 8001dc6:	793b      	ldrb	r3, [r7, #4]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	48000400 	.word	0x48000400
 8001dd4:	20000110 	.word	0x20000110

08001dd8 <flash_wait_nobusy>:

void flash_wait_nobusy(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    while(((read_flash_SR()) & 0x01)==0x01);
 8001ddc:	bf00      	nop
 8001dde:	f7ff ffd1 	bl	8001d84 <read_flash_SR>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d0f8      	beq.n	8001dde <flash_wait_nobusy+0x6>
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <mode_init>:
		delay_us(10);

		flash_wait_nobusy();
	}
}*/
void mode_init(){
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	e00f      	b.n	8001e20 <mode_init+0x2c>
		Mode_config[i*2]=i;//picture_id
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	b2d1      	uxtb	r1, r2
 8001e08:	4ac4      	ldr	r2, [pc, #784]	; (800211c <mode_init+0x328>)
 8001e0a:	54d1      	strb	r1, [r2, r3]
		Mode_config[i*2+1]=i;//picture_delay_time
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	3301      	adds	r3, #1
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	b2d1      	uxtb	r1, r2
 8001e16:	4ac1      	ldr	r2, [pc, #772]	; (800211c <mode_init+0x328>)
 8001e18:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i <= Max_pic_per_mode*Max_mode_num*2;i++){
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b6e      	cmp	r3, #110	; 0x6e
 8001e24:	ddec      	ble.n	8001e00 <mode_init+0xc>
	}
	Mode_config[Max_pic_per_mode*(Max_mode_num-1)*2]=0;
 8001e26:	4bbd      	ldr	r3, [pc, #756]	; (800211c <mode_init+0x328>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	//test mode 1
	Mode_config[0]=0;
 8001e2e:	4bbb      	ldr	r3, [pc, #748]	; (800211c <mode_init+0x328>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
	Mode_config[1]=1;
 8001e34:	4bb9      	ldr	r3, [pc, #740]	; (800211c <mode_init+0x328>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	705a      	strb	r2, [r3, #1]
	Mode_config[2]=1;
 8001e3a:	4bb8      	ldr	r3, [pc, #736]	; (800211c <mode_init+0x328>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	709a      	strb	r2, [r3, #2]
	Mode_config[3]=1;
 8001e40:	4bb6      	ldr	r3, [pc, #728]	; (800211c <mode_init+0x328>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	70da      	strb	r2, [r3, #3]
	Mode_config[4]=255;
 8001e46:	4bb5      	ldr	r3, [pc, #724]	; (800211c <mode_init+0x328>)
 8001e48:	22ff      	movs	r2, #255	; 0xff
 8001e4a:	711a      	strb	r2, [r3, #4]
	Mode_config[5]=1;
 8001e4c:	4bb3      	ldr	r3, [pc, #716]	; (800211c <mode_init+0x328>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	715a      	strb	r2, [r3, #5]
	Mode_config[6]=255;
 8001e52:	4bb2      	ldr	r3, [pc, #712]	; (800211c <mode_init+0x328>)
 8001e54:	22ff      	movs	r2, #255	; 0xff
 8001e56:	719a      	strb	r2, [r3, #6]
	Mode_config[7]=1;
 8001e58:	4bb0      	ldr	r3, [pc, #704]	; (800211c <mode_init+0x328>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	71da      	strb	r2, [r3, #7]
	Mode_config[8]=255;
 8001e5e:	4baf      	ldr	r3, [pc, #700]	; (800211c <mode_init+0x328>)
 8001e60:	22ff      	movs	r2, #255	; 0xff
 8001e62:	721a      	strb	r2, [r3, #8]
	Mode_config[9]=1;
 8001e64:	4bad      	ldr	r3, [pc, #692]	; (800211c <mode_init+0x328>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	725a      	strb	r2, [r3, #9]
	//test mode 2
	Mode_config[10]=0;
 8001e6a:	4bac      	ldr	r3, [pc, #688]	; (800211c <mode_init+0x328>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	729a      	strb	r2, [r3, #10]
	Mode_config[11]=4;
 8001e70:	4baa      	ldr	r3, [pc, #680]	; (800211c <mode_init+0x328>)
 8001e72:	2204      	movs	r2, #4
 8001e74:	72da      	strb	r2, [r3, #11]
	Mode_config[12]=1;
 8001e76:	4ba9      	ldr	r3, [pc, #676]	; (800211c <mode_init+0x328>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	731a      	strb	r2, [r3, #12]
	Mode_config[13]=4;
 8001e7c:	4ba7      	ldr	r3, [pc, #668]	; (800211c <mode_init+0x328>)
 8001e7e:	2204      	movs	r2, #4
 8001e80:	735a      	strb	r2, [r3, #13]
	Mode_config[14]=255;
 8001e82:	4ba6      	ldr	r3, [pc, #664]	; (800211c <mode_init+0x328>)
 8001e84:	22ff      	movs	r2, #255	; 0xff
 8001e86:	739a      	strb	r2, [r3, #14]
	Mode_config[15]=1;
 8001e88:	4ba4      	ldr	r3, [pc, #656]	; (800211c <mode_init+0x328>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	73da      	strb	r2, [r3, #15]
	Mode_config[16]=255;
 8001e8e:	4ba3      	ldr	r3, [pc, #652]	; (800211c <mode_init+0x328>)
 8001e90:	22ff      	movs	r2, #255	; 0xff
 8001e92:	741a      	strb	r2, [r3, #16]
	Mode_config[17]=1;
 8001e94:	4ba1      	ldr	r3, [pc, #644]	; (800211c <mode_init+0x328>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	745a      	strb	r2, [r3, #17]
	Mode_config[18]=255;
 8001e9a:	4ba0      	ldr	r3, [pc, #640]	; (800211c <mode_init+0x328>)
 8001e9c:	22ff      	movs	r2, #255	; 0xff
 8001e9e:	749a      	strb	r2, [r3, #18]
	Mode_config[19]=1;
 8001ea0:	4b9e      	ldr	r3, [pc, #632]	; (800211c <mode_init+0x328>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	74da      	strb	r2, [r3, #19]
	//test mode 3
	Mode_config[20]=2;
 8001ea6:	4b9d      	ldr	r3, [pc, #628]	; (800211c <mode_init+0x328>)
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	751a      	strb	r2, [r3, #20]
	Mode_config[21]=1;
 8001eac:	4b9b      	ldr	r3, [pc, #620]	; (800211c <mode_init+0x328>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	755a      	strb	r2, [r3, #21]
	Mode_config[22]=3;
 8001eb2:	4b9a      	ldr	r3, [pc, #616]	; (800211c <mode_init+0x328>)
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	759a      	strb	r2, [r3, #22]
	Mode_config[23]=1;
 8001eb8:	4b98      	ldr	r3, [pc, #608]	; (800211c <mode_init+0x328>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	75da      	strb	r2, [r3, #23]
	Mode_config[24]=4;
 8001ebe:	4b97      	ldr	r3, [pc, #604]	; (800211c <mode_init+0x328>)
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	761a      	strb	r2, [r3, #24]
	Mode_config[25]=1;
 8001ec4:	4b95      	ldr	r3, [pc, #596]	; (800211c <mode_init+0x328>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	765a      	strb	r2, [r3, #25]
	Mode_config[26]=5;
 8001eca:	4b94      	ldr	r3, [pc, #592]	; (800211c <mode_init+0x328>)
 8001ecc:	2205      	movs	r2, #5
 8001ece:	769a      	strb	r2, [r3, #26]
	Mode_config[27]=1;
 8001ed0:	4b92      	ldr	r3, [pc, #584]	; (800211c <mode_init+0x328>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	76da      	strb	r2, [r3, #27]
	Mode_config[28]=255;
 8001ed6:	4b91      	ldr	r3, [pc, #580]	; (800211c <mode_init+0x328>)
 8001ed8:	22ff      	movs	r2, #255	; 0xff
 8001eda:	771a      	strb	r2, [r3, #28]
	Mode_config[29]=1;
 8001edc:	4b8f      	ldr	r3, [pc, #572]	; (800211c <mode_init+0x328>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	775a      	strb	r2, [r3, #29]
	//test mode 3
	Mode_config[30]=2;
 8001ee2:	4b8e      	ldr	r3, [pc, #568]	; (800211c <mode_init+0x328>)
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	779a      	strb	r2, [r3, #30]
	Mode_config[31]=4;
 8001ee8:	4b8c      	ldr	r3, [pc, #560]	; (800211c <mode_init+0x328>)
 8001eea:	2204      	movs	r2, #4
 8001eec:	77da      	strb	r2, [r3, #31]
	Mode_config[32]=3;
 8001eee:	4b8b      	ldr	r3, [pc, #556]	; (800211c <mode_init+0x328>)
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	f883 2020 	strb.w	r2, [r3, #32]
	Mode_config[33]=4;
 8001ef6:	4b89      	ldr	r3, [pc, #548]	; (800211c <mode_init+0x328>)
 8001ef8:	2204      	movs	r2, #4
 8001efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Mode_config[34]=4;
 8001efe:	4b87      	ldr	r3, [pc, #540]	; (800211c <mode_init+0x328>)
 8001f00:	2204      	movs	r2, #4
 8001f02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Mode_config[35]=4;
 8001f06:	4b85      	ldr	r3, [pc, #532]	; (800211c <mode_init+0x328>)
 8001f08:	2204      	movs	r2, #4
 8001f0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Mode_config[36]=5;
 8001f0e:	4b83      	ldr	r3, [pc, #524]	; (800211c <mode_init+0x328>)
 8001f10:	2205      	movs	r2, #5
 8001f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Mode_config[37]=4;
 8001f16:	4b81      	ldr	r3, [pc, #516]	; (800211c <mode_init+0x328>)
 8001f18:	2204      	movs	r2, #4
 8001f1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Mode_config[38]=255;
 8001f1e:	4b7f      	ldr	r3, [pc, #508]	; (800211c <mode_init+0x328>)
 8001f20:	22ff      	movs	r2, #255	; 0xff
 8001f22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Mode_config[39]=1;
 8001f26:	4b7d      	ldr	r3, [pc, #500]	; (800211c <mode_init+0x328>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//test mode 4
	Mode_config[40]=6;
 8001f2e:	4b7b      	ldr	r3, [pc, #492]	; (800211c <mode_init+0x328>)
 8001f30:	2206      	movs	r2, #6
 8001f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Mode_config[41]=1;
 8001f36:	4b79      	ldr	r3, [pc, #484]	; (800211c <mode_init+0x328>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Mode_config[42]=7;
 8001f3e:	4b77      	ldr	r3, [pc, #476]	; (800211c <mode_init+0x328>)
 8001f40:	2207      	movs	r2, #7
 8001f42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Mode_config[43]=1;
 8001f46:	4b75      	ldr	r3, [pc, #468]	; (800211c <mode_init+0x328>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Mode_config[44]=8;
 8001f4e:	4b73      	ldr	r3, [pc, #460]	; (800211c <mode_init+0x328>)
 8001f50:	2208      	movs	r2, #8
 8001f52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Mode_config[45]=1;
 8001f56:	4b71      	ldr	r3, [pc, #452]	; (800211c <mode_init+0x328>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Mode_config[46]=9;
 8001f5e:	4b6f      	ldr	r3, [pc, #444]	; (800211c <mode_init+0x328>)
 8001f60:	2209      	movs	r2, #9
 8001f62:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Mode_config[47]=1;
 8001f66:	4b6d      	ldr	r3, [pc, #436]	; (800211c <mode_init+0x328>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Mode_config[48]=10;
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	; (800211c <mode_init+0x328>)
 8001f70:	220a      	movs	r2, #10
 8001f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	Mode_config[49]=1;
 8001f76:	4b69      	ldr	r3, [pc, #420]	; (800211c <mode_init+0x328>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	//test mode 5
	Mode_config[50]=6;
 8001f7e:	4b67      	ldr	r3, [pc, #412]	; (800211c <mode_init+0x328>)
 8001f80:	2206      	movs	r2, #6
 8001f82:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Mode_config[51]=4;
 8001f86:	4b65      	ldr	r3, [pc, #404]	; (800211c <mode_init+0x328>)
 8001f88:	2204      	movs	r2, #4
 8001f8a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Mode_config[52]=7;
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <mode_init+0x328>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Mode_config[53]=4;
 8001f96:	4b61      	ldr	r3, [pc, #388]	; (800211c <mode_init+0x328>)
 8001f98:	2204      	movs	r2, #4
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	Mode_config[54]=8;
 8001f9e:	4b5f      	ldr	r3, [pc, #380]	; (800211c <mode_init+0x328>)
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Mode_config[55]=4;
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <mode_init+0x328>)
 8001fa8:	2204      	movs	r2, #4
 8001faa:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Mode_config[56]=9;
 8001fae:	4b5b      	ldr	r3, [pc, #364]	; (800211c <mode_init+0x328>)
 8001fb0:	2209      	movs	r2, #9
 8001fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Mode_config[57]=4;
 8001fb6:	4b59      	ldr	r3, [pc, #356]	; (800211c <mode_init+0x328>)
 8001fb8:	2204      	movs	r2, #4
 8001fba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Mode_config[58]=10;
 8001fbe:	4b57      	ldr	r3, [pc, #348]	; (800211c <mode_init+0x328>)
 8001fc0:	220a      	movs	r2, #10
 8001fc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Mode_config[59]=4;
 8001fc6:	4b55      	ldr	r3, [pc, #340]	; (800211c <mode_init+0x328>)
 8001fc8:	2204      	movs	r2, #4
 8001fca:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	//test mode 6
	Mode_config[60]=11;
 8001fce:	4b53      	ldr	r3, [pc, #332]	; (800211c <mode_init+0x328>)
 8001fd0:	220b      	movs	r2, #11
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Mode_config[61]=1;
 8001fd6:	4b51      	ldr	r3, [pc, #324]	; (800211c <mode_init+0x328>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Mode_config[62]=12;
 8001fde:	4b4f      	ldr	r3, [pc, #316]	; (800211c <mode_init+0x328>)
 8001fe0:	220c      	movs	r2, #12
 8001fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Mode_config[63]=1;
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	; (800211c <mode_init+0x328>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Mode_config[64]=255;
 8001fee:	4b4b      	ldr	r3, [pc, #300]	; (800211c <mode_init+0x328>)
 8001ff0:	22ff      	movs	r2, #255	; 0xff
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Mode_config[65]=1;
 8001ff6:	4b49      	ldr	r3, [pc, #292]	; (800211c <mode_init+0x328>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	Mode_config[66]=255;
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <mode_init+0x328>)
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Mode_config[67]=1;
 8002006:	4b45      	ldr	r3, [pc, #276]	; (800211c <mode_init+0x328>)
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Mode_config[68]=255;
 800200e:	4b43      	ldr	r3, [pc, #268]	; (800211c <mode_init+0x328>)
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Mode_config[69]=1;
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <mode_init+0x328>)
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	//test mode 7
	Mode_config[70]=11;
 800201e:	4b3f      	ldr	r3, [pc, #252]	; (800211c <mode_init+0x328>)
 8002020:	220b      	movs	r2, #11
 8002022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Mode_config[71]=4;
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <mode_init+0x328>)
 8002028:	2204      	movs	r2, #4
 800202a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	Mode_config[72]=12;
 800202e:	4b3b      	ldr	r3, [pc, #236]	; (800211c <mode_init+0x328>)
 8002030:	220c      	movs	r2, #12
 8002032:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Mode_config[73]=4;
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <mode_init+0x328>)
 8002038:	2204      	movs	r2, #4
 800203a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Mode_config[74]=255;
 800203e:	4b37      	ldr	r3, [pc, #220]	; (800211c <mode_init+0x328>)
 8002040:	22ff      	movs	r2, #255	; 0xff
 8002042:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Mode_config[75]=1;
 8002046:	4b35      	ldr	r3, [pc, #212]	; (800211c <mode_init+0x328>)
 8002048:	2201      	movs	r2, #1
 800204a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Mode_config[76]=255;
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <mode_init+0x328>)
 8002050:	22ff      	movs	r2, #255	; 0xff
 8002052:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Mode_config[77]=1;
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <mode_init+0x328>)
 8002058:	2201      	movs	r2, #1
 800205a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Mode_config[78]=255;
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <mode_init+0x328>)
 8002060:	22ff      	movs	r2, #255	; 0xff
 8002062:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Mode_config[79]=1;
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <mode_init+0x328>)
 8002068:	2201      	movs	r2, #1
 800206a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	//test mode 8
	Mode_config[80]=13;
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <mode_init+0x328>)
 8002070:	220d      	movs	r2, #13
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Mode_config[81]=1;
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <mode_init+0x328>)
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Mode_config[82]=14;
 800207e:	4b27      	ldr	r3, [pc, #156]	; (800211c <mode_init+0x328>)
 8002080:	220e      	movs	r2, #14
 8002082:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Mode_config[83]=1;
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <mode_init+0x328>)
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Mode_config[84]=255;
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <mode_init+0x328>)
 8002090:	22ff      	movs	r2, #255	; 0xff
 8002092:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Mode_config[85]=1;
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <mode_init+0x328>)
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Mode_config[86]=255;
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <mode_init+0x328>)
 80020a0:	22ff      	movs	r2, #255	; 0xff
 80020a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Mode_config[87]=1;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <mode_init+0x328>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Mode_config[88]=255;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <mode_init+0x328>)
 80020b0:	22ff      	movs	r2, #255	; 0xff
 80020b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	Mode_config[89]=1;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <mode_init+0x328>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//test mode 8
	Mode_config[90]=13;
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <mode_init+0x328>)
 80020c0:	220d      	movs	r2, #13
 80020c2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	Mode_config[91]=1;
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <mode_init+0x328>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Mode_config[92]=14;
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <mode_init+0x328>)
 80020d0:	220e      	movs	r2, #14
 80020d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	Mode_config[93]=1;
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <mode_init+0x328>)
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	Mode_config[94]=255;
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <mode_init+0x328>)
 80020e0:	22ff      	movs	r2, #255	; 0xff
 80020e2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Mode_config[95]=1;
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <mode_init+0x328>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	Mode_config[96]=255;
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <mode_init+0x328>)
 80020f0:	22ff      	movs	r2, #255	; 0xff
 80020f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	Mode_config[97]=1;
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <mode_init+0x328>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	Mode_config[98]=255;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <mode_init+0x328>)
 8002100:	22ff      	movs	r2, #255	; 0xff
 8002102:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	Mode_config[99]=1;
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <mode_init+0x328>)
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2007027c 	.word	0x2007027c

08002120 <write_flash_config>:
void write_flash_config()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0
	//content_size：0=16kb, 1=32kb, 2=32kb, 3=64kb
	int divide_value = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64; //divide_value=4
 800212a:	4b60      	ldr	r3, [pc, #384]	; (80022ac <write_flash_config+0x18c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <write_flash_config+0x18>
 8002132:	2304      	movs	r3, #4
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002136:	e00c      	b.n	8002152 <write_flash_config+0x32>
	else if(content_size==1) divide_value=256/128; //divide_value=2
 8002138:	4b5c      	ldr	r3, [pc, #368]	; (80022ac <write_flash_config+0x18c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <write_flash_config+0x26>
 8002140:	2302      	movs	r3, #2
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002144:	e005      	b.n	8002152 <write_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;//divide_value=1
 8002146:	4b59      	ldr	r3, [pc, #356]	; (80022ac <write_flash_config+0x18c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d101      	bne.n	8002152 <write_flash_config+0x32>
 800214e:	2301      	movs	r3, #1
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
	int image_id = 31;
 8002152:	231f      	movs	r3, #31
 8002154:	623b      	str	r3, [r7, #32]
	erase_flash_sector(image_id);
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 faa2 	bl	80026a4 <erase_flash_sector>

	int image_id_H = image_id / divide_value;
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	fb92 f3f3 	sdiv	r3, r2, r3
 8002168:	61fb      	str	r3, [r7, #28]
	int image_id_L = image_id % divide_value;
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002174:	fb01 f202 	mul.w	r2, r1, r2
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
	int count = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002186:	fb92 f3f3 	sdiv	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	e076      	b.n	8002282 <write_flash_config+0x162>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219a:	4845      	ldr	r0, [pc, #276]	; (80022b0 <write_flash_config+0x190>)
 800219c:	f002 fa78 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 80021a0:	2306      	movs	r3, #6
 80021a2:	753b      	strb	r3, [r7, #20]
 80021a4:	f107 0114 	add.w	r1, r7, #20
 80021a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ac:	2201      	movs	r2, #1
 80021ae:	4841      	ldr	r0, [pc, #260]	; (80022b4 <write_flash_config+0x194>)
 80021b0:	f004 fb0b 	bl	80067ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ba:	483d      	ldr	r0, [pc, #244]	; (80022b0 <write_flash_config+0x190>)
 80021bc:	f002 fa68 	bl	8004690 <HAL_GPIO_WritePin>
		delay_us(10);
 80021c0:	200a      	movs	r0, #10
 80021c2:	f000 fd67 	bl	8002c94 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021cc:	4838      	ldr	r0, [pc, #224]	; (80022b0 <write_flash_config+0x190>)
 80021ce:	f002 fa5f 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 80021d2:	2302      	movs	r3, #2
 80021d4:	743b      	strb	r3, [r7, #16]
 80021d6:	f107 0110 	add.w	r1, r7, #16
 80021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021de:	2201      	movs	r2, #1
 80021e0:	4834      	ldr	r0, [pc, #208]	; (80022b4 <write_flash_config+0x194>)
 80021e2:	f004 faf2 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	733b      	strb	r3, [r7, #12]
 80021ec:	f107 010c 	add.w	r1, r7, #12
 80021f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f4:	2201      	movs	r2, #1
 80021f6:	482f      	ldr	r0, [pc, #188]	; (80022b4 <write_flash_config+0x194>)
 80021f8:	f004 fae7 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	723b      	strb	r3, [r7, #8]
 8002202:	f107 0108 	add.w	r1, r7, #8
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	2201      	movs	r2, #1
 800220c:	4829      	ldr	r0, [pc, #164]	; (80022b4 <write_flash_config+0x194>)
 800220e:	f004 fadc 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002212:	2300      	movs	r3, #0
 8002214:	713b      	strb	r3, [r7, #4]
 8002216:	1d39      	adds	r1, r7, #4
 8002218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221c:	2201      	movs	r2, #1
 800221e:	4825      	ldr	r0, [pc, #148]	; (80022b4 <write_flash_config+0x194>)
 8002220:	f004 fad3 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &Mode_config[0], Max_pic_per_mode*Max_mode_num*2, 1000);
 8002224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002228:	226e      	movs	r2, #110	; 0x6e
 800222a:	4923      	ldr	r1, [pc, #140]	; (80022b8 <write_flash_config+0x198>)
 800222c:	4821      	ldr	r0, [pc, #132]	; (80022b4 <write_flash_config+0x194>)
 800222e:	f004 facc 	bl	80067ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002232:	2201      	movs	r2, #1
 8002234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002238:	481d      	ldr	r0, [pc, #116]	; (80022b0 <write_flash_config+0x190>)
 800223a:	f002 fa29 	bl	8004690 <HAL_GPIO_WritePin>
		delay_us(10);
 800223e:	200a      	movs	r0, #10
 8002240:	f000 fd28 	bl	8002c94 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224a:	4819      	ldr	r0, [pc, #100]	; (80022b0 <write_flash_config+0x190>)
 800224c:	f002 fa20 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 8002250:	2304      	movs	r3, #4
 8002252:	703b      	strb	r3, [r7, #0]
 8002254:	4639      	mov	r1, r7
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	2201      	movs	r2, #1
 800225c:	4815      	ldr	r0, [pc, #84]	; (80022b4 <write_flash_config+0x194>)
 800225e:	f004 fab4 	bl	80067ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002262:	2201      	movs	r2, #1
 8002264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002268:	4811      	ldr	r0, [pc, #68]	; (80022b0 <write_flash_config+0x190>)
 800226a:	f002 fa11 	bl	8004690 <HAL_GPIO_WritePin>
		delay_us(1000);
 800226e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002272:	f000 fd0f 	bl	8002c94 <delay_us>
		count++;
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	3301      	adds	r3, #1
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	3301      	adds	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	3301      	adds	r3, #1
 8002286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	461a      	mov	r2, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	4293      	cmp	r3, r2
 800229a:	f4ff af7b 	bcc.w	8002194 <write_flash_config+0x74>
	}

	flash_wait_nobusy();
 800229e:	f7ff fd9b 	bl	8001dd8 <flash_wait_nobusy>
}
 80022a2:	bf00      	nop
 80022a4:	3730      	adds	r7, #48	; 0x30
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000000b 	.word	0x2000000b
 80022b0:	48000400 	.word	0x48000400
 80022b4:	20000110 	.word	0x20000110
 80022b8:	2007027c 	.word	0x2007027c

080022bc <read_flash_config>:
void read_flash_config()
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
	int divide_value = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
	if(content_size==0) divide_value=256/64;
 80022c6:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <read_flash_config+0x10c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <read_flash_config+0x18>
 80022ce:	2304      	movs	r3, #4
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	e00c      	b.n	80022ee <read_flash_config+0x32>
	else if(content_size==1) divide_value=256/128;
 80022d4:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <read_flash_config+0x10c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d102      	bne.n	80022e2 <read_flash_config+0x26>
 80022dc:	2302      	movs	r3, #2
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
 80022e0:	e005      	b.n	80022ee <read_flash_config+0x32>
	else if(content_size==2) divide_value=256/256;
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <read_flash_config+0x10c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d101      	bne.n	80022ee <read_flash_config+0x32>
 80022ea:	2301      	movs	r3, #1
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24

	int image_id= 31;
 80022ee:	231f      	movs	r3, #31
 80022f0:	61fb      	str	r3, [r7, #28]
	int image_id_H = image_id / divide_value;
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80022fa:	61bb      	str	r3, [r7, #24]
	int image_id_L = image_id % divide_value;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002300:	fb93 f2f2 	sdiv	r2, r3, r2
 8002304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002306:	fb01 f202 	mul.w	r2, r1, r2
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	617b      	str	r3, [r7, #20]
	int count = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	fb92 f3f3 	sdiv	r3, r2, r3
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	e03d      	b.n	80023a2 <read_flash_config+0xe6>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002326:	2200      	movs	r2, #0
 8002328:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232c:	4827      	ldr	r0, [pc, #156]	; (80023cc <read_flash_config+0x110>)
 800232e:	f002 f9af 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 8002332:	2303      	movs	r3, #3
 8002334:	733b      	strb	r3, [r7, #12]
 8002336:	f107 010c 	add.w	r1, r7, #12
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	2201      	movs	r2, #1
 8002340:	4823      	ldr	r0, [pc, #140]	; (80023d0 <read_flash_config+0x114>)
 8002342:	f004 fa42 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	723b      	strb	r3, [r7, #8]
 800234c:	f107 0108 	add.w	r1, r7, #8
 8002350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002354:	2201      	movs	r2, #1
 8002356:	481e      	ldr	r0, [pc, #120]	; (80023d0 <read_flash_config+0x114>)
 8002358:	f004 fa37 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	713b      	strb	r3, [r7, #4]
 8002362:	1d39      	adds	r1, r7, #4
 8002364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002368:	2201      	movs	r2, #1
 800236a:	4819      	ldr	r0, [pc, #100]	; (80023d0 <read_flash_config+0x114>)
 800236c:	f004 fa2d 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002370:	2300      	movs	r3, #0
 8002372:	703b      	strb	r3, [r7, #0]
 8002374:	4639      	mov	r1, r7
 8002376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237a:	2201      	movs	r2, #1
 800237c:	4814      	ldr	r0, [pc, #80]	; (80023d0 <read_flash_config+0x114>)
 800237e:	f004 fa24 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &Mode_config[0],  Max_pic_per_mode*Max_mode_num*2, 1000);
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	226e      	movs	r2, #110	; 0x6e
 8002388:	4912      	ldr	r1, [pc, #72]	; (80023d4 <read_flash_config+0x118>)
 800238a:	4811      	ldr	r0, [pc, #68]	; (80023d0 <read_flash_config+0x114>)
 800238c:	f004 fb92 	bl	8006ab4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002396:	480d      	ldr	r0, [pc, #52]	; (80023cc <read_flash_config+0x110>)
 8002398:	f002 f97a 	bl	8004690 <HAL_GPIO_WritePin>
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	3301      	adds	r3, #1
 80023a0:	623b      	str	r3, [r7, #32]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3301      	adds	r3, #1
 80023a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ac:	fb91 f2f2 	sdiv	r2, r1, r2
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d3b4      	bcc.n	8002326 <read_flash_config+0x6a>
	}
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000000b 	.word	0x2000000b
 80023cc:	48000400 	.word	0x48000400
 80023d0:	20000110 	.word	0x20000110
 80023d4:	2007027c 	.word	0x2007027c

080023d8 <write_flash_page>:
void write_flash_page(uint8_t *data, uint8_t image_id)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08e      	sub	sp, #56	; 0x38
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
	if(content_size==0) divide_value=256/64;
 80023e8:	4b60      	ldr	r3, [pc, #384]	; (800256c <write_flash_page+0x194>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <write_flash_page+0x1e>
 80023f0:	2304      	movs	r3, #4
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
 80023f4:	e00c      	b.n	8002410 <write_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <write_flash_page+0x194>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <write_flash_page+0x2c>
 80023fe:	2302      	movs	r3, #2
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
 8002402:	e005      	b.n	8002410 <write_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <write_flash_page+0x194>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d101      	bne.n	8002410 <write_flash_page+0x38>
 800240c:	2301      	movs	r3, #1
 800240e:	637b      	str	r3, [r7, #52]	; 0x34

	int image_id_H = image_id / divide_value;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002414:	fb92 f3f3 	sdiv	r3, r2, r3
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
	int image_id_L = image_id % divide_value;
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800241e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002422:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002424:	fb01 f202 	mul.w	r2, r1, r2
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
	int count = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 8002430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	fb92 f3f3 	sdiv	r3, r2, r3
 800243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002442:	e07e      	b.n	8002542 <write_flash_page+0x16a>
	{
		// enable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002444:	2200      	movs	r2, #0
 8002446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800244a:	4849      	ldr	r0, [pc, #292]	; (8002570 <write_flash_page+0x198>)
 800244c:	f002 f920 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002450:	2306      	movs	r3, #6
 8002452:	f887 3020 	strb.w	r3, [r7, #32]
 8002456:	f107 0120 	add.w	r1, r7, #32
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	2201      	movs	r2, #1
 8002460:	4844      	ldr	r0, [pc, #272]	; (8002574 <write_flash_page+0x19c>)
 8002462:	f004 f9b2 	bl	80067ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002466:	2201      	movs	r2, #1
 8002468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800246c:	4840      	ldr	r0, [pc, #256]	; (8002570 <write_flash_page+0x198>)
 800246e:	f002 f90f 	bl	8004690 <HAL_GPIO_WritePin>
		delay_us(10);
 8002472:	200a      	movs	r0, #10
 8002474:	f000 fc0e 	bl	8002c94 <delay_us>

		// write data to flash page
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800247e:	483c      	ldr	r0, [pc, #240]	; (8002570 <write_flash_page+0x198>)
 8002480:	f002 f906 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x02}, 1, 1000);
 8002484:	2302      	movs	r3, #2
 8002486:	773b      	strb	r3, [r7, #28]
 8002488:	f107 011c 	add.w	r1, r7, #28
 800248c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002490:	2201      	movs	r2, #1
 8002492:	4838      	ldr	r0, [pc, #224]	; (8002574 <write_flash_page+0x19c>)
 8002494:	f004 f999 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	b2db      	uxtb	r3, r3
 800249c:	763b      	strb	r3, [r7, #24]
 800249e:	f107 0118 	add.w	r1, r7, #24
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	2201      	movs	r2, #1
 80024a8:	4832      	ldr	r0, [pc, #200]	; (8002574 <write_flash_page+0x19c>)
 80024aa:	f004 f98e 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	753b      	strb	r3, [r7, #20]
 80024b4:	f107 0114 	add.w	r1, r7, #20
 80024b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024bc:	2201      	movs	r2, #1
 80024be:	482d      	ldr	r0, [pc, #180]	; (8002574 <write_flash_page+0x19c>)
 80024c0:	f004 f983 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80024c4:	2300      	movs	r3, #0
 80024c6:	743b      	strb	r3, [r7, #16]
 80024c8:	f107 0110 	add.w	r1, r7, #16
 80024cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d0:	2201      	movs	r2, #1
 80024d2:	4828      	ldr	r0, [pc, #160]	; (8002574 <write_flash_page+0x19c>)
 80024d4:	f004 f979 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, &data[count*256], 256, 1000);
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	1899      	adds	r1, r3, r2
 80024e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ea:	4822      	ldr	r0, [pc, #136]	; (8002574 <write_flash_page+0x19c>)
 80024ec:	f004 f96d 	bl	80067ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80024f0:	2201      	movs	r2, #1
 80024f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f6:	481e      	ldr	r0, [pc, #120]	; (8002570 <write_flash_page+0x198>)
 80024f8:	f002 f8ca 	bl	8004690 <HAL_GPIO_WritePin>
		delay_us(10);
 80024fc:	200a      	movs	r0, #10
 80024fe:	f000 fbc9 	bl	8002c94 <delay_us>

		// disable write
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002502:	2200      	movs	r2, #0
 8002504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002508:	4819      	ldr	r0, [pc, #100]	; (8002570 <write_flash_page+0x198>)
 800250a:	f002 f8c1 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 800250e:	2304      	movs	r3, #4
 8002510:	733b      	strb	r3, [r7, #12]
 8002512:	f107 010c 	add.w	r1, r7, #12
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	2201      	movs	r2, #1
 800251c:	4815      	ldr	r0, [pc, #84]	; (8002574 <write_flash_page+0x19c>)
 800251e:	f004 f954 	bl	80067ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002522:	2201      	movs	r2, #1
 8002524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002528:	4811      	ldr	r0, [pc, #68]	; (8002570 <write_flash_page+0x198>)
 800252a:	f002 f8b1 	bl	8004690 <HAL_GPIO_WritePin>
		delay_us(1000);
 800252e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002532:	f000 fbaf 	bl	8002c94 <delay_us>
		count++;
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	3301      	adds	r3, #1
 800253a:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	3301      	adds	r3, #1
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	3301      	adds	r3, #1
 8002546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800254a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254c:	fb91 f2f2 	sdiv	r2, r1, r2
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	461a      	mov	r2, r3
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	4293      	cmp	r3, r2
 800255a:	f4ff af73 	bcc.w	8002444 <write_flash_page+0x6c>
	}

	flash_wait_nobusy();
 800255e:	f7ff fc3b 	bl	8001dd8 <flash_wait_nobusy>
}
 8002562:	bf00      	nop
 8002564:	3738      	adds	r7, #56	; 0x38
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2000000b 	.word	0x2000000b
 8002570:	48000400 	.word	0x48000400
 8002574:	20000110 	.word	0x20000110

08002578 <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	70fb      	strb	r3, [r7, #3]
	int divide_value = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <read_flash_page+0x120>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <read_flash_page+0x1e>
 8002590:	2304      	movs	r3, #4
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002594:	e00c      	b.n	80025b0 <read_flash_page+0x38>
	else if(content_size==1) divide_value=256/128;
 8002596:	4b40      	ldr	r3, [pc, #256]	; (8002698 <read_flash_page+0x120>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d102      	bne.n	80025a4 <read_flash_page+0x2c>
 800259e:	2302      	movs	r3, #2
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a2:	e005      	b.n	80025b0 <read_flash_page+0x38>
	else if(content_size==2) divide_value=256/256;
 80025a4:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <read_flash_page+0x120>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d101      	bne.n	80025b0 <read_flash_page+0x38>
 80025ac:	2301      	movs	r3, #1
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	int image_id_H = image_id / divide_value;
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80025b8:	623b      	str	r3, [r7, #32]
	int image_id_L = image_id % divide_value;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025be:	fb93 f2f2 	sdiv	r2, r3, r2
 80025c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025c4:	fb01 f202 	mul.w	r2, r1, r2
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	61fb      	str	r3, [r7, #28]
	int count = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 80025d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
 80025e2:	e047      	b.n	8002674 <read_flash_page+0xfc>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ea:	482c      	ldr	r0, [pc, #176]	; (800269c <read_flash_page+0x124>)
 80025ec:	f002 f850 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x03}, 1, 1000);
 80025f0:	2303      	movs	r3, #3
 80025f2:	763b      	strb	r3, [r7, #24]
 80025f4:	f107 0118 	add.w	r1, r7, #24
 80025f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fc:	2201      	movs	r2, #1
 80025fe:	4828      	ldr	r0, [pc, #160]	; (80026a0 <read_flash_page+0x128>)
 8002600:	f004 f8e3 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	753b      	strb	r3, [r7, #20]
 800260a:	f107 0114 	add.w	r1, r7, #20
 800260e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002612:	2201      	movs	r2, #1
 8002614:	4822      	ldr	r0, [pc, #136]	; (80026a0 <read_flash_page+0x128>)
 8002616:	f004 f8d8 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){i}, 1, 1000);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	b2db      	uxtb	r3, r3
 800261e:	743b      	strb	r3, [r7, #16]
 8002620:	f107 0110 	add.w	r1, r7, #16
 8002624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002628:	2201      	movs	r2, #1
 800262a:	481d      	ldr	r0, [pc, #116]	; (80026a0 <read_flash_page+0x128>)
 800262c:	f004 f8cd 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 8002630:	2300      	movs	r3, #0
 8002632:	733b      	strb	r3, [r7, #12]
 8002634:	f107 010c 	add.w	r1, r7, #12
 8002638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263c:	2201      	movs	r2, #1
 800263e:	4818      	ldr	r0, [pc, #96]	; (80026a0 <read_flash_page+0x128>)
 8002640:	f004 f8c3 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &data[count*256], 256, 1000);
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	461a      	mov	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1899      	adds	r1, r3, r2
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002656:	4812      	ldr	r0, [pc, #72]	; (80026a0 <read_flash_page+0x128>)
 8002658:	f004 fa2c 	bl	8006ab4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 800265c:	2201      	movs	r2, #1
 800265e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002662:	480e      	ldr	r0, [pc, #56]	; (800269c <read_flash_page+0x124>)
 8002664:	f002 f814 	bl	8004690 <HAL_GPIO_WritePin>
		count++;
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	3301      	adds	r3, #1
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (uint32_t i = image_id_L*(256/divide_value); i < (image_id_L+1)*(256/divide_value); i++)
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	3301      	adds	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	3301      	adds	r3, #1
 8002678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800267c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267e:	fb91 f2f2 	sdiv	r2, r1, r2
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	461a      	mov	r2, r3
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	4293      	cmp	r3, r2
 800268c:	d3aa      	bcc.n	80025e4 <read_flash_page+0x6c>
	}
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	3730      	adds	r7, #48	; 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000000b 	.word	0x2000000b
 800269c:	48000400 	.word	0x48000400
 80026a0:	20000110 	.word	0x20000110

080026a4 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	; 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
	int divide_value = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(content_size==0) divide_value=256/64;
 80026b2:	4b64      	ldr	r3, [pc, #400]	; (8002844 <erase_flash_sector+0x1a0>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <erase_flash_sector+0x1c>
 80026ba:	2304      	movs	r3, #4
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026be:	e00c      	b.n	80026da <erase_flash_sector+0x36>
	else if(content_size==1) divide_value=256/128;
 80026c0:	4b60      	ldr	r3, [pc, #384]	; (8002844 <erase_flash_sector+0x1a0>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d102      	bne.n	80026ce <erase_flash_sector+0x2a>
 80026c8:	2302      	movs	r3, #2
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026cc:	e005      	b.n	80026da <erase_flash_sector+0x36>
	else if(content_size==2) divide_value=256/256;
 80026ce:	4b5d      	ldr	r3, [pc, #372]	; (8002844 <erase_flash_sector+0x1a0>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d101      	bne.n	80026da <erase_flash_sector+0x36>
 80026d6:	2301      	movs	r3, #1
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t page_count = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(content_size==0) page_count=16/4;
 80026e0:	4b58      	ldr	r3, [pc, #352]	; (8002844 <erase_flash_sector+0x1a0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d103      	bne.n	80026f0 <erase_flash_sector+0x4c>
 80026e8:	2304      	movs	r3, #4
 80026ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ee:	e00e      	b.n	800270e <erase_flash_sector+0x6a>
	else if(content_size==1) page_count=32/4;
 80026f0:	4b54      	ldr	r3, [pc, #336]	; (8002844 <erase_flash_sector+0x1a0>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d103      	bne.n	8002700 <erase_flash_sector+0x5c>
 80026f8:	2308      	movs	r3, #8
 80026fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026fe:	e006      	b.n	800270e <erase_flash_sector+0x6a>
	else if(content_size==2) page_count=64/4;
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <erase_flash_sector+0x1a0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d102      	bne.n	800270e <erase_flash_sector+0x6a>
 8002708:	2310      	movs	r3, #16
 800270a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	int image_id_H = image_id / divide_value;
 800270e:	79fa      	ldrb	r2, [r7, #7]
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	fb92 f3f3 	sdiv	r3, r2, r3
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
	int image_id_L = image_id % divide_value;
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800271c:	fb93 f2f2 	sdiv	r2, r3, r2
 8002720:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002722:	fb01 f202 	mul.w	r2, r1, r2
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	623b      	str	r3, [r7, #32]

	reset_flash_software();
 800272a:	f000 f891 	bl	8002850 <reset_flash_software>

	for(uint8_t i = 0; i < page_count; i++)
 800272e:	2300      	movs	r3, #0
 8002730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002734:	e07a      	b.n	800282c <erase_flash_sector+0x188>
	{
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800273c:	4842      	ldr	r0, [pc, #264]	; (8002848 <erase_flash_sector+0x1a4>)
 800273e:	f001 ffa7 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x06}, 1, 1000);
 8002742:	2306      	movs	r3, #6
 8002744:	773b      	strb	r3, [r7, #28]
 8002746:	f107 011c 	add.w	r1, r7, #28
 800274a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274e:	2201      	movs	r2, #1
 8002750:	483e      	ldr	r0, [pc, #248]	; (800284c <erase_flash_sector+0x1a8>)
 8002752:	f004 f83a 	bl	80067ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002756:	2201      	movs	r2, #1
 8002758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800275c:	483a      	ldr	r0, [pc, #232]	; (8002848 <erase_flash_sector+0x1a4>)
 800275e:	f001 ff97 	bl	8004690 <HAL_GPIO_WritePin>
		delay_us(10);
 8002762:	200a      	movs	r0, #10
 8002764:	f000 fa96 	bl	8002c94 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800276e:	4836      	ldr	r0, [pc, #216]	; (8002848 <erase_flash_sector+0x1a4>)
 8002770:	f001 ff8e 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x20}, 1, 1000);
 8002774:	2320      	movs	r3, #32
 8002776:	763b      	strb	r3, [r7, #24]
 8002778:	f107 0118 	add.w	r1, r7, #24
 800277c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002780:	2201      	movs	r2, #1
 8002782:	4832      	ldr	r0, [pc, #200]	; (800284c <erase_flash_sector+0x1a8>)
 8002784:	f004 f821 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){image_id_H}, 1, 1000);
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	b2db      	uxtb	r3, r3
 800278c:	753b      	strb	r3, [r7, #20]
 800278e:	f107 0114 	add.w	r1, r7, #20
 8002792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002796:	2201      	movs	r2, #1
 8002798:	482c      	ldr	r0, [pc, #176]	; (800284c <erase_flash_sector+0x1a8>)
 800279a:	f004 f816 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){(image_id_L*(0x10*page_count)) + (0x10*i)}, 1, 1000);
 800279e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027a2:	6a3a      	ldr	r2, [r7, #32]
 80027a4:	fb03 f202 	mul.w	r2, r3, r2
 80027a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80027ac:	4413      	add	r3, r2
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	743b      	strb	r3, [r7, #16]
 80027b6:	f107 0110 	add.w	r1, r7, #16
 80027ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027be:	2201      	movs	r2, #1
 80027c0:	4822      	ldr	r0, [pc, #136]	; (800284c <erase_flash_sector+0x1a8>)
 80027c2:	f004 f802 	bl	80067ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x00}, 1, 1000);
 80027c6:	2300      	movs	r3, #0
 80027c8:	733b      	strb	r3, [r7, #12]
 80027ca:	f107 010c 	add.w	r1, r7, #12
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	2201      	movs	r2, #1
 80027d4:	481d      	ldr	r0, [pc, #116]	; (800284c <erase_flash_sector+0x1a8>)
 80027d6:	f003 fff8 	bl	80067ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80027da:	2201      	movs	r2, #1
 80027dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027e0:	4819      	ldr	r0, [pc, #100]	; (8002848 <erase_flash_sector+0x1a4>)
 80027e2:	f001 ff55 	bl	8004690 <HAL_GPIO_WritePin>
		delay_us(10);
 80027e6:	200a      	movs	r0, #10
 80027e8:	f000 fa54 	bl	8002c94 <delay_us>

		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027f2:	4815      	ldr	r0, [pc, #84]	; (8002848 <erase_flash_sector+0x1a4>)
 80027f4:	f001 ff4c 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x04}, 1, 1000);
 80027f8:	2304      	movs	r3, #4
 80027fa:	723b      	strb	r3, [r7, #8]
 80027fc:	f107 0108 	add.w	r1, r7, #8
 8002800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002804:	2201      	movs	r2, #1
 8002806:	4811      	ldr	r0, [pc, #68]	; (800284c <erase_flash_sector+0x1a8>)
 8002808:	f003 ffdf 	bl	80067ca <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002812:	480d      	ldr	r0, [pc, #52]	; (8002848 <erase_flash_sector+0x1a4>)
 8002814:	f001 ff3c 	bl	8004690 <HAL_GPIO_WritePin>
		delay_us(10);
 8002818:	200a      	movs	r0, #10
 800281a:	f000 fa3b 	bl	8002c94 <delay_us>

		flash_wait_nobusy();
 800281e:	f7ff fadb 	bl	8001dd8 <flash_wait_nobusy>
	for(uint8_t i = 0; i < page_count; i++)
 8002822:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002826:	3301      	adds	r3, #1
 8002828:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800282c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002830:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002834:	429a      	cmp	r2, r3
 8002836:	f4ff af7e 	bcc.w	8002736 <erase_flash_sector+0x92>
	}
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	3730      	adds	r7, #48	; 0x30
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	2000000b 	.word	0x2000000b
 8002848:	48000400 	.word	0x48000400
 800284c:	20000110 	.word	0x20000110

08002850 <reset_flash_software>:

void reset_flash_software()
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800285c:	481a      	ldr	r0, [pc, #104]	; (80028c8 <reset_flash_software+0x78>)
 800285e:	f001 ff17 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x66}, 1, 1000);
 8002862:	2366      	movs	r3, #102	; 0x66
 8002864:	713b      	strb	r3, [r7, #4]
 8002866:	1d39      	adds	r1, r7, #4
 8002868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286c:	2201      	movs	r2, #1
 800286e:	4817      	ldr	r0, [pc, #92]	; (80028cc <reset_flash_software+0x7c>)
 8002870:	f003 ffab 	bl	80067ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 8002874:	2201      	movs	r2, #1
 8002876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287a:	4813      	ldr	r0, [pc, #76]	; (80028c8 <reset_flash_software+0x78>)
 800287c:	f001 ff08 	bl	8004690 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002880:	2001      	movs	r0, #1
 8002882:	f000 fa22 	bl	8002cca <delay_100ns>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_RESET);
 8002886:	2200      	movs	r2, #0
 8002888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800288c:	480e      	ldr	r0, [pc, #56]	; (80028c8 <reset_flash_software+0x78>)
 800288e:	f001 feff 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t[]){0x99}, 1, 1000);
 8002892:	2399      	movs	r3, #153	; 0x99
 8002894:	703b      	strb	r3, [r7, #0]
 8002896:	4639      	mov	r1, r7
 8002898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289c:	2201      	movs	r2, #1
 800289e:	480b      	ldr	r0, [pc, #44]	; (80028cc <reset_flash_software+0x7c>)
 80028a0:	f003 ff93 	bl	80067ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, flash_cs_Pin, GPIO_PIN_SET);
 80028a4:	2201      	movs	r2, #1
 80028a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028aa:	4807      	ldr	r0, [pc, #28]	; (80028c8 <reset_flash_software+0x78>)
 80028ac:	f001 fef0 	bl	8004690 <HAL_GPIO_WritePin>
	delay_100ns(1);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f000 fa0a 	bl	8002cca <delay_100ns>
	delay_us(1000);
 80028b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ba:	f000 f9eb 	bl	8002c94 <delay_us>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	48000400 	.word	0x48000400
 80028cc:	20000110 	.word	0x20000110

080028d0 <my_MX_DSIHOST_DSI_Init>:
/*====================================flash function end====================================*/

/*====================================customized function start====================================*/
static void my_MX_DSIHOST_DSI_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b0ae      	sub	sp, #184	; 0xb8
 80028d4:	af00      	add	r7, sp, #0
  DSI_PLLInitTypeDef PLLInit = {0};
 80028d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80028e2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80028e6:	2224      	movs	r2, #36	; 0x24
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f006 f964 	bl	8008bb8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80028f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
 8002900:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	226c      	movs	r2, #108	; 0x6c
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f006 f955 	bl	8008bb8 <memset>
  hdsi.Instance = DSI;
 800290e:	4b6d      	ldr	r3, [pc, #436]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002910:	4a6d      	ldr	r2, [pc, #436]	; (8002ac8 <my_MX_DSIHOST_DSI_Init+0x1f8>)
 8002912:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002914:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002916:	2200      	movs	r2, #0
 8002918:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 800291a:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 800291c:	2202      	movs	r2, #2
 800291e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8002926:	2332      	movs	r3, #50	; 0x32
 8002928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800292c:	2301      	movs	r3, #1
 800292e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8002932:	2301      	movs	r3, #1
 8002934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002938:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800293c:	4619      	mov	r1, r3
 800293e:	4861      	ldr	r0, [pc, #388]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002940:	f000 fea0 	bl	8003684 <HAL_DSI_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <my_MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800294a:	f000 fa35 	bl	8002db8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002984:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002988:	4619      	mov	r1, r3
 800298a:	484e      	ldr	r0, [pc, #312]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 800298c:	f001 faed 	bl	8003f6a <HAL_DSI_ConfigHostTimeouts>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <my_MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8002996:	f000 fa0f 	bl	8002db8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 800299a:	2313      	movs	r3, #19
 800299c:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 800299e:	230f      	movs	r3, #15
 80029a0:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 80029a2:	2309      	movs	r3, #9
 80029a4:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 80029a6:	230a      	movs	r3, #10
 80029a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80029b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029ba:	4619      	mov	r1, r3
 80029bc:	4841      	ldr	r0, [pc, #260]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80029be:	f001 fa6a 	bl	8003e96 <HAL_DSI_ConfigPhyTimer>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <my_MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 80029c8:	f000 f9f6 	bl	8002db8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80029cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80029d0:	483c      	ldr	r0, [pc, #240]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80029d2:	f001 fc86 	bl	80042e2 <HAL_DSI_SetLowPowerRXFilter>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <my_MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 80029dc:	f000 f9ec 	bl	8002db8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80029e0:	2100      	movs	r1, #0
 80029e2:	4838      	ldr	r0, [pc, #224]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 80029e4:	f000 ff6a 	bl	80038bc <HAL_DSI_ConfigErrorMonitor>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <my_MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 80029ee:	f000 f9e3 	bl	8002db8 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 80029f6:	2305      	movs	r3, #5
 80029f8:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 80029fe:	2301      	movs	r3, #1
 8002a00:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 120;
 8002a02:	2378      	movs	r3, #120	; 0x78
 8002a04:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = HSA;
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = HBP;
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <my_MX_DSIHOST_DSI_Init+0x200>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = HSA+HBP+IMAGE_H+HFP;
 8002a26:	4b29      	ldr	r3, [pc, #164]	; (8002acc <my_MX_DSIHOST_DSI_Init+0x1fc>)
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <my_MX_DSIHOST_DSI_Init+0x200>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <my_MX_DSIHOST_DSI_Init+0x204>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a27      	ldr	r2, [pc, #156]	; (8002ad8 <my_MX_DSIHOST_DSI_Init+0x208>)
 8002a3c:	8812      	ldrh	r2, [r2, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = VSA;
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <my_MX_DSIHOST_DSI_Init+0x20c>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = VBP;
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <my_MX_DSIHOST_DSI_Init+0x210>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = VFP;
 8002a4e:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <my_MX_DSIHOST_DSI_Init+0x214>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = IMAGE_W;
 8002a54:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <my_MX_DSIHOST_DSI_Init+0x218>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8002a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8002a60:	231c      	movs	r3, #28
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8002a64:	2350      	movs	r3, #80	; 0x50
 8002a66:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8002a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a6c:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8002a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a72:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8002a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a78:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8002a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a7e:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8002a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a84:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8002a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8a:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	4619      	mov	r1, r3
 8002a94:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002a96:	f000 fff6 	bl	8003a86 <HAL_DSI_ConfigVideoMode>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <my_MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 8002aa0:	f000 f98a 	bl	8002db8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4807      	ldr	r0, [pc, #28]	; (8002ac4 <my_MX_DSIHOST_DSI_Init+0x1f4>)
 8002aa8:	f000 ffc5 	bl	8003a36 <HAL_DSI_SetGenericVCID>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <my_MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 8002ab2:	f000 f981 	bl	8002db8 <Error_Handler>
  }
  LCD_PowerOn();
 8002ab6:	f7fe fccb 	bl	8001450 <LCD_PowerOn>
}
 8002aba:	bf00      	nop
 8002abc:	37b8      	adds	r7, #184	; 0xb8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	2000004c 	.word	0x2000004c
 8002ac8:	40016c00 	.word	0x40016c00
 8002acc:	20000010 	.word	0x20000010
 8002ad0:	20000012 	.word	0x20000012
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000014 	.word	0x20000014
 8002adc:	20000016 	.word	0x20000016
 8002ae0:	20000018 	.word	0x20000018
 8002ae4:	2000001a 	.word	0x2000001a
 8002ae8:	20000004 	.word	0x20000004

08002aec <my_MX_LTDC_Init>:
static void my_MX_LTDC_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	; 0x38
 8002af0:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	2234      	movs	r2, #52	; 0x34
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f006 f85d 	bl	8008bb8 <memset>
  hltdc.Instance = LTDC;
 8002afe:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b00:	4a5a      	ldr	r2, [pc, #360]	; (8002c6c <my_MX_LTDC_Init+0x180>)
 8002b02:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8002b04:	4b58      	ldr	r3, [pc, #352]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b0a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b12:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b14:	4b54      	ldr	r3, [pc, #336]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b1a:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = HSA-1;
 8002b20:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <my_MX_LTDC_Init+0x184>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b2a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = VSA-1;
 8002b2c:	4b51      	ldr	r3, [pc, #324]	; (8002c74 <my_MX_LTDC_Init+0x188>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b36:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = HSA+HBP-1;
 8002b38:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <my_MX_LTDC_Init+0x184>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b4e      	ldr	r3, [pc, #312]	; (8002c78 <my_MX_LTDC_Init+0x18c>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	3b01      	subs	r3, #1
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b4a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = VSA+VBP-1;
 8002b4c:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <my_MX_LTDC_Init+0x188>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b4a      	ldr	r3, [pc, #296]	; (8002c7c <my_MX_LTDC_Init+0x190>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b5e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = HSA+HBP+IMAGE_H-1;
 8002b60:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <my_MX_LTDC_Init+0x184>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b44      	ldr	r3, [pc, #272]	; (8002c78 <my_MX_LTDC_Init+0x18c>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b44      	ldr	r3, [pc, #272]	; (8002c80 <my_MX_LTDC_Init+0x194>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	3b01      	subs	r3, #1
 8002b76:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b78:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = VSA+VBP+IMAGE_W-1;
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <my_MX_LTDC_Init+0x188>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <my_MX_LTDC_Init+0x190>)
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <my_MX_LTDC_Init+0x198>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	4a35      	ldr	r2, [pc, #212]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002b92:	6293      	str	r3, [r2, #40]	; 0x28
  hltdc.Init.TotalWidth = HSA+HBP+IMAGE_H+HFP-1;
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <my_MX_LTDC_Init+0x184>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <my_MX_LTDC_Init+0x18c>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <my_MX_LTDC_Init+0x194>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <my_MX_LTDC_Init+0x19c>)
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	4413      	add	r3, r2
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hltdc.Init.TotalHeigh = VSA+VBP+IMAGE_W+VFP-1;
 8002bb4:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <my_MX_LTDC_Init+0x188>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <my_MX_LTDC_Init+0x190>)
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <my_MX_LTDC_Init+0x198>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a30      	ldr	r2, [pc, #192]	; (8002c8c <my_MX_LTDC_Init+0x1a0>)
 8002bca:	8812      	ldrh	r2, [r2, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002bd2:	6313      	str	r3, [r2, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8002bdc:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002bde:	22ff      	movs	r2, #255	; 0xff
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002be6:	22ff      	movs	r2, #255	; 0xff
 8002be8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002bec:	481e      	ldr	r0, [pc, #120]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002bee:	f001 fd7f 	bl	80046f0 <HAL_LTDC_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <my_MX_LTDC_Init+0x110>
  {
    Error_Handler();
 8002bf8:	f000 f8de 	bl	8002db8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = IMAGE_H;
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <my_MX_LTDC_Init+0x194>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = IMAGE_W;
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <my_MX_LTDC_Init+0x198>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002c10:	2301      	movs	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002c14:	23ff      	movs	r3, #255	; 0xff
 8002c16:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c20:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002c22:	2305      	movs	r3, #5
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_arr_rgb888;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <my_MX_LTDC_Init+0x1a4>)
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = IMAGE_H;
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <my_MX_LTDC_Init+0x194>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = IMAGE_W;
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <my_MX_LTDC_Init+0x198>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8002c36:	23ff      	movs	r3, #255	; 0xff
 8002c38:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8002c3c:	23ff      	movs	r3, #255	; 0xff
 8002c3e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8002c42:	23ff      	movs	r3, #255	; 0xff
 8002c44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4806      	ldr	r0, [pc, #24]	; (8002c68 <my_MX_LTDC_Init+0x17c>)
 8002c50:	f001 fe1e 	bl	8004890 <HAL_LTDC_ConfigLayer>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <my_MX_LTDC_Init+0x172>
  {
    Error_Handler();
 8002c5a:	f000 f8ad 	bl	8002db8 <Error_Handler>
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3738      	adds	r7, #56	; 0x38
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000068 	.word	0x20000068
 8002c6c:	40016800 	.word	0x40016800
 8002c70:	20000010 	.word	0x20000010
 8002c74:	20000016 	.word	0x20000016
 8002c78:	20000012 	.word	0x20000012
 8002c7c:	20000018 	.word	0x20000018
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000004 	.word	0x20000004
 8002c88:	20000014 	.word	0x20000014
 8002c8c:	2000001a 	.word	0x2000001a
 8002c90:	20040274 	.word	0x20040274

08002c94 <delay_us>:
/*====================================customized function end====================================*/

void delay_us(int time)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
	while (time--)
 8002ca0:	e007      	b.n	8002cb2 <delay_us+0x1e>
	{
		i = 13;
 8002ca2:	230d      	movs	r3, #13
 8002ca4:	60fb      	str	r3, [r7, #12]
		while (i--);
 8002ca6:	bf00      	nop
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	60fa      	str	r2, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1fa      	bne.n	8002ca8 <delay_us+0x14>
	while (time--)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	1e5a      	subs	r2, r3, #1
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f2      	bne.n	8002ca2 <delay_us+0xe>
	}
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <delay_100ns>:

void delay_100ns(int time)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
	while (time--)
 8002cd6:	e007      	b.n	8002ce8 <delay_100ns+0x1e>
	{
		i = 1;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
		while (i--);
 8002cdc:	bf00      	nop
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	60fa      	str	r2, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1fa      	bne.n	8002cde <delay_100ns+0x14>
	while (time--)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f2      	bne.n	8002cd8 <delay_100ns+0xe>
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_GPIO_EXTI_Callback>:

int button_count = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	d144      	bne.n	8002d9c <HAL_GPIO_EXTI_Callback+0x9c>
	{
		button_count++;
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	4a22      	ldr	r2, [pc, #136]	; (8002da4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002d1a:	6013      	str	r3, [r2, #0]
		delay_us(50000);
 8002d1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d20:	f7ff ffb8 	bl	8002c94 <delay_us>
		for (int i = 0; i < 200; i++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e032      	b.n	8002d90 <HAL_GPIO_EXTI_Callback+0x90>
		{
			if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_RESET)
 8002d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d2e:	481e      	ldr	r0, [pc, #120]	; (8002da8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8002d30:	f001 fc96 	bl	8004660 <HAL_GPIO_ReadPin>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11e      	bne.n	8002d78 <HAL_GPIO_EXTI_Callback+0x78>
			{
				if (button_count < 80 && button_count > 5 && play_mode == 0)
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b4f      	cmp	r3, #79	; 0x4f
 8002d40:	dc16      	bgt.n	8002d70 <HAL_GPIO_EXTI_Callback+0x70>
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b05      	cmp	r3, #5
 8002d48:	dd12      	ble.n	8002d70 <HAL_GPIO_EXTI_Callback+0x70>
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_GPIO_EXTI_Callback+0xac>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10e      	bne.n	8002d70 <HAL_GPIO_EXTI_Callback+0x70>
				{
					display_image_number++;
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d5c:	701a      	strb	r2, [r3, #0]
					if (display_image_number >= spi_flash_content_length)
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <HAL_GPIO_EXTI_Callback+0x70>
						display_image_number = 0;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
				}
				button_count = 0;
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
				return;
 8002d76:	e011      	b.n	8002d9c <HAL_GPIO_EXTI_Callback+0x9c>
			}
			button_count++;
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002d80:	6013      	str	r3, [r2, #0]
			delay_us(10000);
 8002d82:	f242 7010 	movw	r0, #10000	; 0x2710
 8002d86:	f7ff ff85 	bl	8002c94 <delay_us>
		for (int i = 0; i < 200; i++)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2bc7      	cmp	r3, #199	; 0xc7
 8002d94:	ddc9      	ble.n	8002d2a <HAL_GPIO_EXTI_Callback+0x2a>
		}
		else if (play_mode == 0)
		{
			play_mode = 1;
		}*/
		button_count = 0;
 8002d96:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
	}
}
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200702f8 	.word	0x200702f8
 8002da8:	48000c00 	.word	0x48000c00
 8002dac:	20040270 	.word	0x20040270
 8002db0:	20070274 	.word	0x20070274
 8002db4:	20000009 	.word	0x20000009

08002db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dbc:	b672      	cpsid	i
}
 8002dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <Error_Handler+0x8>
	...

08002dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_MspInit+0x44>)
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dce:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <HAL_MspInit+0x44>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_MspInit+0x44>)
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_MspInit+0x44>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <HAL_MspInit+0x44>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6593      	str	r3, [r2, #88]	; 0x58
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_MspInit+0x44>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000

08002e0c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b0aa      	sub	sp, #168	; 0xa8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	229c      	movs	r2, #156	; 0x9c
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f005 fecb 	bl	8008bb8 <memset>
  if(hdsi->Instance==DSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_DSI_MspInit+0x60>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d11b      	bne.n	8002e64 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002e2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002e30:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 fea9 	bl	8005b94 <HAL_RCCEx_PeriphCLKConfig>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8002e48:	f7ff ffb6 	bl	8002db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_DSI_MspInit+0x64>)
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <HAL_DSI_MspInit+0x64>)
 8002e52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e56:	6613      	str	r3, [r2, #96]	; 0x60
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_DSI_MspInit+0x64>)
 8002e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8002e64:	bf00      	nop
 8002e66:	37a8      	adds	r7, #168	; 0xa8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40016c00 	.word	0x40016c00
 8002e70:	40021000 	.word	0x40021000

08002e74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b0aa      	sub	sp, #168	; 0xa8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e7c:	f107 030c 	add.w	r3, r7, #12
 8002e80:	229c      	movs	r2, #156	; 0x9c
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f005 fe97 	bl	8008bb8 <memset>
  if(hltdc->Instance==LTDC)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <HAL_LTDC_MspInit+0x80>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d12b      	bne.n	8002eec <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e98:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 8002e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8002eaa:	2308      	movs	r3, #8
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8002eba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ebe:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 fe65 	bl	8005b94 <HAL_RCCEx_PeriphCLKConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 8002ed0:	f7ff ff72 	bl	8002db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_LTDC_MspInit+0x84>)
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <HAL_LTDC_MspInit+0x84>)
 8002eda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ede:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_LTDC_MspInit+0x84>)
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002eec:	bf00      	nop
 8002eee:	37a8      	adds	r7, #168	; 0xa8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40016800 	.word	0x40016800
 8002ef8:	40021000 	.word	0x40021000

08002efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	; 0x30
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a42      	ldr	r2, [pc, #264]	; (8003024 <HAL_SPI_MspInit+0x128>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d128      	bne.n	8002f70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f1e:	4b42      	ldr	r3, [pc, #264]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	4a41      	ldr	r2, [pc, #260]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f28:	6593      	str	r3, [r2, #88]	; 0x58
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f36:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	4a3b      	ldr	r2, [pc, #236]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f3c:	f043 0308 	orr.w	r3, r3, #8
 8002f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_3;
 8002f4e:	231a      	movs	r3, #26
 8002f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f5e:	2305      	movs	r3, #5
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f62:	f107 031c 	add.w	r3, r7, #28
 8002f66:	4619      	mov	r1, r3
 8002f68:	4830      	ldr	r0, [pc, #192]	; (800302c <HAL_SPI_MspInit+0x130>)
 8002f6a:	f001 f9e7 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f6e:	e054      	b.n	800301a <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2e      	ldr	r2, [pc, #184]	; (8003030 <HAL_SPI_MspInit+0x134>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d14f      	bne.n	800301a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f84:	6593      	str	r3, [r2, #88]	; 0x58
 8002f86:	4b28      	ldr	r3, [pc, #160]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f92:	4b25      	ldr	r3, [pc, #148]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	4a24      	ldr	r2, [pc, #144]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f9e:	4b22      	ldr	r3, [pc, #136]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002faa:	f001 ff0b 	bl	8004dc4 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fae:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_SPI_MspInit+0x12c>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fd8:	2306      	movs	r3, #6
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4814      	ldr	r0, [pc, #80]	; (8003034 <HAL_SPI_MspInit+0x138>)
 8002fe4:	f001 f9aa 	bl	800433c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002fe8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ffa:	2306      	movs	r3, #6
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ffe:	f107 031c 	add.w	r3, r7, #28
 8003002:	4619      	mov	r1, r3
 8003004:	480c      	ldr	r0, [pc, #48]	; (8003038 <HAL_SPI_MspInit+0x13c>)
 8003006:	f001 f999 	bl	800433c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800300a:	2200      	movs	r2, #0
 800300c:	2100      	movs	r1, #0
 800300e:	2033      	movs	r0, #51	; 0x33
 8003010:	f000 fa5b 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003014:	2033      	movs	r0, #51	; 0x33
 8003016:	f000 fa74 	bl	8003502 <HAL_NVIC_EnableIRQ>
}
 800301a:	bf00      	nop
 800301c:	3730      	adds	r7, #48	; 0x30
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40003800 	.word	0x40003800
 8003028:	40021000 	.word	0x40021000
 800302c:	48000c00 	.word	0x48000c00
 8003030:	40003c00 	.word	0x40003c00
 8003034:	48001800 	.word	0x48001800
 8003038:	48000800 	.word	0x48000800

0800303c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b0b0      	sub	sp, #192	; 0xc0
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	229c      	movs	r2, #156	; 0x9c
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f005 fdab 	bl	8008bb8 <memset>
  if(huart->Instance==UART4)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a21      	ldr	r2, [pc, #132]	; (80030ec <HAL_UART_MspInit+0xb0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d13b      	bne.n	80030e4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800306c:	2308      	movs	r3, #8
 800306e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003070:	2300      	movs	r3, #0
 8003072:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	4618      	mov	r0, r3
 800307a:	f002 fd8b 	bl	8005b94 <HAL_RCCEx_PeriphCLKConfig>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003084:	f7ff fe98 	bl	8002db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_UART_MspInit+0xb4>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_UART_MspInit+0xb4>)
 800308e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_UART_MspInit+0xb4>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_UART_MspInit+0xb4>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <HAL_UART_MspInit+0xb4>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_UART_MspInit+0xb4>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030b8:	2303      	movs	r3, #3
 80030ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ca:	2303      	movs	r3, #3
 80030cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80030d0:	2308      	movs	r3, #8
 80030d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030da:	4619      	mov	r1, r3
 80030dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e0:	f001 f92c 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80030e4:	bf00      	nop
 80030e6:	37c0      	adds	r7, #192	; 0xc0
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40004c00 	.word	0x40004c00
 80030f0:	40021000 	.word	0x40021000

080030f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030f8:	e7fe      	b.n	80030f8 <NMI_Handler+0x4>

080030fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030fe:	e7fe      	b.n	80030fe <HardFault_Handler+0x4>

08003100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003104:	e7fe      	b.n	8003104 <MemManage_Handler+0x4>

08003106 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <BusFault_Handler+0x4>

0800310c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <UsageFault_Handler+0x4>

08003112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003140:	f000 f8a4 	bl	800328c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}

08003148 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pic_sw_Pin);
 800314c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003150:	f001 fab6 	bl	80046c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}

08003158 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <SPI3_IRQHandler+0x10>)
 800315e:	f004 f95f 	bl	8007420 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000174 	.word	0x20000174

0800316c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <SystemInit+0x20>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <SystemInit+0x20>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003194:	f7ff ffea 	bl	800316c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003198:	480c      	ldr	r0, [pc, #48]	; (80031cc <LoopForever+0x6>)
  ldr r1, =_edata
 800319a:	490d      	ldr	r1, [pc, #52]	; (80031d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <LoopForever+0xe>)
  movs r3, #0
 800319e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a0:	e002      	b.n	80031a8 <LoopCopyDataInit>

080031a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031a6:	3304      	adds	r3, #4

080031a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ac:	d3f9      	bcc.n	80031a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031b0:	4c0a      	ldr	r4, [pc, #40]	; (80031dc <LoopForever+0x16>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b4:	e001      	b.n	80031ba <LoopFillZerobss>

080031b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b8:	3204      	adds	r2, #4

080031ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031bc:	d3fb      	bcc.n	80031b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031be:	f005 fcd7 	bl	8008b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031c2:	f7fd f99d 	bl	8000500 <main>

080031c6 <LoopForever>:

LoopForever:
    b LoopForever
 80031c6:	e7fe      	b.n	80031c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031c8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80031cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80031d4:	08008ce0 	.word	0x08008ce0
  ldr r2, =_sbss
 80031d8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80031dc:	20070300 	.word	0x20070300

080031e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031e0:	e7fe      	b.n	80031e0 <ADC1_IRQHandler>

080031e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ec:	2003      	movs	r0, #3
 80031ee:	f000 f961 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031f2:	2002      	movs	r0, #2
 80031f4:	f000 f80e 	bl	8003214 <HAL_InitTick>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	71fb      	strb	r3, [r7, #7]
 8003202:	e001      	b.n	8003208 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003204:	f7ff fdde 	bl	8002dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003208:	79fb      	ldrb	r3, [r7, #7]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_InitTick+0x6c>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d023      	beq.n	8003270 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <HAL_InitTick+0x70>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_InitTick+0x6c>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003236:	fbb3 f3f1 	udiv	r3, r3, r1
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f96d 	bl	800351e <HAL_SYSTICK_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b0f      	cmp	r3, #15
 800324e:	d809      	bhi.n	8003264 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003250:	2200      	movs	r2, #0
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f000 f937 	bl	80034ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_InitTick+0x74>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e007      	b.n	8003274 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e004      	b.n	8003274 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e001      	b.n	8003274 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	2000002c 	.word	0x2000002c
 8003284:	20000024 	.word	0x20000024
 8003288:	20000028 	.word	0x20000028

0800328c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_IncTick+0x20>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x24>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4413      	add	r3, r2
 800329c:	4a04      	ldr	r2, [pc, #16]	; (80032b0 <HAL_IncTick+0x24>)
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000002c 	.word	0x2000002c
 80032b0:	200702fc 	.word	0x200702fc

080032b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return uwTick;
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_GetTick+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	200702fc 	.word	0x200702fc

080032cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff ffee 	bl	80032b4 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d005      	beq.n	80032f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_Delay+0x44>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032f2:	bf00      	nop
 80032f4:	f7ff ffde 	bl	80032b4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d8f7      	bhi.n	80032f4 <HAL_Delay+0x28>
  {
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	2000002c 	.word	0x2000002c

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800333c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003346:	4a04      	ldr	r2, [pc, #16]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	60d3      	str	r3, [r2, #12]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff29 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034dc:	f7ff ff3e 	bl	800335c <__NVIC_GetPriorityGrouping>
 80034e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff8e 	bl	8003408 <NVIC_EncodePriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff5d 	bl	80033b4 <__NVIC_SetPriority>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff31 	bl	8003378 <__NVIC_EnableIRQ>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ffa2 	bl	8003470 <SysTick_Config>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d005      	beq.n	800355a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2204      	movs	r2, #4
 8003552:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e047      	b.n	80035ea <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 020e 	bic.w	r2, r2, #14
 8003568:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f003 021c 	and.w	r2, r3, #28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00c      	beq.n	80035ca <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035c8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
    }
  }
  return status;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	019a      	lsls	r2, r3, #6
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	431a      	orrs	r2, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	431a      	orrs	r2, r3
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003634:	f7ff fe3e 	bl	80032b4 <HAL_GetTick>
 8003638:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800363a:	e009      	b.n	8003650 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800363c:	f7ff fe3a 	bl	80032b4 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800364a:	d901      	bls.n	8003650 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e015      	b.n	800367c <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	019a      	lsls	r2, r3, #6
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	431a      	orrs	r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	ea42 0103 	orr.w	r1, r2, r3
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	041a      	lsls	r2, r3, #16
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e10b      	b.n	80038b0 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7c5b      	ldrb	r3, [r3, #17]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fbb2 	bl	8002e0c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2203      	movs	r2, #3
 80036ac:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80036c2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80036ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d6:	f7ff fded 	bl	80032b4 <HAL_GetTick>
 80036da:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80036dc:	e009      	b.n	80036f2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80036de:	f7ff fde9 	bl	80032b4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ec:	d901      	bls.n	80036f2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0de      	b.n	80038b0 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80036fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ed      	beq.n	80036de <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003712:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003716:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800372e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003736:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800376a:	2001      	movs	r0, #1
 800376c:	f7ff fdae 	bl	80032cc <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003770:	f7ff fda0 	bl	80032b4 <HAL_GetTick>
 8003774:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003776:	e009      	b.n	800378c <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003778:	f7ff fd9c 	bl	80032b4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003786:	d901      	bls.n	800378c <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e091      	b.n	80038b0 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ed      	beq.n	8003778 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0206 	orr.w	r2, r2, #6
 80037ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0203 	bic.w	r2, r2, #3
 80037c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0203 	bic.w	r2, r2, #3
 80037ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003816:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_DSI_Init+0x1b4>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	e000      	b.n	800383a <HAL_DSI_Init+0x1b6>
 8003838:	2301      	movs	r3, #1
 800383a:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	4a1e      	ldr	r2, [pc, #120]	; (80038b8 <HAL_DSI_Init+0x234>)
 8003840:	fb03 f202 	mul.w	r2, r3, r2
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	409a      	lsls	r2, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003870:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	430a      	orrs	r2, r1
 8003884:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2200      	movs	r2, #0
 800388e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	003d0900 	.word	0x003d0900

080038bc <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7c1b      	ldrb	r3, [r3, #16]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_DSI_ConfigErrorMonitor+0x16>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e0ab      	b.n	8003a2a <HAL_DSI_ConfigErrorMonitor+0x16e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00b      	beq.n	8003914 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800390c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003910:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800392e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0202 	orr.w	r2, r2, #2
 800396a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 020c 	orr.w	r2, r2, #12
 8003988:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0210 	orr.w	r2, r2, #16
 80039a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0220 	orr.w	r2, r2, #32
 80039c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003a1e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7c1b      	ldrb	r3, [r3, #16]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_DSI_SetGenericVCID+0x16>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e016      	b.n	8003a7a <HAL_DSI_SetGenericVCID+0x44>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0203 	bic.w	r2, r2, #3
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	7c1b      	ldrb	r3, [r3, #16]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_DSI_ConfigVideoMode+0x16>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e1f6      	b.n	8003e8a <HAL_DSI_ConfigVideoMode+0x404>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0201 	bic.w	r2, r2, #1
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0203 	bic.w	r2, r2, #3
 8003ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003af6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003afa:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003b1c:	f023 031f 	bic.w	r3, r3, #31
 8003b20:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003b42:	f023 031f 	bic.w	r3, r3, #31
 8003b46:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0203 	bic.w	r2, r2, #3
 8003b68:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68d9      	ldr	r1, [r3, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0207 	bic.w	r2, r2, #7
 8003b8a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6959      	ldr	r1, [r3, #20]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 020f 	bic.w	r2, r2, #15
 8003bb8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6919      	ldr	r1, [r3, #16]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 020e 	bic.w	r2, r2, #14
 8003bdc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	005a      	lsls	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d110      	bne.n	8003c22 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c0e:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6919      	ldr	r1, [r3, #16]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003c30:	f023 030f 	bic.w	r3, r3, #15
 8003c34:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003c56:	f023 030f 	bic.w	r3, r3, #15
 8003c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c80:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cc8:	f023 0303 	bic.w	r3, r3, #3
 8003ccc:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cee:	f023 0303 	bic.w	r3, r3, #3
 8003cf2:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d18:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003d5c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6999      	ldr	r1, [r3, #24]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d68:	041a      	lsls	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d80:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6999      	ldr	r1, [r3, #24]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7c1b      	ldrb	r3, [r3, #16]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_DSI_ConfigPhyTimer+0x16>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e058      	b.n	8003f5e <HAL_DSI_ConfigPhyTimer+0xc8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	bf38      	it	cc
 8003ebe:	4613      	movcc	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003ed2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	041a      	lsls	r2, r3, #16
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003f00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003f3a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	021a      	lsls	r2, r3, #8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	7c1b      	ldrb	r3, [r3, #16]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0b4      	b.n	80040ea <HAL_DSI_ConfigHostTimeouts+0x180>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003f94:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6899      	ldr	r1, [r3, #8]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	021a      	lsls	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	b292      	uxth	r2, r2
 8003fb6:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	041a      	lsls	r2, r3, #16
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	0c1b      	lsrs	r3, r3, #16
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	0c1b      	lsrs	r3, r3, #16
 80040c6:	041b      	lsls	r3, r3, #16
 80040c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	6a1a      	ldr	r2, [r3, #32]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7c1b      	ldrb	r3, [r3, #16]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_DSI_Start+0x14>
 8004106:	2302      	movs	r3, #2
 8004108:	e02b      	b.n	8004162 <HAL_DSI_Start+0x6c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	605a      	str	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0208 	orr.w	r2, r2, #8
 8004146:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b088      	sub	sp, #32
 8004172:	af02      	add	r7, sp, #8
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	7c1b      	ldrb	r3, [r3, #16]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_DSI_ShortWrite+0x1a>
 8004184:	2302      	movs	r3, #2
 8004186:	e010      	b.n	80041aa <HAL_DSI_ShortWrite+0x3c>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff fa44 	bl	8003626 <DSI_ShortWrite>
 800419e:	4603      	mov	r3, r0
 80041a0:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	741a      	strb	r2, [r3, #16]

  return status;
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b08c      	sub	sp, #48	; 0x30
 80041b6:	af02      	add	r7, sp, #8
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80041c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c2:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	7c1b      	ldrb	r3, [r3, #16]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_DSI_LongWrite+0x1e>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e084      	b.n	80042da <HAL_DSI_LongWrite+0x128>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d6:	f7ff f86d 	bl	80032b4 <HAL_GetTick>
 80041da:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80041dc:	e00c      	b.n	80041f8 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80041de:	f7ff f869 	bl	80032b4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ec:	d904      	bls.n	80041f8 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e070      	b.n	80042da <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0eb      	beq.n	80041de <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b03      	cmp	r3, #3
 800420e:	bf28      	it	cs
 8004210:	2303      	movcs	r3, #3
 8004212:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004214:	2300      	movs	r3, #0
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	e00f      	b.n	800423a <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	4413      	add	r3, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	3301      	adds	r3, #1
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	4313      	orrs	r3, r2
 8004232:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	3301      	adds	r3, #1
 8004238:	623b      	str	r3, [r7, #32]
 800423a:	6a3a      	ldr	r2, [r7, #32]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	429a      	cmp	r2, r3
 8004240:	d3eb      	bcc.n	800421a <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800425a:	e028      	b.n	80042ae <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	2b04      	cmp	r3, #4
 8004260:	bf28      	it	cs
 8004262:	2304      	movcs	r3, #4
 8004264:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800426a:	2300      	movs	r3, #0
 800426c:	623b      	str	r3, [r7, #32]
 800426e:	e00e      	b.n	800428e <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	4413      	add	r3, r2
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	4313      	orrs	r3, r2
 8004286:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	3301      	adds	r3, #1
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	6a3a      	ldr	r2, [r7, #32]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	429a      	cmp	r2, r3
 8004294:	d3ec      	bcc.n	8004270 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800429e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1d3      	bne.n	800425c <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80042bc:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	f7ff f991 	bl	80035f4 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3728      	adds	r7, #40	; 0x28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7c1b      	ldrb	r3, [r3, #16]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e01b      	b.n	8004330 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800430e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	065a      	lsls	r2, r3, #25
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800434a:	e166      	b.n	800461a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	4013      	ands	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8158 	beq.w	8004614 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d005      	beq.n	800437c <HAL_GPIO_Init+0x40>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d130      	bne.n	80043de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	2203      	movs	r2, #3
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043b2:	2201      	movs	r2, #1
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	f003 0201 	and.w	r2, r3, #1
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d017      	beq.n	800441a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	2203      	movs	r2, #3
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d123      	bne.n	800446e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	08da      	lsrs	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3208      	adds	r2, #8
 800442e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	08da      	lsrs	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3208      	adds	r2, #8
 8004468:	6939      	ldr	r1, [r7, #16]
 800446a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	2203      	movs	r2, #3
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0203 	and.w	r2, r3, #3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80b2 	beq.w	8004614 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b0:	4b61      	ldr	r3, [pc, #388]	; (8004638 <HAL_GPIO_Init+0x2fc>)
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	4a60      	ldr	r2, [pc, #384]	; (8004638 <HAL_GPIO_Init+0x2fc>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6613      	str	r3, [r2, #96]	; 0x60
 80044bc:	4b5e      	ldr	r3, [pc, #376]	; (8004638 <HAL_GPIO_Init+0x2fc>)
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044c8:	4a5c      	ldr	r2, [pc, #368]	; (800463c <HAL_GPIO_Init+0x300>)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	3302      	adds	r3, #2
 80044d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	220f      	movs	r2, #15
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044f2:	d02b      	beq.n	800454c <HAL_GPIO_Init+0x210>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a52      	ldr	r2, [pc, #328]	; (8004640 <HAL_GPIO_Init+0x304>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d025      	beq.n	8004548 <HAL_GPIO_Init+0x20c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a51      	ldr	r2, [pc, #324]	; (8004644 <HAL_GPIO_Init+0x308>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d01f      	beq.n	8004544 <HAL_GPIO_Init+0x208>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a50      	ldr	r2, [pc, #320]	; (8004648 <HAL_GPIO_Init+0x30c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d019      	beq.n	8004540 <HAL_GPIO_Init+0x204>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a4f      	ldr	r2, [pc, #316]	; (800464c <HAL_GPIO_Init+0x310>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <HAL_GPIO_Init+0x200>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a4e      	ldr	r2, [pc, #312]	; (8004650 <HAL_GPIO_Init+0x314>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00d      	beq.n	8004538 <HAL_GPIO_Init+0x1fc>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a4d      	ldr	r2, [pc, #308]	; (8004654 <HAL_GPIO_Init+0x318>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <HAL_GPIO_Init+0x1f8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a4c      	ldr	r2, [pc, #304]	; (8004658 <HAL_GPIO_Init+0x31c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <HAL_GPIO_Init+0x1f4>
 800452c:	2307      	movs	r3, #7
 800452e:	e00e      	b.n	800454e <HAL_GPIO_Init+0x212>
 8004530:	2308      	movs	r3, #8
 8004532:	e00c      	b.n	800454e <HAL_GPIO_Init+0x212>
 8004534:	2306      	movs	r3, #6
 8004536:	e00a      	b.n	800454e <HAL_GPIO_Init+0x212>
 8004538:	2305      	movs	r3, #5
 800453a:	e008      	b.n	800454e <HAL_GPIO_Init+0x212>
 800453c:	2304      	movs	r3, #4
 800453e:	e006      	b.n	800454e <HAL_GPIO_Init+0x212>
 8004540:	2303      	movs	r3, #3
 8004542:	e004      	b.n	800454e <HAL_GPIO_Init+0x212>
 8004544:	2302      	movs	r3, #2
 8004546:	e002      	b.n	800454e <HAL_GPIO_Init+0x212>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_GPIO_Init+0x212>
 800454c:	2300      	movs	r3, #0
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	f002 0203 	and.w	r2, r2, #3
 8004554:	0092      	lsls	r2, r2, #2
 8004556:	4093      	lsls	r3, r2
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800455e:	4937      	ldr	r1, [pc, #220]	; (800463c <HAL_GPIO_Init+0x300>)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	089b      	lsrs	r3, r3, #2
 8004564:	3302      	adds	r3, #2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800456c:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_GPIO_Init+0x320>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004590:	4a32      	ldr	r2, [pc, #200]	; (800465c <HAL_GPIO_Init+0x320>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004596:	4b31      	ldr	r3, [pc, #196]	; (800465c <HAL_GPIO_Init+0x320>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045ba:	4a28      	ldr	r2, [pc, #160]	; (800465c <HAL_GPIO_Init+0x320>)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045c0:	4b26      	ldr	r3, [pc, #152]	; (800465c <HAL_GPIO_Init+0x320>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_GPIO_Init+0x320>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045ea:	4b1c      	ldr	r3, [pc, #112]	; (800465c <HAL_GPIO_Init+0x320>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800460e:	4a13      	ldr	r2, [pc, #76]	; (800465c <HAL_GPIO_Init+0x320>)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	3301      	adds	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	f47f ae91 	bne.w	800434c <HAL_GPIO_Init+0x10>
  }
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40021000 	.word	0x40021000
 800463c:	40010000 	.word	0x40010000
 8004640:	48000400 	.word	0x48000400
 8004644:	48000800 	.word	0x48000800
 8004648:	48000c00 	.word	0x48000c00
 800464c:	48001000 	.word	0x48001000
 8004650:	48001400 	.word	0x48001400
 8004654:	48001800 	.word	0x48001800
 8004658:	48001c00 	.word	0x48001c00
 800465c:	40010400 	.word	0x40010400

08004660 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	887b      	ldrh	r3, [r7, #2]
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e001      	b.n	8004682 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
 800469c:	4613      	mov	r3, r2
 800469e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046a0:	787b      	ldrb	r3, [r7, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046ac:	e002      	b.n	80046b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ae:	887a      	ldrh	r2, [r7, #2]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046d6:	4a05      	ldr	r2, [pc, #20]	; (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fb0e 	bl	8002d00 <HAL_GPIO_EXTI_Callback>
  }
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40010400 	.word	0x40010400

080046f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0bf      	b.n	8004882 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fe fbac 	bl	8002e74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004732:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6999      	ldr	r1, [r3, #24]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004748:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6899      	ldr	r1, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b4a      	ldr	r3, [pc, #296]	; (800488c <HAL_LTDC_Init+0x19c>)
 8004764:	400b      	ands	r3, r1
 8004766:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6899      	ldr	r1, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68d9      	ldr	r1, [r3, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b3e      	ldr	r3, [pc, #248]	; (800488c <HAL_LTDC_Init+0x19c>)
 8004792:	400b      	ands	r3, r1
 8004794:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68d9      	ldr	r1, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6919      	ldr	r1, [r3, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b33      	ldr	r3, [pc, #204]	; (800488c <HAL_LTDC_Init+0x19c>)
 80047c0:	400b      	ands	r3, r1
 80047c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6919      	ldr	r1, [r3, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6959      	ldr	r1, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b27      	ldr	r3, [pc, #156]	; (800488c <HAL_LTDC_Init+0x19c>)
 80047ee:	400b      	ands	r3, r1
 80047f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	041b      	lsls	r3, r3, #16
 80047f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6959      	ldr	r1, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004820:	041b      	lsls	r3, r3, #16
 8004822:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0206 	orr.w	r2, r2, #6
 800485e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	f000f800 	.word	0xf000f800

08004890 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_LTDC_ConfigLayer+0x1a>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e02c      	b.n	8004904 <HAL_LTDC_ConfigLayer+0x74>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2134      	movs	r1, #52	; 0x34
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4614      	mov	r4, r2
 80048ce:	461d      	mov	r5, r3
 80048d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f811 	bl	800490c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2201      	movs	r2, #1
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bdb0      	pop	{r4, r5, r7, pc}

0800490c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800490c:	b480      	push	{r7}
 800490e:	b089      	sub	sp, #36	; 0x24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	4413      	add	r3, r2
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	01db      	lsls	r3, r3, #7
 8004938:	4413      	add	r3, r2
 800493a:	3384      	adds	r3, #132	; 0x84
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	4611      	mov	r1, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	01d2      	lsls	r2, r2, #7
 8004948:	440a      	add	r2, r1
 800494a:	3284      	adds	r2, #132	; 0x84
 800494c:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8004950:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004962:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004964:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4619      	mov	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	01db      	lsls	r3, r3, #7
 8004970:	440b      	add	r3, r1
 8004972:	3384      	adds	r3, #132	; 0x84
 8004974:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800497a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800498a:	4413      	add	r3, r2
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	01db      	lsls	r3, r3, #7
 800499a:	4413      	add	r3, r2
 800499c:	3384      	adds	r3, #132	; 0x84
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	4611      	mov	r1, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	01d2      	lsls	r2, r2, #7
 80049aa:	440a      	add	r2, r1
 80049ac:	3284      	adds	r2, #132	; 0x84
 80049ae:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80049b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c2:	4413      	add	r3, r2
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	01db      	lsls	r3, r3, #7
 80049d0:	440b      	add	r3, r1
 80049d2:	3384      	adds	r3, #132	; 0x84
 80049d4:	4619      	mov	r1, r3
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	01db      	lsls	r3, r3, #7
 80049e6:	4413      	add	r3, r2
 80049e8:	3384      	adds	r3, #132	; 0x84
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	4611      	mov	r1, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	01d2      	lsls	r2, r2, #7
 80049f6:	440a      	add	r2, r1
 80049f8:	3284      	adds	r2, #132	; 0x84
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	01db      	lsls	r3, r3, #7
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3384      	adds	r3, #132	; 0x84
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	061b      	lsls	r3, r3, #24
 8004a30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3384      	adds	r3, #132	; 0x84
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3384      	adds	r3, #132	; 0x84
 8004a50:	461a      	mov	r2, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	01db      	lsls	r3, r3, #7
 8004a70:	440b      	add	r3, r1
 8004a72:	3384      	adds	r3, #132	; 0x84
 8004a74:	4619      	mov	r1, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	01db      	lsls	r3, r3, #7
 8004a86:	4413      	add	r3, r2
 8004a88:	3384      	adds	r3, #132	; 0x84
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	4611      	mov	r1, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	01d2      	lsls	r2, r2, #7
 8004a96:	440a      	add	r2, r1
 8004a98:	3284      	adds	r2, #132	; 0x84
 8004a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	01db      	lsls	r3, r3, #7
 8004aaa:	4413      	add	r3, r2
 8004aac:	3384      	adds	r3, #132	; 0x84
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	01db      	lsls	r3, r3, #7
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3384      	adds	r3, #132	; 0x84
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	4611      	mov	r1, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	01d2      	lsls	r2, r2, #7
 8004ad0:	440a      	add	r2, r1
 8004ad2:	3284      	adds	r2, #132	; 0x84
 8004ad4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ad8:	f023 0307 	bic.w	r3, r3, #7
 8004adc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	6809      	ldr	r1, [r1, #0]
 8004aea:	4608      	mov	r0, r1
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	01c9      	lsls	r1, r1, #7
 8004af0:	4401      	add	r1, r0
 8004af2:	3184      	adds	r1, #132	; 0x84
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	01db      	lsls	r3, r3, #7
 8004b02:	4413      	add	r3, r2
 8004b04:	3384      	adds	r3, #132	; 0x84
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	01db      	lsls	r3, r3, #7
 8004b12:	4413      	add	r3, r2
 8004b14:	3384      	adds	r3, #132	; 0x84
 8004b16:	461a      	mov	r2, r3
 8004b18:	2300      	movs	r3, #0
 8004b1a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	01db      	lsls	r3, r3, #7
 8004b26:	4413      	add	r3, r2
 8004b28:	3384      	adds	r3, #132	; 0x84
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004b3a:	2304      	movs	r3, #4
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	e01b      	b.n	8004b78 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d102      	bne.n	8004b4e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	e014      	b.n	8004b78 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d00b      	beq.n	8004b6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d007      	beq.n	8004b6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d003      	beq.n	8004b6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b6a:	2b07      	cmp	r3, #7
 8004b6c:	d102      	bne.n	8004b74 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	e001      	b.n	8004b78 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004b74:	2301      	movs	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	01db      	lsls	r3, r3, #7
 8004b82:	4413      	add	r3, r2
 8004b84:	3384      	adds	r3, #132	; 0x84
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	01d2      	lsls	r2, r2, #7
 8004b92:	440a      	add	r2, r1
 8004b94:	3284      	adds	r2, #132	; 0x84
 8004b96:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	1acb      	subs	r3, r1, r3
 8004bb2:	69f9      	ldr	r1, [r7, #28]
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	6809      	ldr	r1, [r1, #0]
 8004bbe:	4608      	mov	r0, r1
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	01c9      	lsls	r1, r1, #7
 8004bc4:	4401      	add	r1, r0
 8004bc6:	3184      	adds	r1, #132	; 0x84
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	01db      	lsls	r3, r3, #7
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3384      	adds	r3, #132	; 0x84
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	4611      	mov	r1, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	01d2      	lsls	r2, r2, #7
 8004be6:	440a      	add	r2, r1
 8004be8:	3284      	adds	r2, #132	; 0x84
 8004bea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bee:	f023 0307 	bic.w	r3, r3, #7
 8004bf2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	01db      	lsls	r3, r3, #7
 8004bfe:	4413      	add	r3, r2
 8004c00:	3384      	adds	r3, #132	; 0x84
 8004c02:	461a      	mov	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	01db      	lsls	r3, r3, #7
 8004c14:	4413      	add	r3, r2
 8004c16:	3384      	adds	r3, #132	; 0x84
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	01d2      	lsls	r2, r2, #7
 8004c24:	440a      	add	r2, r1
 8004c26:	3284      	adds	r2, #132	; 0x84
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6013      	str	r3, [r2, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	3724      	adds	r7, #36	; 0x24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c40:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d102      	bne.n	8004c54 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c52:	e00b      	b.n	8004c6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c62:	d102      	bne.n	8004c6a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c68:	e000      	b.n	8004c6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004c6a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40007000 	.word	0x40007000

08004c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d141      	bne.n	8004d0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c8a:	4b4b      	ldr	r3, [pc, #300]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c96:	d131      	bne.n	8004cfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c98:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c9e:	4a46      	ldr	r2, [pc, #280]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ca8:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cb0:	4a41      	ldr	r2, [pc, #260]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004cb8:	4b40      	ldr	r3, [pc, #256]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2232      	movs	r2, #50	; 0x32
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	4a3f      	ldr	r2, [pc, #252]	; (8004dc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	0c9b      	lsrs	r3, r3, #18
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cce:	e002      	b.n	8004cd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cd6:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce2:	d102      	bne.n	8004cea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f2      	bne.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cea:	4b33      	ldr	r3, [pc, #204]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf6:	d158      	bne.n	8004daa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e057      	b.n	8004dac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cfc:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d02:	4a2d      	ldr	r2, [pc, #180]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d0c:	e04d      	b.n	8004daa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d14:	d141      	bne.n	8004d9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d16:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d22:	d131      	bne.n	8004d88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d2a:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d34:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d3c:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d44:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2232      	movs	r2, #50	; 0x32
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	0c9b      	lsrs	r3, r3, #18
 8004d56:	3301      	adds	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d5a:	e002      	b.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6e:	d102      	bne.n	8004d76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f2      	bne.n	8004d5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d82:	d112      	bne.n	8004daa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e011      	b.n	8004dac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d98:	e007      	b.n	8004daa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004da2:	4a05      	ldr	r2, [pc, #20]	; (8004db8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40007000 	.word	0x40007000
 8004dbc:	20000024 	.word	0x20000024
 8004dc0:	431bde83 	.word	0x431bde83

08004dc4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dd2:	6053      	str	r3, [r2, #4]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40007000 	.word	0x40007000

08004de4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f000 bc08 	b.w	8005608 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004df8:	4b96      	ldr	r3, [pc, #600]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 030c 	and.w	r3, r3, #12
 8004e00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e02:	4b94      	ldr	r3, [pc, #592]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80e4 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <HAL_RCC_OscConfig+0x4c>
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	f040 808b 	bne.w	8004f3e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	f040 8087 	bne.w	8004f3e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e30:	4b88      	ldr	r3, [pc, #544]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_OscConfig+0x64>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e3df      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	4b81      	ldr	r3, [pc, #516]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <HAL_RCC_OscConfig+0x7e>
 8004e58:	4b7e      	ldr	r3, [pc, #504]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e60:	e005      	b.n	8004e6e <HAL_RCC_OscConfig+0x8a>
 8004e62:	4b7c      	ldr	r3, [pc, #496]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d223      	bcs.n	8004eba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fdcc 	bl	8005a14 <RCC_SetFlashLatencyFromMSIRange>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e3c0      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e86:	4b73      	ldr	r3, [pc, #460]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a72      	ldr	r2, [pc, #456]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b70      	ldr	r3, [pc, #448]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	496d      	ldr	r1, [pc, #436]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ea4:	4b6b      	ldr	r3, [pc, #428]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	4968      	ldr	r1, [pc, #416]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	e025      	b.n	8004f06 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eba:	4b66      	ldr	r3, [pc, #408]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a65      	ldr	r2, [pc, #404]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004ec0:	f043 0308 	orr.w	r3, r3, #8
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b63      	ldr	r3, [pc, #396]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	4960      	ldr	r1, [pc, #384]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ed8:	4b5e      	ldr	r3, [pc, #376]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	495b      	ldr	r1, [pc, #364]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fd8c 	bl	8005a14 <RCC_SetFlashLatencyFromMSIRange>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e380      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f06:	f000 fcc1 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	4b51      	ldr	r3, [pc, #324]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	4950      	ldr	r1, [pc, #320]	; (8005058 <HAL_RCC_OscConfig+0x274>)
 8004f18:	5ccb      	ldrb	r3, [r1, r3]
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f22:	4a4e      	ldr	r2, [pc, #312]	; (800505c <HAL_RCC_OscConfig+0x278>)
 8004f24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f26:	4b4e      	ldr	r3, [pc, #312]	; (8005060 <HAL_RCC_OscConfig+0x27c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe f972 	bl	8003214 <HAL_InitTick>
 8004f30:	4603      	mov	r3, r0
 8004f32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d052      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	e364      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d032      	beq.n	8004fac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f46:	4b43      	ldr	r3, [pc, #268]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a42      	ldr	r2, [pc, #264]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f52:	f7fe f9af 	bl	80032b4 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f5a:	f7fe f9ab 	bl	80032b4 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e34d      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f6c:	4b39      	ldr	r3, [pc, #228]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f78:	4b36      	ldr	r3, [pc, #216]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a35      	ldr	r2, [pc, #212]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004f7e:	f043 0308 	orr.w	r3, r3, #8
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	4b33      	ldr	r3, [pc, #204]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	4930      	ldr	r1, [pc, #192]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f96:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	492b      	ldr	r1, [pc, #172]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
 8004faa:	e01a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fac:	4b29      	ldr	r3, [pc, #164]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a28      	ldr	r2, [pc, #160]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fb8:	f7fe f97c 	bl	80032b4 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fc0:	f7fe f978 	bl	80032b4 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e31a      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fd2:	4b20      	ldr	r3, [pc, #128]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x1dc>
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fe0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d073      	beq.n	80050d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_OscConfig+0x21c>
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b0c      	cmp	r3, #12
 8004ff8:	d10e      	bne.n	8005018 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b03      	cmp	r3, #3
 8004ffe:	d10b      	bne.n	8005018 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	4b14      	ldr	r3, [pc, #80]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d063      	beq.n	80050d4 <HAL_RCC_OscConfig+0x2f0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d15f      	bne.n	80050d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e2f7      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d106      	bne.n	8005030 <HAL_RCC_OscConfig+0x24c>
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a0b      	ldr	r2, [pc, #44]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e025      	b.n	800507c <HAL_RCC_OscConfig+0x298>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005038:	d114      	bne.n	8005064 <HAL_RCC_OscConfig+0x280>
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a05      	ldr	r2, [pc, #20]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8005040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4b03      	ldr	r3, [pc, #12]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a02      	ldr	r2, [pc, #8]	; (8005054 <HAL_RCC_OscConfig+0x270>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e013      	b.n	800507c <HAL_RCC_OscConfig+0x298>
 8005054:	40021000 	.word	0x40021000
 8005058:	08008c60 	.word	0x08008c60
 800505c:	20000024 	.word	0x20000024
 8005060:	20000028 	.word	0x20000028
 8005064:	4ba0      	ldr	r3, [pc, #640]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a9f      	ldr	r2, [pc, #636]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800506a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	4b9d      	ldr	r3, [pc, #628]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a9c      	ldr	r2, [pc, #624]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 8005076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800507a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fe f916 	bl	80032b4 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800508c:	f7fe f912 	bl	80032b4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e2b4      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800509e:	4b92      	ldr	r3, [pc, #584]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x2a8>
 80050aa:	e014      	b.n	80050d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fe f902 	bl	80032b4 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fe f8fe 	bl	80032b4 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	; 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e2a0      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050c6:	4b88      	ldr	r3, [pc, #544]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x2d0>
 80050d2:	e000      	b.n	80050d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d060      	beq.n	80051a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d005      	beq.n	80050f4 <HAL_RCC_OscConfig+0x310>
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	2b0c      	cmp	r3, #12
 80050ec:	d119      	bne.n	8005122 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d116      	bne.n	8005122 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f4:	4b7c      	ldr	r3, [pc, #496]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_OscConfig+0x328>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e27d      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510c:	4b76      	ldr	r3, [pc, #472]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	061b      	lsls	r3, r3, #24
 800511a:	4973      	ldr	r1, [pc, #460]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800511c:	4313      	orrs	r3, r2
 800511e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005120:	e040      	b.n	80051a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d023      	beq.n	8005172 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800512a:	4b6f      	ldr	r3, [pc, #444]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a6e      	ldr	r2, [pc, #440]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005136:	f7fe f8bd 	bl	80032b4 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513e:	f7fe f8b9 	bl	80032b4 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e25b      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005150:	4b65      	ldr	r3, [pc, #404]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515c:	4b62      	ldr	r3, [pc, #392]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	495f      	ldr	r1, [pc, #380]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800516c:	4313      	orrs	r3, r2
 800516e:	604b      	str	r3, [r1, #4]
 8005170:	e018      	b.n	80051a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005172:	4b5d      	ldr	r3, [pc, #372]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a5c      	ldr	r2, [pc, #368]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 8005178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800517c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517e:	f7fe f899 	bl	80032b4 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005186:	f7fe f895 	bl	80032b4 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e237      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005198:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f0      	bne.n	8005186 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d03c      	beq.n	800522a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01c      	beq.n	80051f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051b8:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80051ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051be:	4a4a      	ldr	r2, [pc, #296]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80051c0:	f043 0301 	orr.w	r3, r3, #1
 80051c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c8:	f7fe f874 	bl	80032b4 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d0:	f7fe f870 	bl	80032b4 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e212      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051e2:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80051e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0ef      	beq.n	80051d0 <HAL_RCC_OscConfig+0x3ec>
 80051f0:	e01b      	b.n	800522a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f2:	4b3d      	ldr	r3, [pc, #244]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80051f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f8:	4a3b      	ldr	r2, [pc, #236]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005202:	f7fe f857 	bl	80032b4 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520a:	f7fe f853 	bl	80032b4 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e1f5      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800521c:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800521e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ef      	bne.n	800520a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80a6 	beq.w	8005384 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005238:	2300      	movs	r3, #0
 800523a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800523c:	4b2a      	ldr	r3, [pc, #168]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10d      	bne.n	8005264 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005248:	4b27      	ldr	r3, [pc, #156]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524c:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 800524e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005252:	6593      	str	r3, [r2, #88]	; 0x58
 8005254:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005260:	2301      	movs	r3, #1
 8005262:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005264:	4b21      	ldr	r3, [pc, #132]	; (80052ec <HAL_RCC_OscConfig+0x508>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d118      	bne.n	80052a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005270:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <HAL_RCC_OscConfig+0x508>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <HAL_RCC_OscConfig+0x508>)
 8005276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527c:	f7fe f81a 	bl	80032b4 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005284:	f7fe f816 	bl	80032b4 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e1b8      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <HAL_RCC_OscConfig+0x508>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d108      	bne.n	80052bc <HAL_RCC_OscConfig+0x4d8>
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	4a0d      	ldr	r2, [pc, #52]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80052b2:	f043 0301 	orr.w	r3, r3, #1
 80052b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052ba:	e029      	b.n	8005310 <HAL_RCC_OscConfig+0x52c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b05      	cmp	r3, #5
 80052c2:	d115      	bne.n	80052f0 <HAL_RCC_OscConfig+0x50c>
 80052c4:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	4a07      	ldr	r2, [pc, #28]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80052cc:	f043 0304 	orr.w	r3, r3, #4
 80052d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052d4:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	4a03      	ldr	r2, [pc, #12]	; (80052e8 <HAL_RCC_OscConfig+0x504>)
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052e4:	e014      	b.n	8005310 <HAL_RCC_OscConfig+0x52c>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40007000 	.word	0x40007000
 80052f0:	4b9d      	ldr	r3, [pc, #628]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	4a9c      	ldr	r2, [pc, #624]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005300:	4b99      	ldr	r3, [pc, #612]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	4a98      	ldr	r2, [pc, #608]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005308:	f023 0304 	bic.w	r3, r3, #4
 800530c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d016      	beq.n	8005346 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005318:	f7fd ffcc 	bl	80032b4 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531e:	e00a      	b.n	8005336 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fd ffc8 	bl	80032b4 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	; 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e168      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005336:	4b8c      	ldr	r3, [pc, #560]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ed      	beq.n	8005320 <HAL_RCC_OscConfig+0x53c>
 8005344:	e015      	b.n	8005372 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005346:	f7fd ffb5 	bl	80032b4 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800534c:	e00a      	b.n	8005364 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fd ffb1 	bl	80032b4 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	; 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e151      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005364:	4b80      	ldr	r3, [pc, #512]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1ed      	bne.n	800534e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005372:	7ffb      	ldrb	r3, [r7, #31]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005378:	4b7b      	ldr	r3, [pc, #492]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537c:	4a7a      	ldr	r2, [pc, #488]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 800537e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005382:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d03c      	beq.n	800540a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01c      	beq.n	80053d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005398:	4b73      	ldr	r3, [pc, #460]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 800539a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800539e:	4a72      	ldr	r2, [pc, #456]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7fd ff84 	bl	80032b4 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053b0:	f7fd ff80 	bl	80032b4 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e122      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053c2:	4b69      	ldr	r3, [pc, #420]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80053c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0ef      	beq.n	80053b0 <HAL_RCC_OscConfig+0x5cc>
 80053d0:	e01b      	b.n	800540a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053d2:	4b65      	ldr	r3, [pc, #404]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80053d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053d8:	4a63      	ldr	r2, [pc, #396]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e2:	f7fd ff67 	bl	80032b4 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053ea:	f7fd ff63 	bl	80032b4 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e105      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053fc:	4b5a      	ldr	r3, [pc, #360]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80053fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ef      	bne.n	80053ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80f9 	beq.w	8005606 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	2b02      	cmp	r3, #2
 800541a:	f040 80cf 	bne.w	80055bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800541e:	4b52      	ldr	r3, [pc, #328]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f003 0203 	and.w	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	429a      	cmp	r2, r3
 8005430:	d12c      	bne.n	800548c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	3b01      	subs	r3, #1
 800543e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d123      	bne.n	800548c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d11b      	bne.n	800548c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d113      	bne.n	800548c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	3b01      	subs	r3, #1
 8005472:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d109      	bne.n	800548c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	3b01      	subs	r3, #1
 8005486:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005488:	429a      	cmp	r2, r3
 800548a:	d071      	beq.n	8005570 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d068      	beq.n	8005564 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005492:	4b35      	ldr	r3, [pc, #212]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d105      	bne.n	80054aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800549e:	4b32      	ldr	r3, [pc, #200]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e0ac      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054ae:	4b2e      	ldr	r3, [pc, #184]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a2d      	ldr	r2, [pc, #180]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80054b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054ba:	f7fd fefb 	bl	80032b4 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c2:	f7fd fef7 	bl	80032b4 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e099      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d4:	4b24      	ldr	r3, [pc, #144]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e0:	4b21      	ldr	r3, [pc, #132]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	4b21      	ldr	r3, [pc, #132]	; (800556c <HAL_RCC_OscConfig+0x788>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054f0:	3a01      	subs	r2, #1
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	4311      	orrs	r1, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054fa:	0212      	lsls	r2, r2, #8
 80054fc:	4311      	orrs	r1, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005502:	0852      	lsrs	r2, r2, #1
 8005504:	3a01      	subs	r2, #1
 8005506:	0552      	lsls	r2, r2, #21
 8005508:	4311      	orrs	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800550e:	0852      	lsrs	r2, r2, #1
 8005510:	3a01      	subs	r2, #1
 8005512:	0652      	lsls	r2, r2, #25
 8005514:	4311      	orrs	r1, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800551a:	06d2      	lsls	r2, r2, #27
 800551c:	430a      	orrs	r2, r1
 800551e:	4912      	ldr	r1, [pc, #72]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005520:	4313      	orrs	r3, r2
 8005522:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005524:	4b10      	ldr	r3, [pc, #64]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a0f      	ldr	r2, [pc, #60]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 800552a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800552e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800553c:	f7fd feba 	bl	80032b4 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005544:	f7fd feb6 	bl	80032b4 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e058      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005556:	4b04      	ldr	r3, [pc, #16]	; (8005568 <HAL_RCC_OscConfig+0x784>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005562:	e050      	b.n	8005606 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e04f      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
 8005568:	40021000 	.word	0x40021000
 800556c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005570:	4b27      	ldr	r3, [pc, #156]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d144      	bne.n	8005606 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800557c:	4b24      	ldr	r3, [pc, #144]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a23      	ldr	r2, [pc, #140]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 8005582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005586:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005588:	4b21      	ldr	r3, [pc, #132]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4a20      	ldr	r2, [pc, #128]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 800558e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005592:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005594:	f7fd fe8e 	bl	80032b4 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559c:	f7fd fe8a 	bl	80032b4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e02c      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ae:	4b18      	ldr	r3, [pc, #96]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0x7b8>
 80055ba:	e024      	b.n	8005606 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b0c      	cmp	r3, #12
 80055c0:	d01f      	beq.n	8005602 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c2:	4b13      	ldr	r3, [pc, #76]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a12      	ldr	r2, [pc, #72]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 80055c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ce:	f7fd fe71 	bl	80032b4 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d6:	f7fd fe6d 	bl	80032b4 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e00f      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	4905      	ldr	r1, [pc, #20]	; (8005610 <HAL_RCC_OscConfig+0x82c>)
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCC_OscConfig+0x830>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	60cb      	str	r3, [r1, #12]
 8005600:	e001      	b.n	8005606 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40021000 	.word	0x40021000
 8005614:	feeefffc 	.word	0xfeeefffc

08005618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e11d      	b.n	800586c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b90      	ldr	r3, [pc, #576]	; (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d910      	bls.n	8005660 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b8d      	ldr	r3, [pc, #564]	; (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f023 020f 	bic.w	r2, r3, #15
 8005646:	498b      	ldr	r1, [pc, #556]	; (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	4b89      	ldr	r3, [pc, #548]	; (8005874 <HAL_RCC_ClockConfig+0x25c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d001      	beq.n	8005660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e105      	b.n	800586c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d010      	beq.n	800568e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	4b81      	ldr	r3, [pc, #516]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005678:	429a      	cmp	r2, r3
 800567a:	d908      	bls.n	800568e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800567c:	4b7e      	ldr	r3, [pc, #504]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	497b      	ldr	r1, [pc, #492]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d079      	beq.n	800578e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d11e      	bne.n	80056e0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a2:	4b75      	ldr	r3, [pc, #468]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e0dc      	b.n	800586c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80056b2:	f000 fa09 	bl	8005ac8 <RCC_GetSysClockFreqFromPLLSource>
 80056b6:	4603      	mov	r3, r0
 80056b8:	4a70      	ldr	r2, [pc, #448]	; (800587c <HAL_RCC_ClockConfig+0x264>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d946      	bls.n	800574c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80056be:	4b6e      	ldr	r3, [pc, #440]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d140      	bne.n	800574c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056ca:	4b6b      	ldr	r3, [pc, #428]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d2:	4a69      	ldr	r2, [pc, #420]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 80056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e035      	b.n	800574c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d107      	bne.n	80056f8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056e8:	4b63      	ldr	r3, [pc, #396]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d115      	bne.n	8005720 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0b9      	b.n	800586c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d107      	bne.n	8005710 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005700:	4b5d      	ldr	r3, [pc, #372]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0ad      	b.n	800586c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005710:	4b59      	ldr	r3, [pc, #356]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0a5      	b.n	800586c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005720:	f000 f8b4 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8005724:	4603      	mov	r3, r0
 8005726:	4a55      	ldr	r2, [pc, #340]	; (800587c <HAL_RCC_ClockConfig+0x264>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d90f      	bls.n	800574c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800572c:	4b52      	ldr	r3, [pc, #328]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005738:	4b4f      	ldr	r3, [pc, #316]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005740:	4a4d      	ldr	r2, [pc, #308]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800574c:	4b4a      	ldr	r3, [pc, #296]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 0203 	bic.w	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4947      	ldr	r1, [pc, #284]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fd fda9 	bl	80032b4 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005764:	e00a      	b.n	800577c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005766:	f7fd fda5 	bl	80032b4 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e077      	b.n	800586c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577c:	4b3e      	ldr	r3, [pc, #248]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 020c 	and.w	r2, r3, #12
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	429a      	cmp	r2, r3
 800578c:	d1eb      	bne.n	8005766 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b80      	cmp	r3, #128	; 0x80
 8005792:	d105      	bne.n	80057a0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005794:	4b38      	ldr	r3, [pc, #224]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4a37      	ldr	r2, [pc, #220]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800579a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	4b31      	ldr	r3, [pc, #196]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d208      	bcs.n	80057ce <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057bc:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	492b      	ldr	r1, [pc, #172]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ce:	4b29      	ldr	r3, [pc, #164]	; (8005874 <HAL_RCC_ClockConfig+0x25c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d210      	bcs.n	80057fe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057dc:	4b25      	ldr	r3, [pc, #148]	; (8005874 <HAL_RCC_ClockConfig+0x25c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 020f 	bic.w	r2, r3, #15
 80057e4:	4923      	ldr	r1, [pc, #140]	; (8005874 <HAL_RCC_ClockConfig+0x25c>)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ec:	4b21      	ldr	r3, [pc, #132]	; (8005874 <HAL_RCC_ClockConfig+0x25c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d001      	beq.n	80057fe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e036      	b.n	800586c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800580a:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	4918      	ldr	r1, [pc, #96]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005818:	4313      	orrs	r3, r2
 800581a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005828:	4b13      	ldr	r3, [pc, #76]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4910      	ldr	r1, [pc, #64]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005838:	4313      	orrs	r3, r2
 800583a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800583c:	f000 f826 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8005840:	4602      	mov	r2, r0
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <HAL_RCC_ClockConfig+0x260>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	490c      	ldr	r1, [pc, #48]	; (8005880 <HAL_RCC_ClockConfig+0x268>)
 800584e:	5ccb      	ldrb	r3, [r1, r3]
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
 8005858:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <HAL_RCC_ClockConfig+0x26c>)
 800585a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <HAL_RCC_ClockConfig+0x270>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f7fd fcd7 	bl	8003214 <HAL_InitTick>
 8005866:	4603      	mov	r3, r0
 8005868:	73fb      	strb	r3, [r7, #15]

  return status;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40022000 	.word	0x40022000
 8005878:	40021000 	.word	0x40021000
 800587c:	04c4b400 	.word	0x04c4b400
 8005880:	08008c60 	.word	0x08008c60
 8005884:	20000024 	.word	0x20000024
 8005888:	20000028 	.word	0x20000028

0800588c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	; 0x24
 8005890:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	2300      	movs	r3, #0
 8005898:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800589a:	4b3e      	ldr	r3, [pc, #248]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058a4:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_GetSysClockFreq+0x34>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b0c      	cmp	r3, #12
 80058b8:	d121      	bne.n	80058fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d11e      	bne.n	80058fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058c0:	4b34      	ldr	r3, [pc, #208]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d107      	bne.n	80058dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058cc:	4b31      	ldr	r3, [pc, #196]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	e005      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058dc:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	091b      	lsrs	r3, r3, #4
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058e8:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10d      	bne.n	8005914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058fc:	e00a      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b04      	cmp	r3, #4
 8005902:	d102      	bne.n	800590a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005904:	4b25      	ldr	r3, [pc, #148]	; (800599c <HAL_RCC_GetSysClockFreq+0x110>)
 8005906:	61bb      	str	r3, [r7, #24]
 8005908:	e004      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d101      	bne.n	8005914 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005910:	4b23      	ldr	r3, [pc, #140]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005912:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b0c      	cmp	r3, #12
 8005918:	d134      	bne.n	8005984 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800591a:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d003      	beq.n	8005932 <HAL_RCC_GetSysClockFreq+0xa6>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d003      	beq.n	8005938 <HAL_RCC_GetSysClockFreq+0xac>
 8005930:	e005      	b.n	800593e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005932:	4b1a      	ldr	r3, [pc, #104]	; (800599c <HAL_RCC_GetSysClockFreq+0x110>)
 8005934:	617b      	str	r3, [r7, #20]
      break;
 8005936:	e005      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800593a:	617b      	str	r3, [r7, #20]
      break;
 800593c:	e002      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	617b      	str	r3, [r7, #20]
      break;
 8005942:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	3301      	adds	r3, #1
 8005950:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	fb03 f202 	mul.w	r2, r3, r2
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <HAL_RCC_GetSysClockFreq+0x108>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	0e5b      	lsrs	r3, r3, #25
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	3301      	adds	r3, #1
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005984:	69bb      	ldr	r3, [r7, #24]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3724      	adds	r7, #36	; 0x24
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000
 8005998:	08008c78 	.word	0x08008c78
 800599c:	00f42400 	.word	0x00f42400
 80059a0:	007a1200 	.word	0x007a1200

080059a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059aa:	681b      	ldr	r3, [r3, #0]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000024 	.word	0x20000024

080059bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059c0:	f7ff fff0 	bl	80059a4 <HAL_RCC_GetHCLKFreq>
 80059c4:	4602      	mov	r2, r0
 80059c6:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	4904      	ldr	r1, [pc, #16]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059d2:	5ccb      	ldrb	r3, [r1, r3]
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40021000 	.word	0x40021000
 80059e4:	08008c70 	.word	0x08008c70

080059e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059ec:	f7ff ffda 	bl	80059a4 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	0adb      	lsrs	r3, r3, #11
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4904      	ldr	r1, [pc, #16]	; (8005a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	08008c70 	.word	0x08008c70

08005a14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a20:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a2c:	f7ff f906 	bl	8004c3c <HAL_PWREx_GetVoltageRange>
 8005a30:	6178      	str	r0, [r7, #20]
 8005a32:	e014      	b.n	8005a5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a34:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a38:	4a21      	ldr	r2, [pc, #132]	; (8005ac0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a40:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a4c:	f7ff f8f6 	bl	8004c3c <HAL_PWREx_GetVoltageRange>
 8005a50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a52:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a56:	4a1a      	ldr	r2, [pc, #104]	; (8005ac0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a64:	d10b      	bne.n	8005a7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d913      	bls.n	8005a94 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2ba0      	cmp	r3, #160	; 0xa0
 8005a70:	d902      	bls.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a72:	2302      	movs	r3, #2
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	e00d      	b.n	8005a94 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a78:	2301      	movs	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	e00a      	b.n	8005a94 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b7f      	cmp	r3, #127	; 0x7f
 8005a82:	d902      	bls.n	8005a8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005a84:	2302      	movs	r3, #2
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	e004      	b.n	8005a94 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b70      	cmp	r3, #112	; 0x70
 8005a8e:	d101      	bne.n	8005a94 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a90:	2301      	movs	r3, #1
 8005a92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f023 020f 	bic.w	r2, r3, #15
 8005a9c:	4909      	ldr	r1, [pc, #36]	; (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005aa4:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d001      	beq.n	8005ab6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	40022000 	.word	0x40022000

08005ac8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ace:	4b2d      	ldr	r3, [pc, #180]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d00b      	beq.n	8005af6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d825      	bhi.n	8005b30 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d008      	beq.n	8005afc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d11f      	bne.n	8005b30 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005af0:	4b25      	ldr	r3, [pc, #148]	; (8005b88 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005af2:	613b      	str	r3, [r7, #16]
    break;
 8005af4:	e01f      	b.n	8005b36 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005af6:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005af8:	613b      	str	r3, [r7, #16]
    break;
 8005afa:	e01c      	b.n	8005b36 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005afc:	4b21      	ldr	r3, [pc, #132]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d107      	bne.n	8005b18 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b08:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e005      	b.n	8005b24 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b18:	4b1a      	ldr	r3, [pc, #104]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005b24:	4a1a      	ldr	r2, [pc, #104]	; (8005b90 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2c:	613b      	str	r3, [r7, #16]
    break;
 8005b2e:	e002      	b.n	8005b36 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
    break;
 8005b34:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b36:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	091b      	lsrs	r3, r3, #4
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	3301      	adds	r3, #1
 8005b42:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	fb03 f202 	mul.w	r2, r3, r2
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	0e5b      	lsrs	r3, r3, #25
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	3301      	adds	r3, #1
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005b76:	683b      	ldr	r3, [r7, #0]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40021000 	.word	0x40021000
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	007a1200 	.word	0x007a1200
 8005b90:	08008c78 	.word	0x08008c78

08005b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d040      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb4:	2b80      	cmp	r3, #128	; 0x80
 8005bb6:	d02a      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d825      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005bbc:	2b60      	cmp	r3, #96	; 0x60
 8005bbe:	d026      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005bc0:	2b60      	cmp	r3, #96	; 0x60
 8005bc2:	d821      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d006      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d81d      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005bd4:	e018      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bd6:	4b89      	ldr	r3, [pc, #548]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	4a88      	ldr	r2, [pc, #544]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005be2:	e015      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fb62 	bl	80062b4 <RCCEx_PLLSAI1_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bf4:	e00c      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3320      	adds	r3, #32
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fc4d 	bl	800649c <RCCEx_PLLSAI2_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c06:	e003      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	74fb      	strb	r3, [r7, #19]
      break;
 8005c0c:	e000      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c16:	4b79      	ldr	r3, [pc, #484]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c1c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c24:	4975      	ldr	r1, [pc, #468]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005c2c:	e001      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2e:	7cfb      	ldrb	r3, [r7, #19]
 8005c30:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d047      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c46:	d030      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4c:	d82a      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c52:	d02a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c58:	d824      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5e:	d008      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c64:	d81e      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c6e:	d010      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c70:	e018      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c72:	4b62      	ldr	r3, [pc, #392]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	4a61      	ldr	r2, [pc, #388]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c7c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c7e:	e015      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3304      	adds	r3, #4
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fb14 	bl	80062b4 <RCCEx_PLLSAI1_Config>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c90:	e00c      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3320      	adds	r3, #32
 8005c96:	2100      	movs	r1, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fbff 	bl	800649c <RCCEx_PLLSAI2_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ca2:	e003      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	74fb      	strb	r3, [r7, #19]
      break;
 8005ca8:	e000      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cac:	7cfb      	ldrb	r3, [r7, #19]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005cb2:	4b52      	ldr	r3, [pc, #328]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc0:	494e      	ldr	r1, [pc, #312]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005cc8:	e001      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cca:	7cfb      	ldrb	r3, [r7, #19]
 8005ccc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 809f 	beq.w	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ce0:	4b46      	ldr	r3, [pc, #280]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00d      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf6:	4b41      	ldr	r3, [pc, #260]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfa:	4a40      	ldr	r2, [pc, #256]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d00:	6593      	str	r3, [r2, #88]	; 0x58
 8005d02:	4b3e      	ldr	r3, [pc, #248]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	60bb      	str	r3, [r7, #8]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d12:	4b3b      	ldr	r3, [pc, #236]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a3a      	ldr	r2, [pc, #232]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d1e:	f7fd fac9 	bl	80032b4 <HAL_GetTick>
 8005d22:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d24:	e009      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d26:	f7fd fac5 	bl	80032b4 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d902      	bls.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	74fb      	strb	r3, [r7, #19]
        break;
 8005d38:	e005      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d3a:	4b31      	ldr	r3, [pc, #196]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0ef      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005d46:	7cfb      	ldrb	r3, [r7, #19]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d15b      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d56:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d01f      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d019      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d6a:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d76:	4b21      	ldr	r3, [pc, #132]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7c:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d86:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d96:	4a19      	ldr	r2, [pc, #100]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d016      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fd fa84 	bl	80032b4 <HAL_GetTick>
 8005dac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dae:	e00b      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db0:	f7fd fa80 	bl	80032b4 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d902      	bls.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	74fb      	strb	r3, [r7, #19]
            break;
 8005dc6:	e006      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0ec      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005dd6:	7cfb      	ldrb	r3, [r7, #19]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10c      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ddc:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dec:	4903      	ldr	r1, [pc, #12]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005df4:	e008      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005df6:	7cfb      	ldrb	r3, [r7, #19]
 8005df8:	74bb      	strb	r3, [r7, #18]
 8005dfa:	e005      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e08:	7c7b      	ldrb	r3, [r7, #17]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d105      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e0e:	4ba0      	ldr	r3, [pc, #640]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	4a9f      	ldr	r2, [pc, #636]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e26:	4b9a      	ldr	r3, [pc, #616]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2c:	f023 0203 	bic.w	r2, r3, #3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	4996      	ldr	r1, [pc, #600]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e48:	4b91      	ldr	r3, [pc, #580]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4e:	f023 020c 	bic.w	r2, r3, #12
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	498e      	ldr	r1, [pc, #568]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e6a:	4b89      	ldr	r3, [pc, #548]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e78:	4985      	ldr	r1, [pc, #532]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e8c:	4b80      	ldr	r3, [pc, #512]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9a:	497d      	ldr	r1, [pc, #500]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005eae:	4b78      	ldr	r3, [pc, #480]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebc:	4974      	ldr	r1, [pc, #464]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ed0:	4b6f      	ldr	r3, [pc, #444]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ede:	496c      	ldr	r1, [pc, #432]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ef2:	4b67      	ldr	r3, [pc, #412]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f00:	4963      	ldr	r1, [pc, #396]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f14:	4b5e      	ldr	r3, [pc, #376]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f22:	495b      	ldr	r1, [pc, #364]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f36:	4b56      	ldr	r3, [pc, #344]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	4952      	ldr	r1, [pc, #328]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f58:	4b4d      	ldr	r3, [pc, #308]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f66:	494a      	ldr	r1, [pc, #296]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f7a:	4b45      	ldr	r3, [pc, #276]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f88:	4941      	ldr	r1, [pc, #260]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f9c:	4b3c      	ldr	r3, [pc, #240]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fa2:	f023 0203 	bic.w	r2, r3, #3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005faa:	4939      	ldr	r1, [pc, #228]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d028      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fbe:	4b34      	ldr	r3, [pc, #208]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fcc:	4930      	ldr	r1, [pc, #192]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fdc:	d106      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fde:	4b2c      	ldr	r3, [pc, #176]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	4a2b      	ldr	r2, [pc, #172]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe8:	60d3      	str	r3, [r2, #12]
 8005fea:	e011      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 f959 	bl	80062b4 <RCCEx_PLLSAI1_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006006:	7cfb      	ldrb	r3, [r7, #19]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800600c:	7cfb      	ldrb	r3, [r7, #19]
 800600e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d04d      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006024:	d108      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006026:	4b1a      	ldr	r3, [pc, #104]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800602c:	4a18      	ldr	r2, [pc, #96]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800602e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006032:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006036:	e012      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006038:	4b15      	ldr	r3, [pc, #84]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800603a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800603e:	4a14      	ldr	r2, [pc, #80]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006044:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006048:	4b11      	ldr	r3, [pc, #68]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006056:	490e      	ldr	r1, [pc, #56]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006066:	d106      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006068:	4b09      	ldr	r3, [pc, #36]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4a08      	ldr	r2, [pc, #32]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800606e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006072:	60d3      	str	r3, [r2, #12]
 8006074:	e020      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800607a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800607e:	d109      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006080:	4b03      	ldr	r3, [pc, #12]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4a02      	ldr	r2, [pc, #8]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608a:	60d3      	str	r3, [r2, #12]
 800608c:	e014      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800608e:	bf00      	nop
 8006090:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800609c:	d10c      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	2101      	movs	r1, #1
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 f905 	bl	80062b4 <RCCEx_PLLSAI1_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060ae:	7cfb      	ldrb	r3, [r7, #19]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80060b4:	7cfb      	ldrb	r3, [r7, #19]
 80060b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d028      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060c4:	4b7a      	ldr	r3, [pc, #488]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d2:	4977      	ldr	r1, [pc, #476]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e2:	d106      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060e4:	4b72      	ldr	r3, [pc, #456]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4a71      	ldr	r2, [pc, #452]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ee:	60d3      	str	r3, [r2, #12]
 80060f0:	e011      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060fa:	d10c      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3304      	adds	r3, #4
 8006100:	2101      	movs	r1, #1
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f8d6 	bl	80062b4 <RCCEx_PLLSAI1_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800610c:	7cfb      	ldrb	r3, [r7, #19]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006112:	7cfb      	ldrb	r3, [r7, #19]
 8006114:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01e      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006122:	4b63      	ldr	r3, [pc, #396]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006128:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006132:	495f      	ldr	r1, [pc, #380]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006144:	d10c      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3304      	adds	r3, #4
 800614a:	2102      	movs	r1, #2
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f8b1 	bl	80062b4 <RCCEx_PLLSAI1_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006156:	7cfb      	ldrb	r3, [r7, #19]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800615c:	7cfb      	ldrb	r3, [r7, #19]
 800615e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800616c:	4b50      	ldr	r3, [pc, #320]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800616e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006172:	f023 0204 	bic.w	r2, r3, #4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800617c:	494c      	ldr	r1, [pc, #304]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00b      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006190:	4b47      	ldr	r3, [pc, #284]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006196:	f023 0218 	bic.w	r2, r3, #24
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	4943      	ldr	r1, [pc, #268]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d035      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061b4:	4b3e      	ldr	r3, [pc, #248]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a3d      	ldr	r2, [pc, #244]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c0:	f7fd f878 	bl	80032b4 <HAL_GetTick>
 80061c4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061c6:	e009      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061c8:	f7fd f874 	bl	80032b4 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d902      	bls.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	74fb      	strb	r3, [r7, #19]
        break;
 80061da:	e005      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061dc:	4b34      	ldr	r3, [pc, #208]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1ef      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d113      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80061ee:	4b30      	ldr	r3, [pc, #192]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061fe:	492c      	ldr	r1, [pc, #176]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3320      	adds	r3, #32
 800620a:	2102      	movs	r1, #2
 800620c:	4618      	mov	r0, r3
 800620e:	f000 f945 	bl	800649c <RCCEx_PLLSAI2_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006216:	7cfb      	ldrb	r3, [r7, #19]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800621c:	7cfb      	ldrb	r3, [r7, #19]
 800621e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01e      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800622c:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800622e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623c:	491c      	ldr	r1, [pc, #112]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800623e:	4313      	orrs	r3, r2
 8006240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	d10c      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3320      	adds	r3, #32
 8006254:	2101      	movs	r1, #1
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f920 	bl	800649c <RCCEx_PLLSAI2_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006266:	7cfb      	ldrb	r3, [r7, #19]
 8006268:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d017      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006276:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800627c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006286:	490a      	ldr	r1, [pc, #40]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006298:	d105      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	4a04      	ldr	r2, [pc, #16]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062a4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80062a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40021000 	.word	0x40021000

080062b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062c2:	4b72      	ldr	r3, [pc, #456]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00e      	beq.n	80062ec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062ce:	4b6f      	ldr	r3, [pc, #444]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0203 	and.w	r2, r3, #3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d103      	bne.n	80062e6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
       ||
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d142      	bne.n	800636c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
 80062ea:	e03f      	b.n	800636c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d018      	beq.n	8006326 <RCCEx_PLLSAI1_Config+0x72>
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d825      	bhi.n	8006344 <RCCEx_PLLSAI1_Config+0x90>
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d002      	beq.n	8006302 <RCCEx_PLLSAI1_Config+0x4e>
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d009      	beq.n	8006314 <RCCEx_PLLSAI1_Config+0x60>
 8006300:	e020      	b.n	8006344 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006302:	4b62      	ldr	r3, [pc, #392]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d11d      	bne.n	800634a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006312:	e01a      	b.n	800634a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006314:	4b5d      	ldr	r3, [pc, #372]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800631c:	2b00      	cmp	r3, #0
 800631e:	d116      	bne.n	800634e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006324:	e013      	b.n	800634e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006326:	4b59      	ldr	r3, [pc, #356]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10f      	bne.n	8006352 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006332:	4b56      	ldr	r3, [pc, #344]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006342:	e006      	b.n	8006352 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
      break;
 8006348:	e004      	b.n	8006354 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800634a:	bf00      	nop
 800634c:	e002      	b.n	8006354 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800634e:	bf00      	nop
 8006350:	e000      	b.n	8006354 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006352:	bf00      	nop
    }

    if(status == HAL_OK)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d108      	bne.n	800636c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800635a:	4b4c      	ldr	r3, [pc, #304]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f023 0203 	bic.w	r2, r3, #3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4949      	ldr	r1, [pc, #292]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006368:	4313      	orrs	r3, r2
 800636a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 8086 	bne.w	8006480 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006374:	4b45      	ldr	r3, [pc, #276]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a44      	ldr	r2, [pc, #272]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 800637a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800637e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006380:	f7fc ff98 	bl	80032b4 <HAL_GetTick>
 8006384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006386:	e009      	b.n	800639c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006388:	f7fc ff94 	bl	80032b4 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d902      	bls.n	800639c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	73fb      	strb	r3, [r7, #15]
        break;
 800639a:	e005      	b.n	80063a8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800639c:	4b3b      	ldr	r3, [pc, #236]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1ef      	bne.n	8006388 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d168      	bne.n	8006480 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d113      	bne.n	80063dc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063b4:	4b35      	ldr	r3, [pc, #212]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	4b35      	ldr	r3, [pc, #212]	; (8006490 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6892      	ldr	r2, [r2, #8]
 80063c0:	0211      	lsls	r1, r2, #8
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68d2      	ldr	r2, [r2, #12]
 80063c6:	06d2      	lsls	r2, r2, #27
 80063c8:	4311      	orrs	r1, r2
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6852      	ldr	r2, [r2, #4]
 80063ce:	3a01      	subs	r2, #1
 80063d0:	0112      	lsls	r2, r2, #4
 80063d2:	430a      	orrs	r2, r1
 80063d4:	492d      	ldr	r1, [pc, #180]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	610b      	str	r3, [r1, #16]
 80063da:	e02d      	b.n	8006438 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d115      	bne.n	800640e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063e2:	4b2a      	ldr	r3, [pc, #168]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6892      	ldr	r2, [r2, #8]
 80063ee:	0211      	lsls	r1, r2, #8
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6912      	ldr	r2, [r2, #16]
 80063f4:	0852      	lsrs	r2, r2, #1
 80063f6:	3a01      	subs	r2, #1
 80063f8:	0552      	lsls	r2, r2, #21
 80063fa:	4311      	orrs	r1, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6852      	ldr	r2, [r2, #4]
 8006400:	3a01      	subs	r2, #1
 8006402:	0112      	lsls	r2, r2, #4
 8006404:	430a      	orrs	r2, r1
 8006406:	4921      	ldr	r1, [pc, #132]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006408:	4313      	orrs	r3, r2
 800640a:	610b      	str	r3, [r1, #16]
 800640c:	e014      	b.n	8006438 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800640e:	4b1f      	ldr	r3, [pc, #124]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	4b21      	ldr	r3, [pc, #132]	; (8006498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006414:	4013      	ands	r3, r2
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6892      	ldr	r2, [r2, #8]
 800641a:	0211      	lsls	r1, r2, #8
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6952      	ldr	r2, [r2, #20]
 8006420:	0852      	lsrs	r2, r2, #1
 8006422:	3a01      	subs	r2, #1
 8006424:	0652      	lsls	r2, r2, #25
 8006426:	4311      	orrs	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6852      	ldr	r2, [r2, #4]
 800642c:	3a01      	subs	r2, #1
 800642e:	0112      	lsls	r2, r2, #4
 8006430:	430a      	orrs	r2, r1
 8006432:	4916      	ldr	r1, [pc, #88]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006434:	4313      	orrs	r3, r2
 8006436:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006438:	4b14      	ldr	r3, [pc, #80]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a13      	ldr	r2, [pc, #76]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 800643e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006442:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006444:	f7fc ff36 	bl	80032b4 <HAL_GetTick>
 8006448:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800644a:	e009      	b.n	8006460 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800644c:	f7fc ff32 	bl	80032b4 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d902      	bls.n	8006460 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	73fb      	strb	r3, [r7, #15]
          break;
 800645e:	e005      	b.n	800646c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006460:	4b0a      	ldr	r3, [pc, #40]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0ef      	beq.n	800644c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	4904      	ldr	r1, [pc, #16]	; (800648c <RCCEx_PLLSAI1_Config+0x1d8>)
 800647c:	4313      	orrs	r3, r2
 800647e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40021000 	.word	0x40021000
 8006490:	07ff800f 	.word	0x07ff800f
 8006494:	ff9f800f 	.word	0xff9f800f
 8006498:	f9ff800f 	.word	0xf9ff800f

0800649c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064aa:	4b72      	ldr	r3, [pc, #456]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00e      	beq.n	80064d4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064b6:	4b6f      	ldr	r3, [pc, #444]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0203 	and.w	r2, r3, #3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d103      	bne.n	80064ce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
       ||
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d142      	bne.n	8006554 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	73fb      	strb	r3, [r7, #15]
 80064d2:	e03f      	b.n	8006554 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d018      	beq.n	800650e <RCCEx_PLLSAI2_Config+0x72>
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d825      	bhi.n	800652c <RCCEx_PLLSAI2_Config+0x90>
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d002      	beq.n	80064ea <RCCEx_PLLSAI2_Config+0x4e>
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d009      	beq.n	80064fc <RCCEx_PLLSAI2_Config+0x60>
 80064e8:	e020      	b.n	800652c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064ea:	4b62      	ldr	r3, [pc, #392]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d11d      	bne.n	8006532 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064fa:	e01a      	b.n	8006532 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064fc:	4b5d      	ldr	r3, [pc, #372]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006504:	2b00      	cmp	r3, #0
 8006506:	d116      	bne.n	8006536 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800650c:	e013      	b.n	8006536 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800650e:	4b59      	ldr	r3, [pc, #356]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10f      	bne.n	800653a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800651a:	4b56      	ldr	r3, [pc, #344]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800652a:	e006      	b.n	800653a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
      break;
 8006530:	e004      	b.n	800653c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006532:	bf00      	nop
 8006534:	e002      	b.n	800653c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800653a:	bf00      	nop
    }

    if(status == HAL_OK)
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d108      	bne.n	8006554 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006542:	4b4c      	ldr	r3, [pc, #304]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f023 0203 	bic.w	r2, r3, #3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4949      	ldr	r1, [pc, #292]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006550:	4313      	orrs	r3, r2
 8006552:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f040 8086 	bne.w	8006668 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800655c:	4b45      	ldr	r3, [pc, #276]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a44      	ldr	r2, [pc, #272]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006568:	f7fc fea4 	bl	80032b4 <HAL_GetTick>
 800656c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800656e:	e009      	b.n	8006584 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006570:	f7fc fea0 	bl	80032b4 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d902      	bls.n	8006584 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	73fb      	strb	r3, [r7, #15]
        break;
 8006582:	e005      	b.n	8006590 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006584:	4b3b      	ldr	r3, [pc, #236]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1ef      	bne.n	8006570 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d168      	bne.n	8006668 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d113      	bne.n	80065c4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800659c:	4b35      	ldr	r3, [pc, #212]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800659e:	695a      	ldr	r2, [r3, #20]
 80065a0:	4b35      	ldr	r3, [pc, #212]	; (8006678 <RCCEx_PLLSAI2_Config+0x1dc>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6892      	ldr	r2, [r2, #8]
 80065a8:	0211      	lsls	r1, r2, #8
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68d2      	ldr	r2, [r2, #12]
 80065ae:	06d2      	lsls	r2, r2, #27
 80065b0:	4311      	orrs	r1, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6852      	ldr	r2, [r2, #4]
 80065b6:	3a01      	subs	r2, #1
 80065b8:	0112      	lsls	r2, r2, #4
 80065ba:	430a      	orrs	r2, r1
 80065bc:	492d      	ldr	r1, [pc, #180]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	614b      	str	r3, [r1, #20]
 80065c2:	e02d      	b.n	8006620 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d115      	bne.n	80065f6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065ca:	4b2a      	ldr	r3, [pc, #168]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065cc:	695a      	ldr	r2, [r3, #20]
 80065ce:	4b2b      	ldr	r3, [pc, #172]	; (800667c <RCCEx_PLLSAI2_Config+0x1e0>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6892      	ldr	r2, [r2, #8]
 80065d6:	0211      	lsls	r1, r2, #8
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6912      	ldr	r2, [r2, #16]
 80065dc:	0852      	lsrs	r2, r2, #1
 80065de:	3a01      	subs	r2, #1
 80065e0:	0552      	lsls	r2, r2, #21
 80065e2:	4311      	orrs	r1, r2
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6852      	ldr	r2, [r2, #4]
 80065e8:	3a01      	subs	r2, #1
 80065ea:	0112      	lsls	r2, r2, #4
 80065ec:	430a      	orrs	r2, r1
 80065ee:	4921      	ldr	r1, [pc, #132]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	614b      	str	r3, [r1, #20]
 80065f4:	e014      	b.n	8006620 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065f6:	4b1f      	ldr	r3, [pc, #124]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	4b21      	ldr	r3, [pc, #132]	; (8006680 <RCCEx_PLLSAI2_Config+0x1e4>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6892      	ldr	r2, [r2, #8]
 8006602:	0211      	lsls	r1, r2, #8
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6952      	ldr	r2, [r2, #20]
 8006608:	0852      	lsrs	r2, r2, #1
 800660a:	3a01      	subs	r2, #1
 800660c:	0652      	lsls	r2, r2, #25
 800660e:	4311      	orrs	r1, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6852      	ldr	r2, [r2, #4]
 8006614:	3a01      	subs	r2, #1
 8006616:	0112      	lsls	r2, r2, #4
 8006618:	430a      	orrs	r2, r1
 800661a:	4916      	ldr	r1, [pc, #88]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800661c:	4313      	orrs	r3, r2
 800661e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006620:	4b14      	ldr	r3, [pc, #80]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a13      	ldr	r2, [pc, #76]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662c:	f7fc fe42 	bl	80032b4 <HAL_GetTick>
 8006630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006632:	e009      	b.n	8006648 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006634:	f7fc fe3e 	bl	80032b4 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d902      	bls.n	8006648 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	73fb      	strb	r3, [r7, #15]
          break;
 8006646:	e005      	b.n	8006654 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006648:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0ef      	beq.n	8006634 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800665a:	4b06      	ldr	r3, [pc, #24]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800665c:	695a      	ldr	r2, [r3, #20]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	4904      	ldr	r1, [pc, #16]	; (8006674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006664:	4313      	orrs	r3, r2
 8006666:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40021000 	.word	0x40021000
 8006678:	07ff800f 	.word	0x07ff800f
 800667c:	ff9f800f 	.word	0xff9f800f
 8006680:	f9ff800f 	.word	0xf9ff800f

08006684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e095      	b.n	80067c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d108      	bne.n	80066b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a6:	d009      	beq.n	80066bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	61da      	str	r2, [r3, #28]
 80066ae:	e005      	b.n	80066bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fc fc10 	bl	8002efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066fc:	d902      	bls.n	8006704 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	e002      	b.n	800670a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006708:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006712:	d007      	beq.n	8006724 <HAL_SPI_Init+0xa0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800671c:	d002      	beq.n	8006724 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006766:	ea42 0103 	orr.w	r1, r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	0c1b      	lsrs	r3, r3, #16
 8006780:	f003 0204 	and.w	r2, r3, #4
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067a0:	ea42 0103 	orr.w	r1, r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b088      	sub	sp, #32
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	603b      	str	r3, [r7, #0]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_SPI_Transmit+0x22>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e15f      	b.n	8006aac <HAL_SPI_Transmit+0x2e2>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067f4:	f7fc fd5e 	bl	80032b4 <HAL_GetTick>
 80067f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b01      	cmp	r3, #1
 8006808:	d002      	beq.n	8006810 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800680a:	2302      	movs	r3, #2
 800680c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800680e:	e148      	b.n	8006aa2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <HAL_SPI_Transmit+0x52>
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006820:	e13f      	b.n	8006aa2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2203      	movs	r2, #3
 8006826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	88fa      	ldrh	r2, [r7, #6]
 800683a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	88fa      	ldrh	r2, [r7, #6]
 8006840:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686c:	d10f      	bne.n	800688e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d007      	beq.n	80068ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068b4:	d94f      	bls.n	8006956 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_SPI_Transmit+0xfa>
 80068be:	8afb      	ldrh	r3, [r7, #22]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d142      	bne.n	800694a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	881a      	ldrh	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	1c9a      	adds	r2, r3, #2
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068e8:	e02f      	b.n	800694a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d112      	bne.n	800691e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800691c:	e015      	b.n	800694a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800691e:	f7fc fcc9 	bl	80032b4 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d803      	bhi.n	8006936 <HAL_SPI_Transmit+0x16c>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d102      	bne.n	800693c <HAL_SPI_Transmit+0x172>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006948:	e0ab      	b.n	8006aa2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1ca      	bne.n	80068ea <HAL_SPI_Transmit+0x120>
 8006954:	e080      	b.n	8006a58 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_SPI_Transmit+0x19a>
 800695e:	8afb      	ldrh	r3, [r7, #22]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d174      	bne.n	8006a4e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b01      	cmp	r3, #1
 800696c:	d912      	bls.n	8006994 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006972:	881a      	ldrh	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	1c9a      	adds	r2, r3, #2
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b02      	subs	r3, #2
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006992:	e05c      	b.n	8006a4e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	330c      	adds	r3, #12
 800699e:	7812      	ldrb	r2, [r2, #0]
 80069a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80069ba:	e048      	b.n	8006a4e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d12b      	bne.n	8006a22 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d912      	bls.n	80069fa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	881a      	ldrh	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b02      	subs	r3, #2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069f8:	e029      	b.n	8006a4e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	7812      	ldrb	r2, [r2, #0]
 8006a06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a20:	e015      	b.n	8006a4e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a22:	f7fc fc47 	bl	80032b4 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d803      	bhi.n	8006a3a <HAL_SPI_Transmit+0x270>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d102      	bne.n	8006a40 <HAL_SPI_Transmit+0x276>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006a4c:	e029      	b.n	8006aa2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1b1      	bne.n	80069bc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f001 f8d7 	bl	8007c10 <SPI_EndRxTxTransaction>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e003      	b.n	8006aa2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006aaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d002      	beq.n	8006ada <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ad8:	e11a      	b.n	8006d10 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ae2:	d112      	bne.n	8006b0a <HAL_SPI_Receive+0x56>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10e      	bne.n	8006b0a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2204      	movs	r2, #4
 8006af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006af4:	88fa      	ldrh	r2, [r7, #6]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4613      	mov	r3, r2
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f90e 	bl	8006d22 <HAL_SPI_TransmitReceive>
 8006b06:	4603      	mov	r3, r0
 8006b08:	e107      	b.n	8006d1a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_SPI_Receive+0x64>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e100      	b.n	8006d1a <HAL_SPI_Receive+0x266>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b20:	f7fc fbc8 	bl	80032b4 <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_SPI_Receive+0x7e>
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b36:	e0eb      	b.n	8006d10 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b82:	d908      	bls.n	8006b96 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b92:	605a      	str	r2, [r3, #4]
 8006b94:	e007      	b.n	8006ba6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bae:	d10f      	bne.n	8006bd0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d007      	beq.n	8006bee <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bf6:	d86f      	bhi.n	8006cd8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006bf8:	e034      	b.n	8006c64 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d117      	bne.n	8006c38 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f103 020c 	add.w	r2, r3, #12
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	7812      	ldrb	r2, [r2, #0]
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006c36:	e015      	b.n	8006c64 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c38:	f7fc fb3c 	bl	80032b4 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d803      	bhi.n	8006c50 <HAL_SPI_Receive+0x19c>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d102      	bne.n	8006c56 <HAL_SPI_Receive+0x1a2>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006c62:	e055      	b.n	8006d10 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1c4      	bne.n	8006bfa <HAL_SPI_Receive+0x146>
 8006c70:	e038      	b.n	8006ce4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d115      	bne.n	8006cac <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	1c9a      	adds	r2, r3, #2
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006caa:	e015      	b.n	8006cd8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cac:	f7fc fb02 	bl	80032b4 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d803      	bhi.n	8006cc4 <HAL_SPI_Receive+0x210>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d102      	bne.n	8006cca <HAL_SPI_Receive+0x216>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006cd6:	e01b      	b.n	8006d10 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1c6      	bne.n	8006c72 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 ff39 	bl	8007b60 <SPI_EndRxTransaction>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]
 8006d06:	e003      	b.n	8006d10 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b08a      	sub	sp, #40	; 0x28
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d30:	2301      	movs	r3, #1
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_SPI_TransmitReceive+0x26>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e20a      	b.n	800715e <HAL_SPI_TransmitReceive+0x43c>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d50:	f7fc fab0 	bl	80032b4 <HAL_GetTick>
 8006d54:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d5c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d64:	887b      	ldrh	r3, [r7, #2]
 8006d66:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d68:	887b      	ldrh	r3, [r7, #2]
 8006d6a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d6c:	7efb      	ldrb	r3, [r7, #27]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d00e      	beq.n	8006d90 <HAL_SPI_TransmitReceive+0x6e>
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d78:	d106      	bne.n	8006d88 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <HAL_SPI_TransmitReceive+0x66>
 8006d82:	7efb      	ldrb	r3, [r7, #27]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d003      	beq.n	8006d90 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d8e:	e1e0      	b.n	8007152 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <HAL_SPI_TransmitReceive+0x80>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_SPI_TransmitReceive+0x80>
 8006d9c:	887b      	ldrh	r3, [r7, #2]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d103      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006da8:	e1d3      	b.n	8007152 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d003      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2205      	movs	r2, #5
 8006dba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	887a      	ldrh	r2, [r7, #2]
 8006dce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	887a      	ldrh	r2, [r7, #2]
 8006dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	887a      	ldrh	r2, [r7, #2]
 8006de4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	887a      	ldrh	r2, [r7, #2]
 8006dea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e00:	d802      	bhi.n	8006e08 <HAL_SPI_TransmitReceive+0xe6>
 8006e02:	8a3b      	ldrh	r3, [r7, #16]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d908      	bls.n	8006e1a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	e007      	b.n	8006e2a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e28:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	d007      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e50:	f240 8081 	bls.w	8006f56 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_TransmitReceive+0x140>
 8006e5c:	8a7b      	ldrh	r3, [r7, #18]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d16d      	bne.n	8006f3e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	881a      	ldrh	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	1c9a      	adds	r2, r3, #2
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e86:	e05a      	b.n	8006f3e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d11b      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x1ac>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d016      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x1ac>
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d113      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	881a      	ldrh	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	1c9a      	adds	r2, r3, #2
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d11c      	bne.n	8006f16 <HAL_SPI_TransmitReceive+0x1f4>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d016      	beq.n	8006f16 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	1c9a      	adds	r2, r3, #2
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f12:	2301      	movs	r3, #1
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f16:	f7fc f9cd 	bl	80032b4 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d80b      	bhi.n	8006f3e <HAL_SPI_TransmitReceive+0x21c>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2c:	d007      	beq.n	8006f3e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006f3c:	e109      	b.n	8007152 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d19f      	bne.n	8006e88 <HAL_SPI_TransmitReceive+0x166>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d199      	bne.n	8006e88 <HAL_SPI_TransmitReceive+0x166>
 8006f54:	e0e3      	b.n	800711e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_SPI_TransmitReceive+0x244>
 8006f5e:	8a7b      	ldrh	r3, [r7, #18]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	f040 80cf 	bne.w	8007104 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d912      	bls.n	8006f96 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	1c9a      	adds	r2, r3, #2
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b02      	subs	r3, #2
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f94:	e0b6      	b.n	8007104 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	7812      	ldrb	r2, [r2, #0]
 8006fa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fbc:	e0a2      	b.n	8007104 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d134      	bne.n	8007036 <HAL_SPI_TransmitReceive+0x314>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d02f      	beq.n	8007036 <HAL_SPI_TransmitReceive+0x314>
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d12c      	bne.n	8007036 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d912      	bls.n	800700c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	881a      	ldrh	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	1c9a      	adds	r2, r3, #2
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b02      	subs	r3, #2
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	87da      	strh	r2, [r3, #62]	; 0x3e
 800700a:	e012      	b.n	8007032 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b01      	cmp	r3, #1
 8007042:	d148      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x3b4>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d042      	beq.n	80070d6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b01      	cmp	r3, #1
 800705a:	d923      	bls.n	80070a4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	b292      	uxth	r2, r2
 8007068:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	1c9a      	adds	r2, r3, #2
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b02      	subs	r3, #2
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b01      	cmp	r3, #1
 8007090:	d81f      	bhi.n	80070d2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070a0:	605a      	str	r2, [r3, #4]
 80070a2:	e016      	b.n	80070d2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f103 020c 	add.w	r2, r3, #12
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	7812      	ldrb	r2, [r2, #0]
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070d2:	2301      	movs	r3, #1
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070d6:	f7fc f8ed 	bl	80032b4 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d803      	bhi.n	80070ee <HAL_SPI_TransmitReceive+0x3cc>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d102      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x3d2>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d107      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007102:	e026      	b.n	8007152 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	f47f af57 	bne.w	8006fbe <HAL_SPI_TransmitReceive+0x29c>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	f47f af50 	bne.w	8006fbe <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 fd74 	bl	8007c10 <SPI_EndRxTxTransaction>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007148:	e003      	b.n	8007152 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800715a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800715e:	4618      	mov	r0, r3
 8007160:	3728      	adds	r7, #40	; 0x28
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	4613      	mov	r3, r2
 8007174:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b01      	cmp	r3, #1
 8007184:	d002      	beq.n	800718c <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8007186:	2302      	movs	r3, #2
 8007188:	75fb      	strb	r3, [r7, #23]
    goto error;
 800718a:	e092      	b.n	80072b2 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d110      	bne.n	80071b6 <HAL_SPI_Receive_IT+0x4e>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800719c:	d10b      	bne.n	80071b6 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2204      	movs	r2, #4
 80071a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f889 	bl	80072c4 <HAL_SPI_TransmitReceive_IT>
 80071b2:	4603      	mov	r3, r0
 80071b4:	e07e      	b.n	80072b4 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <HAL_SPI_Receive_IT+0x5a>
 80071bc:	88fb      	ldrh	r3, [r7, #6]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d102      	bne.n	80071c8 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071c6:	e074      	b.n	80072b2 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_SPI_Receive_IT+0x6e>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e06e      	b.n	80072b4 <HAL_SPI_Receive_IT+0x14c>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2204      	movs	r2, #4
 80071e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	88fa      	ldrh	r2, [r7, #6]
 80071f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	88fa      	ldrh	r2, [r7, #6]
 80071fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007222:	d90b      	bls.n	800723c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007232:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a21      	ldr	r2, [pc, #132]	; (80072bc <HAL_SPI_Receive_IT+0x154>)
 8007238:	64da      	str	r2, [r3, #76]	; 0x4c
 800723a:	e00a      	b.n	8007252 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800724a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a1c      	ldr	r2, [pc, #112]	; (80072c0 <HAL_SPI_Receive_IT+0x158>)
 8007250:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800725a:	d10f      	bne.n	800727c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800726a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800727a:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d007      	beq.n	800729a <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007298:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80072b0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	080078d9 	.word	0x080078d9
 80072c0:	08007889 	.word	0x08007889

080072c4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072dc:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072e4:	7dbb      	ldrb	r3, [r7, #22]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d00d      	beq.n	8007306 <HAL_SPI_TransmitReceive_IT+0x42>
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072f0:	d106      	bne.n	8007300 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d102      	bne.n	8007300 <HAL_SPI_TransmitReceive_IT+0x3c>
 80072fa:	7dbb      	ldrb	r3, [r7, #22]
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d002      	beq.n	8007306 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8007300:	2302      	movs	r3, #2
 8007302:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007304:	e07d      	b.n	8007402 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <HAL_SPI_TransmitReceive_IT+0x54>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <HAL_SPI_TransmitReceive_IT+0x54>
 8007312:	887b      	ldrh	r3, [r7, #2]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800731c:	e071      	b.n	8007402 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_SPI_TransmitReceive_IT+0x68>
 8007328:	2302      	movs	r3, #2
 800732a:	e06b      	b.n	8007404 <HAL_SPI_TransmitReceive_IT+0x140>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b04      	cmp	r3, #4
 800733e:	d003      	beq.n	8007348 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2205      	movs	r2, #5
 8007344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	887a      	ldrh	r2, [r7, #2]
 8007358:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	887a      	ldrh	r2, [r7, #2]
 800735e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	887a      	ldrh	r2, [r7, #2]
 800736a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	887a      	ldrh	r2, [r7, #2]
 8007372:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800737e:	d906      	bls.n	800738e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4a23      	ldr	r2, [pc, #140]	; (8007410 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8007384:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4a22      	ldr	r2, [pc, #136]	; (8007414 <HAL_SPI_TransmitReceive_IT+0x150>)
 800738a:	651a      	str	r2, [r3, #80]	; 0x50
 800738c:	e005      	b.n	800739a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4a21      	ldr	r2, [pc, #132]	; (8007418 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007392:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4a21      	ldr	r2, [pc, #132]	; (800741c <HAL_SPI_TransmitReceive_IT+0x158>)
 8007398:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073a2:	d802      	bhi.n	80073aa <HAL_SPI_TransmitReceive_IT+0xe6>
 80073a4:	887b      	ldrh	r3, [r7, #2]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d908      	bls.n	80073bc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073b8:	605a      	str	r2, [r3, #4]
 80073ba:	e007      	b.n	80073cc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073ca:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d6:	2b40      	cmp	r3, #64	; 0x40
 80073d8:	d007      	beq.n	80073ea <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073e8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007400:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007402:	7dfb      	ldrb	r3, [r7, #23]
}
 8007404:	4618      	mov	r0, r3
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	080077c3 	.word	0x080077c3
 8007414:	08007829 	.word	0x08007829
 8007418:	08007673 	.word	0x08007673
 800741c:	08007731 	.word	0x08007731

08007420 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	099b      	lsrs	r3, r3, #6
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10f      	bne.n	8007464 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	099b      	lsrs	r3, r3, #6
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
    return;
 8007462:	e0d7      	b.n	8007614 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00a      	beq.n	8007486 <HAL_SPI_IRQHandler+0x66>
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	09db      	lsrs	r3, r3, #7
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
    return;
 8007484:	e0c6      	b.n	8007614 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10c      	bne.n	80074ac <HAL_SPI_IRQHandler+0x8c>
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	099b      	lsrs	r3, r3, #6
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 80b4 	beq.w	8007614 <HAL_SPI_IRQHandler+0x1f4>
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 80ad 	beq.w	8007614 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	099b      	lsrs	r3, r3, #6
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d023      	beq.n	800750e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d011      	beq.n	80074f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d6:	f043 0204 	orr.w	r2, r3, #4
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	e00b      	b.n	800750e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074f6:	2300      	movs	r3, #0
 80074f8:	613b      	str	r3, [r7, #16]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	693b      	ldr	r3, [r7, #16]
        return;
 800750c:	e082      	b.n	8007614 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d014      	beq.n	8007544 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751e:	f043 0201 	orr.w	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	0a1b      	lsrs	r3, r3, #8
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	f043 0208 	orr.w	r2, r3, #8
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800755c:	2300      	movs	r3, #0
 800755e:	60bb      	str	r3, [r7, #8]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	60bb      	str	r3, [r7, #8]
 8007568:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756e:	2b00      	cmp	r3, #0
 8007570:	d04f      	beq.n	8007612 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007580:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d104      	bne.n	800759e <HAL_SPI_IRQHandler+0x17e>
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d034      	beq.n	8007608 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0203 	bic.w	r2, r2, #3
 80075ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d011      	beq.n	80075da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ba:	4a18      	ldr	r2, [pc, #96]	; (800761c <HAL_SPI_IRQHandler+0x1fc>)
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fb ffb7 	bl	8003536 <HAL_DMA_Abort_IT>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d016      	beq.n	8007610 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e6:	4a0d      	ldr	r2, [pc, #52]	; (800761c <HAL_SPI_IRQHandler+0x1fc>)
 80075e8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fb ffa1 	bl	8003536 <HAL_DMA_Abort_IT>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007606:	e003      	b.n	8007610 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f813 	bl	8007634 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800760e:	e000      	b.n	8007612 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007610:	bf00      	nop
    return;
 8007612:	bf00      	nop
  }
}
 8007614:	3720      	adds	r7, #32
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	08007649 	.word	0x08007649

08007620 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007654:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff ffe5 	bl	8007634 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b01      	cmp	r3, #1
 8007684:	d923      	bls.n	80076ce <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007690:	b292      	uxth	r2, r2
 8007692:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	1c9a      	adds	r2, r3, #2
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b02      	subs	r3, #2
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d11f      	bne.n	80076fc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076ca:	605a      	str	r2, [r3, #4]
 80076cc:	e016      	b.n	80076fc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f103 020c 	add.w	r2, r3, #12
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	7812      	ldrb	r2, [r2, #0]
 80076dc:	b2d2      	uxtb	r2, r2
 80076de:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10f      	bne.n	8007728 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007716:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 faba 	bl	8007c9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b01      	cmp	r3, #1
 8007740:	d912      	bls.n	8007768 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	881a      	ldrh	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	1c9a      	adds	r2, r3, #2
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b02      	subs	r3, #2
 8007760:	b29a      	uxth	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007766:	e012      	b.n	800778e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	330c      	adds	r3, #12
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007792:	b29b      	uxth	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d110      	bne.n	80077ba <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077a6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fa71 	bl	8007c9c <SPI_CloseRxTx_ISR>
    }
  }
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	b292      	uxth	r2, r2
 80077d6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	1c9a      	adds	r2, r3, #2
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3b01      	subs	r3, #1
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10f      	bne.n	8007820 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800780e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa3e 	bl	8007c9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	881a      	ldrh	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	1c9a      	adds	r2, r3, #2
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d110      	bne.n	8007880 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800786c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa0e 	bl	8007c9c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f103 020c 	add.w	r2, r3, #12
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	7812      	ldrb	r2, [r2, #0]
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d102      	bne.n	80078d0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa28 	bl	8007d20 <SPI_CloseRx_ISR>
  }
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	b292      	uxth	r2, r2
 80078ec:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	1c9a      	adds	r2, r3, #2
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007910:	b29b      	uxth	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d102      	bne.n	800791c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa02 	bl	8007d20 <SPI_CloseRx_ISR>
  }
}
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	603b      	str	r3, [r7, #0]
 8007930:	4613      	mov	r3, r2
 8007932:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007934:	f7fb fcbe 	bl	80032b4 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	1a9b      	subs	r3, r3, r2
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	4413      	add	r3, r2
 8007942:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007944:	f7fb fcb6 	bl	80032b4 <HAL_GetTick>
 8007948:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800794a:	4b39      	ldr	r3, [pc, #228]	; (8007a30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	015b      	lsls	r3, r3, #5
 8007950:	0d1b      	lsrs	r3, r3, #20
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	fb02 f303 	mul.w	r3, r2, r3
 8007958:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800795a:	e054      	b.n	8007a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007962:	d050      	beq.n	8007a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007964:	f7fb fca6 	bl	80032b4 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	429a      	cmp	r2, r3
 8007972:	d902      	bls.n	800797a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d13d      	bne.n	80079f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007992:	d111      	bne.n	80079b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800799c:	d004      	beq.n	80079a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a6:	d107      	bne.n	80079b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c0:	d10f      	bne.n	80079e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e017      	b.n	8007a26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	bf0c      	ite	eq
 8007a16:	2301      	moveq	r3, #1
 8007a18:	2300      	movne	r3, #0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d19b      	bne.n	800795c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3720      	adds	r7, #32
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000024 	.word	0x20000024

08007a34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a46:	f7fb fc35 	bl	80032b4 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	1a9b      	subs	r3, r3, r2
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	4413      	add	r3, r2
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a56:	f7fb fc2d 	bl	80032b4 <HAL_GetTick>
 8007a5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a64:	4b3d      	ldr	r3, [pc, #244]	; (8007b5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	00da      	lsls	r2, r3, #3
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	0d1b      	lsrs	r3, r3, #20
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	fb02 f303 	mul.w	r3, r2, r3
 8007a7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a7c:	e060      	b.n	8007b40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a84:	d107      	bne.n	8007a96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d050      	beq.n	8007b40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a9e:	f7fb fc09 	bl	80032b4 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d902      	bls.n	8007ab4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d13d      	bne.n	8007b30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ac2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007acc:	d111      	bne.n	8007af2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad6:	d004      	beq.n	8007ae2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae0:	d107      	bne.n	8007af2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afa:	d10f      	bne.n	8007b1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e010      	b.n	8007b52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d196      	bne.n	8007a7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3728      	adds	r7, #40	; 0x28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000024 	.word	0x20000024

08007b60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b74:	d111      	bne.n	8007b9a <SPI_EndRxTransaction+0x3a>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b7e:	d004      	beq.n	8007b8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b88:	d107      	bne.n	8007b9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2180      	movs	r1, #128	; 0x80
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f7ff febd 	bl	8007924 <SPI_WaitFlagStateUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d007      	beq.n	8007bc0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb4:	f043 0220 	orr.w	r2, r3, #32
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e023      	b.n	8007c08 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bc8:	d11d      	bne.n	8007c06 <SPI_EndRxTransaction+0xa6>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd2:	d004      	beq.n	8007bde <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bdc:	d113      	bne.n	8007c06 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7ff ff22 	bl	8007a34 <SPI_WaitFifoStateUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfa:	f043 0220 	orr.w	r2, r3, #32
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e000      	b.n	8007c08 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff ff03 	bl	8007a34 <SPI_WaitFifoStateUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c38:	f043 0220 	orr.w	r2, r3, #32
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e027      	b.n	8007c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2180      	movs	r1, #128	; 0x80
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff fe68 	bl	8007924 <SPI_WaitFlagStateUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5e:	f043 0220 	orr.w	r2, r3, #32
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e014      	b.n	8007c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fedc 	bl	8007a34 <SPI_WaitFifoStateUntilTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c86:	f043 0220 	orr.w	r2, r3, #32
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e000      	b.n	8007c94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ca4:	f7fb fb06 	bl	80032b4 <HAL_GetTick>
 8007ca8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0220 	bic.w	r2, r2, #32
 8007cb8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	2164      	movs	r1, #100	; 0x64
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7ff ffa6 	bl	8007c10 <SPI_EndRxTxTransaction>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cce:	f043 0220 	orr.w	r2, r3, #32
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d115      	bne.n	8007d0a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d107      	bne.n	8007cfa <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7f9 fcee 	bl	80016d4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007cf8:	e00e      	b.n	8007d18 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff fc8c 	bl	8007620 <HAL_SPI_TxRxCpltCallback>
}
 8007d08:	e006      	b.n	8007d18 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7ff fc8e 	bl	8007634 <HAL_SPI_ErrorCallback>
}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d36:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007d38:	f7fb fabc 	bl	80032b4 <HAL_GetTick>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	461a      	mov	r2, r3
 8007d40:	2164      	movs	r1, #100	; 0x64
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff ff0c 	bl	8007b60 <SPI_EndRxTransaction>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d52:	f043 0220 	orr.w	r2, r3, #32
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7f9 fcb2 	bl	80016d4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d70:	e002      	b.n	8007d78 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fc5e 	bl	8007634 <HAL_SPI_ErrorCallback>
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e042      	b.n	8007e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7fb f949 	bl	800303c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2224      	movs	r2, #36	; 0x24
 8007dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fbb4 	bl	8008538 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8b5 	bl	8007f40 <UART_SetConfig>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e01b      	b.n	8007e18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0201 	orr.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fc33 	bl	800867c <UART_CheckIdleState>
 8007e16:	4603      	mov	r3, r0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08a      	sub	sp, #40	; 0x28
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	603b      	str	r3, [r7, #0]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d17c      	bne.n	8007f34 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <HAL_UART_Transmit+0x26>
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e075      	b.n	8007f36 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2221      	movs	r2, #33	; 0x21
 8007e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e5a:	f7fb fa2b 	bl	80032b4 <HAL_GetTick>
 8007e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	88fa      	ldrh	r2, [r7, #6]
 8007e64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	88fa      	ldrh	r2, [r7, #6]
 8007e6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e78:	d108      	bne.n	8007e8c <HAL_UART_Transmit+0x6c>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	61bb      	str	r3, [r7, #24]
 8007e8a:	e003      	b.n	8007e94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e94:	e031      	b.n	8007efa <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2180      	movs	r1, #128	; 0x80
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 fc95 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e03e      	b.n	8007f36 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10b      	bne.n	8007ed6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	881a      	ldrh	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eca:	b292      	uxth	r2, r2
 8007ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	3302      	adds	r3, #2
 8007ed2:	61bb      	str	r3, [r7, #24]
 8007ed4:	e008      	b.n	8007ee8 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	b292      	uxth	r2, r2
 8007ee0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1c7      	bne.n	8007e96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2140      	movs	r1, #64	; 0x40
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 fc5d 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e006      	b.n	8007f36 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	e000      	b.n	8007f36 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007f34:	2302      	movs	r3, #2
  }
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3720      	adds	r7, #32
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f44:	b08c      	sub	sp, #48	; 0x30
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4baa      	ldr	r3, [pc, #680]	; (8008218 <UART_SetConfig+0x2d8>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a9f      	ldr	r2, [pc, #636]	; (800821c <UART_SetConfig+0x2dc>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d004      	beq.n	8007fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007fb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	6812      	ldr	r2, [r2, #0]
 8007fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	f023 010f 	bic.w	r1, r3, #15
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a90      	ldr	r2, [pc, #576]	; (8008220 <UART_SetConfig+0x2e0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d125      	bne.n	8008030 <UART_SetConfig+0xf0>
 8007fe4:	4b8f      	ldr	r3, [pc, #572]	; (8008224 <UART_SetConfig+0x2e4>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d81a      	bhi.n	8008028 <UART_SetConfig+0xe8>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <UART_SetConfig+0xb8>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	08008019 	.word	0x08008019
 8008000:	08008011 	.word	0x08008011
 8008004:	08008021 	.word	0x08008021
 8008008:	2301      	movs	r3, #1
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800e:	e116      	b.n	800823e <UART_SetConfig+0x2fe>
 8008010:	2302      	movs	r3, #2
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008016:	e112      	b.n	800823e <UART_SetConfig+0x2fe>
 8008018:	2304      	movs	r3, #4
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801e:	e10e      	b.n	800823e <UART_SetConfig+0x2fe>
 8008020:	2308      	movs	r3, #8
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008026:	e10a      	b.n	800823e <UART_SetConfig+0x2fe>
 8008028:	2310      	movs	r3, #16
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802e:	e106      	b.n	800823e <UART_SetConfig+0x2fe>
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a7c      	ldr	r2, [pc, #496]	; (8008228 <UART_SetConfig+0x2e8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d138      	bne.n	80080ac <UART_SetConfig+0x16c>
 800803a:	4b7a      	ldr	r3, [pc, #488]	; (8008224 <UART_SetConfig+0x2e4>)
 800803c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008040:	f003 030c 	and.w	r3, r3, #12
 8008044:	2b0c      	cmp	r3, #12
 8008046:	d82d      	bhi.n	80080a4 <UART_SetConfig+0x164>
 8008048:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0x110>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008085 	.word	0x08008085
 8008054:	080080a5 	.word	0x080080a5
 8008058:	080080a5 	.word	0x080080a5
 800805c:	080080a5 	.word	0x080080a5
 8008060:	08008095 	.word	0x08008095
 8008064:	080080a5 	.word	0x080080a5
 8008068:	080080a5 	.word	0x080080a5
 800806c:	080080a5 	.word	0x080080a5
 8008070:	0800808d 	.word	0x0800808d
 8008074:	080080a5 	.word	0x080080a5
 8008078:	080080a5 	.word	0x080080a5
 800807c:	080080a5 	.word	0x080080a5
 8008080:	0800809d 	.word	0x0800809d
 8008084:	2300      	movs	r3, #0
 8008086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800808a:	e0d8      	b.n	800823e <UART_SetConfig+0x2fe>
 800808c:	2302      	movs	r3, #2
 800808e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008092:	e0d4      	b.n	800823e <UART_SetConfig+0x2fe>
 8008094:	2304      	movs	r3, #4
 8008096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800809a:	e0d0      	b.n	800823e <UART_SetConfig+0x2fe>
 800809c:	2308      	movs	r3, #8
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080a2:	e0cc      	b.n	800823e <UART_SetConfig+0x2fe>
 80080a4:	2310      	movs	r3, #16
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080aa:	e0c8      	b.n	800823e <UART_SetConfig+0x2fe>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a5e      	ldr	r2, [pc, #376]	; (800822c <UART_SetConfig+0x2ec>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d125      	bne.n	8008102 <UART_SetConfig+0x1c2>
 80080b6:	4b5b      	ldr	r3, [pc, #364]	; (8008224 <UART_SetConfig+0x2e4>)
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080c0:	2b30      	cmp	r3, #48	; 0x30
 80080c2:	d016      	beq.n	80080f2 <UART_SetConfig+0x1b2>
 80080c4:	2b30      	cmp	r3, #48	; 0x30
 80080c6:	d818      	bhi.n	80080fa <UART_SetConfig+0x1ba>
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d00a      	beq.n	80080e2 <UART_SetConfig+0x1a2>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d814      	bhi.n	80080fa <UART_SetConfig+0x1ba>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <UART_SetConfig+0x19a>
 80080d4:	2b10      	cmp	r3, #16
 80080d6:	d008      	beq.n	80080ea <UART_SetConfig+0x1aa>
 80080d8:	e00f      	b.n	80080fa <UART_SetConfig+0x1ba>
 80080da:	2300      	movs	r3, #0
 80080dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e0:	e0ad      	b.n	800823e <UART_SetConfig+0x2fe>
 80080e2:	2302      	movs	r3, #2
 80080e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e8:	e0a9      	b.n	800823e <UART_SetConfig+0x2fe>
 80080ea:	2304      	movs	r3, #4
 80080ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080f0:	e0a5      	b.n	800823e <UART_SetConfig+0x2fe>
 80080f2:	2308      	movs	r3, #8
 80080f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080f8:	e0a1      	b.n	800823e <UART_SetConfig+0x2fe>
 80080fa:	2310      	movs	r3, #16
 80080fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008100:	e09d      	b.n	800823e <UART_SetConfig+0x2fe>
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a4a      	ldr	r2, [pc, #296]	; (8008230 <UART_SetConfig+0x2f0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d125      	bne.n	8008158 <UART_SetConfig+0x218>
 800810c:	4b45      	ldr	r3, [pc, #276]	; (8008224 <UART_SetConfig+0x2e4>)
 800810e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008112:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008116:	2bc0      	cmp	r3, #192	; 0xc0
 8008118:	d016      	beq.n	8008148 <UART_SetConfig+0x208>
 800811a:	2bc0      	cmp	r3, #192	; 0xc0
 800811c:	d818      	bhi.n	8008150 <UART_SetConfig+0x210>
 800811e:	2b80      	cmp	r3, #128	; 0x80
 8008120:	d00a      	beq.n	8008138 <UART_SetConfig+0x1f8>
 8008122:	2b80      	cmp	r3, #128	; 0x80
 8008124:	d814      	bhi.n	8008150 <UART_SetConfig+0x210>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <UART_SetConfig+0x1f0>
 800812a:	2b40      	cmp	r3, #64	; 0x40
 800812c:	d008      	beq.n	8008140 <UART_SetConfig+0x200>
 800812e:	e00f      	b.n	8008150 <UART_SetConfig+0x210>
 8008130:	2300      	movs	r3, #0
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008136:	e082      	b.n	800823e <UART_SetConfig+0x2fe>
 8008138:	2302      	movs	r3, #2
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813e:	e07e      	b.n	800823e <UART_SetConfig+0x2fe>
 8008140:	2304      	movs	r3, #4
 8008142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008146:	e07a      	b.n	800823e <UART_SetConfig+0x2fe>
 8008148:	2308      	movs	r3, #8
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814e:	e076      	b.n	800823e <UART_SetConfig+0x2fe>
 8008150:	2310      	movs	r3, #16
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008156:	e072      	b.n	800823e <UART_SetConfig+0x2fe>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a35      	ldr	r2, [pc, #212]	; (8008234 <UART_SetConfig+0x2f4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d12a      	bne.n	80081b8 <UART_SetConfig+0x278>
 8008162:	4b30      	ldr	r3, [pc, #192]	; (8008224 <UART_SetConfig+0x2e4>)
 8008164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008170:	d01a      	beq.n	80081a8 <UART_SetConfig+0x268>
 8008172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008176:	d81b      	bhi.n	80081b0 <UART_SetConfig+0x270>
 8008178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800817c:	d00c      	beq.n	8008198 <UART_SetConfig+0x258>
 800817e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008182:	d815      	bhi.n	80081b0 <UART_SetConfig+0x270>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <UART_SetConfig+0x250>
 8008188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818c:	d008      	beq.n	80081a0 <UART_SetConfig+0x260>
 800818e:	e00f      	b.n	80081b0 <UART_SetConfig+0x270>
 8008190:	2300      	movs	r3, #0
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008196:	e052      	b.n	800823e <UART_SetConfig+0x2fe>
 8008198:	2302      	movs	r3, #2
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819e:	e04e      	b.n	800823e <UART_SetConfig+0x2fe>
 80081a0:	2304      	movs	r3, #4
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a6:	e04a      	b.n	800823e <UART_SetConfig+0x2fe>
 80081a8:	2308      	movs	r3, #8
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ae:	e046      	b.n	800823e <UART_SetConfig+0x2fe>
 80081b0:	2310      	movs	r3, #16
 80081b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b6:	e042      	b.n	800823e <UART_SetConfig+0x2fe>
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a17      	ldr	r2, [pc, #92]	; (800821c <UART_SetConfig+0x2dc>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d13a      	bne.n	8008238 <UART_SetConfig+0x2f8>
 80081c2:	4b18      	ldr	r3, [pc, #96]	; (8008224 <UART_SetConfig+0x2e4>)
 80081c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081d0:	d01a      	beq.n	8008208 <UART_SetConfig+0x2c8>
 80081d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081d6:	d81b      	bhi.n	8008210 <UART_SetConfig+0x2d0>
 80081d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081dc:	d00c      	beq.n	80081f8 <UART_SetConfig+0x2b8>
 80081de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e2:	d815      	bhi.n	8008210 <UART_SetConfig+0x2d0>
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <UART_SetConfig+0x2b0>
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ec:	d008      	beq.n	8008200 <UART_SetConfig+0x2c0>
 80081ee:	e00f      	b.n	8008210 <UART_SetConfig+0x2d0>
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f6:	e022      	b.n	800823e <UART_SetConfig+0x2fe>
 80081f8:	2302      	movs	r3, #2
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fe:	e01e      	b.n	800823e <UART_SetConfig+0x2fe>
 8008200:	2304      	movs	r3, #4
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e01a      	b.n	800823e <UART_SetConfig+0x2fe>
 8008208:	2308      	movs	r3, #8
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820e:	e016      	b.n	800823e <UART_SetConfig+0x2fe>
 8008210:	2310      	movs	r3, #16
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008216:	e012      	b.n	800823e <UART_SetConfig+0x2fe>
 8008218:	cfff69f3 	.word	0xcfff69f3
 800821c:	40008000 	.word	0x40008000
 8008220:	40013800 	.word	0x40013800
 8008224:	40021000 	.word	0x40021000
 8008228:	40004400 	.word	0x40004400
 800822c:	40004800 	.word	0x40004800
 8008230:	40004c00 	.word	0x40004c00
 8008234:	40005000 	.word	0x40005000
 8008238:	2310      	movs	r3, #16
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4aae      	ldr	r2, [pc, #696]	; (80084fc <UART_SetConfig+0x5bc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	f040 8097 	bne.w	8008378 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800824a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800824e:	2b08      	cmp	r3, #8
 8008250:	d823      	bhi.n	800829a <UART_SetConfig+0x35a>
 8008252:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <UART_SetConfig+0x318>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	0800827d 	.word	0x0800827d
 800825c:	0800829b 	.word	0x0800829b
 8008260:	08008285 	.word	0x08008285
 8008264:	0800829b 	.word	0x0800829b
 8008268:	0800828b 	.word	0x0800828b
 800826c:	0800829b 	.word	0x0800829b
 8008270:	0800829b 	.word	0x0800829b
 8008274:	0800829b 	.word	0x0800829b
 8008278:	08008293 	.word	0x08008293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800827c:	f7fd fb9e 	bl	80059bc <HAL_RCC_GetPCLK1Freq>
 8008280:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008282:	e010      	b.n	80082a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008284:	4b9e      	ldr	r3, [pc, #632]	; (8008500 <UART_SetConfig+0x5c0>)
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008288:	e00d      	b.n	80082a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800828a:	f7fd faff 	bl	800588c <HAL_RCC_GetSysClockFreq>
 800828e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008290:	e009      	b.n	80082a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008298:	e005      	b.n	80082a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 8130 	beq.w	800850e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	4a94      	ldr	r2, [pc, #592]	; (8008504 <UART_SetConfig+0x5c4>)
 80082b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80082c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4413      	add	r3, r2
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d305      	bcc.n	80082de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d903      	bls.n	80082e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082e4:	e113      	b.n	800850e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	2200      	movs	r2, #0
 80082ea:	60bb      	str	r3, [r7, #8]
 80082ec:	60fa      	str	r2, [r7, #12]
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	4a84      	ldr	r2, [pc, #528]	; (8008504 <UART_SetConfig+0x5c4>)
 80082f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2200      	movs	r2, #0
 80082fc:	603b      	str	r3, [r7, #0]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008304:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008308:	f7f7 ff78 	bl	80001fc <__aeabi_uldivmod>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4610      	mov	r0, r2
 8008312:	4619      	mov	r1, r3
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	020b      	lsls	r3, r1, #8
 800831e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008322:	0202      	lsls	r2, r0, #8
 8008324:	6979      	ldr	r1, [r7, #20]
 8008326:	6849      	ldr	r1, [r1, #4]
 8008328:	0849      	lsrs	r1, r1, #1
 800832a:	2000      	movs	r0, #0
 800832c:	460c      	mov	r4, r1
 800832e:	4605      	mov	r5, r0
 8008330:	eb12 0804 	adds.w	r8, r2, r4
 8008334:	eb43 0905 	adc.w	r9, r3, r5
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	469a      	mov	sl, r3
 8008340:	4693      	mov	fp, r2
 8008342:	4652      	mov	r2, sl
 8008344:	465b      	mov	r3, fp
 8008346:	4640      	mov	r0, r8
 8008348:	4649      	mov	r1, r9
 800834a:	f7f7 ff57 	bl	80001fc <__aeabi_uldivmod>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4613      	mov	r3, r2
 8008354:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800835c:	d308      	bcc.n	8008370 <UART_SetConfig+0x430>
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008364:	d204      	bcs.n	8008370 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6a3a      	ldr	r2, [r7, #32]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	e0ce      	b.n	800850e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008376:	e0ca      	b.n	800850e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008380:	d166      	bne.n	8008450 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008382:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008386:	2b08      	cmp	r3, #8
 8008388:	d827      	bhi.n	80083da <UART_SetConfig+0x49a>
 800838a:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <UART_SetConfig+0x450>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	080083b5 	.word	0x080083b5
 8008394:	080083bd 	.word	0x080083bd
 8008398:	080083c5 	.word	0x080083c5
 800839c:	080083db 	.word	0x080083db
 80083a0:	080083cb 	.word	0x080083cb
 80083a4:	080083db 	.word	0x080083db
 80083a8:	080083db 	.word	0x080083db
 80083ac:	080083db 	.word	0x080083db
 80083b0:	080083d3 	.word	0x080083d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083b4:	f7fd fb02 	bl	80059bc <HAL_RCC_GetPCLK1Freq>
 80083b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ba:	e014      	b.n	80083e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083bc:	f7fd fb14 	bl	80059e8 <HAL_RCC_GetPCLK2Freq>
 80083c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083c2:	e010      	b.n	80083e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083c4:	4b4e      	ldr	r3, [pc, #312]	; (8008500 <UART_SetConfig+0x5c0>)
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083c8:	e00d      	b.n	80083e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ca:	f7fd fa5f 	bl	800588c <HAL_RCC_GetSysClockFreq>
 80083ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083d0:	e009      	b.n	80083e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083d8:	e005      	b.n	80083e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8090 	beq.w	800850e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	4a44      	ldr	r2, [pc, #272]	; (8008504 <UART_SetConfig+0x5c4>)
 80083f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008400:	005a      	lsls	r2, r3, #1
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	441a      	add	r2, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008412:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	2b0f      	cmp	r3, #15
 8008418:	d916      	bls.n	8008448 <UART_SetConfig+0x508>
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008420:	d212      	bcs.n	8008448 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	b29b      	uxth	r3, r3
 8008426:	f023 030f 	bic.w	r3, r3, #15
 800842a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	085b      	lsrs	r3, r3, #1
 8008430:	b29b      	uxth	r3, r3
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	b29a      	uxth	r2, r3
 8008438:	8bfb      	ldrh	r3, [r7, #30]
 800843a:	4313      	orrs	r3, r2
 800843c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	8bfa      	ldrh	r2, [r7, #30]
 8008444:	60da      	str	r2, [r3, #12]
 8008446:	e062      	b.n	800850e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800844e:	e05e      	b.n	800850e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008450:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008454:	2b08      	cmp	r3, #8
 8008456:	d828      	bhi.n	80084aa <UART_SetConfig+0x56a>
 8008458:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <UART_SetConfig+0x520>)
 800845a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845e:	bf00      	nop
 8008460:	08008485 	.word	0x08008485
 8008464:	0800848d 	.word	0x0800848d
 8008468:	08008495 	.word	0x08008495
 800846c:	080084ab 	.word	0x080084ab
 8008470:	0800849b 	.word	0x0800849b
 8008474:	080084ab 	.word	0x080084ab
 8008478:	080084ab 	.word	0x080084ab
 800847c:	080084ab 	.word	0x080084ab
 8008480:	080084a3 	.word	0x080084a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008484:	f7fd fa9a 	bl	80059bc <HAL_RCC_GetPCLK1Freq>
 8008488:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800848a:	e014      	b.n	80084b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800848c:	f7fd faac 	bl	80059e8 <HAL_RCC_GetPCLK2Freq>
 8008490:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008492:	e010      	b.n	80084b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008494:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <UART_SetConfig+0x5c0>)
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008498:	e00d      	b.n	80084b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800849a:	f7fd f9f7 	bl	800588c <HAL_RCC_GetSysClockFreq>
 800849e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084a0:	e009      	b.n	80084b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084a8:	e005      	b.n	80084b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084b4:	bf00      	nop
    }

    if (pclk != 0U)
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d028      	beq.n	800850e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	4a10      	ldr	r2, [pc, #64]	; (8008504 <UART_SetConfig+0x5c4>)
 80084c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084c6:	461a      	mov	r2, r3
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	085b      	lsrs	r3, r3, #1
 80084d4:	441a      	add	r2, r3
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	fbb2 f3f3 	udiv	r3, r2, r3
 80084de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	2b0f      	cmp	r3, #15
 80084e4:	d910      	bls.n	8008508 <UART_SetConfig+0x5c8>
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ec:	d20c      	bcs.n	8008508 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60da      	str	r2, [r3, #12]
 80084f8:	e009      	b.n	800850e <UART_SetConfig+0x5ce>
 80084fa:	bf00      	nop
 80084fc:	40008000 	.word	0x40008000
 8008500:	00f42400 	.word	0x00f42400
 8008504:	08008ca8 	.word	0x08008ca8
      }
      else
      {
        ret = HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2201      	movs	r2, #1
 8008512:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2201      	movs	r2, #1
 800851a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2200      	movs	r2, #0
 8008522:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2200      	movs	r2, #0
 8008528:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800852a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800852e:	4618      	mov	r0, r3
 8008530:	3730      	adds	r7, #48	; 0x30
 8008532:	46bd      	mov	sp, r7
 8008534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085aa:	f003 0304 	and.w	r3, r3, #4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	430a      	orrs	r2, r1
 800860a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01a      	beq.n	800864e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008636:	d10a      	bne.n	800864e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	605a      	str	r2, [r3, #4]
  }
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b098      	sub	sp, #96	; 0x60
 8008680:	af02      	add	r7, sp, #8
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800868c:	f7fa fe12 	bl	80032b4 <HAL_GetTick>
 8008690:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b08      	cmp	r3, #8
 800869e:	d12f      	bne.n	8008700 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086a8:	2200      	movs	r2, #0
 80086aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f88e 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d022      	beq.n	8008700 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ce:	653b      	str	r3, [r7, #80]	; 0x50
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d8:	647b      	str	r3, [r7, #68]	; 0x44
 80086da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e6      	bne.n	80086ba <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e063      	b.n	80087c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b04      	cmp	r3, #4
 800870c:	d149      	bne.n	80087a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800870e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008716:	2200      	movs	r2, #0
 8008718:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f857 	bl	80087d0 <UART_WaitOnFlagUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d03c      	beq.n	80087a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	623b      	str	r3, [r7, #32]
   return(result);
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800873c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008746:	633b      	str	r3, [r7, #48]	; 0x30
 8008748:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800874c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e6      	bne.n	8008728 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	60fb      	str	r3, [r7, #12]
   return(result);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f023 0301 	bic.w	r3, r3, #1
 8008770:	64bb      	str	r3, [r7, #72]	; 0x48
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800877a:	61fa      	str	r2, [r7, #28]
 800877c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	69b9      	ldr	r1, [r7, #24]
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	617b      	str	r3, [r7, #20]
   return(result);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e5      	bne.n	800875a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e012      	b.n	80087c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3758      	adds	r7, #88	; 0x58
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	4613      	mov	r3, r2
 80087de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e0:	e049      	b.n	8008876 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e8:	d045      	beq.n	8008876 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ea:	f7fa fd63 	bl	80032b4 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d302      	bcc.n	8008800 <UART_WaitOnFlagUntilTimeout+0x30>
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e048      	b.n	8008896 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0304 	and.w	r3, r3, #4
 800880e:	2b00      	cmp	r3, #0
 8008810:	d031      	beq.n	8008876 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f003 0308 	and.w	r3, r3, #8
 800881c:	2b08      	cmp	r3, #8
 800881e:	d110      	bne.n	8008842 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2208      	movs	r2, #8
 8008826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f838 	bl	800889e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2208      	movs	r2, #8
 8008832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e029      	b.n	8008896 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800884c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008850:	d111      	bne.n	8008876 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800885a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 f81e 	bl	800889e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e00f      	b.n	8008896 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69da      	ldr	r2, [r3, #28]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4013      	ands	r3, r2
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	bf0c      	ite	eq
 8008886:	2301      	moveq	r3, #1
 8008888:	2300      	movne	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	429a      	cmp	r2, r3
 8008892:	d0a6      	beq.n	80087e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800889e:	b480      	push	{r7}
 80088a0:	b095      	sub	sp, #84	; 0x54
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	e853 3f00 	ldrex	r3, [r3]
 80088b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	461a      	mov	r2, r3
 80088c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c4:	643b      	str	r3, [r7, #64]	; 0x40
 80088c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088cc:	e841 2300 	strex	r3, r2, [r1]
 80088d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e6      	bne.n	80088a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3308      	adds	r3, #8
 80088fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008904:	e841 2300 	strex	r3, r2, [r1]
 8008908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e3      	bne.n	80088d8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008914:	2b01      	cmp	r3, #1
 8008916:	d118      	bne.n	800894a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	60bb      	str	r3, [r7, #8]
   return(result);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f023 0310 	bic.w	r3, r3, #16
 800892c:	647b      	str	r3, [r7, #68]	; 0x44
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008936:	61bb      	str	r3, [r7, #24]
 8008938:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	6979      	ldr	r1, [r7, #20]
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	613b      	str	r3, [r7, #16]
   return(result);
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e6      	bne.n	8008918 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800895e:	bf00      	nop
 8008960:	3754      	adds	r7, #84	; 0x54
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008978:	2b01      	cmp	r3, #1
 800897a:	d101      	bne.n	8008980 <HAL_UARTEx_DisableFifoMode+0x16>
 800897c:	2302      	movs	r3, #2
 800897e:	e027      	b.n	80089d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2224      	movs	r2, #36	; 0x24
 800898c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0201 	bic.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e02d      	b.n	8008a50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2224      	movs	r2, #36	; 0x24
 8008a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0201 	bic.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f84f 	bl	8008ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d101      	bne.n	8008a70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e02d      	b.n	8008acc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2224      	movs	r2, #36	; 0x24
 8008a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0201 	bic.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f811 	bl	8008ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d108      	bne.n	8008af6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008af4:	e031      	b.n	8008b5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008af6:	2308      	movs	r3, #8
 8008af8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008afa:	2308      	movs	r3, #8
 8008afc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	0e5b      	lsrs	r3, r3, #25
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	0f5b      	lsrs	r3, r3, #29
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 0307 	and.w	r3, r3, #7
 8008b1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	7b3a      	ldrb	r2, [r7, #12]
 8008b22:	4911      	ldr	r1, [pc, #68]	; (8008b68 <UARTEx_SetNbDataToProcess+0x94>)
 8008b24:	5c8a      	ldrb	r2, [r1, r2]
 8008b26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b2a:	7b3a      	ldrb	r2, [r7, #12]
 8008b2c:	490f      	ldr	r1, [pc, #60]	; (8008b6c <UARTEx_SetNbDataToProcess+0x98>)
 8008b2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b30:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	7b7a      	ldrb	r2, [r7, #13]
 8008b40:	4909      	ldr	r1, [pc, #36]	; (8008b68 <UARTEx_SetNbDataToProcess+0x94>)
 8008b42:	5c8a      	ldrb	r2, [r1, r2]
 8008b44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b48:	7b7a      	ldrb	r2, [r7, #13]
 8008b4a:	4908      	ldr	r1, [pc, #32]	; (8008b6c <UARTEx_SetNbDataToProcess+0x98>)
 8008b4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b5a:	bf00      	nop
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	08008cc0 	.word	0x08008cc0
 8008b6c:	08008cc8 	.word	0x08008cc8

08008b70 <__libc_init_array>:
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	4d0d      	ldr	r5, [pc, #52]	; (8008ba8 <__libc_init_array+0x38>)
 8008b74:	4c0d      	ldr	r4, [pc, #52]	; (8008bac <__libc_init_array+0x3c>)
 8008b76:	1b64      	subs	r4, r4, r5
 8008b78:	10a4      	asrs	r4, r4, #2
 8008b7a:	2600      	movs	r6, #0
 8008b7c:	42a6      	cmp	r6, r4
 8008b7e:	d109      	bne.n	8008b94 <__libc_init_array+0x24>
 8008b80:	4d0b      	ldr	r5, [pc, #44]	; (8008bb0 <__libc_init_array+0x40>)
 8008b82:	4c0c      	ldr	r4, [pc, #48]	; (8008bb4 <__libc_init_array+0x44>)
 8008b84:	f000 f820 	bl	8008bc8 <_init>
 8008b88:	1b64      	subs	r4, r4, r5
 8008b8a:	10a4      	asrs	r4, r4, #2
 8008b8c:	2600      	movs	r6, #0
 8008b8e:	42a6      	cmp	r6, r4
 8008b90:	d105      	bne.n	8008b9e <__libc_init_array+0x2e>
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b98:	4798      	blx	r3
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	e7ee      	b.n	8008b7c <__libc_init_array+0xc>
 8008b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba2:	4798      	blx	r3
 8008ba4:	3601      	adds	r6, #1
 8008ba6:	e7f2      	b.n	8008b8e <__libc_init_array+0x1e>
 8008ba8:	08008cd8 	.word	0x08008cd8
 8008bac:	08008cd8 	.word	0x08008cd8
 8008bb0:	08008cd8 	.word	0x08008cd8
 8008bb4:	08008cdc 	.word	0x08008cdc

08008bb8 <memset>:
 8008bb8:	4402      	add	r2, r0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d100      	bne.n	8008bc2 <memset+0xa>
 8008bc0:	4770      	bx	lr
 8008bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc6:	e7f9      	b.n	8008bbc <memset+0x4>

08008bc8 <_init>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_fini>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr
